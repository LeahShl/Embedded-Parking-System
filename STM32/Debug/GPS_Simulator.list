
GPS_Simulator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b040  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000050c  0800b210  0800b210  0000c210  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b71c  0800b71c  0000d1d8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800b71c  0800b71c  0000c71c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b724  0800b724  0000d1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b724  0800b724  0000c724  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b728  0800b728  0000c728  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  0800b72c  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000052a4  200001d8  0800b904  0000d1d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000547c  0800b904  0000d47c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d1d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e379  00000000  00000000  0000d208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003ea3  00000000  00000000  0002b581  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001870  00000000  00000000  0002f428  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000131a  00000000  00000000  00030c98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004fd8  00000000  00000000  00031fb2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001db23  00000000  00000000  00036f8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ff9f6  00000000  00000000  00054aad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001544a3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007770  00000000  00000000  001544e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000085  00000000  00000000  0015bc58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001d8 	.word	0x200001d8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800b1f8 	.word	0x0800b1f8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001dc 	.word	0x200001dc
 800020c:	0800b1f8 	.word	0x0800b1f8

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000bfc:	f000 b988 	b.w	8000f10 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	468e      	mov	lr, r1
 8000c20:	4604      	mov	r4, r0
 8000c22:	4688      	mov	r8, r1
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d14a      	bne.n	8000cbe <__udivmoddi4+0xa6>
 8000c28:	428a      	cmp	r2, r1
 8000c2a:	4617      	mov	r7, r2
 8000c2c:	d962      	bls.n	8000cf4 <__udivmoddi4+0xdc>
 8000c2e:	fab2 f682 	clz	r6, r2
 8000c32:	b14e      	cbz	r6, 8000c48 <__udivmoddi4+0x30>
 8000c34:	f1c6 0320 	rsb	r3, r6, #32
 8000c38:	fa01 f806 	lsl.w	r8, r1, r6
 8000c3c:	fa20 f303 	lsr.w	r3, r0, r3
 8000c40:	40b7      	lsls	r7, r6
 8000c42:	ea43 0808 	orr.w	r8, r3, r8
 8000c46:	40b4      	lsls	r4, r6
 8000c48:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c4c:	fa1f fc87 	uxth.w	ip, r7
 8000c50:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c54:	0c23      	lsrs	r3, r4, #16
 8000c56:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c5a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c5e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c62:	429a      	cmp	r2, r3
 8000c64:	d909      	bls.n	8000c7a <__udivmoddi4+0x62>
 8000c66:	18fb      	adds	r3, r7, r3
 8000c68:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000c6c:	f080 80ea 	bcs.w	8000e44 <__udivmoddi4+0x22c>
 8000c70:	429a      	cmp	r2, r3
 8000c72:	f240 80e7 	bls.w	8000e44 <__udivmoddi4+0x22c>
 8000c76:	3902      	subs	r1, #2
 8000c78:	443b      	add	r3, r7
 8000c7a:	1a9a      	subs	r2, r3, r2
 8000c7c:	b2a3      	uxth	r3, r4
 8000c7e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c82:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c86:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c8a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c8e:	459c      	cmp	ip, r3
 8000c90:	d909      	bls.n	8000ca6 <__udivmoddi4+0x8e>
 8000c92:	18fb      	adds	r3, r7, r3
 8000c94:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000c98:	f080 80d6 	bcs.w	8000e48 <__udivmoddi4+0x230>
 8000c9c:	459c      	cmp	ip, r3
 8000c9e:	f240 80d3 	bls.w	8000e48 <__udivmoddi4+0x230>
 8000ca2:	443b      	add	r3, r7
 8000ca4:	3802      	subs	r0, #2
 8000ca6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000caa:	eba3 030c 	sub.w	r3, r3, ip
 8000cae:	2100      	movs	r1, #0
 8000cb0:	b11d      	cbz	r5, 8000cba <__udivmoddi4+0xa2>
 8000cb2:	40f3      	lsrs	r3, r6
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	e9c5 3200 	strd	r3, r2, [r5]
 8000cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbe:	428b      	cmp	r3, r1
 8000cc0:	d905      	bls.n	8000cce <__udivmoddi4+0xb6>
 8000cc2:	b10d      	cbz	r5, 8000cc8 <__udivmoddi4+0xb0>
 8000cc4:	e9c5 0100 	strd	r0, r1, [r5]
 8000cc8:	2100      	movs	r1, #0
 8000cca:	4608      	mov	r0, r1
 8000ccc:	e7f5      	b.n	8000cba <__udivmoddi4+0xa2>
 8000cce:	fab3 f183 	clz	r1, r3
 8000cd2:	2900      	cmp	r1, #0
 8000cd4:	d146      	bne.n	8000d64 <__udivmoddi4+0x14c>
 8000cd6:	4573      	cmp	r3, lr
 8000cd8:	d302      	bcc.n	8000ce0 <__udivmoddi4+0xc8>
 8000cda:	4282      	cmp	r2, r0
 8000cdc:	f200 8105 	bhi.w	8000eea <__udivmoddi4+0x2d2>
 8000ce0:	1a84      	subs	r4, r0, r2
 8000ce2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000ce6:	2001      	movs	r0, #1
 8000ce8:	4690      	mov	r8, r2
 8000cea:	2d00      	cmp	r5, #0
 8000cec:	d0e5      	beq.n	8000cba <__udivmoddi4+0xa2>
 8000cee:	e9c5 4800 	strd	r4, r8, [r5]
 8000cf2:	e7e2      	b.n	8000cba <__udivmoddi4+0xa2>
 8000cf4:	2a00      	cmp	r2, #0
 8000cf6:	f000 8090 	beq.w	8000e1a <__udivmoddi4+0x202>
 8000cfa:	fab2 f682 	clz	r6, r2
 8000cfe:	2e00      	cmp	r6, #0
 8000d00:	f040 80a4 	bne.w	8000e4c <__udivmoddi4+0x234>
 8000d04:	1a8a      	subs	r2, r1, r2
 8000d06:	0c03      	lsrs	r3, r0, #16
 8000d08:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d0c:	b280      	uxth	r0, r0
 8000d0e:	b2bc      	uxth	r4, r7
 8000d10:	2101      	movs	r1, #1
 8000d12:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d16:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d1a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d1e:	fb04 f20c 	mul.w	r2, r4, ip
 8000d22:	429a      	cmp	r2, r3
 8000d24:	d907      	bls.n	8000d36 <__udivmoddi4+0x11e>
 8000d26:	18fb      	adds	r3, r7, r3
 8000d28:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000d2c:	d202      	bcs.n	8000d34 <__udivmoddi4+0x11c>
 8000d2e:	429a      	cmp	r2, r3
 8000d30:	f200 80e0 	bhi.w	8000ef4 <__udivmoddi4+0x2dc>
 8000d34:	46c4      	mov	ip, r8
 8000d36:	1a9b      	subs	r3, r3, r2
 8000d38:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d3c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d40:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d44:	fb02 f404 	mul.w	r4, r2, r4
 8000d48:	429c      	cmp	r4, r3
 8000d4a:	d907      	bls.n	8000d5c <__udivmoddi4+0x144>
 8000d4c:	18fb      	adds	r3, r7, r3
 8000d4e:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000d52:	d202      	bcs.n	8000d5a <__udivmoddi4+0x142>
 8000d54:	429c      	cmp	r4, r3
 8000d56:	f200 80ca 	bhi.w	8000eee <__udivmoddi4+0x2d6>
 8000d5a:	4602      	mov	r2, r0
 8000d5c:	1b1b      	subs	r3, r3, r4
 8000d5e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d62:	e7a5      	b.n	8000cb0 <__udivmoddi4+0x98>
 8000d64:	f1c1 0620 	rsb	r6, r1, #32
 8000d68:	408b      	lsls	r3, r1
 8000d6a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d6e:	431f      	orrs	r7, r3
 8000d70:	fa0e f401 	lsl.w	r4, lr, r1
 8000d74:	fa20 f306 	lsr.w	r3, r0, r6
 8000d78:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d7c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d80:	4323      	orrs	r3, r4
 8000d82:	fa00 f801 	lsl.w	r8, r0, r1
 8000d86:	fa1f fc87 	uxth.w	ip, r7
 8000d8a:	fbbe f0f9 	udiv	r0, lr, r9
 8000d8e:	0c1c      	lsrs	r4, r3, #16
 8000d90:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d94:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d98:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d9c:	45a6      	cmp	lr, r4
 8000d9e:	fa02 f201 	lsl.w	r2, r2, r1
 8000da2:	d909      	bls.n	8000db8 <__udivmoddi4+0x1a0>
 8000da4:	193c      	adds	r4, r7, r4
 8000da6:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000daa:	f080 809c 	bcs.w	8000ee6 <__udivmoddi4+0x2ce>
 8000dae:	45a6      	cmp	lr, r4
 8000db0:	f240 8099 	bls.w	8000ee6 <__udivmoddi4+0x2ce>
 8000db4:	3802      	subs	r0, #2
 8000db6:	443c      	add	r4, r7
 8000db8:	eba4 040e 	sub.w	r4, r4, lr
 8000dbc:	fa1f fe83 	uxth.w	lr, r3
 8000dc0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000dc4:	fb09 4413 	mls	r4, r9, r3, r4
 8000dc8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000dcc:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dd0:	45a4      	cmp	ip, r4
 8000dd2:	d908      	bls.n	8000de6 <__udivmoddi4+0x1ce>
 8000dd4:	193c      	adds	r4, r7, r4
 8000dd6:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000dda:	f080 8082 	bcs.w	8000ee2 <__udivmoddi4+0x2ca>
 8000dde:	45a4      	cmp	ip, r4
 8000de0:	d97f      	bls.n	8000ee2 <__udivmoddi4+0x2ca>
 8000de2:	3b02      	subs	r3, #2
 8000de4:	443c      	add	r4, r7
 8000de6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000dea:	eba4 040c 	sub.w	r4, r4, ip
 8000dee:	fba0 ec02 	umull	lr, ip, r0, r2
 8000df2:	4564      	cmp	r4, ip
 8000df4:	4673      	mov	r3, lr
 8000df6:	46e1      	mov	r9, ip
 8000df8:	d362      	bcc.n	8000ec0 <__udivmoddi4+0x2a8>
 8000dfa:	d05f      	beq.n	8000ebc <__udivmoddi4+0x2a4>
 8000dfc:	b15d      	cbz	r5, 8000e16 <__udivmoddi4+0x1fe>
 8000dfe:	ebb8 0203 	subs.w	r2, r8, r3
 8000e02:	eb64 0409 	sbc.w	r4, r4, r9
 8000e06:	fa04 f606 	lsl.w	r6, r4, r6
 8000e0a:	fa22 f301 	lsr.w	r3, r2, r1
 8000e0e:	431e      	orrs	r6, r3
 8000e10:	40cc      	lsrs	r4, r1
 8000e12:	e9c5 6400 	strd	r6, r4, [r5]
 8000e16:	2100      	movs	r1, #0
 8000e18:	e74f      	b.n	8000cba <__udivmoddi4+0xa2>
 8000e1a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e1e:	0c01      	lsrs	r1, r0, #16
 8000e20:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e24:	b280      	uxth	r0, r0
 8000e26:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e2a:	463b      	mov	r3, r7
 8000e2c:	4638      	mov	r0, r7
 8000e2e:	463c      	mov	r4, r7
 8000e30:	46b8      	mov	r8, r7
 8000e32:	46be      	mov	lr, r7
 8000e34:	2620      	movs	r6, #32
 8000e36:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e3a:	eba2 0208 	sub.w	r2, r2, r8
 8000e3e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e42:	e766      	b.n	8000d12 <__udivmoddi4+0xfa>
 8000e44:	4601      	mov	r1, r0
 8000e46:	e718      	b.n	8000c7a <__udivmoddi4+0x62>
 8000e48:	4610      	mov	r0, r2
 8000e4a:	e72c      	b.n	8000ca6 <__udivmoddi4+0x8e>
 8000e4c:	f1c6 0220 	rsb	r2, r6, #32
 8000e50:	fa2e f302 	lsr.w	r3, lr, r2
 8000e54:	40b7      	lsls	r7, r6
 8000e56:	40b1      	lsls	r1, r6
 8000e58:	fa20 f202 	lsr.w	r2, r0, r2
 8000e5c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e60:	430a      	orrs	r2, r1
 8000e62:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e66:	b2bc      	uxth	r4, r7
 8000e68:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e6c:	0c11      	lsrs	r1, r2, #16
 8000e6e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e72:	fb08 f904 	mul.w	r9, r8, r4
 8000e76:	40b0      	lsls	r0, r6
 8000e78:	4589      	cmp	r9, r1
 8000e7a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e7e:	b280      	uxth	r0, r0
 8000e80:	d93e      	bls.n	8000f00 <__udivmoddi4+0x2e8>
 8000e82:	1879      	adds	r1, r7, r1
 8000e84:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000e88:	d201      	bcs.n	8000e8e <__udivmoddi4+0x276>
 8000e8a:	4589      	cmp	r9, r1
 8000e8c:	d81f      	bhi.n	8000ece <__udivmoddi4+0x2b6>
 8000e8e:	eba1 0109 	sub.w	r1, r1, r9
 8000e92:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e96:	fb09 f804 	mul.w	r8, r9, r4
 8000e9a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e9e:	b292      	uxth	r2, r2
 8000ea0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ea4:	4542      	cmp	r2, r8
 8000ea6:	d229      	bcs.n	8000efc <__udivmoddi4+0x2e4>
 8000ea8:	18ba      	adds	r2, r7, r2
 8000eaa:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000eae:	d2c4      	bcs.n	8000e3a <__udivmoddi4+0x222>
 8000eb0:	4542      	cmp	r2, r8
 8000eb2:	d2c2      	bcs.n	8000e3a <__udivmoddi4+0x222>
 8000eb4:	f1a9 0102 	sub.w	r1, r9, #2
 8000eb8:	443a      	add	r2, r7
 8000eba:	e7be      	b.n	8000e3a <__udivmoddi4+0x222>
 8000ebc:	45f0      	cmp	r8, lr
 8000ebe:	d29d      	bcs.n	8000dfc <__udivmoddi4+0x1e4>
 8000ec0:	ebbe 0302 	subs.w	r3, lr, r2
 8000ec4:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000ec8:	3801      	subs	r0, #1
 8000eca:	46e1      	mov	r9, ip
 8000ecc:	e796      	b.n	8000dfc <__udivmoddi4+0x1e4>
 8000ece:	eba7 0909 	sub.w	r9, r7, r9
 8000ed2:	4449      	add	r1, r9
 8000ed4:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ed8:	fbb1 f9fe 	udiv	r9, r1, lr
 8000edc:	fb09 f804 	mul.w	r8, r9, r4
 8000ee0:	e7db      	b.n	8000e9a <__udivmoddi4+0x282>
 8000ee2:	4673      	mov	r3, lr
 8000ee4:	e77f      	b.n	8000de6 <__udivmoddi4+0x1ce>
 8000ee6:	4650      	mov	r0, sl
 8000ee8:	e766      	b.n	8000db8 <__udivmoddi4+0x1a0>
 8000eea:	4608      	mov	r0, r1
 8000eec:	e6fd      	b.n	8000cea <__udivmoddi4+0xd2>
 8000eee:	443b      	add	r3, r7
 8000ef0:	3a02      	subs	r2, #2
 8000ef2:	e733      	b.n	8000d5c <__udivmoddi4+0x144>
 8000ef4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ef8:	443b      	add	r3, r7
 8000efa:	e71c      	b.n	8000d36 <__udivmoddi4+0x11e>
 8000efc:	4649      	mov	r1, r9
 8000efe:	e79c      	b.n	8000e3a <__udivmoddi4+0x222>
 8000f00:	eba1 0109 	sub.w	r1, r1, r9
 8000f04:	46c4      	mov	ip, r8
 8000f06:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f0a:	fb09 f804 	mul.w	r8, r9, r4
 8000f0e:	e7c4      	b.n	8000e9a <__udivmoddi4+0x282>

08000f10 <__aeabi_idiv0>:
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop

08000f14 <_write>:
int __io_putchar(int ch) {
	HAL_UART_Transmit(&huart3, (uint8_t*) &ch, 1, 0xFFFF);
	return ch;
}

int _write(int file, char *ptr, int len) {
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b086      	sub	sp, #24
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	60f8      	str	r0, [r7, #12]
 8000f1c:	60b9      	str	r1, [r7, #8]
 8000f1e:	607a      	str	r2, [r7, #4]
	char *cr = "\r";
 8000f20:	4b0b      	ldr	r3, [pc, #44]	@ (8000f50 <_write+0x3c>)
 8000f22:	617b      	str	r3, [r7, #20]
	HAL_UART_Transmit(&huart3, (uint8_t*) ptr, len, 0xFFFF);
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	b29a      	uxth	r2, r3
 8000f28:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000f2c:	68b9      	ldr	r1, [r7, #8]
 8000f2e:	4809      	ldr	r0, [pc, #36]	@ (8000f54 <_write+0x40>)
 8000f30:	f003 fd14 	bl	800495c <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart3, (uint8_t*) cr, 1, 0xFFFF);
 8000f34:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000f38:	2201      	movs	r2, #1
 8000f3a:	6979      	ldr	r1, [r7, #20]
 8000f3c:	4805      	ldr	r0, [pc, #20]	@ (8000f54 <_write+0x40>)
 8000f3e:	f003 fd0d 	bl	800495c <HAL_UART_Transmit>
	return len + 1;
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	3301      	adds	r3, #1
}
 8000f46:	4618      	mov	r0, r3
 8000f48:	3718      	adds	r7, #24
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	0800b240 	.word	0x0800b240
 8000f54:	20000248 	.word	0x20000248

08000f58 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f5c:	f000 fbf1 	bl	8001742 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f60:	f000 f842 	bl	8000fe8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f64:	f000 f90c 	bl	8001180 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000f68:	f000 f89a 	bl	80010a0 <MX_I2C1_Init>
  MX_USART3_UART_Init();
 8000f6c:	f000 f8d8 	bl	8001120 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000f70:	f004 fb80 	bl	8005674 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of gpsMsgQueue */
  gpsMsgQueueHandle = osMessageQueueNew (16, sizeof(gps_msg_t), &gpsMsgQueue_attributes);
 8000f74:	4a11      	ldr	r2, [pc, #68]	@ (8000fbc <main+0x64>)
 8000f76:	2111      	movs	r1, #17
 8000f78:	2010      	movs	r0, #16
 8000f7a:	f004 fcb9 	bl	80058f0 <osMessageQueueNew>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	4a0f      	ldr	r2, [pc, #60]	@ (8000fc0 <main+0x68>)
 8000f82:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000f84:	4a0f      	ldr	r2, [pc, #60]	@ (8000fc4 <main+0x6c>)
 8000f86:	2100      	movs	r1, #0
 8000f88:	480f      	ldr	r0, [pc, #60]	@ (8000fc8 <main+0x70>)
 8000f8a:	f004 fbdd 	bl	8005748 <osThreadNew>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	4a0e      	ldr	r2, [pc, #56]	@ (8000fcc <main+0x74>)
 8000f92:	6013      	str	r3, [r2, #0]

  /* creation of GPSTask */
  GPSTaskHandle = osThreadNew(StartGPSTask, NULL, &GPSTask_attributes);
 8000f94:	4a0e      	ldr	r2, [pc, #56]	@ (8000fd0 <main+0x78>)
 8000f96:	2100      	movs	r1, #0
 8000f98:	480e      	ldr	r0, [pc, #56]	@ (8000fd4 <main+0x7c>)
 8000f9a:	f004 fbd5 	bl	8005748 <osThreadNew>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	4a0d      	ldr	r2, [pc, #52]	@ (8000fd8 <main+0x80>)
 8000fa2:	6013      	str	r3, [r2, #0]

  /* creation of I2CSenderTask */
  I2CSenderTaskHandle = osThreadNew(StartI2CSenderTask, NULL, &I2CSenderTask_attributes);
 8000fa4:	4a0d      	ldr	r2, [pc, #52]	@ (8000fdc <main+0x84>)
 8000fa6:	2100      	movs	r1, #0
 8000fa8:	480d      	ldr	r0, [pc, #52]	@ (8000fe0 <main+0x88>)
 8000faa:	f004 fbcd 	bl	8005748 <osThreadNew>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	4a0c      	ldr	r2, [pc, #48]	@ (8000fe4 <main+0x8c>)
 8000fb2:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000fb4:	f004 fb92 	bl	80056dc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000fb8:	bf00      	nop
 8000fba:	e7fd      	b.n	8000fb8 <main+0x60>
 8000fbc:	0800b320 	.word	0x0800b320
 8000fc0:	200002dc 	.word	0x200002dc
 8000fc4:	0800b2b4 	.word	0x0800b2b4
 8000fc8:	080011e1 	.word	0x080011e1
 8000fcc:	200002d0 	.word	0x200002d0
 8000fd0:	0800b2d8 	.word	0x0800b2d8
 8000fd4:	080052cd 	.word	0x080052cd
 8000fd8:	200002d4 	.word	0x200002d4
 8000fdc:	0800b2fc 	.word	0x0800b2fc
 8000fe0:	080055b9 	.word	0x080055b9
 8000fe4:	200002d8 	.word	0x200002d8

08000fe8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b094      	sub	sp, #80	@ 0x50
 8000fec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fee:	f107 0320 	add.w	r3, r7, #32
 8000ff2:	2230      	movs	r2, #48	@ 0x30
 8000ff4:	2100      	movs	r1, #0
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f008 f979 	bl	80092ee <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ffc:	f107 030c 	add.w	r3, r7, #12
 8001000:	2200      	movs	r2, #0
 8001002:	601a      	str	r2, [r3, #0]
 8001004:	605a      	str	r2, [r3, #4]
 8001006:	609a      	str	r2, [r3, #8]
 8001008:	60da      	str	r2, [r3, #12]
 800100a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800100c:	4b22      	ldr	r3, [pc, #136]	@ (8001098 <SystemClock_Config+0xb0>)
 800100e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001010:	4a21      	ldr	r2, [pc, #132]	@ (8001098 <SystemClock_Config+0xb0>)
 8001012:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001016:	6413      	str	r3, [r2, #64]	@ 0x40
 8001018:	4b1f      	ldr	r3, [pc, #124]	@ (8001098 <SystemClock_Config+0xb0>)
 800101a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800101c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001020:	60bb      	str	r3, [r7, #8]
 8001022:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001024:	4b1d      	ldr	r3, [pc, #116]	@ (800109c <SystemClock_Config+0xb4>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800102c:	4a1b      	ldr	r2, [pc, #108]	@ (800109c <SystemClock_Config+0xb4>)
 800102e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001032:	6013      	str	r3, [r2, #0]
 8001034:	4b19      	ldr	r3, [pc, #100]	@ (800109c <SystemClock_Config+0xb4>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800103c:	607b      	str	r3, [r7, #4]
 800103e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001040:	2302      	movs	r3, #2
 8001042:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001044:	2301      	movs	r3, #1
 8001046:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001048:	2310      	movs	r3, #16
 800104a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800104c:	2300      	movs	r3, #0
 800104e:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001050:	f107 0320 	add.w	r3, r7, #32
 8001054:	4618      	mov	r0, r3
 8001056:	f002 f8b9 	bl	80031cc <HAL_RCC_OscConfig>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d001      	beq.n	8001064 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8001060:	f000 f8d8 	bl	8001214 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001064:	230f      	movs	r3, #15
 8001066:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001068:	2300      	movs	r3, #0
 800106a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800106c:	2300      	movs	r3, #0
 800106e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001070:	2300      	movs	r3, #0
 8001072:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001074:	2300      	movs	r3, #0
 8001076:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001078:	f107 030c 	add.w	r3, r7, #12
 800107c:	2100      	movs	r1, #0
 800107e:	4618      	mov	r0, r3
 8001080:	f002 fb48 	bl	8003714 <HAL_RCC_ClockConfig>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d001      	beq.n	800108e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800108a:	f000 f8c3 	bl	8001214 <Error_Handler>
  }
}
 800108e:	bf00      	nop
 8001090:	3750      	adds	r7, #80	@ 0x50
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	40023800 	.word	0x40023800
 800109c:	40007000 	.word	0x40007000

080010a0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80010a4:	4b1b      	ldr	r3, [pc, #108]	@ (8001114 <MX_I2C1_Init+0x74>)
 80010a6:	4a1c      	ldr	r2, [pc, #112]	@ (8001118 <MX_I2C1_Init+0x78>)
 80010a8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00303D5B;
 80010aa:	4b1a      	ldr	r3, [pc, #104]	@ (8001114 <MX_I2C1_Init+0x74>)
 80010ac:	4a1b      	ldr	r2, [pc, #108]	@ (800111c <MX_I2C1_Init+0x7c>)
 80010ae:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80010b0:	4b18      	ldr	r3, [pc, #96]	@ (8001114 <MX_I2C1_Init+0x74>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010b6:	4b17      	ldr	r3, [pc, #92]	@ (8001114 <MX_I2C1_Init+0x74>)
 80010b8:	2201      	movs	r2, #1
 80010ba:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010bc:	4b15      	ldr	r3, [pc, #84]	@ (8001114 <MX_I2C1_Init+0x74>)
 80010be:	2200      	movs	r2, #0
 80010c0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80010c2:	4b14      	ldr	r3, [pc, #80]	@ (8001114 <MX_I2C1_Init+0x74>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80010c8:	4b12      	ldr	r3, [pc, #72]	@ (8001114 <MX_I2C1_Init+0x74>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010ce:	4b11      	ldr	r3, [pc, #68]	@ (8001114 <MX_I2C1_Init+0x74>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010d4:	4b0f      	ldr	r3, [pc, #60]	@ (8001114 <MX_I2C1_Init+0x74>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80010da:	480e      	ldr	r0, [pc, #56]	@ (8001114 <MX_I2C1_Init+0x74>)
 80010dc:	f000 fe1c 	bl	8001d18 <HAL_I2C_Init>
 80010e0:	4603      	mov	r3, r0
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d001      	beq.n	80010ea <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80010e6:	f000 f895 	bl	8001214 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80010ea:	2100      	movs	r1, #0
 80010ec:	4809      	ldr	r0, [pc, #36]	@ (8001114 <MX_I2C1_Init+0x74>)
 80010ee:	f001 ffd5 	bl	800309c <HAL_I2CEx_ConfigAnalogFilter>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d001      	beq.n	80010fc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80010f8:	f000 f88c 	bl	8001214 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80010fc:	2100      	movs	r1, #0
 80010fe:	4805      	ldr	r0, [pc, #20]	@ (8001114 <MX_I2C1_Init+0x74>)
 8001100:	f002 f817 	bl	8003132 <HAL_I2CEx_ConfigDigitalFilter>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d001      	beq.n	800110e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800110a:	f000 f883 	bl	8001214 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800110e:	bf00      	nop
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	200001f4 	.word	0x200001f4
 8001118:	40005400 	.word	0x40005400
 800111c:	00303d5b 	.word	0x00303d5b

08001120 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001124:	4b14      	ldr	r3, [pc, #80]	@ (8001178 <MX_USART3_UART_Init+0x58>)
 8001126:	4a15      	ldr	r2, [pc, #84]	@ (800117c <MX_USART3_UART_Init+0x5c>)
 8001128:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800112a:	4b13      	ldr	r3, [pc, #76]	@ (8001178 <MX_USART3_UART_Init+0x58>)
 800112c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001130:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001132:	4b11      	ldr	r3, [pc, #68]	@ (8001178 <MX_USART3_UART_Init+0x58>)
 8001134:	2200      	movs	r2, #0
 8001136:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001138:	4b0f      	ldr	r3, [pc, #60]	@ (8001178 <MX_USART3_UART_Init+0x58>)
 800113a:	2200      	movs	r2, #0
 800113c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800113e:	4b0e      	ldr	r3, [pc, #56]	@ (8001178 <MX_USART3_UART_Init+0x58>)
 8001140:	2200      	movs	r2, #0
 8001142:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001144:	4b0c      	ldr	r3, [pc, #48]	@ (8001178 <MX_USART3_UART_Init+0x58>)
 8001146:	220c      	movs	r2, #12
 8001148:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800114a:	4b0b      	ldr	r3, [pc, #44]	@ (8001178 <MX_USART3_UART_Init+0x58>)
 800114c:	2200      	movs	r2, #0
 800114e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001150:	4b09      	ldr	r3, [pc, #36]	@ (8001178 <MX_USART3_UART_Init+0x58>)
 8001152:	2200      	movs	r2, #0
 8001154:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001156:	4b08      	ldr	r3, [pc, #32]	@ (8001178 <MX_USART3_UART_Init+0x58>)
 8001158:	2200      	movs	r2, #0
 800115a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800115c:	4b06      	ldr	r3, [pc, #24]	@ (8001178 <MX_USART3_UART_Init+0x58>)
 800115e:	2200      	movs	r2, #0
 8001160:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001162:	4805      	ldr	r0, [pc, #20]	@ (8001178 <MX_USART3_UART_Init+0x58>)
 8001164:	f003 fbac 	bl	80048c0 <HAL_UART_Init>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d001      	beq.n	8001172 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800116e:	f000 f851 	bl	8001214 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001172:	bf00      	nop
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	20000248 	.word	0x20000248
 800117c:	40004800 	.word	0x40004800

08001180 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001180:	b480      	push	{r7}
 8001182:	b085      	sub	sp, #20
 8001184:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001186:	4b15      	ldr	r3, [pc, #84]	@ (80011dc <MX_GPIO_Init+0x5c>)
 8001188:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800118a:	4a14      	ldr	r2, [pc, #80]	@ (80011dc <MX_GPIO_Init+0x5c>)
 800118c:	f043 0308 	orr.w	r3, r3, #8
 8001190:	6313      	str	r3, [r2, #48]	@ 0x30
 8001192:	4b12      	ldr	r3, [pc, #72]	@ (80011dc <MX_GPIO_Init+0x5c>)
 8001194:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001196:	f003 0308 	and.w	r3, r3, #8
 800119a:	60fb      	str	r3, [r7, #12]
 800119c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800119e:	4b0f      	ldr	r3, [pc, #60]	@ (80011dc <MX_GPIO_Init+0x5c>)
 80011a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011a2:	4a0e      	ldr	r2, [pc, #56]	@ (80011dc <MX_GPIO_Init+0x5c>)
 80011a4:	f043 0301 	orr.w	r3, r3, #1
 80011a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80011aa:	4b0c      	ldr	r3, [pc, #48]	@ (80011dc <MX_GPIO_Init+0x5c>)
 80011ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ae:	f003 0301 	and.w	r3, r3, #1
 80011b2:	60bb      	str	r3, [r7, #8]
 80011b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011b6:	4b09      	ldr	r3, [pc, #36]	@ (80011dc <MX_GPIO_Init+0x5c>)
 80011b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ba:	4a08      	ldr	r2, [pc, #32]	@ (80011dc <MX_GPIO_Init+0x5c>)
 80011bc:	f043 0302 	orr.w	r3, r3, #2
 80011c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80011c2:	4b06      	ldr	r3, [pc, #24]	@ (80011dc <MX_GPIO_Init+0x5c>)
 80011c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011c6:	f003 0302 	and.w	r3, r3, #2
 80011ca:	607b      	str	r3, [r7, #4]
 80011cc:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80011ce:	bf00      	nop
 80011d0:	3714      	adds	r7, #20
 80011d2:	46bd      	mov	sp, r7
 80011d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d8:	4770      	bx	lr
 80011da:	bf00      	nop
 80011dc:	40023800 	.word	0x40023800

080011e0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b082      	sub	sp, #8
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80011e8:	2001      	movs	r0, #1
 80011ea:	f004 fb53 	bl	8005894 <osDelay>
 80011ee:	e7fb      	b.n	80011e8 <StartDefaultTask+0x8>

080011f0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b082      	sub	sp, #8
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	4a04      	ldr	r2, [pc, #16]	@ (8001210 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80011fe:	4293      	cmp	r3, r2
 8001200:	d101      	bne.n	8001206 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8001202:	f000 faab 	bl	800175c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001206:	bf00      	nop
 8001208:	3708      	adds	r7, #8
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	40001000 	.word	0x40001000

08001214 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001218:	b672      	cpsid	i
}
 800121a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800121c:	bf00      	nop
 800121e:	e7fd      	b.n	800121c <Error_Handler+0x8>

08001220 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b082      	sub	sp, #8
 8001224:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001226:	4b11      	ldr	r3, [pc, #68]	@ (800126c <HAL_MspInit+0x4c>)
 8001228:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800122a:	4a10      	ldr	r2, [pc, #64]	@ (800126c <HAL_MspInit+0x4c>)
 800122c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001230:	6413      	str	r3, [r2, #64]	@ 0x40
 8001232:	4b0e      	ldr	r3, [pc, #56]	@ (800126c <HAL_MspInit+0x4c>)
 8001234:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001236:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800123a:	607b      	str	r3, [r7, #4]
 800123c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800123e:	4b0b      	ldr	r3, [pc, #44]	@ (800126c <HAL_MspInit+0x4c>)
 8001240:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001242:	4a0a      	ldr	r2, [pc, #40]	@ (800126c <HAL_MspInit+0x4c>)
 8001244:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001248:	6453      	str	r3, [r2, #68]	@ 0x44
 800124a:	4b08      	ldr	r3, [pc, #32]	@ (800126c <HAL_MspInit+0x4c>)
 800124c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800124e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001252:	603b      	str	r3, [r7, #0]
 8001254:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001256:	2200      	movs	r2, #0
 8001258:	210f      	movs	r1, #15
 800125a:	f06f 0001 	mvn.w	r0, #1
 800125e:	f000 fb55 	bl	800190c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001262:	bf00      	nop
 8001264:	3708      	adds	r7, #8
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	40023800 	.word	0x40023800

08001270 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b0aa      	sub	sp, #168	@ 0xa8
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001278:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 800127c:	2200      	movs	r2, #0
 800127e:	601a      	str	r2, [r3, #0]
 8001280:	605a      	str	r2, [r3, #4]
 8001282:	609a      	str	r2, [r3, #8]
 8001284:	60da      	str	r2, [r3, #12]
 8001286:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001288:	f107 0310 	add.w	r3, r7, #16
 800128c:	2284      	movs	r2, #132	@ 0x84
 800128e:	2100      	movs	r1, #0
 8001290:	4618      	mov	r0, r3
 8001292:	f008 f82c 	bl	80092ee <memset>
  if(hi2c->Instance==I2C1)
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	4a2a      	ldr	r2, [pc, #168]	@ (8001344 <HAL_I2C_MspInit+0xd4>)
 800129c:	4293      	cmp	r3, r2
 800129e:	d14c      	bne.n	800133a <HAL_I2C_MspInit+0xca>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80012a0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80012a4:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80012a6:	2300      	movs	r3, #0
 80012a8:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012aa:	f107 0310 	add.w	r3, r7, #16
 80012ae:	4618      	mov	r0, r3
 80012b0:	f002 fc48 	bl	8003b44 <HAL_RCCEx_PeriphCLKConfig>
 80012b4:	4603      	mov	r3, r0
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d001      	beq.n	80012be <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80012ba:	f7ff ffab 	bl	8001214 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012be:	4b22      	ldr	r3, [pc, #136]	@ (8001348 <HAL_I2C_MspInit+0xd8>)
 80012c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012c2:	4a21      	ldr	r2, [pc, #132]	@ (8001348 <HAL_I2C_MspInit+0xd8>)
 80012c4:	f043 0302 	orr.w	r3, r3, #2
 80012c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80012ca:	4b1f      	ldr	r3, [pc, #124]	@ (8001348 <HAL_I2C_MspInit+0xd8>)
 80012cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ce:	f003 0302 	and.w	r3, r3, #2
 80012d2:	60fb      	str	r3, [r7, #12]
 80012d4:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 80012d6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80012da:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012de:	2312      	movs	r3, #18
 80012e0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012e4:	2301      	movs	r3, #1
 80012e6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012ea:	2303      	movs	r3, #3
 80012ec:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80012f0:	2304      	movs	r3, #4
 80012f2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012f6:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80012fa:	4619      	mov	r1, r3
 80012fc:	4813      	ldr	r0, [pc, #76]	@ (800134c <HAL_I2C_MspInit+0xdc>)
 80012fe:	f000 fb5f 	bl	80019c0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001302:	4b11      	ldr	r3, [pc, #68]	@ (8001348 <HAL_I2C_MspInit+0xd8>)
 8001304:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001306:	4a10      	ldr	r2, [pc, #64]	@ (8001348 <HAL_I2C_MspInit+0xd8>)
 8001308:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800130c:	6413      	str	r3, [r2, #64]	@ 0x40
 800130e:	4b0e      	ldr	r3, [pc, #56]	@ (8001348 <HAL_I2C_MspInit+0xd8>)
 8001310:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001312:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001316:	60bb      	str	r3, [r7, #8]
 8001318:	68bb      	ldr	r3, [r7, #8]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 800131a:	2200      	movs	r2, #0
 800131c:	2105      	movs	r1, #5
 800131e:	201f      	movs	r0, #31
 8001320:	f000 faf4 	bl	800190c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001324:	201f      	movs	r0, #31
 8001326:	f000 fb0d 	bl	8001944 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 800132a:	2200      	movs	r2, #0
 800132c:	2105      	movs	r1, #5
 800132e:	2020      	movs	r0, #32
 8001330:	f000 faec 	bl	800190c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001334:	2020      	movs	r0, #32
 8001336:	f000 fb05 	bl	8001944 <HAL_NVIC_EnableIRQ>

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 800133a:	bf00      	nop
 800133c:	37a8      	adds	r7, #168	@ 0xa8
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	40005400 	.word	0x40005400
 8001348:	40023800 	.word	0x40023800
 800134c:	40020400 	.word	0x40020400

08001350 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b0aa      	sub	sp, #168	@ 0xa8
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001358:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 800135c:	2200      	movs	r2, #0
 800135e:	601a      	str	r2, [r3, #0]
 8001360:	605a      	str	r2, [r3, #4]
 8001362:	609a      	str	r2, [r3, #8]
 8001364:	60da      	str	r2, [r3, #12]
 8001366:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001368:	f107 0310 	add.w	r3, r7, #16
 800136c:	2284      	movs	r2, #132	@ 0x84
 800136e:	2100      	movs	r1, #0
 8001370:	4618      	mov	r0, r3
 8001372:	f007 ffbc 	bl	80092ee <memset>
  if(huart->Instance==USART3)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	4a22      	ldr	r2, [pc, #136]	@ (8001404 <HAL_UART_MspInit+0xb4>)
 800137c:	4293      	cmp	r3, r2
 800137e:	d13c      	bne.n	80013fa <HAL_UART_MspInit+0xaa>

    /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001380:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001384:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001386:	2300      	movs	r3, #0
 8001388:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800138a:	f107 0310 	add.w	r3, r7, #16
 800138e:	4618      	mov	r0, r3
 8001390:	f002 fbd8 	bl	8003b44 <HAL_RCCEx_PeriphCLKConfig>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	d001      	beq.n	800139e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800139a:	f7ff ff3b 	bl	8001214 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800139e:	4b1a      	ldr	r3, [pc, #104]	@ (8001408 <HAL_UART_MspInit+0xb8>)
 80013a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013a2:	4a19      	ldr	r2, [pc, #100]	@ (8001408 <HAL_UART_MspInit+0xb8>)
 80013a4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80013a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80013aa:	4b17      	ldr	r3, [pc, #92]	@ (8001408 <HAL_UART_MspInit+0xb8>)
 80013ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013ae:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80013b2:	60fb      	str	r3, [r7, #12]
 80013b4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80013b6:	4b14      	ldr	r3, [pc, #80]	@ (8001408 <HAL_UART_MspInit+0xb8>)
 80013b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ba:	4a13      	ldr	r2, [pc, #76]	@ (8001408 <HAL_UART_MspInit+0xb8>)
 80013bc:	f043 0308 	orr.w	r3, r3, #8
 80013c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80013c2:	4b11      	ldr	r3, [pc, #68]	@ (8001408 <HAL_UART_MspInit+0xb8>)
 80013c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013c6:	f003 0308 	and.w	r3, r3, #8
 80013ca:	60bb      	str	r3, [r7, #8]
 80013cc:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = DEBUG_UART_TX_Pin|DEBUG_UART_RX_Pin;
 80013ce:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80013d2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013d6:	2302      	movs	r3, #2
 80013d8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013dc:	2300      	movs	r3, #0
 80013de:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013e2:	2303      	movs	r3, #3
 80013e4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80013e8:	2307      	movs	r3, #7
 80013ea:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013ee:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80013f2:	4619      	mov	r1, r3
 80013f4:	4805      	ldr	r0, [pc, #20]	@ (800140c <HAL_UART_MspInit+0xbc>)
 80013f6:	f000 fae3 	bl	80019c0 <HAL_GPIO_Init>

    /* USER CODE END USART3_MspInit 1 */

  }

}
 80013fa:	bf00      	nop
 80013fc:	37a8      	adds	r7, #168	@ 0xa8
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	40004800 	.word	0x40004800
 8001408:	40023800 	.word	0x40023800
 800140c:	40020c00 	.word	0x40020c00

08001410 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b08e      	sub	sp, #56	@ 0x38
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001418:	2300      	movs	r3, #0
 800141a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 800141c:	2300      	movs	r3, #0
 800141e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001420:	4b33      	ldr	r3, [pc, #204]	@ (80014f0 <HAL_InitTick+0xe0>)
 8001422:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001424:	4a32      	ldr	r2, [pc, #200]	@ (80014f0 <HAL_InitTick+0xe0>)
 8001426:	f043 0310 	orr.w	r3, r3, #16
 800142a:	6413      	str	r3, [r2, #64]	@ 0x40
 800142c:	4b30      	ldr	r3, [pc, #192]	@ (80014f0 <HAL_InitTick+0xe0>)
 800142e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001430:	f003 0310 	and.w	r3, r3, #16
 8001434:	60fb      	str	r3, [r7, #12]
 8001436:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001438:	f107 0210 	add.w	r2, r7, #16
 800143c:	f107 0314 	add.w	r3, r7, #20
 8001440:	4611      	mov	r1, r2
 8001442:	4618      	mov	r0, r3
 8001444:	f002 fb4c 	bl	8003ae0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001448:	6a3b      	ldr	r3, [r7, #32]
 800144a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800144c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800144e:	2b00      	cmp	r3, #0
 8001450:	d103      	bne.n	800145a <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001452:	f002 fb1d 	bl	8003a90 <HAL_RCC_GetPCLK1Freq>
 8001456:	6378      	str	r0, [r7, #52]	@ 0x34
 8001458:	e004      	b.n	8001464 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800145a:	f002 fb19 	bl	8003a90 <HAL_RCC_GetPCLK1Freq>
 800145e:	4603      	mov	r3, r0
 8001460:	005b      	lsls	r3, r3, #1
 8001462:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001464:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001466:	4a23      	ldr	r2, [pc, #140]	@ (80014f4 <HAL_InitTick+0xe4>)
 8001468:	fba2 2303 	umull	r2, r3, r2, r3
 800146c:	0c9b      	lsrs	r3, r3, #18
 800146e:	3b01      	subs	r3, #1
 8001470:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001472:	4b21      	ldr	r3, [pc, #132]	@ (80014f8 <HAL_InitTick+0xe8>)
 8001474:	4a21      	ldr	r2, [pc, #132]	@ (80014fc <HAL_InitTick+0xec>)
 8001476:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001478:	4b1f      	ldr	r3, [pc, #124]	@ (80014f8 <HAL_InitTick+0xe8>)
 800147a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800147e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001480:	4a1d      	ldr	r2, [pc, #116]	@ (80014f8 <HAL_InitTick+0xe8>)
 8001482:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001484:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001486:	4b1c      	ldr	r3, [pc, #112]	@ (80014f8 <HAL_InitTick+0xe8>)
 8001488:	2200      	movs	r2, #0
 800148a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800148c:	4b1a      	ldr	r3, [pc, #104]	@ (80014f8 <HAL_InitTick+0xe8>)
 800148e:	2200      	movs	r2, #0
 8001490:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001492:	4b19      	ldr	r3, [pc, #100]	@ (80014f8 <HAL_InitTick+0xe8>)
 8001494:	2200      	movs	r2, #0
 8001496:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001498:	4817      	ldr	r0, [pc, #92]	@ (80014f8 <HAL_InitTick+0xe8>)
 800149a:	f002 ff43 	bl	8004324 <HAL_TIM_Base_Init>
 800149e:	4603      	mov	r3, r0
 80014a0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80014a4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d11b      	bne.n	80014e4 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80014ac:	4812      	ldr	r0, [pc, #72]	@ (80014f8 <HAL_InitTick+0xe8>)
 80014ae:	f002 ff9b 	bl	80043e8 <HAL_TIM_Base_Start_IT>
 80014b2:	4603      	mov	r3, r0
 80014b4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80014b8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d111      	bne.n	80014e4 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80014c0:	2036      	movs	r0, #54	@ 0x36
 80014c2:	f000 fa3f 	bl	8001944 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	2b0f      	cmp	r3, #15
 80014ca:	d808      	bhi.n	80014de <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80014cc:	2200      	movs	r2, #0
 80014ce:	6879      	ldr	r1, [r7, #4]
 80014d0:	2036      	movs	r0, #54	@ 0x36
 80014d2:	f000 fa1b 	bl	800190c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80014d6:	4a0a      	ldr	r2, [pc, #40]	@ (8001500 <HAL_InitTick+0xf0>)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	6013      	str	r3, [r2, #0]
 80014dc:	e002      	b.n	80014e4 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 80014de:	2301      	movs	r3, #1
 80014e0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80014e4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80014e8:	4618      	mov	r0, r3
 80014ea:	3738      	adds	r7, #56	@ 0x38
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	40023800 	.word	0x40023800
 80014f4:	431bde83 	.word	0x431bde83
 80014f8:	200002e0 	.word	0x200002e0
 80014fc:	40001000 	.word	0x40001000
 8001500:	20000004 	.word	0x20000004

08001504 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001504:	b480      	push	{r7}
 8001506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001508:	bf00      	nop
 800150a:	e7fd      	b.n	8001508 <NMI_Handler+0x4>

0800150c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001510:	bf00      	nop
 8001512:	e7fd      	b.n	8001510 <HardFault_Handler+0x4>

08001514 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001514:	b480      	push	{r7}
 8001516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001518:	bf00      	nop
 800151a:	e7fd      	b.n	8001518 <MemManage_Handler+0x4>

0800151c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800151c:	b480      	push	{r7}
 800151e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001520:	bf00      	nop
 8001522:	e7fd      	b.n	8001520 <BusFault_Handler+0x4>

08001524 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001524:	b480      	push	{r7}
 8001526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001528:	bf00      	nop
 800152a:	e7fd      	b.n	8001528 <UsageFault_Handler+0x4>

0800152c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800152c:	b480      	push	{r7}
 800152e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001530:	bf00      	nop
 8001532:	46bd      	mov	sp, r7
 8001534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001538:	4770      	bx	lr
	...

0800153c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001540:	4802      	ldr	r0, [pc, #8]	@ (800154c <I2C1_EV_IRQHandler+0x10>)
 8001542:	f000 fd9d 	bl	8002080 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001546:	bf00      	nop
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	200001f4 	.word	0x200001f4

08001550 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001554:	4802      	ldr	r0, [pc, #8]	@ (8001560 <I2C1_ER_IRQHandler+0x10>)
 8001556:	f000 fdad 	bl	80020b4 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800155a:	bf00      	nop
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	200001f4 	.word	0x200001f4

08001564 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001568:	4802      	ldr	r0, [pc, #8]	@ (8001574 <TIM6_DAC_IRQHandler+0x10>)
 800156a:	f002 ffb5 	bl	80044d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800156e:	bf00      	nop
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	200002e0 	.word	0x200002e0

08001578 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001578:	b480      	push	{r7}
 800157a:	af00      	add	r7, sp, #0
  return 1;
 800157c:	2301      	movs	r3, #1
}
 800157e:	4618      	mov	r0, r3
 8001580:	46bd      	mov	sp, r7
 8001582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001586:	4770      	bx	lr

08001588 <_kill>:

int _kill(int pid, int sig)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b082      	sub	sp, #8
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
 8001590:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001592:	f007 ff5d 	bl	8009450 <__errno>
 8001596:	4603      	mov	r3, r0
 8001598:	2216      	movs	r2, #22
 800159a:	601a      	str	r2, [r3, #0]
  return -1;
 800159c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80015a0:	4618      	mov	r0, r3
 80015a2:	3708      	adds	r7, #8
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}

080015a8 <_exit>:

void _exit (int status)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b082      	sub	sp, #8
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80015b0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80015b4:	6878      	ldr	r0, [r7, #4]
 80015b6:	f7ff ffe7 	bl	8001588 <_kill>
  while (1) {}    /* Make sure we hang here */
 80015ba:	bf00      	nop
 80015bc:	e7fd      	b.n	80015ba <_exit+0x12>

080015be <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80015be:	b580      	push	{r7, lr}
 80015c0:	b086      	sub	sp, #24
 80015c2:	af00      	add	r7, sp, #0
 80015c4:	60f8      	str	r0, [r7, #12]
 80015c6:	60b9      	str	r1, [r7, #8]
 80015c8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015ca:	2300      	movs	r3, #0
 80015cc:	617b      	str	r3, [r7, #20]
 80015ce:	e00a      	b.n	80015e6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80015d0:	f3af 8000 	nop.w
 80015d4:	4601      	mov	r1, r0
 80015d6:	68bb      	ldr	r3, [r7, #8]
 80015d8:	1c5a      	adds	r2, r3, #1
 80015da:	60ba      	str	r2, [r7, #8]
 80015dc:	b2ca      	uxtb	r2, r1
 80015de:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015e0:	697b      	ldr	r3, [r7, #20]
 80015e2:	3301      	adds	r3, #1
 80015e4:	617b      	str	r3, [r7, #20]
 80015e6:	697a      	ldr	r2, [r7, #20]
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	429a      	cmp	r2, r3
 80015ec:	dbf0      	blt.n	80015d0 <_read+0x12>
  }

  return len;
 80015ee:	687b      	ldr	r3, [r7, #4]
}
 80015f0:	4618      	mov	r0, r3
 80015f2:	3718      	adds	r7, #24
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}

080015f8 <_close>:
  }
  return len;
}

int _close(int file)
{
 80015f8:	b480      	push	{r7}
 80015fa:	b083      	sub	sp, #12
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001600:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001604:	4618      	mov	r0, r3
 8001606:	370c      	adds	r7, #12
 8001608:	46bd      	mov	sp, r7
 800160a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160e:	4770      	bx	lr

08001610 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001610:	b480      	push	{r7}
 8001612:	b083      	sub	sp, #12
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
 8001618:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001620:	605a      	str	r2, [r3, #4]
  return 0;
 8001622:	2300      	movs	r3, #0
}
 8001624:	4618      	mov	r0, r3
 8001626:	370c      	adds	r7, #12
 8001628:	46bd      	mov	sp, r7
 800162a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162e:	4770      	bx	lr

08001630 <_isatty>:

int _isatty(int file)
{
 8001630:	b480      	push	{r7}
 8001632:	b083      	sub	sp, #12
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001638:	2301      	movs	r3, #1
}
 800163a:	4618      	mov	r0, r3
 800163c:	370c      	adds	r7, #12
 800163e:	46bd      	mov	sp, r7
 8001640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001644:	4770      	bx	lr

08001646 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001646:	b480      	push	{r7}
 8001648:	b085      	sub	sp, #20
 800164a:	af00      	add	r7, sp, #0
 800164c:	60f8      	str	r0, [r7, #12]
 800164e:	60b9      	str	r1, [r7, #8]
 8001650:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001652:	2300      	movs	r3, #0
}
 8001654:	4618      	mov	r0, r3
 8001656:	3714      	adds	r7, #20
 8001658:	46bd      	mov	sp, r7
 800165a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165e:	4770      	bx	lr

08001660 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b086      	sub	sp, #24
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001668:	4a14      	ldr	r2, [pc, #80]	@ (80016bc <_sbrk+0x5c>)
 800166a:	4b15      	ldr	r3, [pc, #84]	@ (80016c0 <_sbrk+0x60>)
 800166c:	1ad3      	subs	r3, r2, r3
 800166e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001670:	697b      	ldr	r3, [r7, #20]
 8001672:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001674:	4b13      	ldr	r3, [pc, #76]	@ (80016c4 <_sbrk+0x64>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	2b00      	cmp	r3, #0
 800167a:	d102      	bne.n	8001682 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800167c:	4b11      	ldr	r3, [pc, #68]	@ (80016c4 <_sbrk+0x64>)
 800167e:	4a12      	ldr	r2, [pc, #72]	@ (80016c8 <_sbrk+0x68>)
 8001680:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001682:	4b10      	ldr	r3, [pc, #64]	@ (80016c4 <_sbrk+0x64>)
 8001684:	681a      	ldr	r2, [r3, #0]
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	4413      	add	r3, r2
 800168a:	693a      	ldr	r2, [r7, #16]
 800168c:	429a      	cmp	r2, r3
 800168e:	d207      	bcs.n	80016a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001690:	f007 fede 	bl	8009450 <__errno>
 8001694:	4603      	mov	r3, r0
 8001696:	220c      	movs	r2, #12
 8001698:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800169a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800169e:	e009      	b.n	80016b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016a0:	4b08      	ldr	r3, [pc, #32]	@ (80016c4 <_sbrk+0x64>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016a6:	4b07      	ldr	r3, [pc, #28]	@ (80016c4 <_sbrk+0x64>)
 80016a8:	681a      	ldr	r2, [r3, #0]
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	4413      	add	r3, r2
 80016ae:	4a05      	ldr	r2, [pc, #20]	@ (80016c4 <_sbrk+0x64>)
 80016b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016b2:	68fb      	ldr	r3, [r7, #12]
}
 80016b4:	4618      	mov	r0, r3
 80016b6:	3718      	adds	r7, #24
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}
 80016bc:	20050000 	.word	0x20050000
 80016c0:	00000400 	.word	0x00000400
 80016c4:	2000032c 	.word	0x2000032c
 80016c8:	20005480 	.word	0x20005480

080016cc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016cc:	b480      	push	{r7}
 80016ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016d0:	4b06      	ldr	r3, [pc, #24]	@ (80016ec <SystemInit+0x20>)
 80016d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80016d6:	4a05      	ldr	r2, [pc, #20]	@ (80016ec <SystemInit+0x20>)
 80016d8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80016dc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016e0:	bf00      	nop
 80016e2:	46bd      	mov	sp, r7
 80016e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e8:	4770      	bx	lr
 80016ea:	bf00      	nop
 80016ec:	e000ed00 	.word	0xe000ed00

080016f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80016f0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001728 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80016f4:	f7ff ffea 	bl	80016cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80016f8:	480c      	ldr	r0, [pc, #48]	@ (800172c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80016fa:	490d      	ldr	r1, [pc, #52]	@ (8001730 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80016fc:	4a0d      	ldr	r2, [pc, #52]	@ (8001734 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80016fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001700:	e002      	b.n	8001708 <LoopCopyDataInit>

08001702 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001702:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001704:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001706:	3304      	adds	r3, #4

08001708 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001708:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800170a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800170c:	d3f9      	bcc.n	8001702 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800170e:	4a0a      	ldr	r2, [pc, #40]	@ (8001738 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001710:	4c0a      	ldr	r4, [pc, #40]	@ (800173c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001712:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001714:	e001      	b.n	800171a <LoopFillZerobss>

08001716 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001716:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001718:	3204      	adds	r2, #4

0800171a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800171a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800171c:	d3fb      	bcc.n	8001716 <FillZerobss>


/* Call static constructors */
    bl __libc_init_array
 800171e:	f007 fe9d 	bl	800945c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001722:	f7ff fc19 	bl	8000f58 <main>
  bx  lr    
 8001726:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001728:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 800172c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001730:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8001734:	0800b72c 	.word	0x0800b72c
  ldr r2, =_sbss
 8001738:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 800173c:	2000547c 	.word	0x2000547c

08001740 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001740:	e7fe      	b.n	8001740 <ADC_IRQHandler>

08001742 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001742:	b580      	push	{r7, lr}
 8001744:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001746:	2003      	movs	r0, #3
 8001748:	f000 f8d5 	bl	80018f6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800174c:	200f      	movs	r0, #15
 800174e:	f7ff fe5f 	bl	8001410 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001752:	f7ff fd65 	bl	8001220 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001756:	2300      	movs	r3, #0
}
 8001758:	4618      	mov	r0, r3
 800175a:	bd80      	pop	{r7, pc}

0800175c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800175c:	b480      	push	{r7}
 800175e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001760:	4b06      	ldr	r3, [pc, #24]	@ (800177c <HAL_IncTick+0x20>)
 8001762:	781b      	ldrb	r3, [r3, #0]
 8001764:	461a      	mov	r2, r3
 8001766:	4b06      	ldr	r3, [pc, #24]	@ (8001780 <HAL_IncTick+0x24>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	4413      	add	r3, r2
 800176c:	4a04      	ldr	r2, [pc, #16]	@ (8001780 <HAL_IncTick+0x24>)
 800176e:	6013      	str	r3, [r2, #0]
}
 8001770:	bf00      	nop
 8001772:	46bd      	mov	sp, r7
 8001774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001778:	4770      	bx	lr
 800177a:	bf00      	nop
 800177c:	20000008 	.word	0x20000008
 8001780:	20000330 	.word	0x20000330

08001784 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001784:	b480      	push	{r7}
 8001786:	af00      	add	r7, sp, #0
  return uwTick;
 8001788:	4b03      	ldr	r3, [pc, #12]	@ (8001798 <HAL_GetTick+0x14>)
 800178a:	681b      	ldr	r3, [r3, #0]
}
 800178c:	4618      	mov	r0, r3
 800178e:	46bd      	mov	sp, r7
 8001790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001794:	4770      	bx	lr
 8001796:	bf00      	nop
 8001798:	20000330 	.word	0x20000330

0800179c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800179c:	b480      	push	{r7}
 800179e:	b085      	sub	sp, #20
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	f003 0307 	and.w	r3, r3, #7
 80017aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017ac:	4b0b      	ldr	r3, [pc, #44]	@ (80017dc <__NVIC_SetPriorityGrouping+0x40>)
 80017ae:	68db      	ldr	r3, [r3, #12]
 80017b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017b2:	68ba      	ldr	r2, [r7, #8]
 80017b4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80017b8:	4013      	ands	r3, r2
 80017ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017c0:	68bb      	ldr	r3, [r7, #8]
 80017c2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80017c4:	4b06      	ldr	r3, [pc, #24]	@ (80017e0 <__NVIC_SetPriorityGrouping+0x44>)
 80017c6:	4313      	orrs	r3, r2
 80017c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017ca:	4a04      	ldr	r2, [pc, #16]	@ (80017dc <__NVIC_SetPriorityGrouping+0x40>)
 80017cc:	68bb      	ldr	r3, [r7, #8]
 80017ce:	60d3      	str	r3, [r2, #12]
}
 80017d0:	bf00      	nop
 80017d2:	3714      	adds	r7, #20
 80017d4:	46bd      	mov	sp, r7
 80017d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017da:	4770      	bx	lr
 80017dc:	e000ed00 	.word	0xe000ed00
 80017e0:	05fa0000 	.word	0x05fa0000

080017e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017e4:	b480      	push	{r7}
 80017e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017e8:	4b04      	ldr	r3, [pc, #16]	@ (80017fc <__NVIC_GetPriorityGrouping+0x18>)
 80017ea:	68db      	ldr	r3, [r3, #12]
 80017ec:	0a1b      	lsrs	r3, r3, #8
 80017ee:	f003 0307 	and.w	r3, r3, #7
}
 80017f2:	4618      	mov	r0, r3
 80017f4:	46bd      	mov	sp, r7
 80017f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fa:	4770      	bx	lr
 80017fc:	e000ed00 	.word	0xe000ed00

08001800 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001800:	b480      	push	{r7}
 8001802:	b083      	sub	sp, #12
 8001804:	af00      	add	r7, sp, #0
 8001806:	4603      	mov	r3, r0
 8001808:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800180a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800180e:	2b00      	cmp	r3, #0
 8001810:	db0b      	blt.n	800182a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001812:	79fb      	ldrb	r3, [r7, #7]
 8001814:	f003 021f 	and.w	r2, r3, #31
 8001818:	4907      	ldr	r1, [pc, #28]	@ (8001838 <__NVIC_EnableIRQ+0x38>)
 800181a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800181e:	095b      	lsrs	r3, r3, #5
 8001820:	2001      	movs	r0, #1
 8001822:	fa00 f202 	lsl.w	r2, r0, r2
 8001826:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800182a:	bf00      	nop
 800182c:	370c      	adds	r7, #12
 800182e:	46bd      	mov	sp, r7
 8001830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001834:	4770      	bx	lr
 8001836:	bf00      	nop
 8001838:	e000e100 	.word	0xe000e100

0800183c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800183c:	b480      	push	{r7}
 800183e:	b083      	sub	sp, #12
 8001840:	af00      	add	r7, sp, #0
 8001842:	4603      	mov	r3, r0
 8001844:	6039      	str	r1, [r7, #0]
 8001846:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001848:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800184c:	2b00      	cmp	r3, #0
 800184e:	db0a      	blt.n	8001866 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	b2da      	uxtb	r2, r3
 8001854:	490c      	ldr	r1, [pc, #48]	@ (8001888 <__NVIC_SetPriority+0x4c>)
 8001856:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800185a:	0112      	lsls	r2, r2, #4
 800185c:	b2d2      	uxtb	r2, r2
 800185e:	440b      	add	r3, r1
 8001860:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001864:	e00a      	b.n	800187c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	b2da      	uxtb	r2, r3
 800186a:	4908      	ldr	r1, [pc, #32]	@ (800188c <__NVIC_SetPriority+0x50>)
 800186c:	79fb      	ldrb	r3, [r7, #7]
 800186e:	f003 030f 	and.w	r3, r3, #15
 8001872:	3b04      	subs	r3, #4
 8001874:	0112      	lsls	r2, r2, #4
 8001876:	b2d2      	uxtb	r2, r2
 8001878:	440b      	add	r3, r1
 800187a:	761a      	strb	r2, [r3, #24]
}
 800187c:	bf00      	nop
 800187e:	370c      	adds	r7, #12
 8001880:	46bd      	mov	sp, r7
 8001882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001886:	4770      	bx	lr
 8001888:	e000e100 	.word	0xe000e100
 800188c:	e000ed00 	.word	0xe000ed00

08001890 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001890:	b480      	push	{r7}
 8001892:	b089      	sub	sp, #36	@ 0x24
 8001894:	af00      	add	r7, sp, #0
 8001896:	60f8      	str	r0, [r7, #12]
 8001898:	60b9      	str	r1, [r7, #8]
 800189a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	f003 0307 	and.w	r3, r3, #7
 80018a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018a4:	69fb      	ldr	r3, [r7, #28]
 80018a6:	f1c3 0307 	rsb	r3, r3, #7
 80018aa:	2b04      	cmp	r3, #4
 80018ac:	bf28      	it	cs
 80018ae:	2304      	movcs	r3, #4
 80018b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018b2:	69fb      	ldr	r3, [r7, #28]
 80018b4:	3304      	adds	r3, #4
 80018b6:	2b06      	cmp	r3, #6
 80018b8:	d902      	bls.n	80018c0 <NVIC_EncodePriority+0x30>
 80018ba:	69fb      	ldr	r3, [r7, #28]
 80018bc:	3b03      	subs	r3, #3
 80018be:	e000      	b.n	80018c2 <NVIC_EncodePriority+0x32>
 80018c0:	2300      	movs	r3, #0
 80018c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018c4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80018c8:	69bb      	ldr	r3, [r7, #24]
 80018ca:	fa02 f303 	lsl.w	r3, r2, r3
 80018ce:	43da      	mvns	r2, r3
 80018d0:	68bb      	ldr	r3, [r7, #8]
 80018d2:	401a      	ands	r2, r3
 80018d4:	697b      	ldr	r3, [r7, #20]
 80018d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018d8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80018dc:	697b      	ldr	r3, [r7, #20]
 80018de:	fa01 f303 	lsl.w	r3, r1, r3
 80018e2:	43d9      	mvns	r1, r3
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018e8:	4313      	orrs	r3, r2
         );
}
 80018ea:	4618      	mov	r0, r3
 80018ec:	3724      	adds	r7, #36	@ 0x24
 80018ee:	46bd      	mov	sp, r7
 80018f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f4:	4770      	bx	lr

080018f6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018f6:	b580      	push	{r7, lr}
 80018f8:	b082      	sub	sp, #8
 80018fa:	af00      	add	r7, sp, #0
 80018fc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018fe:	6878      	ldr	r0, [r7, #4]
 8001900:	f7ff ff4c 	bl	800179c <__NVIC_SetPriorityGrouping>
}
 8001904:	bf00      	nop
 8001906:	3708      	adds	r7, #8
 8001908:	46bd      	mov	sp, r7
 800190a:	bd80      	pop	{r7, pc}

0800190c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800190c:	b580      	push	{r7, lr}
 800190e:	b086      	sub	sp, #24
 8001910:	af00      	add	r7, sp, #0
 8001912:	4603      	mov	r3, r0
 8001914:	60b9      	str	r1, [r7, #8]
 8001916:	607a      	str	r2, [r7, #4]
 8001918:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800191a:	2300      	movs	r3, #0
 800191c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800191e:	f7ff ff61 	bl	80017e4 <__NVIC_GetPriorityGrouping>
 8001922:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001924:	687a      	ldr	r2, [r7, #4]
 8001926:	68b9      	ldr	r1, [r7, #8]
 8001928:	6978      	ldr	r0, [r7, #20]
 800192a:	f7ff ffb1 	bl	8001890 <NVIC_EncodePriority>
 800192e:	4602      	mov	r2, r0
 8001930:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001934:	4611      	mov	r1, r2
 8001936:	4618      	mov	r0, r3
 8001938:	f7ff ff80 	bl	800183c <__NVIC_SetPriority>
}
 800193c:	bf00      	nop
 800193e:	3718      	adds	r7, #24
 8001940:	46bd      	mov	sp, r7
 8001942:	bd80      	pop	{r7, pc}

08001944 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b082      	sub	sp, #8
 8001948:	af00      	add	r7, sp, #0
 800194a:	4603      	mov	r3, r0
 800194c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800194e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001952:	4618      	mov	r0, r3
 8001954:	f7ff ff54 	bl	8001800 <__NVIC_EnableIRQ>
}
 8001958:	bf00      	nop
 800195a:	3708      	adds	r7, #8
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}

08001960 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001960:	b480      	push	{r7}
 8001962:	b083      	sub	sp, #12
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800196e:	b2db      	uxtb	r3, r3
 8001970:	2b02      	cmp	r3, #2
 8001972:	d004      	beq.n	800197e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2280      	movs	r2, #128	@ 0x80
 8001978:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800197a:	2301      	movs	r3, #1
 800197c:	e00c      	b.n	8001998 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	2205      	movs	r2, #5
 8001982:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	681a      	ldr	r2, [r3, #0]
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f022 0201 	bic.w	r2, r2, #1
 8001994:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001996:	2300      	movs	r3, #0
}
 8001998:	4618      	mov	r0, r3
 800199a:	370c      	adds	r7, #12
 800199c:	46bd      	mov	sp, r7
 800199e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a2:	4770      	bx	lr

080019a4 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b083      	sub	sp, #12
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80019b2:	b2db      	uxtb	r3, r3
}
 80019b4:	4618      	mov	r0, r3
 80019b6:	370c      	adds	r7, #12
 80019b8:	46bd      	mov	sp, r7
 80019ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019be:	4770      	bx	lr

080019c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b089      	sub	sp, #36	@ 0x24
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
 80019c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80019ca:	2300      	movs	r3, #0
 80019cc:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80019ce:	2300      	movs	r3, #0
 80019d0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80019d2:	2300      	movs	r3, #0
 80019d4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80019d6:	2300      	movs	r3, #0
 80019d8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 80019da:	2300      	movs	r3, #0
 80019dc:	61fb      	str	r3, [r7, #28]
 80019de:	e175      	b.n	8001ccc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80019e0:	2201      	movs	r2, #1
 80019e2:	69fb      	ldr	r3, [r7, #28]
 80019e4:	fa02 f303 	lsl.w	r3, r2, r3
 80019e8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	697a      	ldr	r2, [r7, #20]
 80019f0:	4013      	ands	r3, r2
 80019f2:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 80019f4:	693a      	ldr	r2, [r7, #16]
 80019f6:	697b      	ldr	r3, [r7, #20]
 80019f8:	429a      	cmp	r2, r3
 80019fa:	f040 8164 	bne.w	8001cc6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	f003 0303 	and.w	r3, r3, #3
 8001a06:	2b01      	cmp	r3, #1
 8001a08:	d005      	beq.n	8001a16 <HAL_GPIO_Init+0x56>
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	f003 0303 	and.w	r3, r3, #3
 8001a12:	2b02      	cmp	r3, #2
 8001a14:	d130      	bne.n	8001a78 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	689b      	ldr	r3, [r3, #8]
 8001a1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001a1c:	69fb      	ldr	r3, [r7, #28]
 8001a1e:	005b      	lsls	r3, r3, #1
 8001a20:	2203      	movs	r2, #3
 8001a22:	fa02 f303 	lsl.w	r3, r2, r3
 8001a26:	43db      	mvns	r3, r3
 8001a28:	69ba      	ldr	r2, [r7, #24]
 8001a2a:	4013      	ands	r3, r2
 8001a2c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	68da      	ldr	r2, [r3, #12]
 8001a32:	69fb      	ldr	r3, [r7, #28]
 8001a34:	005b      	lsls	r3, r3, #1
 8001a36:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3a:	69ba      	ldr	r2, [r7, #24]
 8001a3c:	4313      	orrs	r3, r2
 8001a3e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	69ba      	ldr	r2, [r7, #24]
 8001a44:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a4c:	2201      	movs	r2, #1
 8001a4e:	69fb      	ldr	r3, [r7, #28]
 8001a50:	fa02 f303 	lsl.w	r3, r2, r3
 8001a54:	43db      	mvns	r3, r3
 8001a56:	69ba      	ldr	r2, [r7, #24]
 8001a58:	4013      	ands	r3, r2
 8001a5a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	091b      	lsrs	r3, r3, #4
 8001a62:	f003 0201 	and.w	r2, r3, #1
 8001a66:	69fb      	ldr	r3, [r7, #28]
 8001a68:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6c:	69ba      	ldr	r2, [r7, #24]
 8001a6e:	4313      	orrs	r3, r2
 8001a70:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	69ba      	ldr	r2, [r7, #24]
 8001a76:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	f003 0303 	and.w	r3, r3, #3
 8001a80:	2b03      	cmp	r3, #3
 8001a82:	d017      	beq.n	8001ab4 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	68db      	ldr	r3, [r3, #12]
 8001a88:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001a8a:	69fb      	ldr	r3, [r7, #28]
 8001a8c:	005b      	lsls	r3, r3, #1
 8001a8e:	2203      	movs	r2, #3
 8001a90:	fa02 f303 	lsl.w	r3, r2, r3
 8001a94:	43db      	mvns	r3, r3
 8001a96:	69ba      	ldr	r2, [r7, #24]
 8001a98:	4013      	ands	r3, r2
 8001a9a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	689a      	ldr	r2, [r3, #8]
 8001aa0:	69fb      	ldr	r3, [r7, #28]
 8001aa2:	005b      	lsls	r3, r3, #1
 8001aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa8:	69ba      	ldr	r2, [r7, #24]
 8001aaa:	4313      	orrs	r3, r2
 8001aac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	69ba      	ldr	r2, [r7, #24]
 8001ab2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	f003 0303 	and.w	r3, r3, #3
 8001abc:	2b02      	cmp	r3, #2
 8001abe:	d123      	bne.n	8001b08 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001ac0:	69fb      	ldr	r3, [r7, #28]
 8001ac2:	08da      	lsrs	r2, r3, #3
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	3208      	adds	r2, #8
 8001ac8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001acc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001ace:	69fb      	ldr	r3, [r7, #28]
 8001ad0:	f003 0307 	and.w	r3, r3, #7
 8001ad4:	009b      	lsls	r3, r3, #2
 8001ad6:	220f      	movs	r2, #15
 8001ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8001adc:	43db      	mvns	r3, r3
 8001ade:	69ba      	ldr	r2, [r7, #24]
 8001ae0:	4013      	ands	r3, r2
 8001ae2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	691a      	ldr	r2, [r3, #16]
 8001ae8:	69fb      	ldr	r3, [r7, #28]
 8001aea:	f003 0307 	and.w	r3, r3, #7
 8001aee:	009b      	lsls	r3, r3, #2
 8001af0:	fa02 f303 	lsl.w	r3, r2, r3
 8001af4:	69ba      	ldr	r2, [r7, #24]
 8001af6:	4313      	orrs	r3, r2
 8001af8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001afa:	69fb      	ldr	r3, [r7, #28]
 8001afc:	08da      	lsrs	r2, r3, #3
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	3208      	adds	r2, #8
 8001b02:	69b9      	ldr	r1, [r7, #24]
 8001b04:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001b0e:	69fb      	ldr	r3, [r7, #28]
 8001b10:	005b      	lsls	r3, r3, #1
 8001b12:	2203      	movs	r2, #3
 8001b14:	fa02 f303 	lsl.w	r3, r2, r3
 8001b18:	43db      	mvns	r3, r3
 8001b1a:	69ba      	ldr	r2, [r7, #24]
 8001b1c:	4013      	ands	r3, r2
 8001b1e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	f003 0203 	and.w	r2, r3, #3
 8001b28:	69fb      	ldr	r3, [r7, #28]
 8001b2a:	005b      	lsls	r3, r3, #1
 8001b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b30:	69ba      	ldr	r2, [r7, #24]
 8001b32:	4313      	orrs	r3, r2
 8001b34:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	69ba      	ldr	r2, [r7, #24]
 8001b3a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	f000 80be 	beq.w	8001cc6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b4a:	4b66      	ldr	r3, [pc, #408]	@ (8001ce4 <HAL_GPIO_Init+0x324>)
 8001b4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b4e:	4a65      	ldr	r2, [pc, #404]	@ (8001ce4 <HAL_GPIO_Init+0x324>)
 8001b50:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b54:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b56:	4b63      	ldr	r3, [pc, #396]	@ (8001ce4 <HAL_GPIO_Init+0x324>)
 8001b58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b5a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b5e:	60fb      	str	r3, [r7, #12]
 8001b60:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001b62:	4a61      	ldr	r2, [pc, #388]	@ (8001ce8 <HAL_GPIO_Init+0x328>)
 8001b64:	69fb      	ldr	r3, [r7, #28]
 8001b66:	089b      	lsrs	r3, r3, #2
 8001b68:	3302      	adds	r3, #2
 8001b6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001b70:	69fb      	ldr	r3, [r7, #28]
 8001b72:	f003 0303 	and.w	r3, r3, #3
 8001b76:	009b      	lsls	r3, r3, #2
 8001b78:	220f      	movs	r2, #15
 8001b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7e:	43db      	mvns	r3, r3
 8001b80:	69ba      	ldr	r2, [r7, #24]
 8001b82:	4013      	ands	r3, r2
 8001b84:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	4a58      	ldr	r2, [pc, #352]	@ (8001cec <HAL_GPIO_Init+0x32c>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d037      	beq.n	8001bfe <HAL_GPIO_Init+0x23e>
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	4a57      	ldr	r2, [pc, #348]	@ (8001cf0 <HAL_GPIO_Init+0x330>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d031      	beq.n	8001bfa <HAL_GPIO_Init+0x23a>
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	4a56      	ldr	r2, [pc, #344]	@ (8001cf4 <HAL_GPIO_Init+0x334>)
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d02b      	beq.n	8001bf6 <HAL_GPIO_Init+0x236>
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	4a55      	ldr	r2, [pc, #340]	@ (8001cf8 <HAL_GPIO_Init+0x338>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d025      	beq.n	8001bf2 <HAL_GPIO_Init+0x232>
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	4a54      	ldr	r2, [pc, #336]	@ (8001cfc <HAL_GPIO_Init+0x33c>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d01f      	beq.n	8001bee <HAL_GPIO_Init+0x22e>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	4a53      	ldr	r2, [pc, #332]	@ (8001d00 <HAL_GPIO_Init+0x340>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d019      	beq.n	8001bea <HAL_GPIO_Init+0x22a>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	4a52      	ldr	r2, [pc, #328]	@ (8001d04 <HAL_GPIO_Init+0x344>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d013      	beq.n	8001be6 <HAL_GPIO_Init+0x226>
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	4a51      	ldr	r2, [pc, #324]	@ (8001d08 <HAL_GPIO_Init+0x348>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d00d      	beq.n	8001be2 <HAL_GPIO_Init+0x222>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	4a50      	ldr	r2, [pc, #320]	@ (8001d0c <HAL_GPIO_Init+0x34c>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d007      	beq.n	8001bde <HAL_GPIO_Init+0x21e>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	4a4f      	ldr	r2, [pc, #316]	@ (8001d10 <HAL_GPIO_Init+0x350>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d101      	bne.n	8001bda <HAL_GPIO_Init+0x21a>
 8001bd6:	2309      	movs	r3, #9
 8001bd8:	e012      	b.n	8001c00 <HAL_GPIO_Init+0x240>
 8001bda:	230a      	movs	r3, #10
 8001bdc:	e010      	b.n	8001c00 <HAL_GPIO_Init+0x240>
 8001bde:	2308      	movs	r3, #8
 8001be0:	e00e      	b.n	8001c00 <HAL_GPIO_Init+0x240>
 8001be2:	2307      	movs	r3, #7
 8001be4:	e00c      	b.n	8001c00 <HAL_GPIO_Init+0x240>
 8001be6:	2306      	movs	r3, #6
 8001be8:	e00a      	b.n	8001c00 <HAL_GPIO_Init+0x240>
 8001bea:	2305      	movs	r3, #5
 8001bec:	e008      	b.n	8001c00 <HAL_GPIO_Init+0x240>
 8001bee:	2304      	movs	r3, #4
 8001bf0:	e006      	b.n	8001c00 <HAL_GPIO_Init+0x240>
 8001bf2:	2303      	movs	r3, #3
 8001bf4:	e004      	b.n	8001c00 <HAL_GPIO_Init+0x240>
 8001bf6:	2302      	movs	r3, #2
 8001bf8:	e002      	b.n	8001c00 <HAL_GPIO_Init+0x240>
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	e000      	b.n	8001c00 <HAL_GPIO_Init+0x240>
 8001bfe:	2300      	movs	r3, #0
 8001c00:	69fa      	ldr	r2, [r7, #28]
 8001c02:	f002 0203 	and.w	r2, r2, #3
 8001c06:	0092      	lsls	r2, r2, #2
 8001c08:	4093      	lsls	r3, r2
 8001c0a:	69ba      	ldr	r2, [r7, #24]
 8001c0c:	4313      	orrs	r3, r2
 8001c0e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001c10:	4935      	ldr	r1, [pc, #212]	@ (8001ce8 <HAL_GPIO_Init+0x328>)
 8001c12:	69fb      	ldr	r3, [r7, #28]
 8001c14:	089b      	lsrs	r3, r3, #2
 8001c16:	3302      	adds	r3, #2
 8001c18:	69ba      	ldr	r2, [r7, #24]
 8001c1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c1e:	4b3d      	ldr	r3, [pc, #244]	@ (8001d14 <HAL_GPIO_Init+0x354>)
 8001c20:	689b      	ldr	r3, [r3, #8]
 8001c22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c24:	693b      	ldr	r3, [r7, #16]
 8001c26:	43db      	mvns	r3, r3
 8001c28:	69ba      	ldr	r2, [r7, #24]
 8001c2a:	4013      	ands	r3, r2
 8001c2c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d003      	beq.n	8001c42 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001c3a:	69ba      	ldr	r2, [r7, #24]
 8001c3c:	693b      	ldr	r3, [r7, #16]
 8001c3e:	4313      	orrs	r3, r2
 8001c40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c42:	4a34      	ldr	r2, [pc, #208]	@ (8001d14 <HAL_GPIO_Init+0x354>)
 8001c44:	69bb      	ldr	r3, [r7, #24]
 8001c46:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c48:	4b32      	ldr	r3, [pc, #200]	@ (8001d14 <HAL_GPIO_Init+0x354>)
 8001c4a:	68db      	ldr	r3, [r3, #12]
 8001c4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c4e:	693b      	ldr	r3, [r7, #16]
 8001c50:	43db      	mvns	r3, r3
 8001c52:	69ba      	ldr	r2, [r7, #24]
 8001c54:	4013      	ands	r3, r2
 8001c56:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d003      	beq.n	8001c6c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001c64:	69ba      	ldr	r2, [r7, #24]
 8001c66:	693b      	ldr	r3, [r7, #16]
 8001c68:	4313      	orrs	r3, r2
 8001c6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c6c:	4a29      	ldr	r2, [pc, #164]	@ (8001d14 <HAL_GPIO_Init+0x354>)
 8001c6e:	69bb      	ldr	r3, [r7, #24]
 8001c70:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001c72:	4b28      	ldr	r3, [pc, #160]	@ (8001d14 <HAL_GPIO_Init+0x354>)
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c78:	693b      	ldr	r3, [r7, #16]
 8001c7a:	43db      	mvns	r3, r3
 8001c7c:	69ba      	ldr	r2, [r7, #24]
 8001c7e:	4013      	ands	r3, r2
 8001c80:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d003      	beq.n	8001c96 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001c8e:	69ba      	ldr	r2, [r7, #24]
 8001c90:	693b      	ldr	r3, [r7, #16]
 8001c92:	4313      	orrs	r3, r2
 8001c94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c96:	4a1f      	ldr	r2, [pc, #124]	@ (8001d14 <HAL_GPIO_Init+0x354>)
 8001c98:	69bb      	ldr	r3, [r7, #24]
 8001c9a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c9c:	4b1d      	ldr	r3, [pc, #116]	@ (8001d14 <HAL_GPIO_Init+0x354>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ca2:	693b      	ldr	r3, [r7, #16]
 8001ca4:	43db      	mvns	r3, r3
 8001ca6:	69ba      	ldr	r2, [r7, #24]
 8001ca8:	4013      	ands	r3, r2
 8001caa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d003      	beq.n	8001cc0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001cb8:	69ba      	ldr	r2, [r7, #24]
 8001cba:	693b      	ldr	r3, [r7, #16]
 8001cbc:	4313      	orrs	r3, r2
 8001cbe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001cc0:	4a14      	ldr	r2, [pc, #80]	@ (8001d14 <HAL_GPIO_Init+0x354>)
 8001cc2:	69bb      	ldr	r3, [r7, #24]
 8001cc4:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8001cc6:	69fb      	ldr	r3, [r7, #28]
 8001cc8:	3301      	adds	r3, #1
 8001cca:	61fb      	str	r3, [r7, #28]
 8001ccc:	69fb      	ldr	r3, [r7, #28]
 8001cce:	2b0f      	cmp	r3, #15
 8001cd0:	f67f ae86 	bls.w	80019e0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001cd4:	bf00      	nop
 8001cd6:	bf00      	nop
 8001cd8:	3724      	adds	r7, #36	@ 0x24
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce0:	4770      	bx	lr
 8001ce2:	bf00      	nop
 8001ce4:	40023800 	.word	0x40023800
 8001ce8:	40013800 	.word	0x40013800
 8001cec:	40020000 	.word	0x40020000
 8001cf0:	40020400 	.word	0x40020400
 8001cf4:	40020800 	.word	0x40020800
 8001cf8:	40020c00 	.word	0x40020c00
 8001cfc:	40021000 	.word	0x40021000
 8001d00:	40021400 	.word	0x40021400
 8001d04:	40021800 	.word	0x40021800
 8001d08:	40021c00 	.word	0x40021c00
 8001d0c:	40022000 	.word	0x40022000
 8001d10:	40022400 	.word	0x40022400
 8001d14:	40013c00 	.word	0x40013c00

08001d18 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b082      	sub	sp, #8
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d101      	bne.n	8001d2a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001d26:	2301      	movs	r3, #1
 8001d28:	e08b      	b.n	8001e42 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001d30:	b2db      	uxtb	r3, r3
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d106      	bne.n	8001d44 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2200      	movs	r2, #0
 8001d3a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001d3e:	6878      	ldr	r0, [r7, #4]
 8001d40:	f7ff fa96 	bl	8001270 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2224      	movs	r2, #36	@ 0x24
 8001d48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	681a      	ldr	r2, [r3, #0]
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f022 0201 	bic.w	r2, r2, #1
 8001d5a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	685a      	ldr	r2, [r3, #4]
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001d68:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	689a      	ldr	r2, [r3, #8]
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001d78:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	68db      	ldr	r3, [r3, #12]
 8001d7e:	2b01      	cmp	r3, #1
 8001d80:	d107      	bne.n	8001d92 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	689a      	ldr	r2, [r3, #8]
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001d8e:	609a      	str	r2, [r3, #8]
 8001d90:	e006      	b.n	8001da0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	689a      	ldr	r2, [r3, #8]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001d9e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	68db      	ldr	r3, [r3, #12]
 8001da4:	2b02      	cmp	r3, #2
 8001da6:	d108      	bne.n	8001dba <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	685a      	ldr	r2, [r3, #4]
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001db6:	605a      	str	r2, [r3, #4]
 8001db8:	e007      	b.n	8001dca <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	685a      	ldr	r2, [r3, #4]
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001dc8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	6859      	ldr	r1, [r3, #4]
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681a      	ldr	r2, [r3, #0]
 8001dd4:	4b1d      	ldr	r3, [pc, #116]	@ (8001e4c <HAL_I2C_Init+0x134>)
 8001dd6:	430b      	orrs	r3, r1
 8001dd8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	68da      	ldr	r2, [r3, #12]
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001de8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	691a      	ldr	r2, [r3, #16]
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	695b      	ldr	r3, [r3, #20]
 8001df2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	699b      	ldr	r3, [r3, #24]
 8001dfa:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	430a      	orrs	r2, r1
 8001e02:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	69d9      	ldr	r1, [r3, #28]
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6a1a      	ldr	r2, [r3, #32]
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	430a      	orrs	r2, r1
 8001e12:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	681a      	ldr	r2, [r3, #0]
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f042 0201 	orr.w	r2, r2, #1
 8001e22:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2200      	movs	r2, #0
 8001e28:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2220      	movs	r2, #32
 8001e2e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2200      	movs	r2, #0
 8001e36:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001e40:	2300      	movs	r3, #0
}
 8001e42:	4618      	mov	r0, r3
 8001e44:	3708      	adds	r7, #8
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}
 8001e4a:	bf00      	nop
 8001e4c:	02008000 	.word	0x02008000

08001e50 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b088      	sub	sp, #32
 8001e54:	af02      	add	r7, sp, #8
 8001e56:	60f8      	str	r0, [r7, #12]
 8001e58:	607a      	str	r2, [r7, #4]
 8001e5a:	461a      	mov	r2, r3
 8001e5c:	460b      	mov	r3, r1
 8001e5e:	817b      	strh	r3, [r7, #10]
 8001e60:	4613      	mov	r3, r2
 8001e62:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001e6a:	b2db      	uxtb	r3, r3
 8001e6c:	2b20      	cmp	r3, #32
 8001e6e:	f040 80fd 	bne.w	800206c <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001e78:	2b01      	cmp	r3, #1
 8001e7a:	d101      	bne.n	8001e80 <HAL_I2C_Master_Transmit+0x30>
 8001e7c:	2302      	movs	r3, #2
 8001e7e:	e0f6      	b.n	800206e <HAL_I2C_Master_Transmit+0x21e>
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	2201      	movs	r2, #1
 8001e84:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001e88:	f7ff fc7c 	bl	8001784 <HAL_GetTick>
 8001e8c:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001e8e:	693b      	ldr	r3, [r7, #16]
 8001e90:	9300      	str	r3, [sp, #0]
 8001e92:	2319      	movs	r3, #25
 8001e94:	2201      	movs	r2, #1
 8001e96:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001e9a:	68f8      	ldr	r0, [r7, #12]
 8001e9c:	f000 feab 	bl	8002bf6 <I2C_WaitOnFlagUntilTimeout>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d001      	beq.n	8001eaa <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	e0e1      	b.n	800206e <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	2221      	movs	r2, #33	@ 0x21
 8001eae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	2210      	movs	r2, #16
 8001eb6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	687a      	ldr	r2, [r7, #4]
 8001ec4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	893a      	ldrh	r2, [r7, #8]
 8001eca:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	2200      	movs	r2, #0
 8001ed0:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ed6:	b29b      	uxth	r3, r3
 8001ed8:	2bff      	cmp	r3, #255	@ 0xff
 8001eda:	d906      	bls.n	8001eea <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	22ff      	movs	r2, #255	@ 0xff
 8001ee0:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8001ee2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001ee6:	617b      	str	r3, [r7, #20]
 8001ee8:	e007      	b.n	8001efa <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001eee:	b29a      	uxth	r2, r3
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8001ef4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001ef8:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d024      	beq.n	8001f4c <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f06:	781a      	ldrb	r2, [r3, #0]
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f12:	1c5a      	adds	r2, r3, #1
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f1c:	b29b      	uxth	r3, r3
 8001f1e:	3b01      	subs	r3, #1
 8001f20:	b29a      	uxth	r2, r3
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f2a:	3b01      	subs	r3, #1
 8001f2c:	b29a      	uxth	r2, r3
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f36:	b2db      	uxtb	r3, r3
 8001f38:	3301      	adds	r3, #1
 8001f3a:	b2da      	uxtb	r2, r3
 8001f3c:	8979      	ldrh	r1, [r7, #10]
 8001f3e:	4b4e      	ldr	r3, [pc, #312]	@ (8002078 <HAL_I2C_Master_Transmit+0x228>)
 8001f40:	9300      	str	r3, [sp, #0]
 8001f42:	697b      	ldr	r3, [r7, #20]
 8001f44:	68f8      	ldr	r0, [r7, #12]
 8001f46:	f001 f819 	bl	8002f7c <I2C_TransferConfig>
 8001f4a:	e066      	b.n	800201a <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f50:	b2da      	uxtb	r2, r3
 8001f52:	8979      	ldrh	r1, [r7, #10]
 8001f54:	4b48      	ldr	r3, [pc, #288]	@ (8002078 <HAL_I2C_Master_Transmit+0x228>)
 8001f56:	9300      	str	r3, [sp, #0]
 8001f58:	697b      	ldr	r3, [r7, #20]
 8001f5a:	68f8      	ldr	r0, [r7, #12]
 8001f5c:	f001 f80e 	bl	8002f7c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8001f60:	e05b      	b.n	800201a <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f62:	693a      	ldr	r2, [r7, #16]
 8001f64:	6a39      	ldr	r1, [r7, #32]
 8001f66:	68f8      	ldr	r0, [r7, #12]
 8001f68:	f000 fe9e 	bl	8002ca8 <I2C_WaitOnTXISFlagUntilTimeout>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d001      	beq.n	8001f76 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8001f72:	2301      	movs	r3, #1
 8001f74:	e07b      	b.n	800206e <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f7a:	781a      	ldrb	r2, [r3, #0]
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f86:	1c5a      	adds	r2, r3, #1
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f90:	b29b      	uxth	r3, r3
 8001f92:	3b01      	subs	r3, #1
 8001f94:	b29a      	uxth	r2, r3
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f9e:	3b01      	subs	r3, #1
 8001fa0:	b29a      	uxth	r2, r3
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001faa:	b29b      	uxth	r3, r3
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d034      	beq.n	800201a <HAL_I2C_Master_Transmit+0x1ca>
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d130      	bne.n	800201a <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001fb8:	693b      	ldr	r3, [r7, #16]
 8001fba:	9300      	str	r3, [sp, #0]
 8001fbc:	6a3b      	ldr	r3, [r7, #32]
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	2180      	movs	r1, #128	@ 0x80
 8001fc2:	68f8      	ldr	r0, [r7, #12]
 8001fc4:	f000 fe17 	bl	8002bf6 <I2C_WaitOnFlagUntilTimeout>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d001      	beq.n	8001fd2 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	e04d      	b.n	800206e <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001fd6:	b29b      	uxth	r3, r3
 8001fd8:	2bff      	cmp	r3, #255	@ 0xff
 8001fda:	d90e      	bls.n	8001ffa <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	22ff      	movs	r2, #255	@ 0xff
 8001fe0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001fe6:	b2da      	uxtb	r2, r3
 8001fe8:	8979      	ldrh	r1, [r7, #10]
 8001fea:	2300      	movs	r3, #0
 8001fec:	9300      	str	r3, [sp, #0]
 8001fee:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001ff2:	68f8      	ldr	r0, [r7, #12]
 8001ff4:	f000 ffc2 	bl	8002f7c <I2C_TransferConfig>
 8001ff8:	e00f      	b.n	800201a <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ffe:	b29a      	uxth	r2, r3
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002008:	b2da      	uxtb	r2, r3
 800200a:	8979      	ldrh	r1, [r7, #10]
 800200c:	2300      	movs	r3, #0
 800200e:	9300      	str	r3, [sp, #0]
 8002010:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002014:	68f8      	ldr	r0, [r7, #12]
 8002016:	f000 ffb1 	bl	8002f7c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800201e:	b29b      	uxth	r3, r3
 8002020:	2b00      	cmp	r3, #0
 8002022:	d19e      	bne.n	8001f62 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002024:	693a      	ldr	r2, [r7, #16]
 8002026:	6a39      	ldr	r1, [r7, #32]
 8002028:	68f8      	ldr	r0, [r7, #12]
 800202a:	f000 fe84 	bl	8002d36 <I2C_WaitOnSTOPFlagUntilTimeout>
 800202e:	4603      	mov	r3, r0
 8002030:	2b00      	cmp	r3, #0
 8002032:	d001      	beq.n	8002038 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8002034:	2301      	movs	r3, #1
 8002036:	e01a      	b.n	800206e <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	2220      	movs	r2, #32
 800203e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	6859      	ldr	r1, [r3, #4]
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	681a      	ldr	r2, [r3, #0]
 800204a:	4b0c      	ldr	r3, [pc, #48]	@ (800207c <HAL_I2C_Master_Transmit+0x22c>)
 800204c:	400b      	ands	r3, r1
 800204e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	2220      	movs	r2, #32
 8002054:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	2200      	movs	r2, #0
 800205c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	2200      	movs	r2, #0
 8002064:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002068:	2300      	movs	r3, #0
 800206a:	e000      	b.n	800206e <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 800206c:	2302      	movs	r3, #2
  }
}
 800206e:	4618      	mov	r0, r3
 8002070:	3718      	adds	r7, #24
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}
 8002076:	bf00      	nop
 8002078:	80002000 	.word	0x80002000
 800207c:	fe00e800 	.word	0xfe00e800

08002080 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b084      	sub	sp, #16
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	699b      	ldr	r3, [r3, #24]
 800208e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800209c:	2b00      	cmp	r3, #0
 800209e:	d005      	beq.n	80020ac <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80020a4:	68ba      	ldr	r2, [r7, #8]
 80020a6:	68f9      	ldr	r1, [r7, #12]
 80020a8:	6878      	ldr	r0, [r7, #4]
 80020aa:	4798      	blx	r3
  }
}
 80020ac:	bf00      	nop
 80020ae:	3710      	adds	r7, #16
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bd80      	pop	{r7, pc}

080020b4 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b086      	sub	sp, #24
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	699b      	ldr	r3, [r3, #24]
 80020c2:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80020cc:	697b      	ldr	r3, [r7, #20]
 80020ce:	0a1b      	lsrs	r3, r3, #8
 80020d0:	f003 0301 	and.w	r3, r3, #1
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d010      	beq.n	80020fa <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80020d8:	693b      	ldr	r3, [r7, #16]
 80020da:	09db      	lsrs	r3, r3, #7
 80020dc:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d00a      	beq.n	80020fa <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020e8:	f043 0201 	orr.w	r2, r3, #1
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80020f8:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80020fa:	697b      	ldr	r3, [r7, #20]
 80020fc:	0a9b      	lsrs	r3, r3, #10
 80020fe:	f003 0301 	and.w	r3, r3, #1
 8002102:	2b00      	cmp	r3, #0
 8002104:	d010      	beq.n	8002128 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002106:	693b      	ldr	r3, [r7, #16]
 8002108:	09db      	lsrs	r3, r3, #7
 800210a:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800210e:	2b00      	cmp	r3, #0
 8002110:	d00a      	beq.n	8002128 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002116:	f043 0208 	orr.w	r2, r3, #8
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002126:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8002128:	697b      	ldr	r3, [r7, #20]
 800212a:	0a5b      	lsrs	r3, r3, #9
 800212c:	f003 0301 	and.w	r3, r3, #1
 8002130:	2b00      	cmp	r3, #0
 8002132:	d010      	beq.n	8002156 <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002134:	693b      	ldr	r3, [r7, #16]
 8002136:	09db      	lsrs	r3, r3, #7
 8002138:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800213c:	2b00      	cmp	r3, #0
 800213e:	d00a      	beq.n	8002156 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002144:	f043 0202 	orr.w	r2, r3, #2
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002154:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800215a:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	f003 030b 	and.w	r3, r3, #11
 8002162:	2b00      	cmp	r3, #0
 8002164:	d003      	beq.n	800216e <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 8002166:	68f9      	ldr	r1, [r7, #12]
 8002168:	6878      	ldr	r0, [r7, #4]
 800216a:	f000 fbeb 	bl	8002944 <I2C_ITError>
  }
}
 800216e:	bf00      	nop
 8002170:	3718      	adds	r7, #24
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}

08002176 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002176:	b480      	push	{r7}
 8002178:	b083      	sub	sp, #12
 800217a:	af00      	add	r7, sp, #0
 800217c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800217e:	bf00      	nop
 8002180:	370c      	adds	r7, #12
 8002182:	46bd      	mov	sp, r7
 8002184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002188:	4770      	bx	lr

0800218a <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800218a:	b480      	push	{r7}
 800218c:	b083      	sub	sp, #12
 800218e:	af00      	add	r7, sp, #0
 8002190:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002192:	bf00      	nop
 8002194:	370c      	adds	r7, #12
 8002196:	46bd      	mov	sp, r7
 8002198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219c:	4770      	bx	lr

0800219e <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800219e:	b480      	push	{r7}
 80021a0:	b083      	sub	sp, #12
 80021a2:	af00      	add	r7, sp, #0
 80021a4:	6078      	str	r0, [r7, #4]
 80021a6:	460b      	mov	r3, r1
 80021a8:	70fb      	strb	r3, [r7, #3]
 80021aa:	4613      	mov	r3, r2
 80021ac:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80021ae:	bf00      	nop
 80021b0:	370c      	adds	r7, #12
 80021b2:	46bd      	mov	sp, r7
 80021b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b8:	4770      	bx	lr

080021ba <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80021ba:	b480      	push	{r7}
 80021bc:	b083      	sub	sp, #12
 80021be:	af00      	add	r7, sp, #0
 80021c0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80021c2:	bf00      	nop
 80021c4:	370c      	adds	r7, #12
 80021c6:	46bd      	mov	sp, r7
 80021c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021cc:	4770      	bx	lr

080021ce <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80021ce:	b480      	push	{r7}
 80021d0:	b083      	sub	sp, #12
 80021d2:	af00      	add	r7, sp, #0
 80021d4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80021d6:	bf00      	nop
 80021d8:	370c      	adds	r7, #12
 80021da:	46bd      	mov	sp, r7
 80021dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e0:	4770      	bx	lr

080021e2 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80021e2:	b480      	push	{r7}
 80021e4:	b083      	sub	sp, #12
 80021e6:	af00      	add	r7, sp, #0
 80021e8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80021ea:	bf00      	nop
 80021ec:	370c      	adds	r7, #12
 80021ee:	46bd      	mov	sp, r7
 80021f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f4:	4770      	bx	lr

080021f6 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 80021f6:	b580      	push	{r7, lr}
 80021f8:	b086      	sub	sp, #24
 80021fa:	af00      	add	r7, sp, #0
 80021fc:	60f8      	str	r0, [r7, #12]
 80021fe:	60b9      	str	r1, [r7, #8]
 8002200:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002206:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8002208:	68bb      	ldr	r3, [r7, #8]
 800220a:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002212:	2b01      	cmp	r3, #1
 8002214:	d101      	bne.n	800221a <I2C_Slave_ISR_IT+0x24>
 8002216:	2302      	movs	r3, #2
 8002218:	e0ed      	b.n	80023f6 <I2C_Slave_ISR_IT+0x200>
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	2201      	movs	r2, #1
 800221e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002222:	693b      	ldr	r3, [r7, #16]
 8002224:	095b      	lsrs	r3, r3, #5
 8002226:	f003 0301 	and.w	r3, r3, #1
 800222a:	2b00      	cmp	r3, #0
 800222c:	d00a      	beq.n	8002244 <I2C_Slave_ISR_IT+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	095b      	lsrs	r3, r3, #5
 8002232:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002236:	2b00      	cmp	r3, #0
 8002238:	d004      	beq.n	8002244 <I2C_Slave_ISR_IT+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800223a:	6939      	ldr	r1, [r7, #16]
 800223c:	68f8      	ldr	r0, [r7, #12]
 800223e:	f000 f9c1 	bl	80025c4 <I2C_ITSlaveCplt>
 8002242:	e0d3      	b.n	80023ec <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002244:	693b      	ldr	r3, [r7, #16]
 8002246:	091b      	lsrs	r3, r3, #4
 8002248:	f003 0301 	and.w	r3, r3, #1
 800224c:	2b00      	cmp	r3, #0
 800224e:	d04d      	beq.n	80022ec <I2C_Slave_ISR_IT+0xf6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	091b      	lsrs	r3, r3, #4
 8002254:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002258:	2b00      	cmp	r3, #0
 800225a:	d047      	beq.n	80022ec <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002260:	b29b      	uxth	r3, r3
 8002262:	2b00      	cmp	r3, #0
 8002264:	d128      	bne.n	80022b8 <I2C_Slave_ISR_IT+0xc2>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800226c:	b2db      	uxtb	r3, r3
 800226e:	2b28      	cmp	r3, #40	@ 0x28
 8002270:	d108      	bne.n	8002284 <I2C_Slave_ISR_IT+0x8e>
 8002272:	697b      	ldr	r3, [r7, #20]
 8002274:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002278:	d104      	bne.n	8002284 <I2C_Slave_ISR_IT+0x8e>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800227a:	6939      	ldr	r1, [r7, #16]
 800227c:	68f8      	ldr	r0, [r7, #12]
 800227e:	f000 fb0b 	bl	8002898 <I2C_ITListenCplt>
 8002282:	e032      	b.n	80022ea <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800228a:	b2db      	uxtb	r3, r3
 800228c:	2b29      	cmp	r3, #41	@ 0x29
 800228e:	d10e      	bne.n	80022ae <I2C_Slave_ISR_IT+0xb8>
 8002290:	697b      	ldr	r3, [r7, #20]
 8002292:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002296:	d00a      	beq.n	80022ae <I2C_Slave_ISR_IT+0xb8>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	2210      	movs	r2, #16
 800229e:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80022a0:	68f8      	ldr	r0, [r7, #12]
 80022a2:	f000 fc66 	bl	8002b72 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80022a6:	68f8      	ldr	r0, [r7, #12]
 80022a8:	f000 f92d 	bl	8002506 <I2C_ITSlaveSeqCplt>
 80022ac:	e01d      	b.n	80022ea <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	2210      	movs	r2, #16
 80022b4:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80022b6:	e096      	b.n	80023e6 <I2C_Slave_ISR_IT+0x1f0>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	2210      	movs	r2, #16
 80022be:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022c4:	f043 0204 	orr.w	r2, r3, #4
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80022cc:	697b      	ldr	r3, [r7, #20]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d004      	beq.n	80022dc <I2C_Slave_ISR_IT+0xe6>
 80022d2:	697b      	ldr	r3, [r7, #20]
 80022d4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80022d8:	f040 8085 	bne.w	80023e6 <I2C_Slave_ISR_IT+0x1f0>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022e0:	4619      	mov	r1, r3
 80022e2:	68f8      	ldr	r0, [r7, #12]
 80022e4:	f000 fb2e 	bl	8002944 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80022e8:	e07d      	b.n	80023e6 <I2C_Slave_ISR_IT+0x1f0>
 80022ea:	e07c      	b.n	80023e6 <I2C_Slave_ISR_IT+0x1f0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80022ec:	693b      	ldr	r3, [r7, #16]
 80022ee:	089b      	lsrs	r3, r3, #2
 80022f0:	f003 0301 	and.w	r3, r3, #1
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d030      	beq.n	800235a <I2C_Slave_ISR_IT+0x164>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	089b      	lsrs	r3, r3, #2
 80022fc:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002300:	2b00      	cmp	r3, #0
 8002302:	d02a      	beq.n	800235a <I2C_Slave_ISR_IT+0x164>
  {
    if (hi2c->XferCount > 0U)
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002308:	b29b      	uxth	r3, r3
 800230a:	2b00      	cmp	r3, #0
 800230c:	d018      	beq.n	8002340 <I2C_Slave_ISR_IT+0x14a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002318:	b2d2      	uxtb	r2, r2
 800231a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002320:	1c5a      	adds	r2, r3, #1
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800232a:	3b01      	subs	r3, #1
 800232c:	b29a      	uxth	r2, r3
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002336:	b29b      	uxth	r3, r3
 8002338:	3b01      	subs	r3, #1
 800233a:	b29a      	uxth	r2, r3
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002344:	b29b      	uxth	r3, r3
 8002346:	2b00      	cmp	r3, #0
 8002348:	d14f      	bne.n	80023ea <I2C_Slave_ISR_IT+0x1f4>
 800234a:	697b      	ldr	r3, [r7, #20]
 800234c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002350:	d04b      	beq.n	80023ea <I2C_Slave_ISR_IT+0x1f4>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8002352:	68f8      	ldr	r0, [r7, #12]
 8002354:	f000 f8d7 	bl	8002506 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8002358:	e047      	b.n	80023ea <I2C_Slave_ISR_IT+0x1f4>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800235a:	693b      	ldr	r3, [r7, #16]
 800235c:	08db      	lsrs	r3, r3, #3
 800235e:	f003 0301 	and.w	r3, r3, #1
 8002362:	2b00      	cmp	r3, #0
 8002364:	d00a      	beq.n	800237c <I2C_Slave_ISR_IT+0x186>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	08db      	lsrs	r3, r3, #3
 800236a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800236e:	2b00      	cmp	r3, #0
 8002370:	d004      	beq.n	800237c <I2C_Slave_ISR_IT+0x186>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8002372:	6939      	ldr	r1, [r7, #16]
 8002374:	68f8      	ldr	r0, [r7, #12]
 8002376:	f000 f842 	bl	80023fe <I2C_ITAddrCplt>
 800237a:	e037      	b.n	80023ec <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800237c:	693b      	ldr	r3, [r7, #16]
 800237e:	085b      	lsrs	r3, r3, #1
 8002380:	f003 0301 	and.w	r3, r3, #1
 8002384:	2b00      	cmp	r3, #0
 8002386:	d031      	beq.n	80023ec <I2C_Slave_ISR_IT+0x1f6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	085b      	lsrs	r3, r3, #1
 800238c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002390:	2b00      	cmp	r3, #0
 8002392:	d02b      	beq.n	80023ec <I2C_Slave_ISR_IT+0x1f6>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002398:	b29b      	uxth	r3, r3
 800239a:	2b00      	cmp	r3, #0
 800239c:	d018      	beq.n	80023d0 <I2C_Slave_ISR_IT+0x1da>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023a2:	781a      	ldrb	r2, [r3, #0]
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023ae:	1c5a      	adds	r2, r3, #1
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023b8:	b29b      	uxth	r3, r3
 80023ba:	3b01      	subs	r3, #1
 80023bc:	b29a      	uxth	r2, r3
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023c6:	3b01      	subs	r3, #1
 80023c8:	b29a      	uxth	r2, r3
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	851a      	strh	r2, [r3, #40]	@ 0x28
 80023ce:	e00d      	b.n	80023ec <I2C_Slave_ISR_IT+0x1f6>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80023d0:	697b      	ldr	r3, [r7, #20]
 80023d2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80023d6:	d002      	beq.n	80023de <I2C_Slave_ISR_IT+0x1e8>
 80023d8:	697b      	ldr	r3, [r7, #20]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d106      	bne.n	80023ec <I2C_Slave_ISR_IT+0x1f6>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80023de:	68f8      	ldr	r0, [r7, #12]
 80023e0:	f000 f891 	bl	8002506 <I2C_ITSlaveSeqCplt>
 80023e4:	e002      	b.n	80023ec <I2C_Slave_ISR_IT+0x1f6>
    if (hi2c->XferCount == 0U)
 80023e6:	bf00      	nop
 80023e8:	e000      	b.n	80023ec <I2C_Slave_ISR_IT+0x1f6>
    if ((hi2c->XferCount == 0U) && \
 80023ea:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	2200      	movs	r2, #0
 80023f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80023f4:	2300      	movs	r3, #0
}
 80023f6:	4618      	mov	r0, r3
 80023f8:	3718      	adds	r7, #24
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}

080023fe <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80023fe:	b580      	push	{r7, lr}
 8002400:	b084      	sub	sp, #16
 8002402:	af00      	add	r7, sp, #0
 8002404:	6078      	str	r0, [r7, #4]
 8002406:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800240e:	b2db      	uxtb	r3, r3
 8002410:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002414:	2b28      	cmp	r3, #40	@ 0x28
 8002416:	d16a      	bne.n	80024ee <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	699b      	ldr	r3, [r3, #24]
 800241e:	0c1b      	lsrs	r3, r3, #16
 8002420:	b2db      	uxtb	r3, r3
 8002422:	f003 0301 	and.w	r3, r3, #1
 8002426:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	699b      	ldr	r3, [r3, #24]
 800242e:	0c1b      	lsrs	r3, r3, #16
 8002430:	b29b      	uxth	r3, r3
 8002432:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8002436:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	689b      	ldr	r3, [r3, #8]
 800243e:	b29b      	uxth	r3, r3
 8002440:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002444:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	68db      	ldr	r3, [r3, #12]
 800244c:	b29b      	uxth	r3, r3
 800244e:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8002452:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	68db      	ldr	r3, [r3, #12]
 8002458:	2b02      	cmp	r3, #2
 800245a:	d138      	bne.n	80024ce <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800245c:	897b      	ldrh	r3, [r7, #10]
 800245e:	09db      	lsrs	r3, r3, #7
 8002460:	b29a      	uxth	r2, r3
 8002462:	89bb      	ldrh	r3, [r7, #12]
 8002464:	4053      	eors	r3, r2
 8002466:	b29b      	uxth	r3, r3
 8002468:	f003 0306 	and.w	r3, r3, #6
 800246c:	2b00      	cmp	r3, #0
 800246e:	d11c      	bne.n	80024aa <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8002470:	897b      	ldrh	r3, [r7, #10]
 8002472:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002478:	1c5a      	adds	r2, r3, #1
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002482:	2b02      	cmp	r3, #2
 8002484:	d13b      	bne.n	80024fe <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2200      	movs	r2, #0
 800248a:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	2208      	movs	r2, #8
 8002492:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2200      	movs	r2, #0
 8002498:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800249c:	89ba      	ldrh	r2, [r7, #12]
 800249e:	7bfb      	ldrb	r3, [r7, #15]
 80024a0:	4619      	mov	r1, r3
 80024a2:	6878      	ldr	r0, [r7, #4]
 80024a4:	f7ff fe7b 	bl	800219e <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80024a8:	e029      	b.n	80024fe <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 80024aa:	893b      	ldrh	r3, [r7, #8]
 80024ac:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80024ae:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80024b2:	6878      	ldr	r0, [r7, #4]
 80024b4:	f000 fd94 	bl	8002fe0 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2200      	movs	r2, #0
 80024bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80024c0:	89ba      	ldrh	r2, [r7, #12]
 80024c2:	7bfb      	ldrb	r3, [r7, #15]
 80024c4:	4619      	mov	r1, r3
 80024c6:	6878      	ldr	r0, [r7, #4]
 80024c8:	f7ff fe69 	bl	800219e <HAL_I2C_AddrCallback>
}
 80024cc:	e017      	b.n	80024fe <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80024ce:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80024d2:	6878      	ldr	r0, [r7, #4]
 80024d4:	f000 fd84 	bl	8002fe0 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2200      	movs	r2, #0
 80024dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80024e0:	89ba      	ldrh	r2, [r7, #12]
 80024e2:	7bfb      	ldrb	r3, [r7, #15]
 80024e4:	4619      	mov	r1, r3
 80024e6:	6878      	ldr	r0, [r7, #4]
 80024e8:	f7ff fe59 	bl	800219e <HAL_I2C_AddrCallback>
}
 80024ec:	e007      	b.n	80024fe <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	2208      	movs	r2, #8
 80024f4:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2200      	movs	r2, #0
 80024fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 80024fe:	bf00      	nop
 8002500:	3710      	adds	r7, #16
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}

08002506 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8002506:	b580      	push	{r7, lr}
 8002508:	b084      	sub	sp, #16
 800250a:	af00      	add	r7, sp, #0
 800250c:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2200      	movs	r2, #0
 800251a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	0b9b      	lsrs	r3, r3, #14
 8002522:	f003 0301 	and.w	r3, r3, #1
 8002526:	2b00      	cmp	r3, #0
 8002528:	d008      	beq.n	800253c <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	681a      	ldr	r2, [r3, #0]
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002538:	601a      	str	r2, [r3, #0]
 800253a:	e00d      	b.n	8002558 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	0bdb      	lsrs	r3, r3, #15
 8002540:	f003 0301 	and.w	r3, r3, #1
 8002544:	2b00      	cmp	r3, #0
 8002546:	d007      	beq.n	8002558 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	681a      	ldr	r2, [r3, #0]
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002556:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800255e:	b2db      	uxtb	r3, r3
 8002560:	2b29      	cmp	r3, #41	@ 0x29
 8002562:	d112      	bne.n	800258a <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2228      	movs	r2, #40	@ 0x28
 8002568:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2221      	movs	r2, #33	@ 0x21
 8002570:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002572:	2101      	movs	r1, #1
 8002574:	6878      	ldr	r0, [r7, #4]
 8002576:	f000 fd33 	bl	8002fe0 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2200      	movs	r2, #0
 800257e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002582:	6878      	ldr	r0, [r7, #4]
 8002584:	f7ff fdf7 	bl	8002176 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8002588:	e017      	b.n	80025ba <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002590:	b2db      	uxtb	r3, r3
 8002592:	2b2a      	cmp	r3, #42	@ 0x2a
 8002594:	d111      	bne.n	80025ba <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2228      	movs	r2, #40	@ 0x28
 800259a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2222      	movs	r2, #34	@ 0x22
 80025a2:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80025a4:	2102      	movs	r1, #2
 80025a6:	6878      	ldr	r0, [r7, #4]
 80025a8:	f000 fd1a 	bl	8002fe0 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2200      	movs	r2, #0
 80025b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80025b4:	6878      	ldr	r0, [r7, #4]
 80025b6:	f7ff fde8 	bl	800218a <HAL_I2C_SlaveRxCpltCallback>
}
 80025ba:	bf00      	nop
 80025bc:	3710      	adds	r7, #16
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}
	...

080025c4 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b086      	sub	sp, #24
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
 80025cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025de:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80025e6:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	2220      	movs	r2, #32
 80025ee:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80025f0:	7afb      	ldrb	r3, [r7, #11]
 80025f2:	2b21      	cmp	r3, #33	@ 0x21
 80025f4:	d002      	beq.n	80025fc <I2C_ITSlaveCplt+0x38>
 80025f6:	7afb      	ldrb	r3, [r7, #11]
 80025f8:	2b29      	cmp	r3, #41	@ 0x29
 80025fa:	d108      	bne.n	800260e <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80025fc:	f248 0101 	movw	r1, #32769	@ 0x8001
 8002600:	6878      	ldr	r0, [r7, #4]
 8002602:	f000 fced 	bl	8002fe0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2221      	movs	r2, #33	@ 0x21
 800260a:	631a      	str	r2, [r3, #48]	@ 0x30
 800260c:	e019      	b.n	8002642 <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800260e:	7afb      	ldrb	r3, [r7, #11]
 8002610:	2b22      	cmp	r3, #34	@ 0x22
 8002612:	d002      	beq.n	800261a <I2C_ITSlaveCplt+0x56>
 8002614:	7afb      	ldrb	r3, [r7, #11]
 8002616:	2b2a      	cmp	r3, #42	@ 0x2a
 8002618:	d108      	bne.n	800262c <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800261a:	f248 0102 	movw	r1, #32770	@ 0x8002
 800261e:	6878      	ldr	r0, [r7, #4]
 8002620:	f000 fcde 	bl	8002fe0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2222      	movs	r2, #34	@ 0x22
 8002628:	631a      	str	r2, [r3, #48]	@ 0x30
 800262a:	e00a      	b.n	8002642 <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 800262c:	7afb      	ldrb	r3, [r7, #11]
 800262e:	2b28      	cmp	r3, #40	@ 0x28
 8002630:	d107      	bne.n	8002642 <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8002632:	f248 0103 	movw	r1, #32771	@ 0x8003
 8002636:	6878      	ldr	r0, [r7, #4]
 8002638:	f000 fcd2 	bl	8002fe0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2200      	movs	r2, #0
 8002640:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	685a      	ldr	r2, [r3, #4]
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002650:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	6859      	ldr	r1, [r3, #4]
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681a      	ldr	r2, [r3, #0]
 800265c:	4b8c      	ldr	r3, [pc, #560]	@ (8002890 <I2C_ITSlaveCplt+0x2cc>)
 800265e:	400b      	ands	r3, r1
 8002660:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8002662:	6878      	ldr	r0, [r7, #4]
 8002664:	f000 fa85 	bl	8002b72 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8002668:	693b      	ldr	r3, [r7, #16]
 800266a:	0b9b      	lsrs	r3, r3, #14
 800266c:	f003 0301 	and.w	r3, r3, #1
 8002670:	2b00      	cmp	r3, #0
 8002672:	d013      	beq.n	800269c <I2C_ITSlaveCplt+0xd8>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	681a      	ldr	r2, [r3, #0]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002682:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002688:	2b00      	cmp	r3, #0
 800268a:	d020      	beq.n	80026ce <I2C_ITSlaveCplt+0x10a>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	b29a      	uxth	r2, r3
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800269a:	e018      	b.n	80026ce <I2C_ITSlaveCplt+0x10a>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800269c:	693b      	ldr	r3, [r7, #16]
 800269e:	0bdb      	lsrs	r3, r3, #15
 80026a0:	f003 0301 	and.w	r3, r3, #1
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d012      	beq.n	80026ce <I2C_ITSlaveCplt+0x10a>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	681a      	ldr	r2, [r3, #0]
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80026b6:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d006      	beq.n	80026ce <I2C_ITSlaveCplt+0x10a>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	b29a      	uxth	r2, r3
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80026ce:	697b      	ldr	r3, [r7, #20]
 80026d0:	089b      	lsrs	r3, r3, #2
 80026d2:	f003 0301 	and.w	r3, r3, #1
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d020      	beq.n	800271c <I2C_ITSlaveCplt+0x158>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80026da:	697b      	ldr	r3, [r7, #20]
 80026dc:	f023 0304 	bic.w	r3, r3, #4
 80026e0:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026ec:	b2d2      	uxtb	r2, r2
 80026ee:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026f4:	1c5a      	adds	r2, r3, #1
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	625a      	str	r2, [r3, #36]	@ 0x24

    if (hi2c->XferSize > 0U)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d00c      	beq.n	800271c <I2C_ITSlaveCplt+0x158>
    {
      hi2c->XferSize--;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002706:	3b01      	subs	r3, #1
 8002708:	b29a      	uxth	r2, r3
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002712:	b29b      	uxth	r3, r3
 8002714:	3b01      	subs	r3, #1
 8002716:	b29a      	uxth	r2, r3
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002720:	b29b      	uxth	r3, r3
 8002722:	2b00      	cmp	r3, #0
 8002724:	d005      	beq.n	8002732 <I2C_ITSlaveCplt+0x16e>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800272a:	f043 0204 	orr.w	r2, r3, #4
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002732:	697b      	ldr	r3, [r7, #20]
 8002734:	091b      	lsrs	r3, r3, #4
 8002736:	f003 0301 	and.w	r3, r3, #1
 800273a:	2b00      	cmp	r3, #0
 800273c:	d04a      	beq.n	80027d4 <I2C_ITSlaveCplt+0x210>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 800273e:	693b      	ldr	r3, [r7, #16]
 8002740:	091b      	lsrs	r3, r3, #4
 8002742:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002746:	2b00      	cmp	r3, #0
 8002748:	d044      	beq.n	80027d4 <I2C_ITSlaveCplt+0x210>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800274e:	b29b      	uxth	r3, r3
 8002750:	2b00      	cmp	r3, #0
 8002752:	d128      	bne.n	80027a6 <I2C_ITSlaveCplt+0x1e2>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800275a:	b2db      	uxtb	r3, r3
 800275c:	2b28      	cmp	r3, #40	@ 0x28
 800275e:	d108      	bne.n	8002772 <I2C_ITSlaveCplt+0x1ae>
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002766:	d104      	bne.n	8002772 <I2C_ITSlaveCplt+0x1ae>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8002768:	6979      	ldr	r1, [r7, #20]
 800276a:	6878      	ldr	r0, [r7, #4]
 800276c:	f000 f894 	bl	8002898 <I2C_ITListenCplt>
 8002770:	e030      	b.n	80027d4 <I2C_ITSlaveCplt+0x210>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002778:	b2db      	uxtb	r3, r3
 800277a:	2b29      	cmp	r3, #41	@ 0x29
 800277c:	d10e      	bne.n	800279c <I2C_ITSlaveCplt+0x1d8>
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002784:	d00a      	beq.n	800279c <I2C_ITSlaveCplt+0x1d8>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	2210      	movs	r2, #16
 800278c:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800278e:	6878      	ldr	r0, [r7, #4]
 8002790:	f000 f9ef 	bl	8002b72 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002794:	6878      	ldr	r0, [r7, #4]
 8002796:	f7ff feb6 	bl	8002506 <I2C_ITSlaveSeqCplt>
 800279a:	e01b      	b.n	80027d4 <I2C_ITSlaveCplt+0x210>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	2210      	movs	r2, #16
 80027a2:	61da      	str	r2, [r3, #28]
 80027a4:	e016      	b.n	80027d4 <I2C_ITSlaveCplt+0x210>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	2210      	movs	r2, #16
 80027ac:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027b2:	f043 0204 	orr.w	r2, r3, #4
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d003      	beq.n	80027c8 <I2C_ITSlaveCplt+0x204>
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80027c6:	d105      	bne.n	80027d4 <I2C_ITSlaveCplt+0x210>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027cc:	4619      	mov	r1, r3
 80027ce:	6878      	ldr	r0, [r7, #4]
 80027d0:	f000 f8b8 	bl	8002944 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2200      	movs	r2, #0
 80027d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2200      	movs	r2, #0
 80027e0:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d010      	beq.n	800280c <I2C_ITSlaveCplt+0x248>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027ee:	4619      	mov	r1, r3
 80027f0:	6878      	ldr	r0, [r7, #4]
 80027f2:	f000 f8a7 	bl	8002944 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80027fc:	b2db      	uxtb	r3, r3
 80027fe:	2b28      	cmp	r3, #40	@ 0x28
 8002800:	d141      	bne.n	8002886 <I2C_ITSlaveCplt+0x2c2>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8002802:	6979      	ldr	r1, [r7, #20]
 8002804:	6878      	ldr	r0, [r7, #4]
 8002806:	f000 f847 	bl	8002898 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800280a:	e03c      	b.n	8002886 <I2C_ITSlaveCplt+0x2c2>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002810:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002814:	d014      	beq.n	8002840 <I2C_ITSlaveCplt+0x27c>
    I2C_ITSlaveSeqCplt(hi2c);
 8002816:	6878      	ldr	r0, [r7, #4]
 8002818:	f7ff fe75 	bl	8002506 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	4a1d      	ldr	r2, [pc, #116]	@ (8002894 <I2C_ITSlaveCplt+0x2d0>)
 8002820:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2220      	movs	r2, #32
 8002826:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2200      	movs	r2, #0
 800282e:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2200      	movs	r2, #0
 8002834:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8002838:	6878      	ldr	r0, [r7, #4]
 800283a:	f7ff fcbe 	bl	80021ba <HAL_I2C_ListenCpltCallback>
}
 800283e:	e022      	b.n	8002886 <I2C_ITSlaveCplt+0x2c2>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002846:	b2db      	uxtb	r3, r3
 8002848:	2b22      	cmp	r3, #34	@ 0x22
 800284a:	d10e      	bne.n	800286a <I2C_ITSlaveCplt+0x2a6>
    hi2c->State = HAL_I2C_STATE_READY;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2220      	movs	r2, #32
 8002850:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2200      	movs	r2, #0
 8002858:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2200      	movs	r2, #0
 800285e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002862:	6878      	ldr	r0, [r7, #4]
 8002864:	f7ff fc91 	bl	800218a <HAL_I2C_SlaveRxCpltCallback>
}
 8002868:	e00d      	b.n	8002886 <I2C_ITSlaveCplt+0x2c2>
    hi2c->State = HAL_I2C_STATE_READY;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2220      	movs	r2, #32
 800286e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2200      	movs	r2, #0
 8002876:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2200      	movs	r2, #0
 800287c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002880:	6878      	ldr	r0, [r7, #4]
 8002882:	f7ff fc78 	bl	8002176 <HAL_I2C_SlaveTxCpltCallback>
}
 8002886:	bf00      	nop
 8002888:	3718      	adds	r7, #24
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}
 800288e:	bf00      	nop
 8002890:	fe00e800 	.word	0xfe00e800
 8002894:	ffff0000 	.word	0xffff0000

08002898 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b082      	sub	sp, #8
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
 80028a0:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	4a26      	ldr	r2, [pc, #152]	@ (8002940 <I2C_ITListenCplt+0xa8>)
 80028a6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2200      	movs	r2, #0
 80028ac:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2220      	movs	r2, #32
 80028b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2200      	movs	r2, #0
 80028ba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2200      	movs	r2, #0
 80028c2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	089b      	lsrs	r3, r3, #2
 80028c8:	f003 0301 	and.w	r3, r3, #1
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d022      	beq.n	8002916 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028da:	b2d2      	uxtb	r2, r2
 80028dc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028e2:	1c5a      	adds	r2, r3, #1
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	625a      	str	r2, [r3, #36]	@ 0x24

    if (hi2c->XferSize > 0U)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d012      	beq.n	8002916 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028f4:	3b01      	subs	r3, #1
 80028f6:	b29a      	uxth	r2, r3
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002900:	b29b      	uxth	r3, r3
 8002902:	3b01      	subs	r3, #1
 8002904:	b29a      	uxth	r2, r3
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800290e:	f043 0204 	orr.w	r2, r3, #4
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002916:	f248 0103 	movw	r1, #32771	@ 0x8003
 800291a:	6878      	ldr	r0, [r7, #4]
 800291c:	f000 fb60 	bl	8002fe0 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	2210      	movs	r2, #16
 8002926:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2200      	movs	r2, #0
 800292c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8002930:	6878      	ldr	r0, [r7, #4]
 8002932:	f7ff fc42 	bl	80021ba <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8002936:	bf00      	nop
 8002938:	3708      	adds	r7, #8
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}
 800293e:	bf00      	nop
 8002940:	ffff0000 	.word	0xffff0000

08002944 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b084      	sub	sp, #16
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
 800294c:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002954:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2200      	movs	r2, #0
 800295a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	4a6d      	ldr	r2, [pc, #436]	@ (8002b18 <I2C_ITError+0x1d4>)
 8002962:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2200      	movs	r2, #0
 8002968:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	431a      	orrs	r2, r3
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8002976:	7bfb      	ldrb	r3, [r7, #15]
 8002978:	2b28      	cmp	r3, #40	@ 0x28
 800297a:	d005      	beq.n	8002988 <I2C_ITError+0x44>
 800297c:	7bfb      	ldrb	r3, [r7, #15]
 800297e:	2b29      	cmp	r3, #41	@ 0x29
 8002980:	d002      	beq.n	8002988 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8002982:	7bfb      	ldrb	r3, [r7, #15]
 8002984:	2b2a      	cmp	r3, #42	@ 0x2a
 8002986:	d10b      	bne.n	80029a0 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002988:	2103      	movs	r1, #3
 800298a:	6878      	ldr	r0, [r7, #4]
 800298c:	f000 fb28 	bl	8002fe0 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2228      	movs	r2, #40	@ 0x28
 8002994:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	4a60      	ldr	r2, [pc, #384]	@ (8002b1c <I2C_ITError+0x1d8>)
 800299c:	635a      	str	r2, [r3, #52]	@ 0x34
 800299e:	e030      	b.n	8002a02 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80029a0:	f248 0103 	movw	r1, #32771	@ 0x8003
 80029a4:	6878      	ldr	r0, [r7, #4]
 80029a6:	f000 fb1b 	bl	8002fe0 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80029aa:	6878      	ldr	r0, [r7, #4]
 80029ac:	f000 f8e1 	bl	8002b72 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80029b6:	b2db      	uxtb	r3, r3
 80029b8:	2b60      	cmp	r3, #96	@ 0x60
 80029ba:	d01f      	beq.n	80029fc <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2220      	movs	r2, #32
 80029c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	699b      	ldr	r3, [r3, #24]
 80029ca:	f003 0320 	and.w	r3, r3, #32
 80029ce:	2b20      	cmp	r3, #32
 80029d0:	d114      	bne.n	80029fc <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	699b      	ldr	r3, [r3, #24]
 80029d8:	f003 0310 	and.w	r3, r3, #16
 80029dc:	2b10      	cmp	r3, #16
 80029de:	d109      	bne.n	80029f4 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	2210      	movs	r2, #16
 80029e6:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029ec:	f043 0204 	orr.w	r2, r3, #4
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	2220      	movs	r2, #32
 80029fa:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2200      	movs	r2, #0
 8002a00:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a06:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d039      	beq.n	8002a84 <I2C_ITError+0x140>
 8002a10:	68bb      	ldr	r3, [r7, #8]
 8002a12:	2b11      	cmp	r3, #17
 8002a14:	d002      	beq.n	8002a1c <I2C_ITError+0xd8>
 8002a16:	68bb      	ldr	r3, [r7, #8]
 8002a18:	2b21      	cmp	r3, #33	@ 0x21
 8002a1a:	d133      	bne.n	8002a84 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002a26:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002a2a:	d107      	bne.n	8002a3c <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	681a      	ldr	r2, [r3, #0]
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002a3a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a40:	4618      	mov	r0, r3
 8002a42:	f7fe ffaf 	bl	80019a4 <HAL_DMA_GetState>
 8002a46:	4603      	mov	r3, r0
 8002a48:	2b01      	cmp	r3, #1
 8002a4a:	d017      	beq.n	8002a7c <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a50:	4a33      	ldr	r2, [pc, #204]	@ (8002b20 <I2C_ITError+0x1dc>)
 8002a52:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2200      	movs	r2, #0
 8002a58:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a60:	4618      	mov	r0, r3
 8002a62:	f7fe ff7d 	bl	8001960 <HAL_DMA_Abort_IT>
 8002a66:	4603      	mov	r3, r0
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d04d      	beq.n	8002b08 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a70:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a72:	687a      	ldr	r2, [r7, #4]
 8002a74:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002a76:	4610      	mov	r0, r2
 8002a78:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002a7a:	e045      	b.n	8002b08 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8002a7c:	6878      	ldr	r0, [r7, #4]
 8002a7e:	f000 f851 	bl	8002b24 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002a82:	e041      	b.n	8002b08 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d039      	beq.n	8002b00 <I2C_ITError+0x1bc>
 8002a8c:	68bb      	ldr	r3, [r7, #8]
 8002a8e:	2b12      	cmp	r3, #18
 8002a90:	d002      	beq.n	8002a98 <I2C_ITError+0x154>
 8002a92:	68bb      	ldr	r3, [r7, #8]
 8002a94:	2b22      	cmp	r3, #34	@ 0x22
 8002a96:	d133      	bne.n	8002b00 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002aa2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002aa6:	d107      	bne.n	8002ab8 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	681a      	ldr	r2, [r3, #0]
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002ab6:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002abc:	4618      	mov	r0, r3
 8002abe:	f7fe ff71 	bl	80019a4 <HAL_DMA_GetState>
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	2b01      	cmp	r3, #1
 8002ac6:	d017      	beq.n	8002af8 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002acc:	4a14      	ldr	r2, [pc, #80]	@ (8002b20 <I2C_ITError+0x1dc>)
 8002ace:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002adc:	4618      	mov	r0, r3
 8002ade:	f7fe ff3f 	bl	8001960 <HAL_DMA_Abort_IT>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d011      	beq.n	8002b0c <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002aec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002aee:	687a      	ldr	r2, [r7, #4]
 8002af0:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002af2:	4610      	mov	r0, r2
 8002af4:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002af6:	e009      	b.n	8002b0c <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8002af8:	6878      	ldr	r0, [r7, #4]
 8002afa:	f000 f813 	bl	8002b24 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002afe:	e005      	b.n	8002b0c <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8002b00:	6878      	ldr	r0, [r7, #4]
 8002b02:	f000 f80f 	bl	8002b24 <I2C_TreatErrorCallback>
  }
}
 8002b06:	e002      	b.n	8002b0e <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002b08:	bf00      	nop
 8002b0a:	e000      	b.n	8002b0e <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002b0c:	bf00      	nop
}
 8002b0e:	bf00      	nop
 8002b10:	3710      	adds	r7, #16
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}
 8002b16:	bf00      	nop
 8002b18:	ffff0000 	.word	0xffff0000
 8002b1c:	080021f7 	.word	0x080021f7
 8002b20:	08002bbb 	.word	0x08002bbb

08002b24 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b082      	sub	sp, #8
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b32:	b2db      	uxtb	r3, r3
 8002b34:	2b60      	cmp	r3, #96	@ 0x60
 8002b36:	d10e      	bne.n	8002b56 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2220      	movs	r2, #32
 8002b3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2200      	movs	r2, #0
 8002b44:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2200      	movs	r2, #0
 8002b4a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8002b4e:	6878      	ldr	r0, [r7, #4]
 8002b50:	f7ff fb47 	bl	80021e2 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002b54:	e009      	b.n	8002b6a <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2200      	movs	r2, #0
 8002b5a:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2200      	movs	r2, #0
 8002b60:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8002b64:	6878      	ldr	r0, [r7, #4]
 8002b66:	f7ff fb32 	bl	80021ce <HAL_I2C_ErrorCallback>
}
 8002b6a:	bf00      	nop
 8002b6c:	3708      	adds	r7, #8
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd80      	pop	{r7, pc}

08002b72 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002b72:	b480      	push	{r7}
 8002b74:	b083      	sub	sp, #12
 8002b76:	af00      	add	r7, sp, #0
 8002b78:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	699b      	ldr	r3, [r3, #24]
 8002b80:	f003 0302 	and.w	r3, r3, #2
 8002b84:	2b02      	cmp	r3, #2
 8002b86:	d103      	bne.n	8002b90 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	699b      	ldr	r3, [r3, #24]
 8002b96:	f003 0301 	and.w	r3, r3, #1
 8002b9a:	2b01      	cmp	r3, #1
 8002b9c:	d007      	beq.n	8002bae <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	699a      	ldr	r2, [r3, #24]
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f042 0201 	orr.w	r2, r2, #1
 8002bac:	619a      	str	r2, [r3, #24]
  }
}
 8002bae:	bf00      	nop
 8002bb0:	370c      	adds	r7, #12
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb8:	4770      	bx	lr

08002bba <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8002bba:	b580      	push	{r7, lr}
 8002bbc:	b084      	sub	sp, #16
 8002bbe:	af00      	add	r7, sp, #0
 8002bc0:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bc6:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d003      	beq.n	8002bd8 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d003      	beq.n	8002be8 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002be4:	2200      	movs	r2, #0
 8002be6:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 8002be8:	68f8      	ldr	r0, [r7, #12]
 8002bea:	f7ff ff9b 	bl	8002b24 <I2C_TreatErrorCallback>
}
 8002bee:	bf00      	nop
 8002bf0:	3710      	adds	r7, #16
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bd80      	pop	{r7, pc}

08002bf6 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002bf6:	b580      	push	{r7, lr}
 8002bf8:	b084      	sub	sp, #16
 8002bfa:	af00      	add	r7, sp, #0
 8002bfc:	60f8      	str	r0, [r7, #12]
 8002bfe:	60b9      	str	r1, [r7, #8]
 8002c00:	603b      	str	r3, [r7, #0]
 8002c02:	4613      	mov	r3, r2
 8002c04:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c06:	e03b      	b.n	8002c80 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c08:	69ba      	ldr	r2, [r7, #24]
 8002c0a:	6839      	ldr	r1, [r7, #0]
 8002c0c:	68f8      	ldr	r0, [r7, #12]
 8002c0e:	f000 f8d5 	bl	8002dbc <I2C_IsErrorOccurred>
 8002c12:	4603      	mov	r3, r0
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d001      	beq.n	8002c1c <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8002c18:	2301      	movs	r3, #1
 8002c1a:	e041      	b.n	8002ca0 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002c22:	d02d      	beq.n	8002c80 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c24:	f7fe fdae 	bl	8001784 <HAL_GetTick>
 8002c28:	4602      	mov	r2, r0
 8002c2a:	69bb      	ldr	r3, [r7, #24]
 8002c2c:	1ad3      	subs	r3, r2, r3
 8002c2e:	683a      	ldr	r2, [r7, #0]
 8002c30:	429a      	cmp	r2, r3
 8002c32:	d302      	bcc.n	8002c3a <I2C_WaitOnFlagUntilTimeout+0x44>
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d122      	bne.n	8002c80 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	699a      	ldr	r2, [r3, #24]
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	4013      	ands	r3, r2
 8002c44:	68ba      	ldr	r2, [r7, #8]
 8002c46:	429a      	cmp	r2, r3
 8002c48:	bf0c      	ite	eq
 8002c4a:	2301      	moveq	r3, #1
 8002c4c:	2300      	movne	r3, #0
 8002c4e:	b2db      	uxtb	r3, r3
 8002c50:	461a      	mov	r2, r3
 8002c52:	79fb      	ldrb	r3, [r7, #7]
 8002c54:	429a      	cmp	r2, r3
 8002c56:	d113      	bne.n	8002c80 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c5c:	f043 0220 	orr.w	r2, r3, #32
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	2220      	movs	r2, #32
 8002c68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	2200      	movs	r2, #0
 8002c70:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	2200      	movs	r2, #0
 8002c78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	e00f      	b.n	8002ca0 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	699a      	ldr	r2, [r3, #24]
 8002c86:	68bb      	ldr	r3, [r7, #8]
 8002c88:	4013      	ands	r3, r2
 8002c8a:	68ba      	ldr	r2, [r7, #8]
 8002c8c:	429a      	cmp	r2, r3
 8002c8e:	bf0c      	ite	eq
 8002c90:	2301      	moveq	r3, #1
 8002c92:	2300      	movne	r3, #0
 8002c94:	b2db      	uxtb	r3, r3
 8002c96:	461a      	mov	r2, r3
 8002c98:	79fb      	ldrb	r3, [r7, #7]
 8002c9a:	429a      	cmp	r2, r3
 8002c9c:	d0b4      	beq.n	8002c08 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002c9e:	2300      	movs	r3, #0
}
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	3710      	adds	r7, #16
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bd80      	pop	{r7, pc}

08002ca8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b084      	sub	sp, #16
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	60f8      	str	r0, [r7, #12]
 8002cb0:	60b9      	str	r1, [r7, #8]
 8002cb2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002cb4:	e033      	b.n	8002d1e <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002cb6:	687a      	ldr	r2, [r7, #4]
 8002cb8:	68b9      	ldr	r1, [r7, #8]
 8002cba:	68f8      	ldr	r0, [r7, #12]
 8002cbc:	f000 f87e 	bl	8002dbc <I2C_IsErrorOccurred>
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d001      	beq.n	8002cca <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	e031      	b.n	8002d2e <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002cca:	68bb      	ldr	r3, [r7, #8]
 8002ccc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002cd0:	d025      	beq.n	8002d1e <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cd2:	f7fe fd57 	bl	8001784 <HAL_GetTick>
 8002cd6:	4602      	mov	r2, r0
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	1ad3      	subs	r3, r2, r3
 8002cdc:	68ba      	ldr	r2, [r7, #8]
 8002cde:	429a      	cmp	r2, r3
 8002ce0:	d302      	bcc.n	8002ce8 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002ce2:	68bb      	ldr	r3, [r7, #8]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d11a      	bne.n	8002d1e <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	699b      	ldr	r3, [r3, #24]
 8002cee:	f003 0302 	and.w	r3, r3, #2
 8002cf2:	2b02      	cmp	r3, #2
 8002cf4:	d013      	beq.n	8002d1e <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cfa:	f043 0220 	orr.w	r2, r3, #32
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	2220      	movs	r2, #32
 8002d06:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	2200      	movs	r2, #0
 8002d16:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002d1a:	2301      	movs	r3, #1
 8002d1c:	e007      	b.n	8002d2e <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	699b      	ldr	r3, [r3, #24]
 8002d24:	f003 0302 	and.w	r3, r3, #2
 8002d28:	2b02      	cmp	r3, #2
 8002d2a:	d1c4      	bne.n	8002cb6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002d2c:	2300      	movs	r3, #0
}
 8002d2e:	4618      	mov	r0, r3
 8002d30:	3710      	adds	r7, #16
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bd80      	pop	{r7, pc}

08002d36 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002d36:	b580      	push	{r7, lr}
 8002d38:	b084      	sub	sp, #16
 8002d3a:	af00      	add	r7, sp, #0
 8002d3c:	60f8      	str	r0, [r7, #12]
 8002d3e:	60b9      	str	r1, [r7, #8]
 8002d40:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002d42:	e02f      	b.n	8002da4 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d44:	687a      	ldr	r2, [r7, #4]
 8002d46:	68b9      	ldr	r1, [r7, #8]
 8002d48:	68f8      	ldr	r0, [r7, #12]
 8002d4a:	f000 f837 	bl	8002dbc <I2C_IsErrorOccurred>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d001      	beq.n	8002d58 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002d54:	2301      	movs	r3, #1
 8002d56:	e02d      	b.n	8002db4 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d58:	f7fe fd14 	bl	8001784 <HAL_GetTick>
 8002d5c:	4602      	mov	r2, r0
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	1ad3      	subs	r3, r2, r3
 8002d62:	68ba      	ldr	r2, [r7, #8]
 8002d64:	429a      	cmp	r2, r3
 8002d66:	d302      	bcc.n	8002d6e <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002d68:	68bb      	ldr	r3, [r7, #8]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d11a      	bne.n	8002da4 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	699b      	ldr	r3, [r3, #24]
 8002d74:	f003 0320 	and.w	r3, r3, #32
 8002d78:	2b20      	cmp	r3, #32
 8002d7a:	d013      	beq.n	8002da4 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d80:	f043 0220 	orr.w	r2, r3, #32
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	2220      	movs	r2, #32
 8002d8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	2200      	movs	r2, #0
 8002d94:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8002da0:	2301      	movs	r3, #1
 8002da2:	e007      	b.n	8002db4 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	699b      	ldr	r3, [r3, #24]
 8002daa:	f003 0320 	and.w	r3, r3, #32
 8002dae:	2b20      	cmp	r3, #32
 8002db0:	d1c8      	bne.n	8002d44 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002db2:	2300      	movs	r3, #0
}
 8002db4:	4618      	mov	r0, r3
 8002db6:	3710      	adds	r7, #16
 8002db8:	46bd      	mov	sp, r7
 8002dba:	bd80      	pop	{r7, pc}

08002dbc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b08a      	sub	sp, #40	@ 0x28
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	60f8      	str	r0, [r7, #12]
 8002dc4:	60b9      	str	r1, [r7, #8]
 8002dc6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002dc8:	2300      	movs	r3, #0
 8002dca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	699b      	ldr	r3, [r3, #24]
 8002dd4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002dde:	69bb      	ldr	r3, [r7, #24]
 8002de0:	f003 0310 	and.w	r3, r3, #16
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d068      	beq.n	8002eba <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	2210      	movs	r2, #16
 8002dee:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002df0:	e049      	b.n	8002e86 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002df2:	68bb      	ldr	r3, [r7, #8]
 8002df4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002df8:	d045      	beq.n	8002e86 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002dfa:	f7fe fcc3 	bl	8001784 <HAL_GetTick>
 8002dfe:	4602      	mov	r2, r0
 8002e00:	69fb      	ldr	r3, [r7, #28]
 8002e02:	1ad3      	subs	r3, r2, r3
 8002e04:	68ba      	ldr	r2, [r7, #8]
 8002e06:	429a      	cmp	r2, r3
 8002e08:	d302      	bcc.n	8002e10 <I2C_IsErrorOccurred+0x54>
 8002e0a:	68bb      	ldr	r3, [r7, #8]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d13a      	bne.n	8002e86 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002e1a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002e22:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	699b      	ldr	r3, [r3, #24]
 8002e2a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002e2e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002e32:	d121      	bne.n	8002e78 <I2C_IsErrorOccurred+0xbc>
 8002e34:	697b      	ldr	r3, [r7, #20]
 8002e36:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002e3a:	d01d      	beq.n	8002e78 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002e3c:	7cfb      	ldrb	r3, [r7, #19]
 8002e3e:	2b20      	cmp	r3, #32
 8002e40:	d01a      	beq.n	8002e78 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	685a      	ldr	r2, [r3, #4]
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002e50:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002e52:	f7fe fc97 	bl	8001784 <HAL_GetTick>
 8002e56:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002e58:	e00e      	b.n	8002e78 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002e5a:	f7fe fc93 	bl	8001784 <HAL_GetTick>
 8002e5e:	4602      	mov	r2, r0
 8002e60:	69fb      	ldr	r3, [r7, #28]
 8002e62:	1ad3      	subs	r3, r2, r3
 8002e64:	2b19      	cmp	r3, #25
 8002e66:	d907      	bls.n	8002e78 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002e68:	6a3b      	ldr	r3, [r7, #32]
 8002e6a:	f043 0320 	orr.w	r3, r3, #32
 8002e6e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002e70:	2301      	movs	r3, #1
 8002e72:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8002e76:	e006      	b.n	8002e86 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	699b      	ldr	r3, [r3, #24]
 8002e7e:	f003 0320 	and.w	r3, r3, #32
 8002e82:	2b20      	cmp	r3, #32
 8002e84:	d1e9      	bne.n	8002e5a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	699b      	ldr	r3, [r3, #24]
 8002e8c:	f003 0320 	and.w	r3, r3, #32
 8002e90:	2b20      	cmp	r3, #32
 8002e92:	d003      	beq.n	8002e9c <I2C_IsErrorOccurred+0xe0>
 8002e94:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d0aa      	beq.n	8002df2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002e9c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d103      	bne.n	8002eac <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	2220      	movs	r2, #32
 8002eaa:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002eac:	6a3b      	ldr	r3, [r7, #32]
 8002eae:	f043 0304 	orr.w	r3, r3, #4
 8002eb2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	699b      	ldr	r3, [r3, #24]
 8002ec0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002ec2:	69bb      	ldr	r3, [r7, #24]
 8002ec4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d00b      	beq.n	8002ee4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002ecc:	6a3b      	ldr	r3, [r7, #32]
 8002ece:	f043 0301 	orr.w	r3, r3, #1
 8002ed2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002edc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002ee4:	69bb      	ldr	r3, [r7, #24]
 8002ee6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d00b      	beq.n	8002f06 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002eee:	6a3b      	ldr	r3, [r7, #32]
 8002ef0:	f043 0308 	orr.w	r3, r3, #8
 8002ef4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002efe:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002f00:	2301      	movs	r3, #1
 8002f02:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002f06:	69bb      	ldr	r3, [r7, #24]
 8002f08:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d00b      	beq.n	8002f28 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002f10:	6a3b      	ldr	r3, [r7, #32]
 8002f12:	f043 0302 	orr.w	r3, r3, #2
 8002f16:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002f20:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002f22:	2301      	movs	r3, #1
 8002f24:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8002f28:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d01c      	beq.n	8002f6a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002f30:	68f8      	ldr	r0, [r7, #12]
 8002f32:	f7ff fe1e 	bl	8002b72 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	6859      	ldr	r1, [r3, #4]
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681a      	ldr	r2, [r3, #0]
 8002f40:	4b0d      	ldr	r3, [pc, #52]	@ (8002f78 <I2C_IsErrorOccurred+0x1bc>)
 8002f42:	400b      	ands	r3, r1
 8002f44:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002f4a:	6a3b      	ldr	r3, [r7, #32]
 8002f4c:	431a      	orrs	r2, r3
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	2220      	movs	r2, #32
 8002f56:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	2200      	movs	r2, #0
 8002f66:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8002f6a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8002f6e:	4618      	mov	r0, r3
 8002f70:	3728      	adds	r7, #40	@ 0x28
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bd80      	pop	{r7, pc}
 8002f76:	bf00      	nop
 8002f78:	fe00e800 	.word	0xfe00e800

08002f7c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	b087      	sub	sp, #28
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	60f8      	str	r0, [r7, #12]
 8002f84:	607b      	str	r3, [r7, #4]
 8002f86:	460b      	mov	r3, r1
 8002f88:	817b      	strh	r3, [r7, #10]
 8002f8a:	4613      	mov	r3, r2
 8002f8c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002f8e:	897b      	ldrh	r3, [r7, #10]
 8002f90:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002f94:	7a7b      	ldrb	r3, [r7, #9]
 8002f96:	041b      	lsls	r3, r3, #16
 8002f98:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002f9c:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002fa2:	6a3b      	ldr	r3, [r7, #32]
 8002fa4:	4313      	orrs	r3, r2
 8002fa6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002faa:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	685a      	ldr	r2, [r3, #4]
 8002fb2:	6a3b      	ldr	r3, [r7, #32]
 8002fb4:	0d5b      	lsrs	r3, r3, #21
 8002fb6:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8002fba:	4b08      	ldr	r3, [pc, #32]	@ (8002fdc <I2C_TransferConfig+0x60>)
 8002fbc:	430b      	orrs	r3, r1
 8002fbe:	43db      	mvns	r3, r3
 8002fc0:	ea02 0103 	and.w	r1, r2, r3
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	697a      	ldr	r2, [r7, #20]
 8002fca:	430a      	orrs	r2, r1
 8002fcc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002fce:	bf00      	nop
 8002fd0:	371c      	adds	r7, #28
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd8:	4770      	bx	lr
 8002fda:	bf00      	nop
 8002fdc:	03ff63ff 	.word	0x03ff63ff

08002fe0 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	b085      	sub	sp, #20
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
 8002fe8:	460b      	mov	r3, r1
 8002fea:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8002fec:	2300      	movs	r3, #0
 8002fee:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8002ff0:	887b      	ldrh	r3, [r7, #2]
 8002ff2:	f003 0301 	and.w	r3, r3, #1
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d00f      	beq.n	800301a <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8003000:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003008:	b2db      	uxtb	r3, r3
 800300a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800300e:	2b28      	cmp	r3, #40	@ 0x28
 8003010:	d003      	beq.n	800301a <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8003018:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800301a:	887b      	ldrh	r3, [r7, #2]
 800301c:	f003 0302 	and.w	r3, r3, #2
 8003020:	2b00      	cmp	r3, #0
 8003022:	d00f      	beq.n	8003044 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 800302a:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003032:	b2db      	uxtb	r3, r3
 8003034:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003038:	2b28      	cmp	r3, #40	@ 0x28
 800303a:	d003      	beq.n	8003044 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8003042:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003044:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003048:	2b00      	cmp	r3, #0
 800304a:	da03      	bge.n	8003054 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8003052:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003054:	887b      	ldrh	r3, [r7, #2]
 8003056:	2b10      	cmp	r3, #16
 8003058:	d103      	bne.n	8003062 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8003060:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003062:	887b      	ldrh	r3, [r7, #2]
 8003064:	2b20      	cmp	r3, #32
 8003066:	d103      	bne.n	8003070 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	f043 0320 	orr.w	r3, r3, #32
 800306e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8003070:	887b      	ldrh	r3, [r7, #2]
 8003072:	2b40      	cmp	r3, #64	@ 0x40
 8003074:	d103      	bne.n	800307e <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800307c:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	6819      	ldr	r1, [r3, #0]
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	43da      	mvns	r2, r3
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	400a      	ands	r2, r1
 800308e:	601a      	str	r2, [r3, #0]
}
 8003090:	bf00      	nop
 8003092:	3714      	adds	r7, #20
 8003094:	46bd      	mov	sp, r7
 8003096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309a:	4770      	bx	lr

0800309c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800309c:	b480      	push	{r7}
 800309e:	b083      	sub	sp, #12
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
 80030a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80030ac:	b2db      	uxtb	r3, r3
 80030ae:	2b20      	cmp	r3, #32
 80030b0:	d138      	bne.n	8003124 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80030b8:	2b01      	cmp	r3, #1
 80030ba:	d101      	bne.n	80030c0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80030bc:	2302      	movs	r3, #2
 80030be:	e032      	b.n	8003126 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2201      	movs	r2, #1
 80030c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2224      	movs	r2, #36	@ 0x24
 80030cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	681a      	ldr	r2, [r3, #0]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f022 0201 	bic.w	r2, r2, #1
 80030de:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	681a      	ldr	r2, [r3, #0]
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80030ee:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	6819      	ldr	r1, [r3, #0]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	683a      	ldr	r2, [r7, #0]
 80030fc:	430a      	orrs	r2, r1
 80030fe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	681a      	ldr	r2, [r3, #0]
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f042 0201 	orr.w	r2, r2, #1
 800310e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2220      	movs	r2, #32
 8003114:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2200      	movs	r2, #0
 800311c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003120:	2300      	movs	r3, #0
 8003122:	e000      	b.n	8003126 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003124:	2302      	movs	r3, #2
  }
}
 8003126:	4618      	mov	r0, r3
 8003128:	370c      	adds	r7, #12
 800312a:	46bd      	mov	sp, r7
 800312c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003130:	4770      	bx	lr

08003132 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003132:	b480      	push	{r7}
 8003134:	b085      	sub	sp, #20
 8003136:	af00      	add	r7, sp, #0
 8003138:	6078      	str	r0, [r7, #4]
 800313a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003142:	b2db      	uxtb	r3, r3
 8003144:	2b20      	cmp	r3, #32
 8003146:	d139      	bne.n	80031bc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800314e:	2b01      	cmp	r3, #1
 8003150:	d101      	bne.n	8003156 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003152:	2302      	movs	r3, #2
 8003154:	e033      	b.n	80031be <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2201      	movs	r2, #1
 800315a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2224      	movs	r2, #36	@ 0x24
 8003162:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	681a      	ldr	r2, [r3, #0]
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f022 0201 	bic.w	r2, r2, #1
 8003174:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003184:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	021b      	lsls	r3, r3, #8
 800318a:	68fa      	ldr	r2, [r7, #12]
 800318c:	4313      	orrs	r3, r2
 800318e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	68fa      	ldr	r2, [r7, #12]
 8003196:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	681a      	ldr	r2, [r3, #0]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f042 0201 	orr.w	r2, r2, #1
 80031a6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2220      	movs	r2, #32
 80031ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2200      	movs	r2, #0
 80031b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80031b8:	2300      	movs	r3, #0
 80031ba:	e000      	b.n	80031be <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80031bc:	2302      	movs	r3, #2
  }
}
 80031be:	4618      	mov	r0, r3
 80031c0:	3714      	adds	r7, #20
 80031c2:	46bd      	mov	sp, r7
 80031c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c8:	4770      	bx	lr
	...

080031cc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b086      	sub	sp, #24
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80031d4:	2300      	movs	r3, #0
 80031d6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d101      	bne.n	80031e2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80031de:	2301      	movs	r3, #1
 80031e0:	e291      	b.n	8003706 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f003 0301 	and.w	r3, r3, #1
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	f000 8087 	beq.w	80032fe <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80031f0:	4b96      	ldr	r3, [pc, #600]	@ (800344c <HAL_RCC_OscConfig+0x280>)
 80031f2:	689b      	ldr	r3, [r3, #8]
 80031f4:	f003 030c 	and.w	r3, r3, #12
 80031f8:	2b04      	cmp	r3, #4
 80031fa:	d00c      	beq.n	8003216 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80031fc:	4b93      	ldr	r3, [pc, #588]	@ (800344c <HAL_RCC_OscConfig+0x280>)
 80031fe:	689b      	ldr	r3, [r3, #8]
 8003200:	f003 030c 	and.w	r3, r3, #12
 8003204:	2b08      	cmp	r3, #8
 8003206:	d112      	bne.n	800322e <HAL_RCC_OscConfig+0x62>
 8003208:	4b90      	ldr	r3, [pc, #576]	@ (800344c <HAL_RCC_OscConfig+0x280>)
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003210:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003214:	d10b      	bne.n	800322e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003216:	4b8d      	ldr	r3, [pc, #564]	@ (800344c <HAL_RCC_OscConfig+0x280>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800321e:	2b00      	cmp	r3, #0
 8003220:	d06c      	beq.n	80032fc <HAL_RCC_OscConfig+0x130>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d168      	bne.n	80032fc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800322a:	2301      	movs	r3, #1
 800322c:	e26b      	b.n	8003706 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	685b      	ldr	r3, [r3, #4]
 8003232:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003236:	d106      	bne.n	8003246 <HAL_RCC_OscConfig+0x7a>
 8003238:	4b84      	ldr	r3, [pc, #528]	@ (800344c <HAL_RCC_OscConfig+0x280>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4a83      	ldr	r2, [pc, #524]	@ (800344c <HAL_RCC_OscConfig+0x280>)
 800323e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003242:	6013      	str	r3, [r2, #0]
 8003244:	e02e      	b.n	80032a4 <HAL_RCC_OscConfig+0xd8>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d10c      	bne.n	8003268 <HAL_RCC_OscConfig+0x9c>
 800324e:	4b7f      	ldr	r3, [pc, #508]	@ (800344c <HAL_RCC_OscConfig+0x280>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4a7e      	ldr	r2, [pc, #504]	@ (800344c <HAL_RCC_OscConfig+0x280>)
 8003254:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003258:	6013      	str	r3, [r2, #0]
 800325a:	4b7c      	ldr	r3, [pc, #496]	@ (800344c <HAL_RCC_OscConfig+0x280>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4a7b      	ldr	r2, [pc, #492]	@ (800344c <HAL_RCC_OscConfig+0x280>)
 8003260:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003264:	6013      	str	r3, [r2, #0]
 8003266:	e01d      	b.n	80032a4 <HAL_RCC_OscConfig+0xd8>
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003270:	d10c      	bne.n	800328c <HAL_RCC_OscConfig+0xc0>
 8003272:	4b76      	ldr	r3, [pc, #472]	@ (800344c <HAL_RCC_OscConfig+0x280>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4a75      	ldr	r2, [pc, #468]	@ (800344c <HAL_RCC_OscConfig+0x280>)
 8003278:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800327c:	6013      	str	r3, [r2, #0]
 800327e:	4b73      	ldr	r3, [pc, #460]	@ (800344c <HAL_RCC_OscConfig+0x280>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4a72      	ldr	r2, [pc, #456]	@ (800344c <HAL_RCC_OscConfig+0x280>)
 8003284:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003288:	6013      	str	r3, [r2, #0]
 800328a:	e00b      	b.n	80032a4 <HAL_RCC_OscConfig+0xd8>
 800328c:	4b6f      	ldr	r3, [pc, #444]	@ (800344c <HAL_RCC_OscConfig+0x280>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4a6e      	ldr	r2, [pc, #440]	@ (800344c <HAL_RCC_OscConfig+0x280>)
 8003292:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003296:	6013      	str	r3, [r2, #0]
 8003298:	4b6c      	ldr	r3, [pc, #432]	@ (800344c <HAL_RCC_OscConfig+0x280>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a6b      	ldr	r2, [pc, #428]	@ (800344c <HAL_RCC_OscConfig+0x280>)
 800329e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80032a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d013      	beq.n	80032d4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032ac:	f7fe fa6a 	bl	8001784 <HAL_GetTick>
 80032b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032b2:	e008      	b.n	80032c6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032b4:	f7fe fa66 	bl	8001784 <HAL_GetTick>
 80032b8:	4602      	mov	r2, r0
 80032ba:	693b      	ldr	r3, [r7, #16]
 80032bc:	1ad3      	subs	r3, r2, r3
 80032be:	2b64      	cmp	r3, #100	@ 0x64
 80032c0:	d901      	bls.n	80032c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80032c2:	2303      	movs	r3, #3
 80032c4:	e21f      	b.n	8003706 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032c6:	4b61      	ldr	r3, [pc, #388]	@ (800344c <HAL_RCC_OscConfig+0x280>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d0f0      	beq.n	80032b4 <HAL_RCC_OscConfig+0xe8>
 80032d2:	e014      	b.n	80032fe <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032d4:	f7fe fa56 	bl	8001784 <HAL_GetTick>
 80032d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032da:	e008      	b.n	80032ee <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032dc:	f7fe fa52 	bl	8001784 <HAL_GetTick>
 80032e0:	4602      	mov	r2, r0
 80032e2:	693b      	ldr	r3, [r7, #16]
 80032e4:	1ad3      	subs	r3, r2, r3
 80032e6:	2b64      	cmp	r3, #100	@ 0x64
 80032e8:	d901      	bls.n	80032ee <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80032ea:	2303      	movs	r3, #3
 80032ec:	e20b      	b.n	8003706 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032ee:	4b57      	ldr	r3, [pc, #348]	@ (800344c <HAL_RCC_OscConfig+0x280>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d1f0      	bne.n	80032dc <HAL_RCC_OscConfig+0x110>
 80032fa:	e000      	b.n	80032fe <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f003 0302 	and.w	r3, r3, #2
 8003306:	2b00      	cmp	r3, #0
 8003308:	d069      	beq.n	80033de <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800330a:	4b50      	ldr	r3, [pc, #320]	@ (800344c <HAL_RCC_OscConfig+0x280>)
 800330c:	689b      	ldr	r3, [r3, #8]
 800330e:	f003 030c 	and.w	r3, r3, #12
 8003312:	2b00      	cmp	r3, #0
 8003314:	d00b      	beq.n	800332e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003316:	4b4d      	ldr	r3, [pc, #308]	@ (800344c <HAL_RCC_OscConfig+0x280>)
 8003318:	689b      	ldr	r3, [r3, #8]
 800331a:	f003 030c 	and.w	r3, r3, #12
 800331e:	2b08      	cmp	r3, #8
 8003320:	d11c      	bne.n	800335c <HAL_RCC_OscConfig+0x190>
 8003322:	4b4a      	ldr	r3, [pc, #296]	@ (800344c <HAL_RCC_OscConfig+0x280>)
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800332a:	2b00      	cmp	r3, #0
 800332c:	d116      	bne.n	800335c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800332e:	4b47      	ldr	r3, [pc, #284]	@ (800344c <HAL_RCC_OscConfig+0x280>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f003 0302 	and.w	r3, r3, #2
 8003336:	2b00      	cmp	r3, #0
 8003338:	d005      	beq.n	8003346 <HAL_RCC_OscConfig+0x17a>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	68db      	ldr	r3, [r3, #12]
 800333e:	2b01      	cmp	r3, #1
 8003340:	d001      	beq.n	8003346 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003342:	2301      	movs	r3, #1
 8003344:	e1df      	b.n	8003706 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003346:	4b41      	ldr	r3, [pc, #260]	@ (800344c <HAL_RCC_OscConfig+0x280>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	691b      	ldr	r3, [r3, #16]
 8003352:	00db      	lsls	r3, r3, #3
 8003354:	493d      	ldr	r1, [pc, #244]	@ (800344c <HAL_RCC_OscConfig+0x280>)
 8003356:	4313      	orrs	r3, r2
 8003358:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800335a:	e040      	b.n	80033de <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	68db      	ldr	r3, [r3, #12]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d023      	beq.n	80033ac <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003364:	4b39      	ldr	r3, [pc, #228]	@ (800344c <HAL_RCC_OscConfig+0x280>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4a38      	ldr	r2, [pc, #224]	@ (800344c <HAL_RCC_OscConfig+0x280>)
 800336a:	f043 0301 	orr.w	r3, r3, #1
 800336e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003370:	f7fe fa08 	bl	8001784 <HAL_GetTick>
 8003374:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003376:	e008      	b.n	800338a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003378:	f7fe fa04 	bl	8001784 <HAL_GetTick>
 800337c:	4602      	mov	r2, r0
 800337e:	693b      	ldr	r3, [r7, #16]
 8003380:	1ad3      	subs	r3, r2, r3
 8003382:	2b02      	cmp	r3, #2
 8003384:	d901      	bls.n	800338a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003386:	2303      	movs	r3, #3
 8003388:	e1bd      	b.n	8003706 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800338a:	4b30      	ldr	r3, [pc, #192]	@ (800344c <HAL_RCC_OscConfig+0x280>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f003 0302 	and.w	r3, r3, #2
 8003392:	2b00      	cmp	r3, #0
 8003394:	d0f0      	beq.n	8003378 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003396:	4b2d      	ldr	r3, [pc, #180]	@ (800344c <HAL_RCC_OscConfig+0x280>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	691b      	ldr	r3, [r3, #16]
 80033a2:	00db      	lsls	r3, r3, #3
 80033a4:	4929      	ldr	r1, [pc, #164]	@ (800344c <HAL_RCC_OscConfig+0x280>)
 80033a6:	4313      	orrs	r3, r2
 80033a8:	600b      	str	r3, [r1, #0]
 80033aa:	e018      	b.n	80033de <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80033ac:	4b27      	ldr	r3, [pc, #156]	@ (800344c <HAL_RCC_OscConfig+0x280>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4a26      	ldr	r2, [pc, #152]	@ (800344c <HAL_RCC_OscConfig+0x280>)
 80033b2:	f023 0301 	bic.w	r3, r3, #1
 80033b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033b8:	f7fe f9e4 	bl	8001784 <HAL_GetTick>
 80033bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033be:	e008      	b.n	80033d2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033c0:	f7fe f9e0 	bl	8001784 <HAL_GetTick>
 80033c4:	4602      	mov	r2, r0
 80033c6:	693b      	ldr	r3, [r7, #16]
 80033c8:	1ad3      	subs	r3, r2, r3
 80033ca:	2b02      	cmp	r3, #2
 80033cc:	d901      	bls.n	80033d2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80033ce:	2303      	movs	r3, #3
 80033d0:	e199      	b.n	8003706 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033d2:	4b1e      	ldr	r3, [pc, #120]	@ (800344c <HAL_RCC_OscConfig+0x280>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f003 0302 	and.w	r3, r3, #2
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d1f0      	bne.n	80033c0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f003 0308 	and.w	r3, r3, #8
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d038      	beq.n	800345c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	695b      	ldr	r3, [r3, #20]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d019      	beq.n	8003426 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80033f2:	4b16      	ldr	r3, [pc, #88]	@ (800344c <HAL_RCC_OscConfig+0x280>)
 80033f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80033f6:	4a15      	ldr	r2, [pc, #84]	@ (800344c <HAL_RCC_OscConfig+0x280>)
 80033f8:	f043 0301 	orr.w	r3, r3, #1
 80033fc:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033fe:	f7fe f9c1 	bl	8001784 <HAL_GetTick>
 8003402:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003404:	e008      	b.n	8003418 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003406:	f7fe f9bd 	bl	8001784 <HAL_GetTick>
 800340a:	4602      	mov	r2, r0
 800340c:	693b      	ldr	r3, [r7, #16]
 800340e:	1ad3      	subs	r3, r2, r3
 8003410:	2b02      	cmp	r3, #2
 8003412:	d901      	bls.n	8003418 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003414:	2303      	movs	r3, #3
 8003416:	e176      	b.n	8003706 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003418:	4b0c      	ldr	r3, [pc, #48]	@ (800344c <HAL_RCC_OscConfig+0x280>)
 800341a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800341c:	f003 0302 	and.w	r3, r3, #2
 8003420:	2b00      	cmp	r3, #0
 8003422:	d0f0      	beq.n	8003406 <HAL_RCC_OscConfig+0x23a>
 8003424:	e01a      	b.n	800345c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003426:	4b09      	ldr	r3, [pc, #36]	@ (800344c <HAL_RCC_OscConfig+0x280>)
 8003428:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800342a:	4a08      	ldr	r2, [pc, #32]	@ (800344c <HAL_RCC_OscConfig+0x280>)
 800342c:	f023 0301 	bic.w	r3, r3, #1
 8003430:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003432:	f7fe f9a7 	bl	8001784 <HAL_GetTick>
 8003436:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003438:	e00a      	b.n	8003450 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800343a:	f7fe f9a3 	bl	8001784 <HAL_GetTick>
 800343e:	4602      	mov	r2, r0
 8003440:	693b      	ldr	r3, [r7, #16]
 8003442:	1ad3      	subs	r3, r2, r3
 8003444:	2b02      	cmp	r3, #2
 8003446:	d903      	bls.n	8003450 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003448:	2303      	movs	r3, #3
 800344a:	e15c      	b.n	8003706 <HAL_RCC_OscConfig+0x53a>
 800344c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003450:	4b91      	ldr	r3, [pc, #580]	@ (8003698 <HAL_RCC_OscConfig+0x4cc>)
 8003452:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003454:	f003 0302 	and.w	r3, r3, #2
 8003458:	2b00      	cmp	r3, #0
 800345a:	d1ee      	bne.n	800343a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f003 0304 	and.w	r3, r3, #4
 8003464:	2b00      	cmp	r3, #0
 8003466:	f000 80a4 	beq.w	80035b2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800346a:	4b8b      	ldr	r3, [pc, #556]	@ (8003698 <HAL_RCC_OscConfig+0x4cc>)
 800346c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800346e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003472:	2b00      	cmp	r3, #0
 8003474:	d10d      	bne.n	8003492 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003476:	4b88      	ldr	r3, [pc, #544]	@ (8003698 <HAL_RCC_OscConfig+0x4cc>)
 8003478:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800347a:	4a87      	ldr	r2, [pc, #540]	@ (8003698 <HAL_RCC_OscConfig+0x4cc>)
 800347c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003480:	6413      	str	r3, [r2, #64]	@ 0x40
 8003482:	4b85      	ldr	r3, [pc, #532]	@ (8003698 <HAL_RCC_OscConfig+0x4cc>)
 8003484:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003486:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800348a:	60bb      	str	r3, [r7, #8]
 800348c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800348e:	2301      	movs	r3, #1
 8003490:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003492:	4b82      	ldr	r3, [pc, #520]	@ (800369c <HAL_RCC_OscConfig+0x4d0>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800349a:	2b00      	cmp	r3, #0
 800349c:	d118      	bne.n	80034d0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800349e:	4b7f      	ldr	r3, [pc, #508]	@ (800369c <HAL_RCC_OscConfig+0x4d0>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4a7e      	ldr	r2, [pc, #504]	@ (800369c <HAL_RCC_OscConfig+0x4d0>)
 80034a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80034a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034aa:	f7fe f96b 	bl	8001784 <HAL_GetTick>
 80034ae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80034b0:	e008      	b.n	80034c4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034b2:	f7fe f967 	bl	8001784 <HAL_GetTick>
 80034b6:	4602      	mov	r2, r0
 80034b8:	693b      	ldr	r3, [r7, #16]
 80034ba:	1ad3      	subs	r3, r2, r3
 80034bc:	2b64      	cmp	r3, #100	@ 0x64
 80034be:	d901      	bls.n	80034c4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80034c0:	2303      	movs	r3, #3
 80034c2:	e120      	b.n	8003706 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80034c4:	4b75      	ldr	r3, [pc, #468]	@ (800369c <HAL_RCC_OscConfig+0x4d0>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d0f0      	beq.n	80034b2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	689b      	ldr	r3, [r3, #8]
 80034d4:	2b01      	cmp	r3, #1
 80034d6:	d106      	bne.n	80034e6 <HAL_RCC_OscConfig+0x31a>
 80034d8:	4b6f      	ldr	r3, [pc, #444]	@ (8003698 <HAL_RCC_OscConfig+0x4cc>)
 80034da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034dc:	4a6e      	ldr	r2, [pc, #440]	@ (8003698 <HAL_RCC_OscConfig+0x4cc>)
 80034de:	f043 0301 	orr.w	r3, r3, #1
 80034e2:	6713      	str	r3, [r2, #112]	@ 0x70
 80034e4:	e02d      	b.n	8003542 <HAL_RCC_OscConfig+0x376>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	689b      	ldr	r3, [r3, #8]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d10c      	bne.n	8003508 <HAL_RCC_OscConfig+0x33c>
 80034ee:	4b6a      	ldr	r3, [pc, #424]	@ (8003698 <HAL_RCC_OscConfig+0x4cc>)
 80034f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034f2:	4a69      	ldr	r2, [pc, #420]	@ (8003698 <HAL_RCC_OscConfig+0x4cc>)
 80034f4:	f023 0301 	bic.w	r3, r3, #1
 80034f8:	6713      	str	r3, [r2, #112]	@ 0x70
 80034fa:	4b67      	ldr	r3, [pc, #412]	@ (8003698 <HAL_RCC_OscConfig+0x4cc>)
 80034fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034fe:	4a66      	ldr	r2, [pc, #408]	@ (8003698 <HAL_RCC_OscConfig+0x4cc>)
 8003500:	f023 0304 	bic.w	r3, r3, #4
 8003504:	6713      	str	r3, [r2, #112]	@ 0x70
 8003506:	e01c      	b.n	8003542 <HAL_RCC_OscConfig+0x376>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	689b      	ldr	r3, [r3, #8]
 800350c:	2b05      	cmp	r3, #5
 800350e:	d10c      	bne.n	800352a <HAL_RCC_OscConfig+0x35e>
 8003510:	4b61      	ldr	r3, [pc, #388]	@ (8003698 <HAL_RCC_OscConfig+0x4cc>)
 8003512:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003514:	4a60      	ldr	r2, [pc, #384]	@ (8003698 <HAL_RCC_OscConfig+0x4cc>)
 8003516:	f043 0304 	orr.w	r3, r3, #4
 800351a:	6713      	str	r3, [r2, #112]	@ 0x70
 800351c:	4b5e      	ldr	r3, [pc, #376]	@ (8003698 <HAL_RCC_OscConfig+0x4cc>)
 800351e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003520:	4a5d      	ldr	r2, [pc, #372]	@ (8003698 <HAL_RCC_OscConfig+0x4cc>)
 8003522:	f043 0301 	orr.w	r3, r3, #1
 8003526:	6713      	str	r3, [r2, #112]	@ 0x70
 8003528:	e00b      	b.n	8003542 <HAL_RCC_OscConfig+0x376>
 800352a:	4b5b      	ldr	r3, [pc, #364]	@ (8003698 <HAL_RCC_OscConfig+0x4cc>)
 800352c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800352e:	4a5a      	ldr	r2, [pc, #360]	@ (8003698 <HAL_RCC_OscConfig+0x4cc>)
 8003530:	f023 0301 	bic.w	r3, r3, #1
 8003534:	6713      	str	r3, [r2, #112]	@ 0x70
 8003536:	4b58      	ldr	r3, [pc, #352]	@ (8003698 <HAL_RCC_OscConfig+0x4cc>)
 8003538:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800353a:	4a57      	ldr	r2, [pc, #348]	@ (8003698 <HAL_RCC_OscConfig+0x4cc>)
 800353c:	f023 0304 	bic.w	r3, r3, #4
 8003540:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	689b      	ldr	r3, [r3, #8]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d015      	beq.n	8003576 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800354a:	f7fe f91b 	bl	8001784 <HAL_GetTick>
 800354e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003550:	e00a      	b.n	8003568 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003552:	f7fe f917 	bl	8001784 <HAL_GetTick>
 8003556:	4602      	mov	r2, r0
 8003558:	693b      	ldr	r3, [r7, #16]
 800355a:	1ad3      	subs	r3, r2, r3
 800355c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003560:	4293      	cmp	r3, r2
 8003562:	d901      	bls.n	8003568 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003564:	2303      	movs	r3, #3
 8003566:	e0ce      	b.n	8003706 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003568:	4b4b      	ldr	r3, [pc, #300]	@ (8003698 <HAL_RCC_OscConfig+0x4cc>)
 800356a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800356c:	f003 0302 	and.w	r3, r3, #2
 8003570:	2b00      	cmp	r3, #0
 8003572:	d0ee      	beq.n	8003552 <HAL_RCC_OscConfig+0x386>
 8003574:	e014      	b.n	80035a0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003576:	f7fe f905 	bl	8001784 <HAL_GetTick>
 800357a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800357c:	e00a      	b.n	8003594 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800357e:	f7fe f901 	bl	8001784 <HAL_GetTick>
 8003582:	4602      	mov	r2, r0
 8003584:	693b      	ldr	r3, [r7, #16]
 8003586:	1ad3      	subs	r3, r2, r3
 8003588:	f241 3288 	movw	r2, #5000	@ 0x1388
 800358c:	4293      	cmp	r3, r2
 800358e:	d901      	bls.n	8003594 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003590:	2303      	movs	r3, #3
 8003592:	e0b8      	b.n	8003706 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003594:	4b40      	ldr	r3, [pc, #256]	@ (8003698 <HAL_RCC_OscConfig+0x4cc>)
 8003596:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003598:	f003 0302 	and.w	r3, r3, #2
 800359c:	2b00      	cmp	r3, #0
 800359e:	d1ee      	bne.n	800357e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80035a0:	7dfb      	ldrb	r3, [r7, #23]
 80035a2:	2b01      	cmp	r3, #1
 80035a4:	d105      	bne.n	80035b2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035a6:	4b3c      	ldr	r3, [pc, #240]	@ (8003698 <HAL_RCC_OscConfig+0x4cc>)
 80035a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035aa:	4a3b      	ldr	r2, [pc, #236]	@ (8003698 <HAL_RCC_OscConfig+0x4cc>)
 80035ac:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80035b0:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	699b      	ldr	r3, [r3, #24]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	f000 80a4 	beq.w	8003704 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80035bc:	4b36      	ldr	r3, [pc, #216]	@ (8003698 <HAL_RCC_OscConfig+0x4cc>)
 80035be:	689b      	ldr	r3, [r3, #8]
 80035c0:	f003 030c 	and.w	r3, r3, #12
 80035c4:	2b08      	cmp	r3, #8
 80035c6:	d06b      	beq.n	80036a0 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	699b      	ldr	r3, [r3, #24]
 80035cc:	2b02      	cmp	r3, #2
 80035ce:	d149      	bne.n	8003664 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035d0:	4b31      	ldr	r3, [pc, #196]	@ (8003698 <HAL_RCC_OscConfig+0x4cc>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4a30      	ldr	r2, [pc, #192]	@ (8003698 <HAL_RCC_OscConfig+0x4cc>)
 80035d6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80035da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035dc:	f7fe f8d2 	bl	8001784 <HAL_GetTick>
 80035e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035e2:	e008      	b.n	80035f6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035e4:	f7fe f8ce 	bl	8001784 <HAL_GetTick>
 80035e8:	4602      	mov	r2, r0
 80035ea:	693b      	ldr	r3, [r7, #16]
 80035ec:	1ad3      	subs	r3, r2, r3
 80035ee:	2b02      	cmp	r3, #2
 80035f0:	d901      	bls.n	80035f6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80035f2:	2303      	movs	r3, #3
 80035f4:	e087      	b.n	8003706 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035f6:	4b28      	ldr	r3, [pc, #160]	@ (8003698 <HAL_RCC_OscConfig+0x4cc>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d1f0      	bne.n	80035e4 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	69da      	ldr	r2, [r3, #28]
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6a1b      	ldr	r3, [r3, #32]
 800360a:	431a      	orrs	r2, r3
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003610:	019b      	lsls	r3, r3, #6
 8003612:	431a      	orrs	r2, r3
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003618:	085b      	lsrs	r3, r3, #1
 800361a:	3b01      	subs	r3, #1
 800361c:	041b      	lsls	r3, r3, #16
 800361e:	431a      	orrs	r2, r3
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003624:	061b      	lsls	r3, r3, #24
 8003626:	4313      	orrs	r3, r2
 8003628:	4a1b      	ldr	r2, [pc, #108]	@ (8003698 <HAL_RCC_OscConfig+0x4cc>)
 800362a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800362e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003630:	4b19      	ldr	r3, [pc, #100]	@ (8003698 <HAL_RCC_OscConfig+0x4cc>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4a18      	ldr	r2, [pc, #96]	@ (8003698 <HAL_RCC_OscConfig+0x4cc>)
 8003636:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800363a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800363c:	f7fe f8a2 	bl	8001784 <HAL_GetTick>
 8003640:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003642:	e008      	b.n	8003656 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003644:	f7fe f89e 	bl	8001784 <HAL_GetTick>
 8003648:	4602      	mov	r2, r0
 800364a:	693b      	ldr	r3, [r7, #16]
 800364c:	1ad3      	subs	r3, r2, r3
 800364e:	2b02      	cmp	r3, #2
 8003650:	d901      	bls.n	8003656 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8003652:	2303      	movs	r3, #3
 8003654:	e057      	b.n	8003706 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003656:	4b10      	ldr	r3, [pc, #64]	@ (8003698 <HAL_RCC_OscConfig+0x4cc>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800365e:	2b00      	cmp	r3, #0
 8003660:	d0f0      	beq.n	8003644 <HAL_RCC_OscConfig+0x478>
 8003662:	e04f      	b.n	8003704 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003664:	4b0c      	ldr	r3, [pc, #48]	@ (8003698 <HAL_RCC_OscConfig+0x4cc>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4a0b      	ldr	r2, [pc, #44]	@ (8003698 <HAL_RCC_OscConfig+0x4cc>)
 800366a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800366e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003670:	f7fe f888 	bl	8001784 <HAL_GetTick>
 8003674:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003676:	e008      	b.n	800368a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003678:	f7fe f884 	bl	8001784 <HAL_GetTick>
 800367c:	4602      	mov	r2, r0
 800367e:	693b      	ldr	r3, [r7, #16]
 8003680:	1ad3      	subs	r3, r2, r3
 8003682:	2b02      	cmp	r3, #2
 8003684:	d901      	bls.n	800368a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8003686:	2303      	movs	r3, #3
 8003688:	e03d      	b.n	8003706 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800368a:	4b03      	ldr	r3, [pc, #12]	@ (8003698 <HAL_RCC_OscConfig+0x4cc>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003692:	2b00      	cmp	r3, #0
 8003694:	d1f0      	bne.n	8003678 <HAL_RCC_OscConfig+0x4ac>
 8003696:	e035      	b.n	8003704 <HAL_RCC_OscConfig+0x538>
 8003698:	40023800 	.word	0x40023800
 800369c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80036a0:	4b1b      	ldr	r3, [pc, #108]	@ (8003710 <HAL_RCC_OscConfig+0x544>)
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	699b      	ldr	r3, [r3, #24]
 80036aa:	2b01      	cmp	r3, #1
 80036ac:	d028      	beq.n	8003700 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80036b8:	429a      	cmp	r2, r3
 80036ba:	d121      	bne.n	8003700 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036c6:	429a      	cmp	r2, r3
 80036c8:	d11a      	bne.n	8003700 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80036ca:	68fa      	ldr	r2, [r7, #12]
 80036cc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80036d0:	4013      	ands	r3, r2
 80036d2:	687a      	ldr	r2, [r7, #4]
 80036d4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80036d6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80036d8:	4293      	cmp	r3, r2
 80036da:	d111      	bne.n	8003700 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036e6:	085b      	lsrs	r3, r3, #1
 80036e8:	3b01      	subs	r3, #1
 80036ea:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80036ec:	429a      	cmp	r2, r3
 80036ee:	d107      	bne.n	8003700 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036fa:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80036fc:	429a      	cmp	r2, r3
 80036fe:	d001      	beq.n	8003704 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8003700:	2301      	movs	r3, #1
 8003702:	e000      	b.n	8003706 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8003704:	2300      	movs	r3, #0
}
 8003706:	4618      	mov	r0, r3
 8003708:	3718      	adds	r7, #24
 800370a:	46bd      	mov	sp, r7
 800370c:	bd80      	pop	{r7, pc}
 800370e:	bf00      	nop
 8003710:	40023800 	.word	0x40023800

08003714 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b084      	sub	sp, #16
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
 800371c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800371e:	2300      	movs	r3, #0
 8003720:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d101      	bne.n	800372c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003728:	2301      	movs	r3, #1
 800372a:	e0d0      	b.n	80038ce <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800372c:	4b6a      	ldr	r3, [pc, #424]	@ (80038d8 <HAL_RCC_ClockConfig+0x1c4>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f003 030f 	and.w	r3, r3, #15
 8003734:	683a      	ldr	r2, [r7, #0]
 8003736:	429a      	cmp	r2, r3
 8003738:	d910      	bls.n	800375c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800373a:	4b67      	ldr	r3, [pc, #412]	@ (80038d8 <HAL_RCC_ClockConfig+0x1c4>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f023 020f 	bic.w	r2, r3, #15
 8003742:	4965      	ldr	r1, [pc, #404]	@ (80038d8 <HAL_RCC_ClockConfig+0x1c4>)
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	4313      	orrs	r3, r2
 8003748:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800374a:	4b63      	ldr	r3, [pc, #396]	@ (80038d8 <HAL_RCC_ClockConfig+0x1c4>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f003 030f 	and.w	r3, r3, #15
 8003752:	683a      	ldr	r2, [r7, #0]
 8003754:	429a      	cmp	r2, r3
 8003756:	d001      	beq.n	800375c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003758:	2301      	movs	r3, #1
 800375a:	e0b8      	b.n	80038ce <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f003 0302 	and.w	r3, r3, #2
 8003764:	2b00      	cmp	r3, #0
 8003766:	d020      	beq.n	80037aa <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f003 0304 	and.w	r3, r3, #4
 8003770:	2b00      	cmp	r3, #0
 8003772:	d005      	beq.n	8003780 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003774:	4b59      	ldr	r3, [pc, #356]	@ (80038dc <HAL_RCC_ClockConfig+0x1c8>)
 8003776:	689b      	ldr	r3, [r3, #8]
 8003778:	4a58      	ldr	r2, [pc, #352]	@ (80038dc <HAL_RCC_ClockConfig+0x1c8>)
 800377a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800377e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f003 0308 	and.w	r3, r3, #8
 8003788:	2b00      	cmp	r3, #0
 800378a:	d005      	beq.n	8003798 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800378c:	4b53      	ldr	r3, [pc, #332]	@ (80038dc <HAL_RCC_ClockConfig+0x1c8>)
 800378e:	689b      	ldr	r3, [r3, #8]
 8003790:	4a52      	ldr	r2, [pc, #328]	@ (80038dc <HAL_RCC_ClockConfig+0x1c8>)
 8003792:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003796:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003798:	4b50      	ldr	r3, [pc, #320]	@ (80038dc <HAL_RCC_ClockConfig+0x1c8>)
 800379a:	689b      	ldr	r3, [r3, #8]
 800379c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	689b      	ldr	r3, [r3, #8]
 80037a4:	494d      	ldr	r1, [pc, #308]	@ (80038dc <HAL_RCC_ClockConfig+0x1c8>)
 80037a6:	4313      	orrs	r3, r2
 80037a8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f003 0301 	and.w	r3, r3, #1
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d040      	beq.n	8003838 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	2b01      	cmp	r3, #1
 80037bc:	d107      	bne.n	80037ce <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037be:	4b47      	ldr	r3, [pc, #284]	@ (80038dc <HAL_RCC_ClockConfig+0x1c8>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d115      	bne.n	80037f6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80037ca:	2301      	movs	r3, #1
 80037cc:	e07f      	b.n	80038ce <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	685b      	ldr	r3, [r3, #4]
 80037d2:	2b02      	cmp	r3, #2
 80037d4:	d107      	bne.n	80037e6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037d6:	4b41      	ldr	r3, [pc, #260]	@ (80038dc <HAL_RCC_ClockConfig+0x1c8>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d109      	bne.n	80037f6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80037e2:	2301      	movs	r3, #1
 80037e4:	e073      	b.n	80038ce <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037e6:	4b3d      	ldr	r3, [pc, #244]	@ (80038dc <HAL_RCC_ClockConfig+0x1c8>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f003 0302 	and.w	r3, r3, #2
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d101      	bne.n	80037f6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80037f2:	2301      	movs	r3, #1
 80037f4:	e06b      	b.n	80038ce <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80037f6:	4b39      	ldr	r3, [pc, #228]	@ (80038dc <HAL_RCC_ClockConfig+0x1c8>)
 80037f8:	689b      	ldr	r3, [r3, #8]
 80037fa:	f023 0203 	bic.w	r2, r3, #3
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	685b      	ldr	r3, [r3, #4]
 8003802:	4936      	ldr	r1, [pc, #216]	@ (80038dc <HAL_RCC_ClockConfig+0x1c8>)
 8003804:	4313      	orrs	r3, r2
 8003806:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003808:	f7fd ffbc 	bl	8001784 <HAL_GetTick>
 800380c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800380e:	e00a      	b.n	8003826 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003810:	f7fd ffb8 	bl	8001784 <HAL_GetTick>
 8003814:	4602      	mov	r2, r0
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	1ad3      	subs	r3, r2, r3
 800381a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800381e:	4293      	cmp	r3, r2
 8003820:	d901      	bls.n	8003826 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003822:	2303      	movs	r3, #3
 8003824:	e053      	b.n	80038ce <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003826:	4b2d      	ldr	r3, [pc, #180]	@ (80038dc <HAL_RCC_ClockConfig+0x1c8>)
 8003828:	689b      	ldr	r3, [r3, #8]
 800382a:	f003 020c 	and.w	r2, r3, #12
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	009b      	lsls	r3, r3, #2
 8003834:	429a      	cmp	r2, r3
 8003836:	d1eb      	bne.n	8003810 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003838:	4b27      	ldr	r3, [pc, #156]	@ (80038d8 <HAL_RCC_ClockConfig+0x1c4>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f003 030f 	and.w	r3, r3, #15
 8003840:	683a      	ldr	r2, [r7, #0]
 8003842:	429a      	cmp	r2, r3
 8003844:	d210      	bcs.n	8003868 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003846:	4b24      	ldr	r3, [pc, #144]	@ (80038d8 <HAL_RCC_ClockConfig+0x1c4>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f023 020f 	bic.w	r2, r3, #15
 800384e:	4922      	ldr	r1, [pc, #136]	@ (80038d8 <HAL_RCC_ClockConfig+0x1c4>)
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	4313      	orrs	r3, r2
 8003854:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003856:	4b20      	ldr	r3, [pc, #128]	@ (80038d8 <HAL_RCC_ClockConfig+0x1c4>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f003 030f 	and.w	r3, r3, #15
 800385e:	683a      	ldr	r2, [r7, #0]
 8003860:	429a      	cmp	r2, r3
 8003862:	d001      	beq.n	8003868 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003864:	2301      	movs	r3, #1
 8003866:	e032      	b.n	80038ce <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f003 0304 	and.w	r3, r3, #4
 8003870:	2b00      	cmp	r3, #0
 8003872:	d008      	beq.n	8003886 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003874:	4b19      	ldr	r3, [pc, #100]	@ (80038dc <HAL_RCC_ClockConfig+0x1c8>)
 8003876:	689b      	ldr	r3, [r3, #8]
 8003878:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	68db      	ldr	r3, [r3, #12]
 8003880:	4916      	ldr	r1, [pc, #88]	@ (80038dc <HAL_RCC_ClockConfig+0x1c8>)
 8003882:	4313      	orrs	r3, r2
 8003884:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f003 0308 	and.w	r3, r3, #8
 800388e:	2b00      	cmp	r3, #0
 8003890:	d009      	beq.n	80038a6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003892:	4b12      	ldr	r3, [pc, #72]	@ (80038dc <HAL_RCC_ClockConfig+0x1c8>)
 8003894:	689b      	ldr	r3, [r3, #8]
 8003896:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	691b      	ldr	r3, [r3, #16]
 800389e:	00db      	lsls	r3, r3, #3
 80038a0:	490e      	ldr	r1, [pc, #56]	@ (80038dc <HAL_RCC_ClockConfig+0x1c8>)
 80038a2:	4313      	orrs	r3, r2
 80038a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80038a6:	f000 f821 	bl	80038ec <HAL_RCC_GetSysClockFreq>
 80038aa:	4602      	mov	r2, r0
 80038ac:	4b0b      	ldr	r3, [pc, #44]	@ (80038dc <HAL_RCC_ClockConfig+0x1c8>)
 80038ae:	689b      	ldr	r3, [r3, #8]
 80038b0:	091b      	lsrs	r3, r3, #4
 80038b2:	f003 030f 	and.w	r3, r3, #15
 80038b6:	490a      	ldr	r1, [pc, #40]	@ (80038e0 <HAL_RCC_ClockConfig+0x1cc>)
 80038b8:	5ccb      	ldrb	r3, [r1, r3]
 80038ba:	fa22 f303 	lsr.w	r3, r2, r3
 80038be:	4a09      	ldr	r2, [pc, #36]	@ (80038e4 <HAL_RCC_ClockConfig+0x1d0>)
 80038c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80038c2:	4b09      	ldr	r3, [pc, #36]	@ (80038e8 <HAL_RCC_ClockConfig+0x1d4>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4618      	mov	r0, r3
 80038c8:	f7fd fda2 	bl	8001410 <HAL_InitTick>

  return HAL_OK;
 80038cc:	2300      	movs	r3, #0
}
 80038ce:	4618      	mov	r0, r3
 80038d0:	3710      	adds	r7, #16
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bd80      	pop	{r7, pc}
 80038d6:	bf00      	nop
 80038d8:	40023c00 	.word	0x40023c00
 80038dc:	40023800 	.word	0x40023800
 80038e0:	0800b338 	.word	0x0800b338
 80038e4:	20000000 	.word	0x20000000
 80038e8:	20000004 	.word	0x20000004

080038ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80038ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80038f0:	b090      	sub	sp, #64	@ 0x40
 80038f2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80038f4:	2300      	movs	r3, #0
 80038f6:	637b      	str	r3, [r7, #52]	@ 0x34
 80038f8:	2300      	movs	r3, #0
 80038fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80038fc:	2300      	movs	r3, #0
 80038fe:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8003900:	2300      	movs	r3, #0
 8003902:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003904:	4b59      	ldr	r3, [pc, #356]	@ (8003a6c <HAL_RCC_GetSysClockFreq+0x180>)
 8003906:	689b      	ldr	r3, [r3, #8]
 8003908:	f003 030c 	and.w	r3, r3, #12
 800390c:	2b08      	cmp	r3, #8
 800390e:	d00d      	beq.n	800392c <HAL_RCC_GetSysClockFreq+0x40>
 8003910:	2b08      	cmp	r3, #8
 8003912:	f200 80a1 	bhi.w	8003a58 <HAL_RCC_GetSysClockFreq+0x16c>
 8003916:	2b00      	cmp	r3, #0
 8003918:	d002      	beq.n	8003920 <HAL_RCC_GetSysClockFreq+0x34>
 800391a:	2b04      	cmp	r3, #4
 800391c:	d003      	beq.n	8003926 <HAL_RCC_GetSysClockFreq+0x3a>
 800391e:	e09b      	b.n	8003a58 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003920:	4b53      	ldr	r3, [pc, #332]	@ (8003a70 <HAL_RCC_GetSysClockFreq+0x184>)
 8003922:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003924:	e09b      	b.n	8003a5e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003926:	4b53      	ldr	r3, [pc, #332]	@ (8003a74 <HAL_RCC_GetSysClockFreq+0x188>)
 8003928:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800392a:	e098      	b.n	8003a5e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800392c:	4b4f      	ldr	r3, [pc, #316]	@ (8003a6c <HAL_RCC_GetSysClockFreq+0x180>)
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003934:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003936:	4b4d      	ldr	r3, [pc, #308]	@ (8003a6c <HAL_RCC_GetSysClockFreq+0x180>)
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800393e:	2b00      	cmp	r3, #0
 8003940:	d028      	beq.n	8003994 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003942:	4b4a      	ldr	r3, [pc, #296]	@ (8003a6c <HAL_RCC_GetSysClockFreq+0x180>)
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	099b      	lsrs	r3, r3, #6
 8003948:	2200      	movs	r2, #0
 800394a:	623b      	str	r3, [r7, #32]
 800394c:	627a      	str	r2, [r7, #36]	@ 0x24
 800394e:	6a3b      	ldr	r3, [r7, #32]
 8003950:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003954:	2100      	movs	r1, #0
 8003956:	4b47      	ldr	r3, [pc, #284]	@ (8003a74 <HAL_RCC_GetSysClockFreq+0x188>)
 8003958:	fb03 f201 	mul.w	r2, r3, r1
 800395c:	2300      	movs	r3, #0
 800395e:	fb00 f303 	mul.w	r3, r0, r3
 8003962:	4413      	add	r3, r2
 8003964:	4a43      	ldr	r2, [pc, #268]	@ (8003a74 <HAL_RCC_GetSysClockFreq+0x188>)
 8003966:	fba0 1202 	umull	r1, r2, r0, r2
 800396a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800396c:	460a      	mov	r2, r1
 800396e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003970:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003972:	4413      	add	r3, r2
 8003974:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003976:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003978:	2200      	movs	r2, #0
 800397a:	61bb      	str	r3, [r7, #24]
 800397c:	61fa      	str	r2, [r7, #28]
 800397e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003982:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003986:	f7fd f92f 	bl	8000be8 <__aeabi_uldivmod>
 800398a:	4602      	mov	r2, r0
 800398c:	460b      	mov	r3, r1
 800398e:	4613      	mov	r3, r2
 8003990:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003992:	e053      	b.n	8003a3c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003994:	4b35      	ldr	r3, [pc, #212]	@ (8003a6c <HAL_RCC_GetSysClockFreq+0x180>)
 8003996:	685b      	ldr	r3, [r3, #4]
 8003998:	099b      	lsrs	r3, r3, #6
 800399a:	2200      	movs	r2, #0
 800399c:	613b      	str	r3, [r7, #16]
 800399e:	617a      	str	r2, [r7, #20]
 80039a0:	693b      	ldr	r3, [r7, #16]
 80039a2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80039a6:	f04f 0b00 	mov.w	fp, #0
 80039aa:	4652      	mov	r2, sl
 80039ac:	465b      	mov	r3, fp
 80039ae:	f04f 0000 	mov.w	r0, #0
 80039b2:	f04f 0100 	mov.w	r1, #0
 80039b6:	0159      	lsls	r1, r3, #5
 80039b8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80039bc:	0150      	lsls	r0, r2, #5
 80039be:	4602      	mov	r2, r0
 80039c0:	460b      	mov	r3, r1
 80039c2:	ebb2 080a 	subs.w	r8, r2, sl
 80039c6:	eb63 090b 	sbc.w	r9, r3, fp
 80039ca:	f04f 0200 	mov.w	r2, #0
 80039ce:	f04f 0300 	mov.w	r3, #0
 80039d2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80039d6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80039da:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80039de:	ebb2 0408 	subs.w	r4, r2, r8
 80039e2:	eb63 0509 	sbc.w	r5, r3, r9
 80039e6:	f04f 0200 	mov.w	r2, #0
 80039ea:	f04f 0300 	mov.w	r3, #0
 80039ee:	00eb      	lsls	r3, r5, #3
 80039f0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80039f4:	00e2      	lsls	r2, r4, #3
 80039f6:	4614      	mov	r4, r2
 80039f8:	461d      	mov	r5, r3
 80039fa:	eb14 030a 	adds.w	r3, r4, sl
 80039fe:	603b      	str	r3, [r7, #0]
 8003a00:	eb45 030b 	adc.w	r3, r5, fp
 8003a04:	607b      	str	r3, [r7, #4]
 8003a06:	f04f 0200 	mov.w	r2, #0
 8003a0a:	f04f 0300 	mov.w	r3, #0
 8003a0e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003a12:	4629      	mov	r1, r5
 8003a14:	028b      	lsls	r3, r1, #10
 8003a16:	4621      	mov	r1, r4
 8003a18:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003a1c:	4621      	mov	r1, r4
 8003a1e:	028a      	lsls	r2, r1, #10
 8003a20:	4610      	mov	r0, r2
 8003a22:	4619      	mov	r1, r3
 8003a24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a26:	2200      	movs	r2, #0
 8003a28:	60bb      	str	r3, [r7, #8]
 8003a2a:	60fa      	str	r2, [r7, #12]
 8003a2c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003a30:	f7fd f8da 	bl	8000be8 <__aeabi_uldivmod>
 8003a34:	4602      	mov	r2, r0
 8003a36:	460b      	mov	r3, r1
 8003a38:	4613      	mov	r3, r2
 8003a3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003a3c:	4b0b      	ldr	r3, [pc, #44]	@ (8003a6c <HAL_RCC_GetSysClockFreq+0x180>)
 8003a3e:	685b      	ldr	r3, [r3, #4]
 8003a40:	0c1b      	lsrs	r3, r3, #16
 8003a42:	f003 0303 	and.w	r3, r3, #3
 8003a46:	3301      	adds	r3, #1
 8003a48:	005b      	lsls	r3, r3, #1
 8003a4a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8003a4c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003a4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a50:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a54:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003a56:	e002      	b.n	8003a5e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003a58:	4b05      	ldr	r3, [pc, #20]	@ (8003a70 <HAL_RCC_GetSysClockFreq+0x184>)
 8003a5a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003a5c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003a5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003a60:	4618      	mov	r0, r3
 8003a62:	3740      	adds	r7, #64	@ 0x40
 8003a64:	46bd      	mov	sp, r7
 8003a66:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003a6a:	bf00      	nop
 8003a6c:	40023800 	.word	0x40023800
 8003a70:	00f42400 	.word	0x00f42400
 8003a74:	017d7840 	.word	0x017d7840

08003a78 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a78:	b480      	push	{r7}
 8003a7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a7c:	4b03      	ldr	r3, [pc, #12]	@ (8003a8c <HAL_RCC_GetHCLKFreq+0x14>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
}
 8003a80:	4618      	mov	r0, r3
 8003a82:	46bd      	mov	sp, r7
 8003a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a88:	4770      	bx	lr
 8003a8a:	bf00      	nop
 8003a8c:	20000000 	.word	0x20000000

08003a90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003a94:	f7ff fff0 	bl	8003a78 <HAL_RCC_GetHCLKFreq>
 8003a98:	4602      	mov	r2, r0
 8003a9a:	4b05      	ldr	r3, [pc, #20]	@ (8003ab0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003a9c:	689b      	ldr	r3, [r3, #8]
 8003a9e:	0a9b      	lsrs	r3, r3, #10
 8003aa0:	f003 0307 	and.w	r3, r3, #7
 8003aa4:	4903      	ldr	r1, [pc, #12]	@ (8003ab4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003aa6:	5ccb      	ldrb	r3, [r1, r3]
 8003aa8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003aac:	4618      	mov	r0, r3
 8003aae:	bd80      	pop	{r7, pc}
 8003ab0:	40023800 	.word	0x40023800
 8003ab4:	0800b348 	.word	0x0800b348

08003ab8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003abc:	f7ff ffdc 	bl	8003a78 <HAL_RCC_GetHCLKFreq>
 8003ac0:	4602      	mov	r2, r0
 8003ac2:	4b05      	ldr	r3, [pc, #20]	@ (8003ad8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003ac4:	689b      	ldr	r3, [r3, #8]
 8003ac6:	0b5b      	lsrs	r3, r3, #13
 8003ac8:	f003 0307 	and.w	r3, r3, #7
 8003acc:	4903      	ldr	r1, [pc, #12]	@ (8003adc <HAL_RCC_GetPCLK2Freq+0x24>)
 8003ace:	5ccb      	ldrb	r3, [r1, r3]
 8003ad0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	bd80      	pop	{r7, pc}
 8003ad8:	40023800 	.word	0x40023800
 8003adc:	0800b348 	.word	0x0800b348

08003ae0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003ae0:	b480      	push	{r7}
 8003ae2:	b083      	sub	sp, #12
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
 8003ae8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	220f      	movs	r2, #15
 8003aee:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003af0:	4b12      	ldr	r3, [pc, #72]	@ (8003b3c <HAL_RCC_GetClockConfig+0x5c>)
 8003af2:	689b      	ldr	r3, [r3, #8]
 8003af4:	f003 0203 	and.w	r2, r3, #3
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003afc:	4b0f      	ldr	r3, [pc, #60]	@ (8003b3c <HAL_RCC_GetClockConfig+0x5c>)
 8003afe:	689b      	ldr	r3, [r3, #8]
 8003b00:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003b08:	4b0c      	ldr	r3, [pc, #48]	@ (8003b3c <HAL_RCC_GetClockConfig+0x5c>)
 8003b0a:	689b      	ldr	r3, [r3, #8]
 8003b0c:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003b14:	4b09      	ldr	r3, [pc, #36]	@ (8003b3c <HAL_RCC_GetClockConfig+0x5c>)
 8003b16:	689b      	ldr	r3, [r3, #8]
 8003b18:	08db      	lsrs	r3, r3, #3
 8003b1a:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003b22:	4b07      	ldr	r3, [pc, #28]	@ (8003b40 <HAL_RCC_GetClockConfig+0x60>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f003 020f 	and.w	r2, r3, #15
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	601a      	str	r2, [r3, #0]
}
 8003b2e:	bf00      	nop
 8003b30:	370c      	adds	r7, #12
 8003b32:	46bd      	mov	sp, r7
 8003b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b38:	4770      	bx	lr
 8003b3a:	bf00      	nop
 8003b3c:	40023800 	.word	0x40023800
 8003b40:	40023c00 	.word	0x40023c00

08003b44 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b088      	sub	sp, #32
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003b50:	2300      	movs	r3, #0
 8003b52:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003b54:	2300      	movs	r3, #0
 8003b56:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003b58:	2300      	movs	r3, #0
 8003b5a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f003 0301 	and.w	r3, r3, #1
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d012      	beq.n	8003b92 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003b6c:	4b69      	ldr	r3, [pc, #420]	@ (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b6e:	689b      	ldr	r3, [r3, #8]
 8003b70:	4a68      	ldr	r2, [pc, #416]	@ (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b72:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8003b76:	6093      	str	r3, [r2, #8]
 8003b78:	4b66      	ldr	r3, [pc, #408]	@ (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b7a:	689a      	ldr	r2, [r3, #8]
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b80:	4964      	ldr	r1, [pc, #400]	@ (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b82:	4313      	orrs	r3, r2
 8003b84:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d101      	bne.n	8003b92 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003b8e:	2301      	movs	r3, #1
 8003b90:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d017      	beq.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003b9e:	4b5d      	ldr	r3, [pc, #372]	@ (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ba0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003ba4:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bac:	4959      	ldr	r1, [pc, #356]	@ (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bae:	4313      	orrs	r3, r2
 8003bb0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bb8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003bbc:	d101      	bne.n	8003bc2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d101      	bne.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003bca:	2301      	movs	r3, #1
 8003bcc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d017      	beq.n	8003c0a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003bda:	4b4e      	ldr	r3, [pc, #312]	@ (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bdc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003be0:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003be8:	494a      	ldr	r1, [pc, #296]	@ (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bea:	4313      	orrs	r3, r2
 8003bec:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bf4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003bf8:	d101      	bne.n	8003bfe <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d101      	bne.n	8003c0a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003c06:	2301      	movs	r3, #1
 8003c08:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d001      	beq.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003c16:	2301      	movs	r3, #1
 8003c18:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f003 0320 	and.w	r3, r3, #32
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	f000 808b 	beq.w	8003d3e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003c28:	4b3a      	ldr	r3, [pc, #232]	@ (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c2c:	4a39      	ldr	r2, [pc, #228]	@ (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c2e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003c32:	6413      	str	r3, [r2, #64]	@ 0x40
 8003c34:	4b37      	ldr	r3, [pc, #220]	@ (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c38:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c3c:	60bb      	str	r3, [r7, #8]
 8003c3e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003c40:	4b35      	ldr	r3, [pc, #212]	@ (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4a34      	ldr	r2, [pc, #208]	@ (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003c46:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c4a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c4c:	f7fd fd9a 	bl	8001784 <HAL_GetTick>
 8003c50:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003c52:	e008      	b.n	8003c66 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c54:	f7fd fd96 	bl	8001784 <HAL_GetTick>
 8003c58:	4602      	mov	r2, r0
 8003c5a:	697b      	ldr	r3, [r7, #20]
 8003c5c:	1ad3      	subs	r3, r2, r3
 8003c5e:	2b64      	cmp	r3, #100	@ 0x64
 8003c60:	d901      	bls.n	8003c66 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003c62:	2303      	movs	r3, #3
 8003c64:	e357      	b.n	8004316 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003c66:	4b2c      	ldr	r3, [pc, #176]	@ (8003d18 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d0f0      	beq.n	8003c54 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003c72:	4b28      	ldr	r3, [pc, #160]	@ (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c76:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003c7a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003c7c:	693b      	ldr	r3, [r7, #16]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d035      	beq.n	8003cee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c86:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003c8a:	693a      	ldr	r2, [r7, #16]
 8003c8c:	429a      	cmp	r2, r3
 8003c8e:	d02e      	beq.n	8003cee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003c90:	4b20      	ldr	r3, [pc, #128]	@ (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c94:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003c98:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003c9a:	4b1e      	ldr	r3, [pc, #120]	@ (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c9e:	4a1d      	ldr	r2, [pc, #116]	@ (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ca0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ca4:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003ca6:	4b1b      	ldr	r3, [pc, #108]	@ (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ca8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003caa:	4a1a      	ldr	r2, [pc, #104]	@ (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003cb0:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003cb2:	4a18      	ldr	r2, [pc, #96]	@ (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cb4:	693b      	ldr	r3, [r7, #16]
 8003cb6:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003cb8:	4b16      	ldr	r3, [pc, #88]	@ (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cbc:	f003 0301 	and.w	r3, r3, #1
 8003cc0:	2b01      	cmp	r3, #1
 8003cc2:	d114      	bne.n	8003cee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cc4:	f7fd fd5e 	bl	8001784 <HAL_GetTick>
 8003cc8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cca:	e00a      	b.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ccc:	f7fd fd5a 	bl	8001784 <HAL_GetTick>
 8003cd0:	4602      	mov	r2, r0
 8003cd2:	697b      	ldr	r3, [r7, #20]
 8003cd4:	1ad3      	subs	r3, r2, r3
 8003cd6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d901      	bls.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003cde:	2303      	movs	r3, #3
 8003ce0:	e319      	b.n	8004316 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ce2:	4b0c      	ldr	r3, [pc, #48]	@ (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ce4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ce6:	f003 0302 	and.w	r3, r3, #2
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d0ee      	beq.n	8003ccc <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cf2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003cf6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003cfa:	d111      	bne.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003cfc:	4b05      	ldr	r3, [pc, #20]	@ (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cfe:	689b      	ldr	r3, [r3, #8]
 8003d00:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003d08:	4b04      	ldr	r3, [pc, #16]	@ (8003d1c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003d0a:	400b      	ands	r3, r1
 8003d0c:	4901      	ldr	r1, [pc, #4]	@ (8003d14 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	608b      	str	r3, [r1, #8]
 8003d12:	e00b      	b.n	8003d2c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003d14:	40023800 	.word	0x40023800
 8003d18:	40007000 	.word	0x40007000
 8003d1c:	0ffffcff 	.word	0x0ffffcff
 8003d20:	4baa      	ldr	r3, [pc, #680]	@ (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d22:	689b      	ldr	r3, [r3, #8]
 8003d24:	4aa9      	ldr	r2, [pc, #676]	@ (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d26:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8003d2a:	6093      	str	r3, [r2, #8]
 8003d2c:	4ba7      	ldr	r3, [pc, #668]	@ (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d2e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d38:	49a4      	ldr	r1, [pc, #656]	@ (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d3a:	4313      	orrs	r3, r2
 8003d3c:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f003 0310 	and.w	r3, r3, #16
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d010      	beq.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003d4a:	4ba0      	ldr	r3, [pc, #640]	@ (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003d50:	4a9e      	ldr	r2, [pc, #632]	@ (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d52:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003d56:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8003d5a:	4b9c      	ldr	r3, [pc, #624]	@ (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d5c:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d64:	4999      	ldr	r1, [pc, #612]	@ (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d66:	4313      	orrs	r3, r2
 8003d68:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d00a      	beq.n	8003d8e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003d78:	4b94      	ldr	r3, [pc, #592]	@ (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d7e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003d86:	4991      	ldr	r1, [pc, #580]	@ (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d88:	4313      	orrs	r3, r2
 8003d8a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d00a      	beq.n	8003db0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003d9a:	4b8c      	ldr	r3, [pc, #560]	@ (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003da0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003da8:	4988      	ldr	r1, [pc, #544]	@ (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003daa:	4313      	orrs	r3, r2
 8003dac:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d00a      	beq.n	8003dd2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003dbc:	4b83      	ldr	r3, [pc, #524]	@ (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003dbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003dc2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003dca:	4980      	ldr	r1, [pc, #512]	@ (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003dcc:	4313      	orrs	r3, r2
 8003dce:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d00a      	beq.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003dde:	4b7b      	ldr	r3, [pc, #492]	@ (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003de0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003de4:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003dec:	4977      	ldr	r1, [pc, #476]	@ (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003dee:	4313      	orrs	r3, r2
 8003df0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d00a      	beq.n	8003e16 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003e00:	4b72      	ldr	r3, [pc, #456]	@ (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e06:	f023 0203 	bic.w	r2, r3, #3
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e0e:	496f      	ldr	r1, [pc, #444]	@ (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e10:	4313      	orrs	r3, r2
 8003e12:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d00a      	beq.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003e22:	4b6a      	ldr	r3, [pc, #424]	@ (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e24:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e28:	f023 020c 	bic.w	r2, r3, #12
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e30:	4966      	ldr	r1, [pc, #408]	@ (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e32:	4313      	orrs	r3, r2
 8003e34:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d00a      	beq.n	8003e5a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003e44:	4b61      	ldr	r3, [pc, #388]	@ (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e4a:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e52:	495e      	ldr	r1, [pc, #376]	@ (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e54:	4313      	orrs	r3, r2
 8003e56:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d00a      	beq.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003e66:	4b59      	ldr	r3, [pc, #356]	@ (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e68:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e6c:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e74:	4955      	ldr	r1, [pc, #340]	@ (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e76:	4313      	orrs	r3, r2
 8003e78:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d00a      	beq.n	8003e9e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003e88:	4b50      	ldr	r3, [pc, #320]	@ (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e8e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e96:	494d      	ldr	r1, [pc, #308]	@ (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d00a      	beq.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003eaa:	4b48      	ldr	r3, [pc, #288]	@ (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003eac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003eb0:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003eb8:	4944      	ldr	r1, [pc, #272]	@ (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d00a      	beq.n	8003ee2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003ecc:	4b3f      	ldr	r3, [pc, #252]	@ (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ece:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ed2:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003eda:	493c      	ldr	r1, [pc, #240]	@ (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003edc:	4313      	orrs	r3, r2
 8003ede:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d00a      	beq.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003eee:	4b37      	ldr	r3, [pc, #220]	@ (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ef0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ef4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003efc:	4933      	ldr	r1, [pc, #204]	@ (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003efe:	4313      	orrs	r3, r2
 8003f00:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d00a      	beq.n	8003f26 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003f10:	4b2e      	ldr	r3, [pc, #184]	@ (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f16:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003f1e:	492b      	ldr	r1, [pc, #172]	@ (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f20:	4313      	orrs	r3, r2
 8003f22:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d011      	beq.n	8003f56 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003f32:	4b26      	ldr	r3, [pc, #152]	@ (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f34:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f38:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003f40:	4922      	ldr	r1, [pc, #136]	@ (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f42:	4313      	orrs	r3, r2
 8003f44:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003f4c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003f50:	d101      	bne.n	8003f56 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003f52:	2301      	movs	r3, #1
 8003f54:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f003 0308 	and.w	r3, r3, #8
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d001      	beq.n	8003f66 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003f62:	2301      	movs	r3, #1
 8003f64:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d00a      	beq.n	8003f88 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003f72:	4b16      	ldr	r3, [pc, #88]	@ (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f74:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f78:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f80:	4912      	ldr	r1, [pc, #72]	@ (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f82:	4313      	orrs	r3, r2
 8003f84:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d00b      	beq.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003f94:	4b0d      	ldr	r3, [pc, #52]	@ (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f9a:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003fa4:	4909      	ldr	r1, [pc, #36]	@ (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003fa6:	4313      	orrs	r3, r2
 8003fa8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003fac:	69fb      	ldr	r3, [r7, #28]
 8003fae:	2b01      	cmp	r3, #1
 8003fb0:	d006      	beq.n	8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	f000 80d9 	beq.w	8004172 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003fc0:	4b02      	ldr	r3, [pc, #8]	@ (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4a01      	ldr	r2, [pc, #4]	@ (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003fc6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003fca:	e001      	b.n	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8003fcc:	40023800 	.word	0x40023800
 8003fd0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003fd2:	f7fd fbd7 	bl	8001784 <HAL_GetTick>
 8003fd6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003fd8:	e008      	b.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003fda:	f7fd fbd3 	bl	8001784 <HAL_GetTick>
 8003fde:	4602      	mov	r2, r0
 8003fe0:	697b      	ldr	r3, [r7, #20]
 8003fe2:	1ad3      	subs	r3, r2, r3
 8003fe4:	2b64      	cmp	r3, #100	@ 0x64
 8003fe6:	d901      	bls.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003fe8:	2303      	movs	r3, #3
 8003fea:	e194      	b.n	8004316 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003fec:	4b6c      	ldr	r3, [pc, #432]	@ (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d1f0      	bne.n	8003fda <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f003 0301 	and.w	r3, r3, #1
 8004000:	2b00      	cmp	r3, #0
 8004002:	d021      	beq.n	8004048 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004008:	2b00      	cmp	r3, #0
 800400a:	d11d      	bne.n	8004048 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800400c:	4b64      	ldr	r3, [pc, #400]	@ (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800400e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004012:	0c1b      	lsrs	r3, r3, #16
 8004014:	f003 0303 	and.w	r3, r3, #3
 8004018:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800401a:	4b61      	ldr	r3, [pc, #388]	@ (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800401c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004020:	0e1b      	lsrs	r3, r3, #24
 8004022:	f003 030f 	and.w	r3, r3, #15
 8004026:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	685b      	ldr	r3, [r3, #4]
 800402c:	019a      	lsls	r2, r3, #6
 800402e:	693b      	ldr	r3, [r7, #16]
 8004030:	041b      	lsls	r3, r3, #16
 8004032:	431a      	orrs	r2, r3
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	061b      	lsls	r3, r3, #24
 8004038:	431a      	orrs	r2, r3
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	689b      	ldr	r3, [r3, #8]
 800403e:	071b      	lsls	r3, r3, #28
 8004040:	4957      	ldr	r1, [pc, #348]	@ (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004042:	4313      	orrs	r3, r2
 8004044:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004050:	2b00      	cmp	r3, #0
 8004052:	d004      	beq.n	800405e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004058:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800405c:	d00a      	beq.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004066:	2b00      	cmp	r3, #0
 8004068:	d02e      	beq.n	80040c8 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800406e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004072:	d129      	bne.n	80040c8 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004074:	4b4a      	ldr	r3, [pc, #296]	@ (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004076:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800407a:	0c1b      	lsrs	r3, r3, #16
 800407c:	f003 0303 	and.w	r3, r3, #3
 8004080:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004082:	4b47      	ldr	r3, [pc, #284]	@ (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004084:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004088:	0f1b      	lsrs	r3, r3, #28
 800408a:	f003 0307 	and.w	r3, r3, #7
 800408e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	685b      	ldr	r3, [r3, #4]
 8004094:	019a      	lsls	r2, r3, #6
 8004096:	693b      	ldr	r3, [r7, #16]
 8004098:	041b      	lsls	r3, r3, #16
 800409a:	431a      	orrs	r2, r3
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	68db      	ldr	r3, [r3, #12]
 80040a0:	061b      	lsls	r3, r3, #24
 80040a2:	431a      	orrs	r2, r3
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	071b      	lsls	r3, r3, #28
 80040a8:	493d      	ldr	r1, [pc, #244]	@ (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80040aa:	4313      	orrs	r3, r2
 80040ac:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80040b0:	4b3b      	ldr	r3, [pc, #236]	@ (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80040b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80040b6:	f023 021f 	bic.w	r2, r3, #31
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040be:	3b01      	subs	r3, #1
 80040c0:	4937      	ldr	r1, [pc, #220]	@ (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80040c2:	4313      	orrs	r3, r2
 80040c4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d01d      	beq.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80040d4:	4b32      	ldr	r3, [pc, #200]	@ (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80040d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80040da:	0e1b      	lsrs	r3, r3, #24
 80040dc:	f003 030f 	and.w	r3, r3, #15
 80040e0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80040e2:	4b2f      	ldr	r3, [pc, #188]	@ (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80040e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80040e8:	0f1b      	lsrs	r3, r3, #28
 80040ea:	f003 0307 	and.w	r3, r3, #7
 80040ee:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	685b      	ldr	r3, [r3, #4]
 80040f4:	019a      	lsls	r2, r3, #6
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	691b      	ldr	r3, [r3, #16]
 80040fa:	041b      	lsls	r3, r3, #16
 80040fc:	431a      	orrs	r2, r3
 80040fe:	693b      	ldr	r3, [r7, #16]
 8004100:	061b      	lsls	r3, r3, #24
 8004102:	431a      	orrs	r2, r3
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	071b      	lsls	r3, r3, #28
 8004108:	4925      	ldr	r1, [pc, #148]	@ (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800410a:	4313      	orrs	r3, r2
 800410c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004118:	2b00      	cmp	r3, #0
 800411a:	d011      	beq.n	8004140 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	685b      	ldr	r3, [r3, #4]
 8004120:	019a      	lsls	r2, r3, #6
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	691b      	ldr	r3, [r3, #16]
 8004126:	041b      	lsls	r3, r3, #16
 8004128:	431a      	orrs	r2, r3
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	68db      	ldr	r3, [r3, #12]
 800412e:	061b      	lsls	r3, r3, #24
 8004130:	431a      	orrs	r2, r3
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	689b      	ldr	r3, [r3, #8]
 8004136:	071b      	lsls	r3, r3, #28
 8004138:	4919      	ldr	r1, [pc, #100]	@ (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800413a:	4313      	orrs	r3, r2
 800413c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004140:	4b17      	ldr	r3, [pc, #92]	@ (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	4a16      	ldr	r2, [pc, #88]	@ (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004146:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800414a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800414c:	f7fd fb1a 	bl	8001784 <HAL_GetTick>
 8004150:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004152:	e008      	b.n	8004166 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004154:	f7fd fb16 	bl	8001784 <HAL_GetTick>
 8004158:	4602      	mov	r2, r0
 800415a:	697b      	ldr	r3, [r7, #20]
 800415c:	1ad3      	subs	r3, r2, r3
 800415e:	2b64      	cmp	r3, #100	@ 0x64
 8004160:	d901      	bls.n	8004166 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004162:	2303      	movs	r3, #3
 8004164:	e0d7      	b.n	8004316 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004166:	4b0e      	ldr	r3, [pc, #56]	@ (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800416e:	2b00      	cmp	r3, #0
 8004170:	d0f0      	beq.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004172:	69bb      	ldr	r3, [r7, #24]
 8004174:	2b01      	cmp	r3, #1
 8004176:	f040 80cd 	bne.w	8004314 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800417a:	4b09      	ldr	r3, [pc, #36]	@ (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	4a08      	ldr	r2, [pc, #32]	@ (80041a0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004180:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004184:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004186:	f7fd fafd 	bl	8001784 <HAL_GetTick>
 800418a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800418c:	e00a      	b.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800418e:	f7fd faf9 	bl	8001784 <HAL_GetTick>
 8004192:	4602      	mov	r2, r0
 8004194:	697b      	ldr	r3, [r7, #20]
 8004196:	1ad3      	subs	r3, r2, r3
 8004198:	2b64      	cmp	r3, #100	@ 0x64
 800419a:	d903      	bls.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800419c:	2303      	movs	r3, #3
 800419e:	e0ba      	b.n	8004316 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80041a0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80041a4:	4b5e      	ldr	r3, [pc, #376]	@ (8004320 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80041ac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80041b0:	d0ed      	beq.n	800418e <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d003      	beq.n	80041c6 <HAL_RCCEx_PeriphCLKConfig+0x682>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d009      	beq.n	80041da <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d02e      	beq.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d12a      	bne.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80041da:	4b51      	ldr	r3, [pc, #324]	@ (8004320 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80041dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041e0:	0c1b      	lsrs	r3, r3, #16
 80041e2:	f003 0303 	and.w	r3, r3, #3
 80041e6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80041e8:	4b4d      	ldr	r3, [pc, #308]	@ (8004320 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80041ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041ee:	0f1b      	lsrs	r3, r3, #28
 80041f0:	f003 0307 	and.w	r3, r3, #7
 80041f4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	695b      	ldr	r3, [r3, #20]
 80041fa:	019a      	lsls	r2, r3, #6
 80041fc:	693b      	ldr	r3, [r7, #16]
 80041fe:	041b      	lsls	r3, r3, #16
 8004200:	431a      	orrs	r2, r3
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	699b      	ldr	r3, [r3, #24]
 8004206:	061b      	lsls	r3, r3, #24
 8004208:	431a      	orrs	r2, r3
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	071b      	lsls	r3, r3, #28
 800420e:	4944      	ldr	r1, [pc, #272]	@ (8004320 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004210:	4313      	orrs	r3, r2
 8004212:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004216:	4b42      	ldr	r3, [pc, #264]	@ (8004320 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004218:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800421c:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004224:	3b01      	subs	r3, #1
 8004226:	021b      	lsls	r3, r3, #8
 8004228:	493d      	ldr	r1, [pc, #244]	@ (8004320 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800422a:	4313      	orrs	r3, r2
 800422c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004238:	2b00      	cmp	r3, #0
 800423a:	d022      	beq.n	8004282 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004240:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004244:	d11d      	bne.n	8004282 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004246:	4b36      	ldr	r3, [pc, #216]	@ (8004320 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004248:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800424c:	0e1b      	lsrs	r3, r3, #24
 800424e:	f003 030f 	and.w	r3, r3, #15
 8004252:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004254:	4b32      	ldr	r3, [pc, #200]	@ (8004320 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004256:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800425a:	0f1b      	lsrs	r3, r3, #28
 800425c:	f003 0307 	and.w	r3, r3, #7
 8004260:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	695b      	ldr	r3, [r3, #20]
 8004266:	019a      	lsls	r2, r3, #6
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6a1b      	ldr	r3, [r3, #32]
 800426c:	041b      	lsls	r3, r3, #16
 800426e:	431a      	orrs	r2, r3
 8004270:	693b      	ldr	r3, [r7, #16]
 8004272:	061b      	lsls	r3, r3, #24
 8004274:	431a      	orrs	r2, r3
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	071b      	lsls	r3, r3, #28
 800427a:	4929      	ldr	r1, [pc, #164]	@ (8004320 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800427c:	4313      	orrs	r3, r2
 800427e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f003 0308 	and.w	r3, r3, #8
 800428a:	2b00      	cmp	r3, #0
 800428c:	d028      	beq.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800428e:	4b24      	ldr	r3, [pc, #144]	@ (8004320 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004290:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004294:	0e1b      	lsrs	r3, r3, #24
 8004296:	f003 030f 	and.w	r3, r3, #15
 800429a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800429c:	4b20      	ldr	r3, [pc, #128]	@ (8004320 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800429e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042a2:	0c1b      	lsrs	r3, r3, #16
 80042a4:	f003 0303 	and.w	r3, r3, #3
 80042a8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	695b      	ldr	r3, [r3, #20]
 80042ae:	019a      	lsls	r2, r3, #6
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	041b      	lsls	r3, r3, #16
 80042b4:	431a      	orrs	r2, r3
 80042b6:	693b      	ldr	r3, [r7, #16]
 80042b8:	061b      	lsls	r3, r3, #24
 80042ba:	431a      	orrs	r2, r3
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	69db      	ldr	r3, [r3, #28]
 80042c0:	071b      	lsls	r3, r3, #28
 80042c2:	4917      	ldr	r1, [pc, #92]	@ (8004320 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80042c4:	4313      	orrs	r3, r2
 80042c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80042ca:	4b15      	ldr	r3, [pc, #84]	@ (8004320 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80042cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80042d0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042d8:	4911      	ldr	r1, [pc, #68]	@ (8004320 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80042da:	4313      	orrs	r3, r2
 80042dc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80042e0:	4b0f      	ldr	r3, [pc, #60]	@ (8004320 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	4a0e      	ldr	r2, [pc, #56]	@ (8004320 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80042e6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80042ea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042ec:	f7fd fa4a 	bl	8001784 <HAL_GetTick>
 80042f0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80042f2:	e008      	b.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80042f4:	f7fd fa46 	bl	8001784 <HAL_GetTick>
 80042f8:	4602      	mov	r2, r0
 80042fa:	697b      	ldr	r3, [r7, #20]
 80042fc:	1ad3      	subs	r3, r2, r3
 80042fe:	2b64      	cmp	r3, #100	@ 0x64
 8004300:	d901      	bls.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004302:	2303      	movs	r3, #3
 8004304:	e007      	b.n	8004316 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004306:	4b06      	ldr	r3, [pc, #24]	@ (8004320 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800430e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004312:	d1ef      	bne.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8004314:	2300      	movs	r3, #0
}
 8004316:	4618      	mov	r0, r3
 8004318:	3720      	adds	r7, #32
 800431a:	46bd      	mov	sp, r7
 800431c:	bd80      	pop	{r7, pc}
 800431e:	bf00      	nop
 8004320:	40023800 	.word	0x40023800

08004324 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	b082      	sub	sp, #8
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d101      	bne.n	8004336 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004332:	2301      	movs	r3, #1
 8004334:	e049      	b.n	80043ca <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800433c:	b2db      	uxtb	r3, r3
 800433e:	2b00      	cmp	r3, #0
 8004340:	d106      	bne.n	8004350 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2200      	movs	r2, #0
 8004346:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800434a:	6878      	ldr	r0, [r7, #4]
 800434c:	f000 f841 	bl	80043d2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2202      	movs	r2, #2
 8004354:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681a      	ldr	r2, [r3, #0]
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	3304      	adds	r3, #4
 8004360:	4619      	mov	r1, r3
 8004362:	4610      	mov	r0, r2
 8004364:	f000 f9e8 	bl	8004738 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2201      	movs	r2, #1
 800436c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2201      	movs	r2, #1
 8004374:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2201      	movs	r2, #1
 800437c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2201      	movs	r2, #1
 8004384:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2201      	movs	r2, #1
 800438c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2201      	movs	r2, #1
 8004394:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2201      	movs	r2, #1
 800439c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2201      	movs	r2, #1
 80043a4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2201      	movs	r2, #1
 80043ac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2201      	movs	r2, #1
 80043b4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2201      	movs	r2, #1
 80043bc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2201      	movs	r2, #1
 80043c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80043c8:	2300      	movs	r3, #0
}
 80043ca:	4618      	mov	r0, r3
 80043cc:	3708      	adds	r7, #8
 80043ce:	46bd      	mov	sp, r7
 80043d0:	bd80      	pop	{r7, pc}

080043d2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80043d2:	b480      	push	{r7}
 80043d4:	b083      	sub	sp, #12
 80043d6:	af00      	add	r7, sp, #0
 80043d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80043da:	bf00      	nop
 80043dc:	370c      	adds	r7, #12
 80043de:	46bd      	mov	sp, r7
 80043e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e4:	4770      	bx	lr
	...

080043e8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80043e8:	b480      	push	{r7}
 80043ea:	b085      	sub	sp, #20
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80043f6:	b2db      	uxtb	r3, r3
 80043f8:	2b01      	cmp	r3, #1
 80043fa:	d001      	beq.n	8004400 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80043fc:	2301      	movs	r3, #1
 80043fe:	e054      	b.n	80044aa <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2202      	movs	r2, #2
 8004404:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	68da      	ldr	r2, [r3, #12]
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f042 0201 	orr.w	r2, r2, #1
 8004416:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4a26      	ldr	r2, [pc, #152]	@ (80044b8 <HAL_TIM_Base_Start_IT+0xd0>)
 800441e:	4293      	cmp	r3, r2
 8004420:	d022      	beq.n	8004468 <HAL_TIM_Base_Start_IT+0x80>
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800442a:	d01d      	beq.n	8004468 <HAL_TIM_Base_Start_IT+0x80>
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4a22      	ldr	r2, [pc, #136]	@ (80044bc <HAL_TIM_Base_Start_IT+0xd4>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d018      	beq.n	8004468 <HAL_TIM_Base_Start_IT+0x80>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4a21      	ldr	r2, [pc, #132]	@ (80044c0 <HAL_TIM_Base_Start_IT+0xd8>)
 800443c:	4293      	cmp	r3, r2
 800443e:	d013      	beq.n	8004468 <HAL_TIM_Base_Start_IT+0x80>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4a1f      	ldr	r2, [pc, #124]	@ (80044c4 <HAL_TIM_Base_Start_IT+0xdc>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d00e      	beq.n	8004468 <HAL_TIM_Base_Start_IT+0x80>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4a1e      	ldr	r2, [pc, #120]	@ (80044c8 <HAL_TIM_Base_Start_IT+0xe0>)
 8004450:	4293      	cmp	r3, r2
 8004452:	d009      	beq.n	8004468 <HAL_TIM_Base_Start_IT+0x80>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	4a1c      	ldr	r2, [pc, #112]	@ (80044cc <HAL_TIM_Base_Start_IT+0xe4>)
 800445a:	4293      	cmp	r3, r2
 800445c:	d004      	beq.n	8004468 <HAL_TIM_Base_Start_IT+0x80>
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4a1b      	ldr	r2, [pc, #108]	@ (80044d0 <HAL_TIM_Base_Start_IT+0xe8>)
 8004464:	4293      	cmp	r3, r2
 8004466:	d115      	bne.n	8004494 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	689a      	ldr	r2, [r3, #8]
 800446e:	4b19      	ldr	r3, [pc, #100]	@ (80044d4 <HAL_TIM_Base_Start_IT+0xec>)
 8004470:	4013      	ands	r3, r2
 8004472:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	2b06      	cmp	r3, #6
 8004478:	d015      	beq.n	80044a6 <HAL_TIM_Base_Start_IT+0xbe>
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004480:	d011      	beq.n	80044a6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	681a      	ldr	r2, [r3, #0]
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f042 0201 	orr.w	r2, r2, #1
 8004490:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004492:	e008      	b.n	80044a6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	681a      	ldr	r2, [r3, #0]
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f042 0201 	orr.w	r2, r2, #1
 80044a2:	601a      	str	r2, [r3, #0]
 80044a4:	e000      	b.n	80044a8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044a6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80044a8:	2300      	movs	r3, #0
}
 80044aa:	4618      	mov	r0, r3
 80044ac:	3714      	adds	r7, #20
 80044ae:	46bd      	mov	sp, r7
 80044b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b4:	4770      	bx	lr
 80044b6:	bf00      	nop
 80044b8:	40010000 	.word	0x40010000
 80044bc:	40000400 	.word	0x40000400
 80044c0:	40000800 	.word	0x40000800
 80044c4:	40000c00 	.word	0x40000c00
 80044c8:	40010400 	.word	0x40010400
 80044cc:	40014000 	.word	0x40014000
 80044d0:	40001800 	.word	0x40001800
 80044d4:	00010007 	.word	0x00010007

080044d8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b084      	sub	sp, #16
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	68db      	ldr	r3, [r3, #12]
 80044e6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	691b      	ldr	r3, [r3, #16]
 80044ee:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80044f0:	68bb      	ldr	r3, [r7, #8]
 80044f2:	f003 0302 	and.w	r3, r3, #2
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d020      	beq.n	800453c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	f003 0302 	and.w	r3, r3, #2
 8004500:	2b00      	cmp	r3, #0
 8004502:	d01b      	beq.n	800453c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f06f 0202 	mvn.w	r2, #2
 800450c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2201      	movs	r2, #1
 8004512:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	699b      	ldr	r3, [r3, #24]
 800451a:	f003 0303 	and.w	r3, r3, #3
 800451e:	2b00      	cmp	r3, #0
 8004520:	d003      	beq.n	800452a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004522:	6878      	ldr	r0, [r7, #4]
 8004524:	f000 f8e9 	bl	80046fa <HAL_TIM_IC_CaptureCallback>
 8004528:	e005      	b.n	8004536 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800452a:	6878      	ldr	r0, [r7, #4]
 800452c:	f000 f8db 	bl	80046e6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004530:	6878      	ldr	r0, [r7, #4]
 8004532:	f000 f8ec 	bl	800470e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2200      	movs	r2, #0
 800453a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800453c:	68bb      	ldr	r3, [r7, #8]
 800453e:	f003 0304 	and.w	r3, r3, #4
 8004542:	2b00      	cmp	r3, #0
 8004544:	d020      	beq.n	8004588 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	f003 0304 	and.w	r3, r3, #4
 800454c:	2b00      	cmp	r3, #0
 800454e:	d01b      	beq.n	8004588 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f06f 0204 	mvn.w	r2, #4
 8004558:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2202      	movs	r2, #2
 800455e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	699b      	ldr	r3, [r3, #24]
 8004566:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800456a:	2b00      	cmp	r3, #0
 800456c:	d003      	beq.n	8004576 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800456e:	6878      	ldr	r0, [r7, #4]
 8004570:	f000 f8c3 	bl	80046fa <HAL_TIM_IC_CaptureCallback>
 8004574:	e005      	b.n	8004582 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004576:	6878      	ldr	r0, [r7, #4]
 8004578:	f000 f8b5 	bl	80046e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800457c:	6878      	ldr	r0, [r7, #4]
 800457e:	f000 f8c6 	bl	800470e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2200      	movs	r2, #0
 8004586:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004588:	68bb      	ldr	r3, [r7, #8]
 800458a:	f003 0308 	and.w	r3, r3, #8
 800458e:	2b00      	cmp	r3, #0
 8004590:	d020      	beq.n	80045d4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	f003 0308 	and.w	r3, r3, #8
 8004598:	2b00      	cmp	r3, #0
 800459a:	d01b      	beq.n	80045d4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f06f 0208 	mvn.w	r2, #8
 80045a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	2204      	movs	r2, #4
 80045aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	69db      	ldr	r3, [r3, #28]
 80045b2:	f003 0303 	and.w	r3, r3, #3
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d003      	beq.n	80045c2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045ba:	6878      	ldr	r0, [r7, #4]
 80045bc:	f000 f89d 	bl	80046fa <HAL_TIM_IC_CaptureCallback>
 80045c0:	e005      	b.n	80045ce <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045c2:	6878      	ldr	r0, [r7, #4]
 80045c4:	f000 f88f 	bl	80046e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045c8:	6878      	ldr	r0, [r7, #4]
 80045ca:	f000 f8a0 	bl	800470e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	2200      	movs	r2, #0
 80045d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80045d4:	68bb      	ldr	r3, [r7, #8]
 80045d6:	f003 0310 	and.w	r3, r3, #16
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d020      	beq.n	8004620 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	f003 0310 	and.w	r3, r3, #16
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d01b      	beq.n	8004620 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f06f 0210 	mvn.w	r2, #16
 80045f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2208      	movs	r2, #8
 80045f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	69db      	ldr	r3, [r3, #28]
 80045fe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004602:	2b00      	cmp	r3, #0
 8004604:	d003      	beq.n	800460e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004606:	6878      	ldr	r0, [r7, #4]
 8004608:	f000 f877 	bl	80046fa <HAL_TIM_IC_CaptureCallback>
 800460c:	e005      	b.n	800461a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800460e:	6878      	ldr	r0, [r7, #4]
 8004610:	f000 f869 	bl	80046e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004614:	6878      	ldr	r0, [r7, #4]
 8004616:	f000 f87a 	bl	800470e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2200      	movs	r2, #0
 800461e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004620:	68bb      	ldr	r3, [r7, #8]
 8004622:	f003 0301 	and.w	r3, r3, #1
 8004626:	2b00      	cmp	r3, #0
 8004628:	d00c      	beq.n	8004644 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	f003 0301 	and.w	r3, r3, #1
 8004630:	2b00      	cmp	r3, #0
 8004632:	d007      	beq.n	8004644 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f06f 0201 	mvn.w	r2, #1
 800463c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800463e:	6878      	ldr	r0, [r7, #4]
 8004640:	f7fc fdd6 	bl	80011f0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004644:	68bb      	ldr	r3, [r7, #8]
 8004646:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800464a:	2b00      	cmp	r3, #0
 800464c:	d104      	bne.n	8004658 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800464e:	68bb      	ldr	r3, [r7, #8]
 8004650:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004654:	2b00      	cmp	r3, #0
 8004656:	d00c      	beq.n	8004672 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800465e:	2b00      	cmp	r3, #0
 8004660:	d007      	beq.n	8004672 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800466a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800466c:	6878      	ldr	r0, [r7, #4]
 800466e:	f000 f913 	bl	8004898 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004672:	68bb      	ldr	r3, [r7, #8]
 8004674:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004678:	2b00      	cmp	r3, #0
 800467a:	d00c      	beq.n	8004696 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004682:	2b00      	cmp	r3, #0
 8004684:	d007      	beq.n	8004696 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800468e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004690:	6878      	ldr	r0, [r7, #4]
 8004692:	f000 f90b 	bl	80048ac <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004696:	68bb      	ldr	r3, [r7, #8]
 8004698:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800469c:	2b00      	cmp	r3, #0
 800469e:	d00c      	beq.n	80046ba <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d007      	beq.n	80046ba <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80046b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80046b4:	6878      	ldr	r0, [r7, #4]
 80046b6:	f000 f834 	bl	8004722 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80046ba:	68bb      	ldr	r3, [r7, #8]
 80046bc:	f003 0320 	and.w	r3, r3, #32
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d00c      	beq.n	80046de <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	f003 0320 	and.w	r3, r3, #32
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d007      	beq.n	80046de <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f06f 0220 	mvn.w	r2, #32
 80046d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80046d8:	6878      	ldr	r0, [r7, #4]
 80046da:	f000 f8d3 	bl	8004884 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80046de:	bf00      	nop
 80046e0:	3710      	adds	r7, #16
 80046e2:	46bd      	mov	sp, r7
 80046e4:	bd80      	pop	{r7, pc}

080046e6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80046e6:	b480      	push	{r7}
 80046e8:	b083      	sub	sp, #12
 80046ea:	af00      	add	r7, sp, #0
 80046ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80046ee:	bf00      	nop
 80046f0:	370c      	adds	r7, #12
 80046f2:	46bd      	mov	sp, r7
 80046f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f8:	4770      	bx	lr

080046fa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80046fa:	b480      	push	{r7}
 80046fc:	b083      	sub	sp, #12
 80046fe:	af00      	add	r7, sp, #0
 8004700:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004702:	bf00      	nop
 8004704:	370c      	adds	r7, #12
 8004706:	46bd      	mov	sp, r7
 8004708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470c:	4770      	bx	lr

0800470e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800470e:	b480      	push	{r7}
 8004710:	b083      	sub	sp, #12
 8004712:	af00      	add	r7, sp, #0
 8004714:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004716:	bf00      	nop
 8004718:	370c      	adds	r7, #12
 800471a:	46bd      	mov	sp, r7
 800471c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004720:	4770      	bx	lr

08004722 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004722:	b480      	push	{r7}
 8004724:	b083      	sub	sp, #12
 8004726:	af00      	add	r7, sp, #0
 8004728:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800472a:	bf00      	nop
 800472c:	370c      	adds	r7, #12
 800472e:	46bd      	mov	sp, r7
 8004730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004734:	4770      	bx	lr
	...

08004738 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004738:	b480      	push	{r7}
 800473a:	b085      	sub	sp, #20
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
 8004740:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	4a43      	ldr	r2, [pc, #268]	@ (8004858 <TIM_Base_SetConfig+0x120>)
 800474c:	4293      	cmp	r3, r2
 800474e:	d013      	beq.n	8004778 <TIM_Base_SetConfig+0x40>
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004756:	d00f      	beq.n	8004778 <TIM_Base_SetConfig+0x40>
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	4a40      	ldr	r2, [pc, #256]	@ (800485c <TIM_Base_SetConfig+0x124>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d00b      	beq.n	8004778 <TIM_Base_SetConfig+0x40>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	4a3f      	ldr	r2, [pc, #252]	@ (8004860 <TIM_Base_SetConfig+0x128>)
 8004764:	4293      	cmp	r3, r2
 8004766:	d007      	beq.n	8004778 <TIM_Base_SetConfig+0x40>
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	4a3e      	ldr	r2, [pc, #248]	@ (8004864 <TIM_Base_SetConfig+0x12c>)
 800476c:	4293      	cmp	r3, r2
 800476e:	d003      	beq.n	8004778 <TIM_Base_SetConfig+0x40>
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	4a3d      	ldr	r2, [pc, #244]	@ (8004868 <TIM_Base_SetConfig+0x130>)
 8004774:	4293      	cmp	r3, r2
 8004776:	d108      	bne.n	800478a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800477e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	685b      	ldr	r3, [r3, #4]
 8004784:	68fa      	ldr	r2, [r7, #12]
 8004786:	4313      	orrs	r3, r2
 8004788:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	4a32      	ldr	r2, [pc, #200]	@ (8004858 <TIM_Base_SetConfig+0x120>)
 800478e:	4293      	cmp	r3, r2
 8004790:	d02b      	beq.n	80047ea <TIM_Base_SetConfig+0xb2>
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004798:	d027      	beq.n	80047ea <TIM_Base_SetConfig+0xb2>
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	4a2f      	ldr	r2, [pc, #188]	@ (800485c <TIM_Base_SetConfig+0x124>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d023      	beq.n	80047ea <TIM_Base_SetConfig+0xb2>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	4a2e      	ldr	r2, [pc, #184]	@ (8004860 <TIM_Base_SetConfig+0x128>)
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d01f      	beq.n	80047ea <TIM_Base_SetConfig+0xb2>
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	4a2d      	ldr	r2, [pc, #180]	@ (8004864 <TIM_Base_SetConfig+0x12c>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d01b      	beq.n	80047ea <TIM_Base_SetConfig+0xb2>
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	4a2c      	ldr	r2, [pc, #176]	@ (8004868 <TIM_Base_SetConfig+0x130>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d017      	beq.n	80047ea <TIM_Base_SetConfig+0xb2>
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	4a2b      	ldr	r2, [pc, #172]	@ (800486c <TIM_Base_SetConfig+0x134>)
 80047be:	4293      	cmp	r3, r2
 80047c0:	d013      	beq.n	80047ea <TIM_Base_SetConfig+0xb2>
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	4a2a      	ldr	r2, [pc, #168]	@ (8004870 <TIM_Base_SetConfig+0x138>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d00f      	beq.n	80047ea <TIM_Base_SetConfig+0xb2>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	4a29      	ldr	r2, [pc, #164]	@ (8004874 <TIM_Base_SetConfig+0x13c>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d00b      	beq.n	80047ea <TIM_Base_SetConfig+0xb2>
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	4a28      	ldr	r2, [pc, #160]	@ (8004878 <TIM_Base_SetConfig+0x140>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d007      	beq.n	80047ea <TIM_Base_SetConfig+0xb2>
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	4a27      	ldr	r2, [pc, #156]	@ (800487c <TIM_Base_SetConfig+0x144>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	d003      	beq.n	80047ea <TIM_Base_SetConfig+0xb2>
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	4a26      	ldr	r2, [pc, #152]	@ (8004880 <TIM_Base_SetConfig+0x148>)
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d108      	bne.n	80047fc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80047f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	68db      	ldr	r3, [r3, #12]
 80047f6:	68fa      	ldr	r2, [r7, #12]
 80047f8:	4313      	orrs	r3, r2
 80047fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	695b      	ldr	r3, [r3, #20]
 8004806:	4313      	orrs	r3, r2
 8004808:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	689a      	ldr	r2, [r3, #8]
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	681a      	ldr	r2, [r3, #0]
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	4a0e      	ldr	r2, [pc, #56]	@ (8004858 <TIM_Base_SetConfig+0x120>)
 800481e:	4293      	cmp	r3, r2
 8004820:	d003      	beq.n	800482a <TIM_Base_SetConfig+0xf2>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	4a10      	ldr	r2, [pc, #64]	@ (8004868 <TIM_Base_SetConfig+0x130>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d103      	bne.n	8004832 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	691a      	ldr	r2, [r3, #16]
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f043 0204 	orr.w	r2, r3, #4
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	2201      	movs	r2, #1
 8004842:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	68fa      	ldr	r2, [r7, #12]
 8004848:	601a      	str	r2, [r3, #0]
}
 800484a:	bf00      	nop
 800484c:	3714      	adds	r7, #20
 800484e:	46bd      	mov	sp, r7
 8004850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004854:	4770      	bx	lr
 8004856:	bf00      	nop
 8004858:	40010000 	.word	0x40010000
 800485c:	40000400 	.word	0x40000400
 8004860:	40000800 	.word	0x40000800
 8004864:	40000c00 	.word	0x40000c00
 8004868:	40010400 	.word	0x40010400
 800486c:	40014000 	.word	0x40014000
 8004870:	40014400 	.word	0x40014400
 8004874:	40014800 	.word	0x40014800
 8004878:	40001800 	.word	0x40001800
 800487c:	40001c00 	.word	0x40001c00
 8004880:	40002000 	.word	0x40002000

08004884 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004884:	b480      	push	{r7}
 8004886:	b083      	sub	sp, #12
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800488c:	bf00      	nop
 800488e:	370c      	adds	r7, #12
 8004890:	46bd      	mov	sp, r7
 8004892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004896:	4770      	bx	lr

08004898 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004898:	b480      	push	{r7}
 800489a:	b083      	sub	sp, #12
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80048a0:	bf00      	nop
 80048a2:	370c      	adds	r7, #12
 80048a4:	46bd      	mov	sp, r7
 80048a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048aa:	4770      	bx	lr

080048ac <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80048ac:	b480      	push	{r7}
 80048ae:	b083      	sub	sp, #12
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80048b4:	bf00      	nop
 80048b6:	370c      	adds	r7, #12
 80048b8:	46bd      	mov	sp, r7
 80048ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048be:	4770      	bx	lr

080048c0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b082      	sub	sp, #8
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d101      	bne.n	80048d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80048ce:	2301      	movs	r3, #1
 80048d0:	e040      	b.n	8004954 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d106      	bne.n	80048e8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2200      	movs	r2, #0
 80048de:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80048e2:	6878      	ldr	r0, [r7, #4]
 80048e4:	f7fc fd34 	bl	8001350 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2224      	movs	r2, #36	@ 0x24
 80048ec:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	681a      	ldr	r2, [r3, #0]
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f022 0201 	bic.w	r2, r2, #1
 80048fc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004902:	2b00      	cmp	r3, #0
 8004904:	d002      	beq.n	800490c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004906:	6878      	ldr	r0, [r7, #4]
 8004908:	f000 fb16 	bl	8004f38 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800490c:	6878      	ldr	r0, [r7, #4]
 800490e:	f000 f8af 	bl	8004a70 <UART_SetConfig>
 8004912:	4603      	mov	r3, r0
 8004914:	2b01      	cmp	r3, #1
 8004916:	d101      	bne.n	800491c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004918:	2301      	movs	r3, #1
 800491a:	e01b      	b.n	8004954 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	685a      	ldr	r2, [r3, #4]
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800492a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	689a      	ldr	r2, [r3, #8]
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800493a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	681a      	ldr	r2, [r3, #0]
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f042 0201 	orr.w	r2, r2, #1
 800494a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800494c:	6878      	ldr	r0, [r7, #4]
 800494e:	f000 fb95 	bl	800507c <UART_CheckIdleState>
 8004952:	4603      	mov	r3, r0
}
 8004954:	4618      	mov	r0, r3
 8004956:	3708      	adds	r7, #8
 8004958:	46bd      	mov	sp, r7
 800495a:	bd80      	pop	{r7, pc}

0800495c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b08a      	sub	sp, #40	@ 0x28
 8004960:	af02      	add	r7, sp, #8
 8004962:	60f8      	str	r0, [r7, #12]
 8004964:	60b9      	str	r1, [r7, #8]
 8004966:	603b      	str	r3, [r7, #0]
 8004968:	4613      	mov	r3, r2
 800496a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004970:	2b20      	cmp	r3, #32
 8004972:	d177      	bne.n	8004a64 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8004974:	68bb      	ldr	r3, [r7, #8]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d002      	beq.n	8004980 <HAL_UART_Transmit+0x24>
 800497a:	88fb      	ldrh	r3, [r7, #6]
 800497c:	2b00      	cmp	r3, #0
 800497e:	d101      	bne.n	8004984 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004980:	2301      	movs	r3, #1
 8004982:	e070      	b.n	8004a66 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	2200      	movs	r2, #0
 8004988:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	2221      	movs	r2, #33	@ 0x21
 8004990:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004992:	f7fc fef7 	bl	8001784 <HAL_GetTick>
 8004996:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	88fa      	ldrh	r2, [r7, #6]
 800499c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	88fa      	ldrh	r2, [r7, #6]
 80049a4:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	689b      	ldr	r3, [r3, #8]
 80049ac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80049b0:	d108      	bne.n	80049c4 <HAL_UART_Transmit+0x68>
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	691b      	ldr	r3, [r3, #16]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d104      	bne.n	80049c4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80049ba:	2300      	movs	r3, #0
 80049bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80049be:	68bb      	ldr	r3, [r7, #8]
 80049c0:	61bb      	str	r3, [r7, #24]
 80049c2:	e003      	b.n	80049cc <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80049c4:	68bb      	ldr	r3, [r7, #8]
 80049c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80049c8:	2300      	movs	r3, #0
 80049ca:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80049cc:	e02f      	b.n	8004a2e <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	9300      	str	r3, [sp, #0]
 80049d2:	697b      	ldr	r3, [r7, #20]
 80049d4:	2200      	movs	r2, #0
 80049d6:	2180      	movs	r1, #128	@ 0x80
 80049d8:	68f8      	ldr	r0, [r7, #12]
 80049da:	f000 fba6 	bl	800512a <UART_WaitOnFlagUntilTimeout>
 80049de:	4603      	mov	r3, r0
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d004      	beq.n	80049ee <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	2220      	movs	r2, #32
 80049e8:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80049ea:	2303      	movs	r3, #3
 80049ec:	e03b      	b.n	8004a66 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80049ee:	69fb      	ldr	r3, [r7, #28]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d10b      	bne.n	8004a0c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80049f4:	69bb      	ldr	r3, [r7, #24]
 80049f6:	881b      	ldrh	r3, [r3, #0]
 80049f8:	461a      	mov	r2, r3
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004a02:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004a04:	69bb      	ldr	r3, [r7, #24]
 8004a06:	3302      	adds	r3, #2
 8004a08:	61bb      	str	r3, [r7, #24]
 8004a0a:	e007      	b.n	8004a1c <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004a0c:	69fb      	ldr	r3, [r7, #28]
 8004a0e:	781a      	ldrb	r2, [r3, #0]
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004a16:	69fb      	ldr	r3, [r7, #28]
 8004a18:	3301      	adds	r3, #1
 8004a1a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004a22:	b29b      	uxth	r3, r3
 8004a24:	3b01      	subs	r3, #1
 8004a26:	b29a      	uxth	r2, r3
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004a34:	b29b      	uxth	r3, r3
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d1c9      	bne.n	80049ce <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	9300      	str	r3, [sp, #0]
 8004a3e:	697b      	ldr	r3, [r7, #20]
 8004a40:	2200      	movs	r2, #0
 8004a42:	2140      	movs	r1, #64	@ 0x40
 8004a44:	68f8      	ldr	r0, [r7, #12]
 8004a46:	f000 fb70 	bl	800512a <UART_WaitOnFlagUntilTimeout>
 8004a4a:	4603      	mov	r3, r0
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d004      	beq.n	8004a5a <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	2220      	movs	r2, #32
 8004a54:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8004a56:	2303      	movs	r3, #3
 8004a58:	e005      	b.n	8004a66 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	2220      	movs	r2, #32
 8004a5e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8004a60:	2300      	movs	r3, #0
 8004a62:	e000      	b.n	8004a66 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8004a64:	2302      	movs	r3, #2
  }
}
 8004a66:	4618      	mov	r0, r3
 8004a68:	3720      	adds	r7, #32
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	bd80      	pop	{r7, pc}
	...

08004a70 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b088      	sub	sp, #32
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004a78:	2300      	movs	r3, #0
 8004a7a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	689a      	ldr	r2, [r3, #8]
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	691b      	ldr	r3, [r3, #16]
 8004a84:	431a      	orrs	r2, r3
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	695b      	ldr	r3, [r3, #20]
 8004a8a:	431a      	orrs	r2, r3
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	69db      	ldr	r3, [r3, #28]
 8004a90:	4313      	orrs	r3, r2
 8004a92:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	681a      	ldr	r2, [r3, #0]
 8004a9a:	4ba6      	ldr	r3, [pc, #664]	@ (8004d34 <UART_SetConfig+0x2c4>)
 8004a9c:	4013      	ands	r3, r2
 8004a9e:	687a      	ldr	r2, [r7, #4]
 8004aa0:	6812      	ldr	r2, [r2, #0]
 8004aa2:	6979      	ldr	r1, [r7, #20]
 8004aa4:	430b      	orrs	r3, r1
 8004aa6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	685b      	ldr	r3, [r3, #4]
 8004aae:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	68da      	ldr	r2, [r3, #12]
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	430a      	orrs	r2, r1
 8004abc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	699b      	ldr	r3, [r3, #24]
 8004ac2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6a1b      	ldr	r3, [r3, #32]
 8004ac8:	697a      	ldr	r2, [r7, #20]
 8004aca:	4313      	orrs	r3, r2
 8004acc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	689b      	ldr	r3, [r3, #8]
 8004ad4:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	697a      	ldr	r2, [r7, #20]
 8004ade:	430a      	orrs	r2, r1
 8004ae0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	4a94      	ldr	r2, [pc, #592]	@ (8004d38 <UART_SetConfig+0x2c8>)
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d120      	bne.n	8004b2e <UART_SetConfig+0xbe>
 8004aec:	4b93      	ldr	r3, [pc, #588]	@ (8004d3c <UART_SetConfig+0x2cc>)
 8004aee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004af2:	f003 0303 	and.w	r3, r3, #3
 8004af6:	2b03      	cmp	r3, #3
 8004af8:	d816      	bhi.n	8004b28 <UART_SetConfig+0xb8>
 8004afa:	a201      	add	r2, pc, #4	@ (adr r2, 8004b00 <UART_SetConfig+0x90>)
 8004afc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b00:	08004b11 	.word	0x08004b11
 8004b04:	08004b1d 	.word	0x08004b1d
 8004b08:	08004b17 	.word	0x08004b17
 8004b0c:	08004b23 	.word	0x08004b23
 8004b10:	2301      	movs	r3, #1
 8004b12:	77fb      	strb	r3, [r7, #31]
 8004b14:	e150      	b.n	8004db8 <UART_SetConfig+0x348>
 8004b16:	2302      	movs	r3, #2
 8004b18:	77fb      	strb	r3, [r7, #31]
 8004b1a:	e14d      	b.n	8004db8 <UART_SetConfig+0x348>
 8004b1c:	2304      	movs	r3, #4
 8004b1e:	77fb      	strb	r3, [r7, #31]
 8004b20:	e14a      	b.n	8004db8 <UART_SetConfig+0x348>
 8004b22:	2308      	movs	r3, #8
 8004b24:	77fb      	strb	r3, [r7, #31]
 8004b26:	e147      	b.n	8004db8 <UART_SetConfig+0x348>
 8004b28:	2310      	movs	r3, #16
 8004b2a:	77fb      	strb	r3, [r7, #31]
 8004b2c:	e144      	b.n	8004db8 <UART_SetConfig+0x348>
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	4a83      	ldr	r2, [pc, #524]	@ (8004d40 <UART_SetConfig+0x2d0>)
 8004b34:	4293      	cmp	r3, r2
 8004b36:	d132      	bne.n	8004b9e <UART_SetConfig+0x12e>
 8004b38:	4b80      	ldr	r3, [pc, #512]	@ (8004d3c <UART_SetConfig+0x2cc>)
 8004b3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b3e:	f003 030c 	and.w	r3, r3, #12
 8004b42:	2b0c      	cmp	r3, #12
 8004b44:	d828      	bhi.n	8004b98 <UART_SetConfig+0x128>
 8004b46:	a201      	add	r2, pc, #4	@ (adr r2, 8004b4c <UART_SetConfig+0xdc>)
 8004b48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b4c:	08004b81 	.word	0x08004b81
 8004b50:	08004b99 	.word	0x08004b99
 8004b54:	08004b99 	.word	0x08004b99
 8004b58:	08004b99 	.word	0x08004b99
 8004b5c:	08004b8d 	.word	0x08004b8d
 8004b60:	08004b99 	.word	0x08004b99
 8004b64:	08004b99 	.word	0x08004b99
 8004b68:	08004b99 	.word	0x08004b99
 8004b6c:	08004b87 	.word	0x08004b87
 8004b70:	08004b99 	.word	0x08004b99
 8004b74:	08004b99 	.word	0x08004b99
 8004b78:	08004b99 	.word	0x08004b99
 8004b7c:	08004b93 	.word	0x08004b93
 8004b80:	2300      	movs	r3, #0
 8004b82:	77fb      	strb	r3, [r7, #31]
 8004b84:	e118      	b.n	8004db8 <UART_SetConfig+0x348>
 8004b86:	2302      	movs	r3, #2
 8004b88:	77fb      	strb	r3, [r7, #31]
 8004b8a:	e115      	b.n	8004db8 <UART_SetConfig+0x348>
 8004b8c:	2304      	movs	r3, #4
 8004b8e:	77fb      	strb	r3, [r7, #31]
 8004b90:	e112      	b.n	8004db8 <UART_SetConfig+0x348>
 8004b92:	2308      	movs	r3, #8
 8004b94:	77fb      	strb	r3, [r7, #31]
 8004b96:	e10f      	b.n	8004db8 <UART_SetConfig+0x348>
 8004b98:	2310      	movs	r3, #16
 8004b9a:	77fb      	strb	r3, [r7, #31]
 8004b9c:	e10c      	b.n	8004db8 <UART_SetConfig+0x348>
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	4a68      	ldr	r2, [pc, #416]	@ (8004d44 <UART_SetConfig+0x2d4>)
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	d120      	bne.n	8004bea <UART_SetConfig+0x17a>
 8004ba8:	4b64      	ldr	r3, [pc, #400]	@ (8004d3c <UART_SetConfig+0x2cc>)
 8004baa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004bae:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004bb2:	2b30      	cmp	r3, #48	@ 0x30
 8004bb4:	d013      	beq.n	8004bde <UART_SetConfig+0x16e>
 8004bb6:	2b30      	cmp	r3, #48	@ 0x30
 8004bb8:	d814      	bhi.n	8004be4 <UART_SetConfig+0x174>
 8004bba:	2b20      	cmp	r3, #32
 8004bbc:	d009      	beq.n	8004bd2 <UART_SetConfig+0x162>
 8004bbe:	2b20      	cmp	r3, #32
 8004bc0:	d810      	bhi.n	8004be4 <UART_SetConfig+0x174>
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d002      	beq.n	8004bcc <UART_SetConfig+0x15c>
 8004bc6:	2b10      	cmp	r3, #16
 8004bc8:	d006      	beq.n	8004bd8 <UART_SetConfig+0x168>
 8004bca:	e00b      	b.n	8004be4 <UART_SetConfig+0x174>
 8004bcc:	2300      	movs	r3, #0
 8004bce:	77fb      	strb	r3, [r7, #31]
 8004bd0:	e0f2      	b.n	8004db8 <UART_SetConfig+0x348>
 8004bd2:	2302      	movs	r3, #2
 8004bd4:	77fb      	strb	r3, [r7, #31]
 8004bd6:	e0ef      	b.n	8004db8 <UART_SetConfig+0x348>
 8004bd8:	2304      	movs	r3, #4
 8004bda:	77fb      	strb	r3, [r7, #31]
 8004bdc:	e0ec      	b.n	8004db8 <UART_SetConfig+0x348>
 8004bde:	2308      	movs	r3, #8
 8004be0:	77fb      	strb	r3, [r7, #31]
 8004be2:	e0e9      	b.n	8004db8 <UART_SetConfig+0x348>
 8004be4:	2310      	movs	r3, #16
 8004be6:	77fb      	strb	r3, [r7, #31]
 8004be8:	e0e6      	b.n	8004db8 <UART_SetConfig+0x348>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	4a56      	ldr	r2, [pc, #344]	@ (8004d48 <UART_SetConfig+0x2d8>)
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d120      	bne.n	8004c36 <UART_SetConfig+0x1c6>
 8004bf4:	4b51      	ldr	r3, [pc, #324]	@ (8004d3c <UART_SetConfig+0x2cc>)
 8004bf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004bfa:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004bfe:	2bc0      	cmp	r3, #192	@ 0xc0
 8004c00:	d013      	beq.n	8004c2a <UART_SetConfig+0x1ba>
 8004c02:	2bc0      	cmp	r3, #192	@ 0xc0
 8004c04:	d814      	bhi.n	8004c30 <UART_SetConfig+0x1c0>
 8004c06:	2b80      	cmp	r3, #128	@ 0x80
 8004c08:	d009      	beq.n	8004c1e <UART_SetConfig+0x1ae>
 8004c0a:	2b80      	cmp	r3, #128	@ 0x80
 8004c0c:	d810      	bhi.n	8004c30 <UART_SetConfig+0x1c0>
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d002      	beq.n	8004c18 <UART_SetConfig+0x1a8>
 8004c12:	2b40      	cmp	r3, #64	@ 0x40
 8004c14:	d006      	beq.n	8004c24 <UART_SetConfig+0x1b4>
 8004c16:	e00b      	b.n	8004c30 <UART_SetConfig+0x1c0>
 8004c18:	2300      	movs	r3, #0
 8004c1a:	77fb      	strb	r3, [r7, #31]
 8004c1c:	e0cc      	b.n	8004db8 <UART_SetConfig+0x348>
 8004c1e:	2302      	movs	r3, #2
 8004c20:	77fb      	strb	r3, [r7, #31]
 8004c22:	e0c9      	b.n	8004db8 <UART_SetConfig+0x348>
 8004c24:	2304      	movs	r3, #4
 8004c26:	77fb      	strb	r3, [r7, #31]
 8004c28:	e0c6      	b.n	8004db8 <UART_SetConfig+0x348>
 8004c2a:	2308      	movs	r3, #8
 8004c2c:	77fb      	strb	r3, [r7, #31]
 8004c2e:	e0c3      	b.n	8004db8 <UART_SetConfig+0x348>
 8004c30:	2310      	movs	r3, #16
 8004c32:	77fb      	strb	r3, [r7, #31]
 8004c34:	e0c0      	b.n	8004db8 <UART_SetConfig+0x348>
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	4a44      	ldr	r2, [pc, #272]	@ (8004d4c <UART_SetConfig+0x2dc>)
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d125      	bne.n	8004c8c <UART_SetConfig+0x21c>
 8004c40:	4b3e      	ldr	r3, [pc, #248]	@ (8004d3c <UART_SetConfig+0x2cc>)
 8004c42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c46:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004c4a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004c4e:	d017      	beq.n	8004c80 <UART_SetConfig+0x210>
 8004c50:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004c54:	d817      	bhi.n	8004c86 <UART_SetConfig+0x216>
 8004c56:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004c5a:	d00b      	beq.n	8004c74 <UART_SetConfig+0x204>
 8004c5c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004c60:	d811      	bhi.n	8004c86 <UART_SetConfig+0x216>
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d003      	beq.n	8004c6e <UART_SetConfig+0x1fe>
 8004c66:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004c6a:	d006      	beq.n	8004c7a <UART_SetConfig+0x20a>
 8004c6c:	e00b      	b.n	8004c86 <UART_SetConfig+0x216>
 8004c6e:	2300      	movs	r3, #0
 8004c70:	77fb      	strb	r3, [r7, #31]
 8004c72:	e0a1      	b.n	8004db8 <UART_SetConfig+0x348>
 8004c74:	2302      	movs	r3, #2
 8004c76:	77fb      	strb	r3, [r7, #31]
 8004c78:	e09e      	b.n	8004db8 <UART_SetConfig+0x348>
 8004c7a:	2304      	movs	r3, #4
 8004c7c:	77fb      	strb	r3, [r7, #31]
 8004c7e:	e09b      	b.n	8004db8 <UART_SetConfig+0x348>
 8004c80:	2308      	movs	r3, #8
 8004c82:	77fb      	strb	r3, [r7, #31]
 8004c84:	e098      	b.n	8004db8 <UART_SetConfig+0x348>
 8004c86:	2310      	movs	r3, #16
 8004c88:	77fb      	strb	r3, [r7, #31]
 8004c8a:	e095      	b.n	8004db8 <UART_SetConfig+0x348>
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	4a2f      	ldr	r2, [pc, #188]	@ (8004d50 <UART_SetConfig+0x2e0>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d125      	bne.n	8004ce2 <UART_SetConfig+0x272>
 8004c96:	4b29      	ldr	r3, [pc, #164]	@ (8004d3c <UART_SetConfig+0x2cc>)
 8004c98:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c9c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004ca0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004ca4:	d017      	beq.n	8004cd6 <UART_SetConfig+0x266>
 8004ca6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004caa:	d817      	bhi.n	8004cdc <UART_SetConfig+0x26c>
 8004cac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004cb0:	d00b      	beq.n	8004cca <UART_SetConfig+0x25a>
 8004cb2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004cb6:	d811      	bhi.n	8004cdc <UART_SetConfig+0x26c>
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d003      	beq.n	8004cc4 <UART_SetConfig+0x254>
 8004cbc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004cc0:	d006      	beq.n	8004cd0 <UART_SetConfig+0x260>
 8004cc2:	e00b      	b.n	8004cdc <UART_SetConfig+0x26c>
 8004cc4:	2301      	movs	r3, #1
 8004cc6:	77fb      	strb	r3, [r7, #31]
 8004cc8:	e076      	b.n	8004db8 <UART_SetConfig+0x348>
 8004cca:	2302      	movs	r3, #2
 8004ccc:	77fb      	strb	r3, [r7, #31]
 8004cce:	e073      	b.n	8004db8 <UART_SetConfig+0x348>
 8004cd0:	2304      	movs	r3, #4
 8004cd2:	77fb      	strb	r3, [r7, #31]
 8004cd4:	e070      	b.n	8004db8 <UART_SetConfig+0x348>
 8004cd6:	2308      	movs	r3, #8
 8004cd8:	77fb      	strb	r3, [r7, #31]
 8004cda:	e06d      	b.n	8004db8 <UART_SetConfig+0x348>
 8004cdc:	2310      	movs	r3, #16
 8004cde:	77fb      	strb	r3, [r7, #31]
 8004ce0:	e06a      	b.n	8004db8 <UART_SetConfig+0x348>
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	4a1b      	ldr	r2, [pc, #108]	@ (8004d54 <UART_SetConfig+0x2e4>)
 8004ce8:	4293      	cmp	r3, r2
 8004cea:	d138      	bne.n	8004d5e <UART_SetConfig+0x2ee>
 8004cec:	4b13      	ldr	r3, [pc, #76]	@ (8004d3c <UART_SetConfig+0x2cc>)
 8004cee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004cf2:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8004cf6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004cfa:	d017      	beq.n	8004d2c <UART_SetConfig+0x2bc>
 8004cfc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004d00:	d82a      	bhi.n	8004d58 <UART_SetConfig+0x2e8>
 8004d02:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004d06:	d00b      	beq.n	8004d20 <UART_SetConfig+0x2b0>
 8004d08:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004d0c:	d824      	bhi.n	8004d58 <UART_SetConfig+0x2e8>
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d003      	beq.n	8004d1a <UART_SetConfig+0x2aa>
 8004d12:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d16:	d006      	beq.n	8004d26 <UART_SetConfig+0x2b6>
 8004d18:	e01e      	b.n	8004d58 <UART_SetConfig+0x2e8>
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	77fb      	strb	r3, [r7, #31]
 8004d1e:	e04b      	b.n	8004db8 <UART_SetConfig+0x348>
 8004d20:	2302      	movs	r3, #2
 8004d22:	77fb      	strb	r3, [r7, #31]
 8004d24:	e048      	b.n	8004db8 <UART_SetConfig+0x348>
 8004d26:	2304      	movs	r3, #4
 8004d28:	77fb      	strb	r3, [r7, #31]
 8004d2a:	e045      	b.n	8004db8 <UART_SetConfig+0x348>
 8004d2c:	2308      	movs	r3, #8
 8004d2e:	77fb      	strb	r3, [r7, #31]
 8004d30:	e042      	b.n	8004db8 <UART_SetConfig+0x348>
 8004d32:	bf00      	nop
 8004d34:	efff69f3 	.word	0xefff69f3
 8004d38:	40011000 	.word	0x40011000
 8004d3c:	40023800 	.word	0x40023800
 8004d40:	40004400 	.word	0x40004400
 8004d44:	40004800 	.word	0x40004800
 8004d48:	40004c00 	.word	0x40004c00
 8004d4c:	40005000 	.word	0x40005000
 8004d50:	40011400 	.word	0x40011400
 8004d54:	40007800 	.word	0x40007800
 8004d58:	2310      	movs	r3, #16
 8004d5a:	77fb      	strb	r3, [r7, #31]
 8004d5c:	e02c      	b.n	8004db8 <UART_SetConfig+0x348>
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	4a72      	ldr	r2, [pc, #456]	@ (8004f2c <UART_SetConfig+0x4bc>)
 8004d64:	4293      	cmp	r3, r2
 8004d66:	d125      	bne.n	8004db4 <UART_SetConfig+0x344>
 8004d68:	4b71      	ldr	r3, [pc, #452]	@ (8004f30 <UART_SetConfig+0x4c0>)
 8004d6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004d6e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8004d72:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8004d76:	d017      	beq.n	8004da8 <UART_SetConfig+0x338>
 8004d78:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8004d7c:	d817      	bhi.n	8004dae <UART_SetConfig+0x33e>
 8004d7e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004d82:	d00b      	beq.n	8004d9c <UART_SetConfig+0x32c>
 8004d84:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004d88:	d811      	bhi.n	8004dae <UART_SetConfig+0x33e>
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d003      	beq.n	8004d96 <UART_SetConfig+0x326>
 8004d8e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004d92:	d006      	beq.n	8004da2 <UART_SetConfig+0x332>
 8004d94:	e00b      	b.n	8004dae <UART_SetConfig+0x33e>
 8004d96:	2300      	movs	r3, #0
 8004d98:	77fb      	strb	r3, [r7, #31]
 8004d9a:	e00d      	b.n	8004db8 <UART_SetConfig+0x348>
 8004d9c:	2302      	movs	r3, #2
 8004d9e:	77fb      	strb	r3, [r7, #31]
 8004da0:	e00a      	b.n	8004db8 <UART_SetConfig+0x348>
 8004da2:	2304      	movs	r3, #4
 8004da4:	77fb      	strb	r3, [r7, #31]
 8004da6:	e007      	b.n	8004db8 <UART_SetConfig+0x348>
 8004da8:	2308      	movs	r3, #8
 8004daa:	77fb      	strb	r3, [r7, #31]
 8004dac:	e004      	b.n	8004db8 <UART_SetConfig+0x348>
 8004dae:	2310      	movs	r3, #16
 8004db0:	77fb      	strb	r3, [r7, #31]
 8004db2:	e001      	b.n	8004db8 <UART_SetConfig+0x348>
 8004db4:	2310      	movs	r3, #16
 8004db6:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	69db      	ldr	r3, [r3, #28]
 8004dbc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004dc0:	d15b      	bne.n	8004e7a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8004dc2:	7ffb      	ldrb	r3, [r7, #31]
 8004dc4:	2b08      	cmp	r3, #8
 8004dc6:	d828      	bhi.n	8004e1a <UART_SetConfig+0x3aa>
 8004dc8:	a201      	add	r2, pc, #4	@ (adr r2, 8004dd0 <UART_SetConfig+0x360>)
 8004dca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dce:	bf00      	nop
 8004dd0:	08004df5 	.word	0x08004df5
 8004dd4:	08004dfd 	.word	0x08004dfd
 8004dd8:	08004e05 	.word	0x08004e05
 8004ddc:	08004e1b 	.word	0x08004e1b
 8004de0:	08004e0b 	.word	0x08004e0b
 8004de4:	08004e1b 	.word	0x08004e1b
 8004de8:	08004e1b 	.word	0x08004e1b
 8004dec:	08004e1b 	.word	0x08004e1b
 8004df0:	08004e13 	.word	0x08004e13
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004df4:	f7fe fe4c 	bl	8003a90 <HAL_RCC_GetPCLK1Freq>
 8004df8:	61b8      	str	r0, [r7, #24]
        break;
 8004dfa:	e013      	b.n	8004e24 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004dfc:	f7fe fe5c 	bl	8003ab8 <HAL_RCC_GetPCLK2Freq>
 8004e00:	61b8      	str	r0, [r7, #24]
        break;
 8004e02:	e00f      	b.n	8004e24 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004e04:	4b4b      	ldr	r3, [pc, #300]	@ (8004f34 <UART_SetConfig+0x4c4>)
 8004e06:	61bb      	str	r3, [r7, #24]
        break;
 8004e08:	e00c      	b.n	8004e24 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e0a:	f7fe fd6f 	bl	80038ec <HAL_RCC_GetSysClockFreq>
 8004e0e:	61b8      	str	r0, [r7, #24]
        break;
 8004e10:	e008      	b.n	8004e24 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e12:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004e16:	61bb      	str	r3, [r7, #24]
        break;
 8004e18:	e004      	b.n	8004e24 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004e1e:	2301      	movs	r3, #1
 8004e20:	77bb      	strb	r3, [r7, #30]
        break;
 8004e22:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004e24:	69bb      	ldr	r3, [r7, #24]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d074      	beq.n	8004f14 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004e2a:	69bb      	ldr	r3, [r7, #24]
 8004e2c:	005a      	lsls	r2, r3, #1
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	685b      	ldr	r3, [r3, #4]
 8004e32:	085b      	lsrs	r3, r3, #1
 8004e34:	441a      	add	r2, r3
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	685b      	ldr	r3, [r3, #4]
 8004e3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e3e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e40:	693b      	ldr	r3, [r7, #16]
 8004e42:	2b0f      	cmp	r3, #15
 8004e44:	d916      	bls.n	8004e74 <UART_SetConfig+0x404>
 8004e46:	693b      	ldr	r3, [r7, #16]
 8004e48:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004e4c:	d212      	bcs.n	8004e74 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004e4e:	693b      	ldr	r3, [r7, #16]
 8004e50:	b29b      	uxth	r3, r3
 8004e52:	f023 030f 	bic.w	r3, r3, #15
 8004e56:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004e58:	693b      	ldr	r3, [r7, #16]
 8004e5a:	085b      	lsrs	r3, r3, #1
 8004e5c:	b29b      	uxth	r3, r3
 8004e5e:	f003 0307 	and.w	r3, r3, #7
 8004e62:	b29a      	uxth	r2, r3
 8004e64:	89fb      	ldrh	r3, [r7, #14]
 8004e66:	4313      	orrs	r3, r2
 8004e68:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	89fa      	ldrh	r2, [r7, #14]
 8004e70:	60da      	str	r2, [r3, #12]
 8004e72:	e04f      	b.n	8004f14 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004e74:	2301      	movs	r3, #1
 8004e76:	77bb      	strb	r3, [r7, #30]
 8004e78:	e04c      	b.n	8004f14 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004e7a:	7ffb      	ldrb	r3, [r7, #31]
 8004e7c:	2b08      	cmp	r3, #8
 8004e7e:	d828      	bhi.n	8004ed2 <UART_SetConfig+0x462>
 8004e80:	a201      	add	r2, pc, #4	@ (adr r2, 8004e88 <UART_SetConfig+0x418>)
 8004e82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e86:	bf00      	nop
 8004e88:	08004ead 	.word	0x08004ead
 8004e8c:	08004eb5 	.word	0x08004eb5
 8004e90:	08004ebd 	.word	0x08004ebd
 8004e94:	08004ed3 	.word	0x08004ed3
 8004e98:	08004ec3 	.word	0x08004ec3
 8004e9c:	08004ed3 	.word	0x08004ed3
 8004ea0:	08004ed3 	.word	0x08004ed3
 8004ea4:	08004ed3 	.word	0x08004ed3
 8004ea8:	08004ecb 	.word	0x08004ecb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004eac:	f7fe fdf0 	bl	8003a90 <HAL_RCC_GetPCLK1Freq>
 8004eb0:	61b8      	str	r0, [r7, #24]
        break;
 8004eb2:	e013      	b.n	8004edc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004eb4:	f7fe fe00 	bl	8003ab8 <HAL_RCC_GetPCLK2Freq>
 8004eb8:	61b8      	str	r0, [r7, #24]
        break;
 8004eba:	e00f      	b.n	8004edc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ebc:	4b1d      	ldr	r3, [pc, #116]	@ (8004f34 <UART_SetConfig+0x4c4>)
 8004ebe:	61bb      	str	r3, [r7, #24]
        break;
 8004ec0:	e00c      	b.n	8004edc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004ec2:	f7fe fd13 	bl	80038ec <HAL_RCC_GetSysClockFreq>
 8004ec6:	61b8      	str	r0, [r7, #24]
        break;
 8004ec8:	e008      	b.n	8004edc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004eca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004ece:	61bb      	str	r3, [r7, #24]
        break;
 8004ed0:	e004      	b.n	8004edc <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004ed6:	2301      	movs	r3, #1
 8004ed8:	77bb      	strb	r3, [r7, #30]
        break;
 8004eda:	bf00      	nop
    }

    if (pclk != 0U)
 8004edc:	69bb      	ldr	r3, [r7, #24]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d018      	beq.n	8004f14 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	685b      	ldr	r3, [r3, #4]
 8004ee6:	085a      	lsrs	r2, r3, #1
 8004ee8:	69bb      	ldr	r3, [r7, #24]
 8004eea:	441a      	add	r2, r3
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	685b      	ldr	r3, [r3, #4]
 8004ef0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ef4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ef6:	693b      	ldr	r3, [r7, #16]
 8004ef8:	2b0f      	cmp	r3, #15
 8004efa:	d909      	bls.n	8004f10 <UART_SetConfig+0x4a0>
 8004efc:	693b      	ldr	r3, [r7, #16]
 8004efe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004f02:	d205      	bcs.n	8004f10 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004f04:	693b      	ldr	r3, [r7, #16]
 8004f06:	b29a      	uxth	r2, r3
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	60da      	str	r2, [r3, #12]
 8004f0e:	e001      	b.n	8004f14 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004f10:	2301      	movs	r3, #1
 8004f12:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2200      	movs	r2, #0
 8004f18:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004f20:	7fbb      	ldrb	r3, [r7, #30]
}
 8004f22:	4618      	mov	r0, r3
 8004f24:	3720      	adds	r7, #32
 8004f26:	46bd      	mov	sp, r7
 8004f28:	bd80      	pop	{r7, pc}
 8004f2a:	bf00      	nop
 8004f2c:	40007c00 	.word	0x40007c00
 8004f30:	40023800 	.word	0x40023800
 8004f34:	00f42400 	.word	0x00f42400

08004f38 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004f38:	b480      	push	{r7}
 8004f3a:	b083      	sub	sp, #12
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f44:	f003 0308 	and.w	r3, r3, #8
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d00a      	beq.n	8004f62 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	685b      	ldr	r3, [r3, #4]
 8004f52:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	430a      	orrs	r2, r1
 8004f60:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f66:	f003 0301 	and.w	r3, r3, #1
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d00a      	beq.n	8004f84 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	685b      	ldr	r3, [r3, #4]
 8004f74:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	430a      	orrs	r2, r1
 8004f82:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f88:	f003 0302 	and.w	r3, r3, #2
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d00a      	beq.n	8004fa6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	685b      	ldr	r3, [r3, #4]
 8004f96:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	430a      	orrs	r2, r1
 8004fa4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004faa:	f003 0304 	and.w	r3, r3, #4
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d00a      	beq.n	8004fc8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	685b      	ldr	r3, [r3, #4]
 8004fb8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	430a      	orrs	r2, r1
 8004fc6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fcc:	f003 0310 	and.w	r3, r3, #16
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d00a      	beq.n	8004fea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	689b      	ldr	r3, [r3, #8]
 8004fda:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	430a      	orrs	r2, r1
 8004fe8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fee:	f003 0320 	and.w	r3, r3, #32
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d00a      	beq.n	800500c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	689b      	ldr	r3, [r3, #8]
 8004ffc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	430a      	orrs	r2, r1
 800500a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005010:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005014:	2b00      	cmp	r3, #0
 8005016:	d01a      	beq.n	800504e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	685b      	ldr	r3, [r3, #4]
 800501e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	430a      	orrs	r2, r1
 800502c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005032:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005036:	d10a      	bne.n	800504e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	685b      	ldr	r3, [r3, #4]
 800503e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	430a      	orrs	r2, r1
 800504c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005052:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005056:	2b00      	cmp	r3, #0
 8005058:	d00a      	beq.n	8005070 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	685b      	ldr	r3, [r3, #4]
 8005060:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	430a      	orrs	r2, r1
 800506e:	605a      	str	r2, [r3, #4]
  }
}
 8005070:	bf00      	nop
 8005072:	370c      	adds	r7, #12
 8005074:	46bd      	mov	sp, r7
 8005076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507a:	4770      	bx	lr

0800507c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800507c:	b580      	push	{r7, lr}
 800507e:	b08c      	sub	sp, #48	@ 0x30
 8005080:	af02      	add	r7, sp, #8
 8005082:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2200      	movs	r2, #0
 8005088:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800508c:	f7fc fb7a 	bl	8001784 <HAL_GetTick>
 8005090:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f003 0308 	and.w	r3, r3, #8
 800509c:	2b08      	cmp	r3, #8
 800509e:	d12e      	bne.n	80050fe <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80050a0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80050a4:	9300      	str	r3, [sp, #0]
 80050a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050a8:	2200      	movs	r2, #0
 80050aa:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80050ae:	6878      	ldr	r0, [r7, #4]
 80050b0:	f000 f83b 	bl	800512a <UART_WaitOnFlagUntilTimeout>
 80050b4:	4603      	mov	r3, r0
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d021      	beq.n	80050fe <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	613b      	str	r3, [r7, #16]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050c0:	693b      	ldr	r3, [r7, #16]
 80050c2:	e853 3f00 	ldrex	r3, [r3]
 80050c6:	60fb      	str	r3, [r7, #12]
   return(result);
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80050ce:	623b      	str	r3, [r7, #32]
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	461a      	mov	r2, r3
 80050d6:	6a3b      	ldr	r3, [r7, #32]
 80050d8:	61fb      	str	r3, [r7, #28]
 80050da:	61ba      	str	r2, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050dc:	69b9      	ldr	r1, [r7, #24]
 80050de:	69fa      	ldr	r2, [r7, #28]
 80050e0:	e841 2300 	strex	r3, r2, [r1]
 80050e4:	617b      	str	r3, [r7, #20]
   return(result);
 80050e6:	697b      	ldr	r3, [r7, #20]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d1e6      	bne.n	80050ba <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2220      	movs	r2, #32
 80050f0:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2200      	movs	r2, #0
 80050f6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80050fa:	2303      	movs	r3, #3
 80050fc:	e011      	b.n	8005122 <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2220      	movs	r2, #32
 8005102:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2220      	movs	r2, #32
 8005108:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2200      	movs	r2, #0
 8005110:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	2200      	movs	r2, #0
 8005116:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2200      	movs	r2, #0
 800511c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8005120:	2300      	movs	r3, #0
}
 8005122:	4618      	mov	r0, r3
 8005124:	3728      	adds	r7, #40	@ 0x28
 8005126:	46bd      	mov	sp, r7
 8005128:	bd80      	pop	{r7, pc}

0800512a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800512a:	b580      	push	{r7, lr}
 800512c:	b084      	sub	sp, #16
 800512e:	af00      	add	r7, sp, #0
 8005130:	60f8      	str	r0, [r7, #12]
 8005132:	60b9      	str	r1, [r7, #8]
 8005134:	603b      	str	r3, [r7, #0]
 8005136:	4613      	mov	r3, r2
 8005138:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800513a:	e04f      	b.n	80051dc <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800513c:	69bb      	ldr	r3, [r7, #24]
 800513e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005142:	d04b      	beq.n	80051dc <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005144:	f7fc fb1e 	bl	8001784 <HAL_GetTick>
 8005148:	4602      	mov	r2, r0
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	1ad3      	subs	r3, r2, r3
 800514e:	69ba      	ldr	r2, [r7, #24]
 8005150:	429a      	cmp	r2, r3
 8005152:	d302      	bcc.n	800515a <UART_WaitOnFlagUntilTimeout+0x30>
 8005154:	69bb      	ldr	r3, [r7, #24]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d101      	bne.n	800515e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800515a:	2303      	movs	r3, #3
 800515c:	e04e      	b.n	80051fc <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f003 0304 	and.w	r3, r3, #4
 8005168:	2b00      	cmp	r3, #0
 800516a:	d037      	beq.n	80051dc <UART_WaitOnFlagUntilTimeout+0xb2>
 800516c:	68bb      	ldr	r3, [r7, #8]
 800516e:	2b80      	cmp	r3, #128	@ 0x80
 8005170:	d034      	beq.n	80051dc <UART_WaitOnFlagUntilTimeout+0xb2>
 8005172:	68bb      	ldr	r3, [r7, #8]
 8005174:	2b40      	cmp	r3, #64	@ 0x40
 8005176:	d031      	beq.n	80051dc <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	69db      	ldr	r3, [r3, #28]
 800517e:	f003 0308 	and.w	r3, r3, #8
 8005182:	2b08      	cmp	r3, #8
 8005184:	d110      	bne.n	80051a8 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	2208      	movs	r2, #8
 800518c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800518e:	68f8      	ldr	r0, [r7, #12]
 8005190:	f000 f838 	bl	8005204 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	2208      	movs	r2, #8
 8005198:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	2200      	movs	r2, #0
 80051a0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80051a4:	2301      	movs	r3, #1
 80051a6:	e029      	b.n	80051fc <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	69db      	ldr	r3, [r3, #28]
 80051ae:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80051b2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80051b6:	d111      	bne.n	80051dc <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80051c0:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80051c2:	68f8      	ldr	r0, [r7, #12]
 80051c4:	f000 f81e 	bl	8005204 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	2220      	movs	r2, #32
 80051cc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	2200      	movs	r2, #0
 80051d4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80051d8:	2303      	movs	r3, #3
 80051da:	e00f      	b.n	80051fc <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	69da      	ldr	r2, [r3, #28]
 80051e2:	68bb      	ldr	r3, [r7, #8]
 80051e4:	4013      	ands	r3, r2
 80051e6:	68ba      	ldr	r2, [r7, #8]
 80051e8:	429a      	cmp	r2, r3
 80051ea:	bf0c      	ite	eq
 80051ec:	2301      	moveq	r3, #1
 80051ee:	2300      	movne	r3, #0
 80051f0:	b2db      	uxtb	r3, r3
 80051f2:	461a      	mov	r2, r3
 80051f4:	79fb      	ldrb	r3, [r7, #7]
 80051f6:	429a      	cmp	r2, r3
 80051f8:	d0a0      	beq.n	800513c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80051fa:	2300      	movs	r3, #0
}
 80051fc:	4618      	mov	r0, r3
 80051fe:	3710      	adds	r7, #16
 8005200:	46bd      	mov	sp, r7
 8005202:	bd80      	pop	{r7, pc}

08005204 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005204:	b480      	push	{r7}
 8005206:	b095      	sub	sp, #84	@ 0x54
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005212:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005214:	e853 3f00 	ldrex	r3, [r3]
 8005218:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800521a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800521c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005220:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	461a      	mov	r2, r3
 8005228:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800522a:	643b      	str	r3, [r7, #64]	@ 0x40
 800522c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800522e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005230:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005232:	e841 2300 	strex	r3, r2, [r1]
 8005236:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005238:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800523a:	2b00      	cmp	r3, #0
 800523c:	d1e6      	bne.n	800520c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	3308      	adds	r3, #8
 8005244:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005246:	6a3b      	ldr	r3, [r7, #32]
 8005248:	e853 3f00 	ldrex	r3, [r3]
 800524c:	61fb      	str	r3, [r7, #28]
   return(result);
 800524e:	69fb      	ldr	r3, [r7, #28]
 8005250:	f023 0301 	bic.w	r3, r3, #1
 8005254:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	3308      	adds	r3, #8
 800525c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800525e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005260:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005262:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005264:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005266:	e841 2300 	strex	r3, r2, [r1]
 800526a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800526c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800526e:	2b00      	cmp	r3, #0
 8005270:	d1e5      	bne.n	800523e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005276:	2b01      	cmp	r3, #1
 8005278:	d118      	bne.n	80052ac <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	e853 3f00 	ldrex	r3, [r3]
 8005286:	60bb      	str	r3, [r7, #8]
   return(result);
 8005288:	68bb      	ldr	r3, [r7, #8]
 800528a:	f023 0310 	bic.w	r3, r3, #16
 800528e:	647b      	str	r3, [r7, #68]	@ 0x44
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	461a      	mov	r2, r3
 8005296:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005298:	61bb      	str	r3, [r7, #24]
 800529a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800529c:	6979      	ldr	r1, [r7, #20]
 800529e:	69ba      	ldr	r2, [r7, #24]
 80052a0:	e841 2300 	strex	r3, r2, [r1]
 80052a4:	613b      	str	r3, [r7, #16]
   return(result);
 80052a6:	693b      	ldr	r3, [r7, #16]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d1e6      	bne.n	800527a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2220      	movs	r2, #32
 80052b0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2200      	movs	r2, #0
 80052b8:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	2200      	movs	r2, #0
 80052be:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80052c0:	bf00      	nop
 80052c2:	3754      	adds	r7, #84	@ 0x54
 80052c4:	46bd      	mov	sp, r7
 80052c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ca:	4770      	bx	lr

080052cc <StartGPSTask>:
static uint32_t until_next_park = 0;

extern osMessageQueueId_t gpsMsgQueueHandle;

void StartGPSTask(void *argument)
{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b082      	sub	sp, #8
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
	srand(0);
 80052d4:	2000      	movs	r0, #0
 80052d6:	f003 fa31 	bl	800873c <srand>
	lat = rand_float_range(LAT_MIN, LAT_MAX);
 80052da:	eddf 0a37 	vldr	s1, [pc, #220]	@ 80053b8 <StartGPSTask+0xec>
 80052de:	ed9f 0a37 	vldr	s0, [pc, #220]	@ 80053bc <StartGPSTask+0xf0>
 80052e2:	f000 f87f 	bl	80053e4 <rand_float_range>
 80052e6:	eef0 7a40 	vmov.f32	s15, s0
 80052ea:	4b35      	ldr	r3, [pc, #212]	@ (80053c0 <StartGPSTask+0xf4>)
 80052ec:	edc3 7a00 	vstr	s15, [r3]
	lon = rand_float_range(LON_MIN, LON_MAX);
 80052f0:	eddf 0a34 	vldr	s1, [pc, #208]	@ 80053c4 <StartGPSTask+0xf8>
 80052f4:	ed9f 0a34 	vldr	s0, [pc, #208]	@ 80053c8 <StartGPSTask+0xfc>
 80052f8:	f000 f874 	bl	80053e4 <rand_float_range>
 80052fc:	eef0 7a40 	vmov.f32	s15, s0
 8005300:	4b32      	ldr	r3, [pc, #200]	@ (80053cc <StartGPSTask+0x100>)
 8005302:	edc3 7a00 	vstr	s15, [r3]

	until_next_park = rand_uint_range(PARK_INTERVAL_MIN, PARK_INTERVAL_MAX);
 8005306:	210f      	movs	r1, #15
 8005308:	2005      	movs	r0, #5
 800530a:	f000 f88f 	bl	800542c <rand_uint_range>
 800530e:	4603      	mov	r3, r0
 8005310:	4a2f      	ldr	r2, [pc, #188]	@ (80053d0 <StartGPSTask+0x104>)
 8005312:	6013      	str	r3, [r2, #0]

	while (1)
	{
		utc_seconds++;
 8005314:	4b2f      	ldr	r3, [pc, #188]	@ (80053d4 <StartGPSTask+0x108>)
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	3301      	adds	r3, #1
 800531a:	4a2e      	ldr	r2, [pc, #184]	@ (80053d4 <StartGPSTask+0x108>)
 800531c:	6013      	str	r3, [r2, #0]

		if (is_parking)
 800531e:	4b2e      	ldr	r3, [pc, #184]	@ (80053d8 <StartGPSTask+0x10c>)
 8005320:	781b      	ldrb	r3, [r3, #0]
 8005322:	2b00      	cmp	r3, #0
 8005324:	d027      	beq.n	8005376 <StartGPSTask+0xaa>
		{
			if (park_counter == 0)
 8005326:	4b2d      	ldr	r3, [pc, #180]	@ (80053dc <StartGPSTask+0x110>)
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	2b00      	cmp	r3, #0
 800532c:	d103      	bne.n	8005336 <StartGPSTask+0x6a>
			{
				send_gps_msg(MSG_START);
 800532e:	2001      	movs	r0, #1
 8005330:	f000 f90c 	bl	800554c <send_gps_msg>
 8005334:	e019      	b.n	800536a <StartGPSTask+0x9e>
			}
			else if (park_counter >= park_duration)
 8005336:	4b29      	ldr	r3, [pc, #164]	@ (80053dc <StartGPSTask+0x110>)
 8005338:	681a      	ldr	r2, [r3, #0]
 800533a:	4b29      	ldr	r3, [pc, #164]	@ (80053e0 <StartGPSTask+0x114>)
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	429a      	cmp	r2, r3
 8005340:	d310      	bcc.n	8005364 <StartGPSTask+0x98>
			{
				send_gps_msg(MSG_STOP);
 8005342:	2002      	movs	r0, #2
 8005344:	f000 f902 	bl	800554c <send_gps_msg>
				is_parking = 0;
 8005348:	4b23      	ldr	r3, [pc, #140]	@ (80053d8 <StartGPSTask+0x10c>)
 800534a:	2200      	movs	r2, #0
 800534c:	701a      	strb	r2, [r3, #0]
				until_next_park = rand_uint_range(PARK_INTERVAL_MIN, PARK_INTERVAL_MAX);
 800534e:	210f      	movs	r1, #15
 8005350:	2005      	movs	r0, #5
 8005352:	f000 f86b 	bl	800542c <rand_uint_range>
 8005356:	4603      	mov	r3, r0
 8005358:	4a1d      	ldr	r2, [pc, #116]	@ (80053d0 <StartGPSTask+0x104>)
 800535a:	6013      	str	r3, [r2, #0]
				park_counter = 0;
 800535c:	4b1f      	ldr	r3, [pc, #124]	@ (80053dc <StartGPSTask+0x110>)
 800535e:	2200      	movs	r2, #0
 8005360:	601a      	str	r2, [r3, #0]
 8005362:	e002      	b.n	800536a <StartGPSTask+0x9e>
			}
			else
			{
				send_gps_msg(MSG_IDLE);
 8005364:	2000      	movs	r0, #0
 8005366:	f000 f8f1 	bl	800554c <send_gps_msg>
			}
			park_counter++;
 800536a:	4b1c      	ldr	r3, [pc, #112]	@ (80053dc <StartGPSTask+0x110>)
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	3301      	adds	r3, #1
 8005370:	4a1a      	ldr	r2, [pc, #104]	@ (80053dc <StartGPSTask+0x110>)
 8005372:	6013      	str	r3, [r2, #0]
 8005374:	e01a      	b.n	80053ac <StartGPSTask+0xe0>
		}
		else
		{
			update_position_randomly();
 8005376:	f000 f871 	bl	800545c <update_position_randomly>
			send_gps_msg(MSG_IDLE);
 800537a:	2000      	movs	r0, #0
 800537c:	f000 f8e6 	bl	800554c <send_gps_msg>
			if (--until_next_park == 0)
 8005380:	4b13      	ldr	r3, [pc, #76]	@ (80053d0 <StartGPSTask+0x104>)
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	3b01      	subs	r3, #1
 8005386:	4a12      	ldr	r2, [pc, #72]	@ (80053d0 <StartGPSTask+0x104>)
 8005388:	6013      	str	r3, [r2, #0]
 800538a:	4b11      	ldr	r3, [pc, #68]	@ (80053d0 <StartGPSTask+0x104>)
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	2b00      	cmp	r3, #0
 8005390:	d10c      	bne.n	80053ac <StartGPSTask+0xe0>
			{
				is_parking = 1;
 8005392:	4b11      	ldr	r3, [pc, #68]	@ (80053d8 <StartGPSTask+0x10c>)
 8005394:	2201      	movs	r2, #1
 8005396:	701a      	strb	r2, [r3, #0]
				park_duration = rand_uint_range(PARK_DURATION_MIN, PARK_DURATION_MAX);
 8005398:	210a      	movs	r1, #10
 800539a:	2001      	movs	r0, #1
 800539c:	f000 f846 	bl	800542c <rand_uint_range>
 80053a0:	4603      	mov	r3, r0
 80053a2:	4a0f      	ldr	r2, [pc, #60]	@ (80053e0 <StartGPSTask+0x114>)
 80053a4:	6013      	str	r3, [r2, #0]
				park_counter = 0;
 80053a6:	4b0d      	ldr	r3, [pc, #52]	@ (80053dc <StartGPSTask+0x110>)
 80053a8:	2200      	movs	r2, #0
 80053aa:	601a      	str	r2, [r3, #0]
			}
		}

		osDelay(1000);
 80053ac:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80053b0:	f000 fa70 	bl	8005894 <osDelay>
		utc_seconds++;
 80053b4:	e7ae      	b.n	8005314 <StartGPSTask+0x48>
 80053b6:	bf00      	nop
 80053b8:	42053333 	.word	0x42053333
 80053bc:	41ec0000 	.word	0x41ec0000
 80053c0:	20000338 	.word	0x20000338
 80053c4:	420f999a 	.word	0x420f999a
 80053c8:	4208cccd 	.word	0x4208cccd
 80053cc:	2000033c 	.word	0x2000033c
 80053d0:	2000034c 	.word	0x2000034c
 80053d4:	20000334 	.word	0x20000334
 80053d8:	20000340 	.word	0x20000340
 80053dc:	20000344 	.word	0x20000344
 80053e0:	20000348 	.word	0x20000348

080053e4 <rand_float_range>:
	}
}

static float rand_float_range(float min, float max)
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b082      	sub	sp, #8
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	ed87 0a01 	vstr	s0, [r7, #4]
 80053ee:	edc7 0a00 	vstr	s1, [r7]
    return min + ((float)rand() / RAND_MAX) * (max - min);
 80053f2:	f003 f9d1 	bl	8008798 <rand>
 80053f6:	ee07 0a90 	vmov	s15, r0
 80053fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80053fe:	eddf 6a0a 	vldr	s13, [pc, #40]	@ 8005428 <rand_float_range+0x44>
 8005402:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8005406:	edd7 6a00 	vldr	s13, [r7]
 800540a:	edd7 7a01 	vldr	s15, [r7, #4]
 800540e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8005412:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005416:	edd7 7a01 	vldr	s15, [r7, #4]
 800541a:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 800541e:	eeb0 0a67 	vmov.f32	s0, s15
 8005422:	3708      	adds	r7, #8
 8005424:	46bd      	mov	sp, r7
 8005426:	bd80      	pop	{r7, pc}
 8005428:	4f000000 	.word	0x4f000000

0800542c <rand_uint_range>:

static uint32_t rand_uint_range(uint32_t min, uint32_t max)
{
 800542c:	b580      	push	{r7, lr}
 800542e:	b082      	sub	sp, #8
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
 8005434:	6039      	str	r1, [r7, #0]
    return min + (rand() % (max - min + 1));
 8005436:	f003 f9af 	bl	8008798 <rand>
 800543a:	4603      	mov	r3, r0
 800543c:	461a      	mov	r2, r3
 800543e:	6839      	ldr	r1, [r7, #0]
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	1acb      	subs	r3, r1, r3
 8005444:	3301      	adds	r3, #1
 8005446:	fbb2 f1f3 	udiv	r1, r2, r3
 800544a:	fb01 f303 	mul.w	r3, r1, r3
 800544e:	1ad2      	subs	r2, r2, r3
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	4413      	add	r3, r2
}
 8005454:	4618      	mov	r0, r3
 8005456:	3708      	adds	r7, #8
 8005458:	46bd      	mov	sp, r7
 800545a:	bd80      	pop	{r7, pc}

0800545c <update_position_randomly>:

static void update_position_randomly(void)
{
 800545c:	b580      	push	{r7, lr}
 800545e:	b082      	sub	sp, #8
 8005460:	af00      	add	r7, sp, #0
    float d_lat = rand_float_range(MOVE_STEP_MIN, MOVE_STEP_MAX);
 8005462:	eddf 0a2e 	vldr	s1, [pc, #184]	@ 800551c <update_position_randomly+0xc0>
 8005466:	ed9f 0a2e 	vldr	s0, [pc, #184]	@ 8005520 <update_position_randomly+0xc4>
 800546a:	f7ff ffbb 	bl	80053e4 <rand_float_range>
 800546e:	ed87 0a01 	vstr	s0, [r7, #4]
    float d_lon = rand_float_range(MOVE_STEP_MIN, MOVE_STEP_MAX);
 8005472:	eddf 0a2a 	vldr	s1, [pc, #168]	@ 800551c <update_position_randomly+0xc0>
 8005476:	ed9f 0a2a 	vldr	s0, [pc, #168]	@ 8005520 <update_position_randomly+0xc4>
 800547a:	f7ff ffb3 	bl	80053e4 <rand_float_range>
 800547e:	ed87 0a00 	vstr	s0, [r7]

    lat += d_lat;
 8005482:	4b28      	ldr	r3, [pc, #160]	@ (8005524 <update_position_randomly+0xc8>)
 8005484:	ed93 7a00 	vldr	s14, [r3]
 8005488:	edd7 7a01 	vldr	s15, [r7, #4]
 800548c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005490:	4b24      	ldr	r3, [pc, #144]	@ (8005524 <update_position_randomly+0xc8>)
 8005492:	edc3 7a00 	vstr	s15, [r3]
    lon += d_lon;
 8005496:	4b24      	ldr	r3, [pc, #144]	@ (8005528 <update_position_randomly+0xcc>)
 8005498:	ed93 7a00 	vldr	s14, [r3]
 800549c:	edd7 7a00 	vldr	s15, [r7]
 80054a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80054a4:	4b20      	ldr	r3, [pc, #128]	@ (8005528 <update_position_randomly+0xcc>)
 80054a6:	edc3 7a00 	vstr	s15, [r3]

    if (lat < LAT_MIN) lat = LAT_MIN;
 80054aa:	4b1e      	ldr	r3, [pc, #120]	@ (8005524 <update_position_randomly+0xc8>)
 80054ac:	edd3 7a00 	vldr	s15, [r3]
 80054b0:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 800552c <update_position_randomly+0xd0>
 80054b4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80054b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054bc:	d502      	bpl.n	80054c4 <update_position_randomly+0x68>
 80054be:	4b19      	ldr	r3, [pc, #100]	@ (8005524 <update_position_randomly+0xc8>)
 80054c0:	4a1b      	ldr	r2, [pc, #108]	@ (8005530 <update_position_randomly+0xd4>)
 80054c2:	601a      	str	r2, [r3, #0]
    if (lat > LAT_MAX) lat = LAT_MAX;
 80054c4:	4b17      	ldr	r3, [pc, #92]	@ (8005524 <update_position_randomly+0xc8>)
 80054c6:	edd3 7a00 	vldr	s15, [r3]
 80054ca:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 8005534 <update_position_randomly+0xd8>
 80054ce:	eef4 7ac7 	vcmpe.f32	s15, s14
 80054d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054d6:	dd02      	ble.n	80054de <update_position_randomly+0x82>
 80054d8:	4b12      	ldr	r3, [pc, #72]	@ (8005524 <update_position_randomly+0xc8>)
 80054da:	4a17      	ldr	r2, [pc, #92]	@ (8005538 <update_position_randomly+0xdc>)
 80054dc:	601a      	str	r2, [r3, #0]
    if (lon < LON_MIN) lon = LON_MIN;
 80054de:	4b12      	ldr	r3, [pc, #72]	@ (8005528 <update_position_randomly+0xcc>)
 80054e0:	edd3 7a00 	vldr	s15, [r3]
 80054e4:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 800553c <update_position_randomly+0xe0>
 80054e8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80054ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80054f0:	d502      	bpl.n	80054f8 <update_position_randomly+0x9c>
 80054f2:	4b0d      	ldr	r3, [pc, #52]	@ (8005528 <update_position_randomly+0xcc>)
 80054f4:	4a12      	ldr	r2, [pc, #72]	@ (8005540 <update_position_randomly+0xe4>)
 80054f6:	601a      	str	r2, [r3, #0]
    if (lon > LON_MAX) lon = LON_MAX;
 80054f8:	4b0b      	ldr	r3, [pc, #44]	@ (8005528 <update_position_randomly+0xcc>)
 80054fa:	edd3 7a00 	vldr	s15, [r3]
 80054fe:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 8005544 <update_position_randomly+0xe8>
 8005502:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005506:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800550a:	dc00      	bgt.n	800550e <update_position_randomly+0xb2>
}
 800550c:	e002      	b.n	8005514 <update_position_randomly+0xb8>
    if (lon > LON_MAX) lon = LON_MAX;
 800550e:	4b06      	ldr	r3, [pc, #24]	@ (8005528 <update_position_randomly+0xcc>)
 8005510:	4a0d      	ldr	r2, [pc, #52]	@ (8005548 <update_position_randomly+0xec>)
 8005512:	601a      	str	r2, [r3, #0]
}
 8005514:	bf00      	nop
 8005516:	3708      	adds	r7, #8
 8005518:	46bd      	mov	sp, r7
 800551a:	bd80      	pop	{r7, pc}
 800551c:	3a03126f 	.word	0x3a03126f
 8005520:	ba03126f 	.word	0xba03126f
 8005524:	20000338 	.word	0x20000338
 8005528:	2000033c 	.word	0x2000033c
 800552c:	41ec0000 	.word	0x41ec0000
 8005530:	41ec0000 	.word	0x41ec0000
 8005534:	42053333 	.word	0x42053333
 8005538:	42053333 	.word	0x42053333
 800553c:	4208cccd 	.word	0x4208cccd
 8005540:	4208cccd 	.word	0x4208cccd
 8005544:	420f999a 	.word	0x420f999a
 8005548:	420f999a 	.word	0x420f999a

0800554c <send_gps_msg>:

void send_gps_msg(msg_type_t type)
{
 800554c:	b580      	push	{r7, lr}
 800554e:	b088      	sub	sp, #32
 8005550:	af00      	add	r7, sp, #0
 8005552:	4603      	mov	r3, r0
 8005554:	71fb      	strb	r3, [r7, #7]
	gps_msg_t msg;
	msg.msg_type = type;
 8005556:	79fb      	ldrb	r3, [r7, #7]
 8005558:	733b      	strb	r3, [r7, #12]
	msg.license_id = LICENSE_ID;
 800555a:	2300      	movs	r3, #0
 800555c:	f043 034e 	orr.w	r3, r3, #78	@ 0x4e
 8005560:	737b      	strb	r3, [r7, #13]
 8005562:	2300      	movs	r3, #0
 8005564:	f043 0361 	orr.w	r3, r3, #97	@ 0x61
 8005568:	73bb      	strb	r3, [r7, #14]
 800556a:	2300      	movs	r3, #0
 800556c:	f063 0343 	orn	r3, r3, #67	@ 0x43
 8005570:	73fb      	strb	r3, [r7, #15]
 8005572:	2300      	movs	r3, #0
 8005574:	743b      	strb	r3, [r7, #16]
	msg.utc_seconds = utc_seconds;
 8005576:	4b0c      	ldr	r3, [pc, #48]	@ (80055a8 <send_gps_msg+0x5c>)
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f8c7 3011 	str.w	r3, [r7, #17]
	msg.latitude = lat;
 800557e:	4b0b      	ldr	r3, [pc, #44]	@ (80055ac <send_gps_msg+0x60>)
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f8c7 3015 	str.w	r3, [r7, #21]
	msg.longitude = lon;
 8005586:	4b0a      	ldr	r3, [pc, #40]	@ (80055b0 <send_gps_msg+0x64>)
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f8c7 3019 	str.w	r3, [r7, #25]

	osMessageQueuePut(gpsMsgQueueHandle, &msg, 0, osWaitForever);
 800558e:	4b09      	ldr	r3, [pc, #36]	@ (80055b4 <send_gps_msg+0x68>)
 8005590:	6818      	ldr	r0, [r3, #0]
 8005592:	f107 010c 	add.w	r1, r7, #12
 8005596:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800559a:	2200      	movs	r2, #0
 800559c:	f000 fa2e 	bl	80059fc <osMessageQueuePut>
}
 80055a0:	bf00      	nop
 80055a2:	3720      	adds	r7, #32
 80055a4:	46bd      	mov	sp, r7
 80055a6:	bd80      	pop	{r7, pc}
 80055a8:	20000334 	.word	0x20000334
 80055ac:	20000338 	.word	0x20000338
 80055b0:	2000033c 	.word	0x2000033c
 80055b4:	200002dc 	.word	0x200002dc

080055b8 <StartI2CSenderTask>:

extern I2C_HandleTypeDef hi2c1;
extern osMessageQueueId_t gpsMsgQueueHandle;

void StartI2CSenderTask(void *argument)
{
 80055b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80055bc:	b08c      	sub	sp, #48	@ 0x30
 80055be:	af04      	add	r7, sp, #16
 80055c0:	6078      	str	r0, [r7, #4]
	gps_msg_t msg;
	while (1)
	{
		if (osMessageQueueGet(gpsMsgQueueHandle, &msg, 0, osWaitForever) == osOK)
 80055c2:	4b22      	ldr	r3, [pc, #136]	@ (800564c <StartI2CSenderTask+0x94>)
 80055c4:	6818      	ldr	r0, [r3, #0]
 80055c6:	f107 0108 	add.w	r1, r7, #8
 80055ca:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80055ce:	2200      	movs	r2, #0
 80055d0:	f000 fa88 	bl	8005ae4 <osMessageQueueGet>
 80055d4:	4603      	mov	r3, r0
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d1f3      	bne.n	80055c2 <StartI2CSenderTask+0xa>
		{
			char *type_str;
			if(msg.msg_type == MSG_IDLE) type_str = "IDLE";
 80055da:	7a3b      	ldrb	r3, [r7, #8]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d102      	bne.n	80055e6 <StartI2CSenderTask+0x2e>
 80055e0:	4b1b      	ldr	r3, [pc, #108]	@ (8005650 <StartI2CSenderTask+0x98>)
 80055e2:	61fb      	str	r3, [r7, #28]
 80055e4:	e00a      	b.n	80055fc <StartI2CSenderTask+0x44>
			else if(msg.msg_type == MSG_START) type_str = "START";
 80055e6:	7a3b      	ldrb	r3, [r7, #8]
 80055e8:	2b01      	cmp	r3, #1
 80055ea:	d102      	bne.n	80055f2 <StartI2CSenderTask+0x3a>
 80055ec:	4b19      	ldr	r3, [pc, #100]	@ (8005654 <StartI2CSenderTask+0x9c>)
 80055ee:	61fb      	str	r3, [r7, #28]
 80055f0:	e004      	b.n	80055fc <StartI2CSenderTask+0x44>
			else if(msg.msg_type == MSG_STOP) type_str = "STOP";
 80055f2:	7a3b      	ldrb	r3, [r7, #8]
 80055f4:	2b02      	cmp	r3, #2
 80055f6:	d101      	bne.n	80055fc <StartI2CSenderTask+0x44>
 80055f8:	4b17      	ldr	r3, [pc, #92]	@ (8005658 <StartI2CSenderTask+0xa0>)
 80055fa:	61fb      	str	r3, [r7, #28]

			printf("Sent %s message: license=%08lu, time=%lu, lat=%.6f, lon=%.6f\n",
		           type_str, (unsigned long)msg.license_id, (unsigned long)msg.utc_seconds,
 80055fc:	f8d7 6009 	ldr.w	r6, [r7, #9]
 8005600:	f8d7 800d 	ldr.w	r8, [r7, #13]
		           msg.latitude, msg.longitude);
 8005604:	f8d7 3011 	ldr.w	r3, [r7, #17]
			printf("Sent %s message: license=%08lu, time=%lu, lat=%.6f, lon=%.6f\n",
 8005608:	4618      	mov	r0, r3
 800560a:	f7fa ffbd 	bl	8000588 <__aeabi_f2d>
 800560e:	4604      	mov	r4, r0
 8005610:	460d      	mov	r5, r1
		           msg.latitude, msg.longitude);
 8005612:	f8d7 3015 	ldr.w	r3, [r7, #21]
			printf("Sent %s message: license=%08lu, time=%lu, lat=%.6f, lon=%.6f\n",
 8005616:	4618      	mov	r0, r3
 8005618:	f7fa ffb6 	bl	8000588 <__aeabi_f2d>
 800561c:	4602      	mov	r2, r0
 800561e:	460b      	mov	r3, r1
 8005620:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005624:	e9cd 4500 	strd	r4, r5, [sp]
 8005628:	4643      	mov	r3, r8
 800562a:	4632      	mov	r2, r6
 800562c:	69f9      	ldr	r1, [r7, #28]
 800562e:	480b      	ldr	r0, [pc, #44]	@ (800565c <StartI2CSenderTask+0xa4>)
 8005630:	f003 fe08 	bl	8009244 <iprintf>

			HAL_I2C_Master_Transmit(&hi2c1, DEVICE_I2C_ADDR << 1, (uint8_t*)&msg, sizeof(msg), HAL_MAX_DELAY);
 8005634:	f107 0208 	add.w	r2, r7, #8
 8005638:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800563c:	9300      	str	r3, [sp, #0]
 800563e:	2311      	movs	r3, #17
 8005640:	2120      	movs	r1, #32
 8005642:	4807      	ldr	r0, [pc, #28]	@ (8005660 <StartI2CSenderTask+0xa8>)
 8005644:	f7fc fc04 	bl	8001e50 <HAL_I2C_Master_Transmit>
		if (osMessageQueueGet(gpsMsgQueueHandle, &msg, 0, osWaitForever) == osOK)
 8005648:	e7bb      	b.n	80055c2 <StartI2CSenderTask+0xa>
 800564a:	bf00      	nop
 800564c:	200002dc 	.word	0x200002dc
 8005650:	0800b244 	.word	0x0800b244
 8005654:	0800b24c 	.word	0x0800b24c
 8005658:	0800b254 	.word	0x0800b254
 800565c:	0800b25c 	.word	0x0800b25c
 8005660:	200001f4 	.word	0x200001f4

08005664 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005664:	b480      	push	{r7}
 8005666:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8005668:	bf00      	nop
 800566a:	46bd      	mov	sp, r7
 800566c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005670:	4770      	bx	lr
	...

08005674 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005674:	b480      	push	{r7}
 8005676:	b085      	sub	sp, #20
 8005678:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800567a:	f3ef 8305 	mrs	r3, IPSR
 800567e:	60bb      	str	r3, [r7, #8]
  return(result);
 8005680:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005682:	2b00      	cmp	r3, #0
 8005684:	d10f      	bne.n	80056a6 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005686:	f3ef 8310 	mrs	r3, PRIMASK
 800568a:	607b      	str	r3, [r7, #4]
  return(result);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2b00      	cmp	r3, #0
 8005690:	d105      	bne.n	800569e <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005692:	f3ef 8311 	mrs	r3, BASEPRI
 8005696:	603b      	str	r3, [r7, #0]
  return(result);
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d007      	beq.n	80056ae <osKernelInitialize+0x3a>
 800569e:	4b0e      	ldr	r3, [pc, #56]	@ (80056d8 <osKernelInitialize+0x64>)
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	2b02      	cmp	r3, #2
 80056a4:	d103      	bne.n	80056ae <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80056a6:	f06f 0305 	mvn.w	r3, #5
 80056aa:	60fb      	str	r3, [r7, #12]
 80056ac:	e00c      	b.n	80056c8 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80056ae:	4b0a      	ldr	r3, [pc, #40]	@ (80056d8 <osKernelInitialize+0x64>)
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d105      	bne.n	80056c2 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80056b6:	4b08      	ldr	r3, [pc, #32]	@ (80056d8 <osKernelInitialize+0x64>)
 80056b8:	2201      	movs	r2, #1
 80056ba:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80056bc:	2300      	movs	r3, #0
 80056be:	60fb      	str	r3, [r7, #12]
 80056c0:	e002      	b.n	80056c8 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80056c2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80056c6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80056c8:	68fb      	ldr	r3, [r7, #12]
}
 80056ca:	4618      	mov	r0, r3
 80056cc:	3714      	adds	r7, #20
 80056ce:	46bd      	mov	sp, r7
 80056d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d4:	4770      	bx	lr
 80056d6:	bf00      	nop
 80056d8:	20000350 	.word	0x20000350

080056dc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80056dc:	b580      	push	{r7, lr}
 80056de:	b084      	sub	sp, #16
 80056e0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80056e2:	f3ef 8305 	mrs	r3, IPSR
 80056e6:	60bb      	str	r3, [r7, #8]
  return(result);
 80056e8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d10f      	bne.n	800570e <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80056ee:	f3ef 8310 	mrs	r3, PRIMASK
 80056f2:	607b      	str	r3, [r7, #4]
  return(result);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d105      	bne.n	8005706 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80056fa:	f3ef 8311 	mrs	r3, BASEPRI
 80056fe:	603b      	str	r3, [r7, #0]
  return(result);
 8005700:	683b      	ldr	r3, [r7, #0]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d007      	beq.n	8005716 <osKernelStart+0x3a>
 8005706:	4b0f      	ldr	r3, [pc, #60]	@ (8005744 <osKernelStart+0x68>)
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	2b02      	cmp	r3, #2
 800570c:	d103      	bne.n	8005716 <osKernelStart+0x3a>
    stat = osErrorISR;
 800570e:	f06f 0305 	mvn.w	r3, #5
 8005712:	60fb      	str	r3, [r7, #12]
 8005714:	e010      	b.n	8005738 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005716:	4b0b      	ldr	r3, [pc, #44]	@ (8005744 <osKernelStart+0x68>)
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	2b01      	cmp	r3, #1
 800571c:	d109      	bne.n	8005732 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800571e:	f7ff ffa1 	bl	8005664 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005722:	4b08      	ldr	r3, [pc, #32]	@ (8005744 <osKernelStart+0x68>)
 8005724:	2202      	movs	r2, #2
 8005726:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005728:	f001 fb1a 	bl	8006d60 <vTaskStartScheduler>
      stat = osOK;
 800572c:	2300      	movs	r3, #0
 800572e:	60fb      	str	r3, [r7, #12]
 8005730:	e002      	b.n	8005738 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8005732:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005736:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8005738:	68fb      	ldr	r3, [r7, #12]
}
 800573a:	4618      	mov	r0, r3
 800573c:	3710      	adds	r7, #16
 800573e:	46bd      	mov	sp, r7
 8005740:	bd80      	pop	{r7, pc}
 8005742:	bf00      	nop
 8005744:	20000350 	.word	0x20000350

08005748 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005748:	b580      	push	{r7, lr}
 800574a:	b090      	sub	sp, #64	@ 0x40
 800574c:	af04      	add	r7, sp, #16
 800574e:	60f8      	str	r0, [r7, #12]
 8005750:	60b9      	str	r1, [r7, #8]
 8005752:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005754:	2300      	movs	r3, #0
 8005756:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005758:	f3ef 8305 	mrs	r3, IPSR
 800575c:	61fb      	str	r3, [r7, #28]
  return(result);
 800575e:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8005760:	2b00      	cmp	r3, #0
 8005762:	f040 8090 	bne.w	8005886 <osThreadNew+0x13e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005766:	f3ef 8310 	mrs	r3, PRIMASK
 800576a:	61bb      	str	r3, [r7, #24]
  return(result);
 800576c:	69bb      	ldr	r3, [r7, #24]
 800576e:	2b00      	cmp	r3, #0
 8005770:	d105      	bne.n	800577e <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005772:	f3ef 8311 	mrs	r3, BASEPRI
 8005776:	617b      	str	r3, [r7, #20]
  return(result);
 8005778:	697b      	ldr	r3, [r7, #20]
 800577a:	2b00      	cmp	r3, #0
 800577c:	d003      	beq.n	8005786 <osThreadNew+0x3e>
 800577e:	4b44      	ldr	r3, [pc, #272]	@ (8005890 <osThreadNew+0x148>)
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	2b02      	cmp	r3, #2
 8005784:	d07f      	beq.n	8005886 <osThreadNew+0x13e>
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	2b00      	cmp	r3, #0
 800578a:	d07c      	beq.n	8005886 <osThreadNew+0x13e>
    stack = configMINIMAL_STACK_SIZE;
 800578c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005790:	62bb      	str	r3, [r7, #40]	@ 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8005792:	2318      	movs	r3, #24
 8005794:	627b      	str	r3, [r7, #36]	@ 0x24

    name = NULL;
 8005796:	2300      	movs	r3, #0
 8005798:	62fb      	str	r3, [r7, #44]	@ 0x2c
    mem  = -1;
 800579a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800579e:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d045      	beq.n	8005832 <osThreadNew+0xea>
      if (attr->name != NULL) {
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d002      	beq.n	80057b4 <osThreadNew+0x6c>
        name = attr->name;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (attr->priority != osPriorityNone) {
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	699b      	ldr	r3, [r3, #24]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d002      	beq.n	80057c2 <osThreadNew+0x7a>
        prio = (UBaseType_t)attr->priority;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	699b      	ldr	r3, [r3, #24]
 80057c0:	627b      	str	r3, [r7, #36]	@ 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80057c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d008      	beq.n	80057da <osThreadNew+0x92>
 80057c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057ca:	2b38      	cmp	r3, #56	@ 0x38
 80057cc:	d805      	bhi.n	80057da <osThreadNew+0x92>
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	685b      	ldr	r3, [r3, #4]
 80057d2:	f003 0301 	and.w	r3, r3, #1
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d001      	beq.n	80057de <osThreadNew+0x96>
        return (NULL);
 80057da:	2300      	movs	r3, #0
 80057dc:	e054      	b.n	8005888 <osThreadNew+0x140>
      }

      if (attr->stack_size > 0U) {
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	695b      	ldr	r3, [r3, #20]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d003      	beq.n	80057ee <osThreadNew+0xa6>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	695b      	ldr	r3, [r3, #20]
 80057ea:	089b      	lsrs	r3, r3, #2
 80057ec:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	689b      	ldr	r3, [r3, #8]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d00e      	beq.n	8005814 <osThreadNew+0xcc>
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	68db      	ldr	r3, [r3, #12]
 80057fa:	2ba7      	cmp	r3, #167	@ 0xa7
 80057fc:	d90a      	bls.n	8005814 <osThreadNew+0xcc>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005802:	2b00      	cmp	r3, #0
 8005804:	d006      	beq.n	8005814 <osThreadNew+0xcc>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	695b      	ldr	r3, [r3, #20]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d002      	beq.n	8005814 <osThreadNew+0xcc>
        mem = 1;
 800580e:	2301      	movs	r3, #1
 8005810:	623b      	str	r3, [r7, #32]
 8005812:	e010      	b.n	8005836 <osThreadNew+0xee>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	689b      	ldr	r3, [r3, #8]
 8005818:	2b00      	cmp	r3, #0
 800581a:	d10c      	bne.n	8005836 <osThreadNew+0xee>
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	68db      	ldr	r3, [r3, #12]
 8005820:	2b00      	cmp	r3, #0
 8005822:	d108      	bne.n	8005836 <osThreadNew+0xee>
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	691b      	ldr	r3, [r3, #16]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d104      	bne.n	8005836 <osThreadNew+0xee>
          mem = 0;
 800582c:	2300      	movs	r3, #0
 800582e:	623b      	str	r3, [r7, #32]
 8005830:	e001      	b.n	8005836 <osThreadNew+0xee>
        }
      }
    }
    else {
      mem = 0;
 8005832:	2300      	movs	r3, #0
 8005834:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8005836:	6a3b      	ldr	r3, [r7, #32]
 8005838:	2b01      	cmp	r3, #1
 800583a:	d110      	bne.n	800585e <osThreadNew+0x116>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8005840:	687a      	ldr	r2, [r7, #4]
 8005842:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005844:	9202      	str	r2, [sp, #8]
 8005846:	9301      	str	r3, [sp, #4]
 8005848:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800584a:	9300      	str	r3, [sp, #0]
 800584c:	68bb      	ldr	r3, [r7, #8]
 800584e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005850:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005852:	68f8      	ldr	r0, [r7, #12]
 8005854:	f001 f886 	bl	8006964 <xTaskCreateStatic>
 8005858:	4603      	mov	r3, r0
 800585a:	613b      	str	r3, [r7, #16]
 800585c:	e013      	b.n	8005886 <osThreadNew+0x13e>
    }
    else {
      if (mem == 0) {
 800585e:	6a3b      	ldr	r3, [r7, #32]
 8005860:	2b00      	cmp	r3, #0
 8005862:	d110      	bne.n	8005886 <osThreadNew+0x13e>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005864:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005866:	b29a      	uxth	r2, r3
 8005868:	f107 0310 	add.w	r3, r7, #16
 800586c:	9301      	str	r3, [sp, #4]
 800586e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005870:	9300      	str	r3, [sp, #0]
 8005872:	68bb      	ldr	r3, [r7, #8]
 8005874:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005876:	68f8      	ldr	r0, [r7, #12]
 8005878:	f001 f8da 	bl	8006a30 <xTaskCreate>
 800587c:	4603      	mov	r3, r0
 800587e:	2b01      	cmp	r3, #1
 8005880:	d001      	beq.n	8005886 <osThreadNew+0x13e>
          hTask = NULL;
 8005882:	2300      	movs	r3, #0
 8005884:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005886:	693b      	ldr	r3, [r7, #16]
}
 8005888:	4618      	mov	r0, r3
 800588a:	3730      	adds	r7, #48	@ 0x30
 800588c:	46bd      	mov	sp, r7
 800588e:	bd80      	pop	{r7, pc}
 8005890:	20000350 	.word	0x20000350

08005894 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8005894:	b580      	push	{r7, lr}
 8005896:	b086      	sub	sp, #24
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800589c:	f3ef 8305 	mrs	r3, IPSR
 80058a0:	613b      	str	r3, [r7, #16]
  return(result);
 80058a2:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d10f      	bne.n	80058c8 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80058a8:	f3ef 8310 	mrs	r3, PRIMASK
 80058ac:	60fb      	str	r3, [r7, #12]
  return(result);
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d105      	bne.n	80058c0 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80058b4:	f3ef 8311 	mrs	r3, BASEPRI
 80058b8:	60bb      	str	r3, [r7, #8]
  return(result);
 80058ba:	68bb      	ldr	r3, [r7, #8]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d007      	beq.n	80058d0 <osDelay+0x3c>
 80058c0:	4b0a      	ldr	r3, [pc, #40]	@ (80058ec <osDelay+0x58>)
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	2b02      	cmp	r3, #2
 80058c6:	d103      	bne.n	80058d0 <osDelay+0x3c>
    stat = osErrorISR;
 80058c8:	f06f 0305 	mvn.w	r3, #5
 80058cc:	617b      	str	r3, [r7, #20]
 80058ce:	e007      	b.n	80058e0 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80058d0:	2300      	movs	r3, #0
 80058d2:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d002      	beq.n	80058e0 <osDelay+0x4c>
      vTaskDelay(ticks);
 80058da:	6878      	ldr	r0, [r7, #4]
 80058dc:	f001 fa08 	bl	8006cf0 <vTaskDelay>
    }
  }

  return (stat);
 80058e0:	697b      	ldr	r3, [r7, #20]
}
 80058e2:	4618      	mov	r0, r3
 80058e4:	3718      	adds	r7, #24
 80058e6:	46bd      	mov	sp, r7
 80058e8:	bd80      	pop	{r7, pc}
 80058ea:	bf00      	nop
 80058ec:	20000350 	.word	0x20000350

080058f0 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80058f0:	b580      	push	{r7, lr}
 80058f2:	b08c      	sub	sp, #48	@ 0x30
 80058f4:	af02      	add	r7, sp, #8
 80058f6:	60f8      	str	r0, [r7, #12]
 80058f8:	60b9      	str	r1, [r7, #8]
 80058fa:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80058fc:	2300      	movs	r3, #0
 80058fe:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005900:	f3ef 8305 	mrs	r3, IPSR
 8005904:	61bb      	str	r3, [r7, #24]
  return(result);
 8005906:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8005908:	2b00      	cmp	r3, #0
 800590a:	d16f      	bne.n	80059ec <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800590c:	f3ef 8310 	mrs	r3, PRIMASK
 8005910:	617b      	str	r3, [r7, #20]
  return(result);
 8005912:	697b      	ldr	r3, [r7, #20]
 8005914:	2b00      	cmp	r3, #0
 8005916:	d105      	bne.n	8005924 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005918:	f3ef 8311 	mrs	r3, BASEPRI
 800591c:	613b      	str	r3, [r7, #16]
  return(result);
 800591e:	693b      	ldr	r3, [r7, #16]
 8005920:	2b00      	cmp	r3, #0
 8005922:	d003      	beq.n	800592c <osMessageQueueNew+0x3c>
 8005924:	4b34      	ldr	r3, [pc, #208]	@ (80059f8 <osMessageQueueNew+0x108>)
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	2b02      	cmp	r3, #2
 800592a:	d05f      	beq.n	80059ec <osMessageQueueNew+0xfc>
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	2b00      	cmp	r3, #0
 8005930:	d05c      	beq.n	80059ec <osMessageQueueNew+0xfc>
 8005932:	68bb      	ldr	r3, [r7, #8]
 8005934:	2b00      	cmp	r3, #0
 8005936:	d059      	beq.n	80059ec <osMessageQueueNew+0xfc>
    mem = -1;
 8005938:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800593c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	2b00      	cmp	r3, #0
 8005942:	d029      	beq.n	8005998 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	689b      	ldr	r3, [r3, #8]
 8005948:	2b00      	cmp	r3, #0
 800594a:	d012      	beq.n	8005972 <osMessageQueueNew+0x82>
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	68db      	ldr	r3, [r3, #12]
 8005950:	2b4f      	cmp	r3, #79	@ 0x4f
 8005952:	d90e      	bls.n	8005972 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005958:	2b00      	cmp	r3, #0
 800595a:	d00a      	beq.n	8005972 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	695a      	ldr	r2, [r3, #20]
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	68b9      	ldr	r1, [r7, #8]
 8005964:	fb01 f303 	mul.w	r3, r1, r3
 8005968:	429a      	cmp	r2, r3
 800596a:	d302      	bcc.n	8005972 <osMessageQueueNew+0x82>
        mem = 1;
 800596c:	2301      	movs	r3, #1
 800596e:	623b      	str	r3, [r7, #32]
 8005970:	e014      	b.n	800599c <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	689b      	ldr	r3, [r3, #8]
 8005976:	2b00      	cmp	r3, #0
 8005978:	d110      	bne.n	800599c <osMessageQueueNew+0xac>
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	68db      	ldr	r3, [r3, #12]
 800597e:	2b00      	cmp	r3, #0
 8005980:	d10c      	bne.n	800599c <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8005986:	2b00      	cmp	r3, #0
 8005988:	d108      	bne.n	800599c <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	695b      	ldr	r3, [r3, #20]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d104      	bne.n	800599c <osMessageQueueNew+0xac>
          mem = 0;
 8005992:	2300      	movs	r3, #0
 8005994:	623b      	str	r3, [r7, #32]
 8005996:	e001      	b.n	800599c <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8005998:	2300      	movs	r3, #0
 800599a:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800599c:	6a3b      	ldr	r3, [r7, #32]
 800599e:	2b01      	cmp	r3, #1
 80059a0:	d10b      	bne.n	80059ba <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	691a      	ldr	r2, [r3, #16]
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	689b      	ldr	r3, [r3, #8]
 80059aa:	2100      	movs	r1, #0
 80059ac:	9100      	str	r1, [sp, #0]
 80059ae:	68b9      	ldr	r1, [r7, #8]
 80059b0:	68f8      	ldr	r0, [r7, #12]
 80059b2:	f000 fa5d 	bl	8005e70 <xQueueGenericCreateStatic>
 80059b6:	6278      	str	r0, [r7, #36]	@ 0x24
 80059b8:	e008      	b.n	80059cc <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 80059ba:	6a3b      	ldr	r3, [r7, #32]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d105      	bne.n	80059cc <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 80059c0:	2200      	movs	r2, #0
 80059c2:	68b9      	ldr	r1, [r7, #8]
 80059c4:	68f8      	ldr	r0, [r7, #12]
 80059c6:	f000 fada 	bl	8005f7e <xQueueGenericCreate>
 80059ca:	6278      	str	r0, [r7, #36]	@ 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80059cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d00c      	beq.n	80059ec <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d003      	beq.n	80059e0 <osMessageQueueNew+0xf0>
        name = attr->name;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	61fb      	str	r3, [r7, #28]
 80059de:	e001      	b.n	80059e4 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 80059e0:	2300      	movs	r3, #0
 80059e2:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 80059e4:	69f9      	ldr	r1, [r7, #28]
 80059e6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80059e8:	f000 ff5e 	bl	80068a8 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80059ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80059ee:	4618      	mov	r0, r3
 80059f0:	3728      	adds	r7, #40	@ 0x28
 80059f2:	46bd      	mov	sp, r7
 80059f4:	bd80      	pop	{r7, pc}
 80059f6:	bf00      	nop
 80059f8:	20000350 	.word	0x20000350

080059fc <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80059fc:	b580      	push	{r7, lr}
 80059fe:	b08a      	sub	sp, #40	@ 0x28
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	60f8      	str	r0, [r7, #12]
 8005a04:	60b9      	str	r1, [r7, #8]
 8005a06:	603b      	str	r3, [r7, #0]
 8005a08:	4613      	mov	r3, r2
 8005a0a:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8005a10:	2300      	movs	r3, #0
 8005a12:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005a14:	f3ef 8305 	mrs	r3, IPSR
 8005a18:	61fb      	str	r3, [r7, #28]
  return(result);
 8005a1a:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d10f      	bne.n	8005a40 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a20:	f3ef 8310 	mrs	r3, PRIMASK
 8005a24:	61bb      	str	r3, [r7, #24]
  return(result);
 8005a26:	69bb      	ldr	r3, [r7, #24]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d105      	bne.n	8005a38 <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005a2c:	f3ef 8311 	mrs	r3, BASEPRI
 8005a30:	617b      	str	r3, [r7, #20]
  return(result);
 8005a32:	697b      	ldr	r3, [r7, #20]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d02c      	beq.n	8005a92 <osMessageQueuePut+0x96>
 8005a38:	4b28      	ldr	r3, [pc, #160]	@ (8005adc <osMessageQueuePut+0xe0>)
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	2b02      	cmp	r3, #2
 8005a3e:	d128      	bne.n	8005a92 <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005a40:	6a3b      	ldr	r3, [r7, #32]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d005      	beq.n	8005a52 <osMessageQueuePut+0x56>
 8005a46:	68bb      	ldr	r3, [r7, #8]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d002      	beq.n	8005a52 <osMessageQueuePut+0x56>
 8005a4c:	683b      	ldr	r3, [r7, #0]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d003      	beq.n	8005a5a <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 8005a52:	f06f 0303 	mvn.w	r3, #3
 8005a56:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005a58:	e039      	b.n	8005ace <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8005a5e:	f107 0210 	add.w	r2, r7, #16
 8005a62:	2300      	movs	r3, #0
 8005a64:	68b9      	ldr	r1, [r7, #8]
 8005a66:	6a38      	ldr	r0, [r7, #32]
 8005a68:	f000 fbfa 	bl	8006260 <xQueueGenericSendFromISR>
 8005a6c:	4603      	mov	r3, r0
 8005a6e:	2b01      	cmp	r3, #1
 8005a70:	d003      	beq.n	8005a7a <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 8005a72:	f06f 0302 	mvn.w	r3, #2
 8005a76:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005a78:	e029      	b.n	8005ace <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 8005a7a:	693b      	ldr	r3, [r7, #16]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d026      	beq.n	8005ace <osMessageQueuePut+0xd2>
 8005a80:	4b17      	ldr	r3, [pc, #92]	@ (8005ae0 <osMessageQueuePut+0xe4>)
 8005a82:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005a86:	601a      	str	r2, [r3, #0]
 8005a88:	f3bf 8f4f 	dsb	sy
 8005a8c:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005a90:	e01d      	b.n	8005ace <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8005a92:	6a3b      	ldr	r3, [r7, #32]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d002      	beq.n	8005a9e <osMessageQueuePut+0xa2>
 8005a98:	68bb      	ldr	r3, [r7, #8]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d103      	bne.n	8005aa6 <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 8005a9e:	f06f 0303 	mvn.w	r3, #3
 8005aa2:	627b      	str	r3, [r7, #36]	@ 0x24
 8005aa4:	e014      	b.n	8005ad0 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	683a      	ldr	r2, [r7, #0]
 8005aaa:	68b9      	ldr	r1, [r7, #8]
 8005aac:	6a38      	ldr	r0, [r7, #32]
 8005aae:	f000 facd 	bl	800604c <xQueueGenericSend>
 8005ab2:	4603      	mov	r3, r0
 8005ab4:	2b01      	cmp	r3, #1
 8005ab6:	d00b      	beq.n	8005ad0 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d003      	beq.n	8005ac6 <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 8005abe:	f06f 0301 	mvn.w	r3, #1
 8005ac2:	627b      	str	r3, [r7, #36]	@ 0x24
 8005ac4:	e004      	b.n	8005ad0 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 8005ac6:	f06f 0302 	mvn.w	r3, #2
 8005aca:	627b      	str	r3, [r7, #36]	@ 0x24
 8005acc:	e000      	b.n	8005ad0 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005ace:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8005ad0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	3728      	adds	r7, #40	@ 0x28
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	bd80      	pop	{r7, pc}
 8005ada:	bf00      	nop
 8005adc:	20000350 	.word	0x20000350
 8005ae0:	e000ed04 	.word	0xe000ed04

08005ae4 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	b08a      	sub	sp, #40	@ 0x28
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	60f8      	str	r0, [r7, #12]
 8005aec:	60b9      	str	r1, [r7, #8]
 8005aee:	607a      	str	r2, [r7, #4]
 8005af0:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8005af6:	2300      	movs	r3, #0
 8005af8:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005afa:	f3ef 8305 	mrs	r3, IPSR
 8005afe:	61fb      	str	r3, [r7, #28]
  return(result);
 8005b00:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d10f      	bne.n	8005b26 <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b06:	f3ef 8310 	mrs	r3, PRIMASK
 8005b0a:	61bb      	str	r3, [r7, #24]
  return(result);
 8005b0c:	69bb      	ldr	r3, [r7, #24]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d105      	bne.n	8005b1e <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005b12:	f3ef 8311 	mrs	r3, BASEPRI
 8005b16:	617b      	str	r3, [r7, #20]
  return(result);
 8005b18:	697b      	ldr	r3, [r7, #20]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d02c      	beq.n	8005b78 <osMessageQueueGet+0x94>
 8005b1e:	4b28      	ldr	r3, [pc, #160]	@ (8005bc0 <osMessageQueueGet+0xdc>)
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	2b02      	cmp	r3, #2
 8005b24:	d128      	bne.n	8005b78 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005b26:	6a3b      	ldr	r3, [r7, #32]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d005      	beq.n	8005b38 <osMessageQueueGet+0x54>
 8005b2c:	68bb      	ldr	r3, [r7, #8]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d002      	beq.n	8005b38 <osMessageQueueGet+0x54>
 8005b32:	683b      	ldr	r3, [r7, #0]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d003      	beq.n	8005b40 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 8005b38:	f06f 0303 	mvn.w	r3, #3
 8005b3c:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005b3e:	e038      	b.n	8005bb2 <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 8005b40:	2300      	movs	r3, #0
 8005b42:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8005b44:	f107 0310 	add.w	r3, r7, #16
 8005b48:	461a      	mov	r2, r3
 8005b4a:	68b9      	ldr	r1, [r7, #8]
 8005b4c:	6a38      	ldr	r0, [r7, #32]
 8005b4e:	f000 fd13 	bl	8006578 <xQueueReceiveFromISR>
 8005b52:	4603      	mov	r3, r0
 8005b54:	2b01      	cmp	r3, #1
 8005b56:	d003      	beq.n	8005b60 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 8005b58:	f06f 0302 	mvn.w	r3, #2
 8005b5c:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005b5e:	e028      	b.n	8005bb2 <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 8005b60:	693b      	ldr	r3, [r7, #16]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d025      	beq.n	8005bb2 <osMessageQueueGet+0xce>
 8005b66:	4b17      	ldr	r3, [pc, #92]	@ (8005bc4 <osMessageQueueGet+0xe0>)
 8005b68:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005b6c:	601a      	str	r2, [r3, #0]
 8005b6e:	f3bf 8f4f 	dsb	sy
 8005b72:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005b76:	e01c      	b.n	8005bb2 <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8005b78:	6a3b      	ldr	r3, [r7, #32]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d002      	beq.n	8005b84 <osMessageQueueGet+0xa0>
 8005b7e:	68bb      	ldr	r3, [r7, #8]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d103      	bne.n	8005b8c <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 8005b84:	f06f 0303 	mvn.w	r3, #3
 8005b88:	627b      	str	r3, [r7, #36]	@ 0x24
 8005b8a:	e013      	b.n	8005bb4 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8005b8c:	683a      	ldr	r2, [r7, #0]
 8005b8e:	68b9      	ldr	r1, [r7, #8]
 8005b90:	6a38      	ldr	r0, [r7, #32]
 8005b92:	f000 fc09 	bl	80063a8 <xQueueReceive>
 8005b96:	4603      	mov	r3, r0
 8005b98:	2b01      	cmp	r3, #1
 8005b9a:	d00b      	beq.n	8005bb4 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d003      	beq.n	8005baa <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 8005ba2:	f06f 0301 	mvn.w	r3, #1
 8005ba6:	627b      	str	r3, [r7, #36]	@ 0x24
 8005ba8:	e004      	b.n	8005bb4 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 8005baa:	f06f 0302 	mvn.w	r3, #2
 8005bae:	627b      	str	r3, [r7, #36]	@ 0x24
 8005bb0:	e000      	b.n	8005bb4 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005bb2:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8005bb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	3728      	adds	r7, #40	@ 0x28
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	bd80      	pop	{r7, pc}
 8005bbe:	bf00      	nop
 8005bc0:	20000350 	.word	0x20000350
 8005bc4:	e000ed04 	.word	0xe000ed04

08005bc8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005bc8:	b480      	push	{r7}
 8005bca:	b085      	sub	sp, #20
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	60f8      	str	r0, [r7, #12]
 8005bd0:	60b9      	str	r1, [r7, #8]
 8005bd2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	4a07      	ldr	r2, [pc, #28]	@ (8005bf4 <vApplicationGetIdleTaskMemory+0x2c>)
 8005bd8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005bda:	68bb      	ldr	r3, [r7, #8]
 8005bdc:	4a06      	ldr	r2, [pc, #24]	@ (8005bf8 <vApplicationGetIdleTaskMemory+0x30>)
 8005bde:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005be6:	601a      	str	r2, [r3, #0]
}
 8005be8:	bf00      	nop
 8005bea:	3714      	adds	r7, #20
 8005bec:	46bd      	mov	sp, r7
 8005bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf2:	4770      	bx	lr
 8005bf4:	20000354 	.word	0x20000354
 8005bf8:	200003fc 	.word	0x200003fc

08005bfc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005bfc:	b480      	push	{r7}
 8005bfe:	b085      	sub	sp, #20
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	60f8      	str	r0, [r7, #12]
 8005c04:	60b9      	str	r1, [r7, #8]
 8005c06:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	4a07      	ldr	r2, [pc, #28]	@ (8005c28 <vApplicationGetTimerTaskMemory+0x2c>)
 8005c0c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005c0e:	68bb      	ldr	r3, [r7, #8]
 8005c10:	4a06      	ldr	r2, [pc, #24]	@ (8005c2c <vApplicationGetTimerTaskMemory+0x30>)
 8005c12:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005c1a:	601a      	str	r2, [r3, #0]
}
 8005c1c:	bf00      	nop
 8005c1e:	3714      	adds	r7, #20
 8005c20:	46bd      	mov	sp, r7
 8005c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c26:	4770      	bx	lr
 8005c28:	200007fc 	.word	0x200007fc
 8005c2c:	200008a4 	.word	0x200008a4

08005c30 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005c30:	b480      	push	{r7}
 8005c32:	b083      	sub	sp, #12
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	f103 0208 	add.w	r2, r3, #8
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005c48:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	f103 0208 	add.w	r2, r3, #8
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	f103 0208 	add.w	r2, r3, #8
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	2200      	movs	r2, #0
 8005c62:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005c64:	bf00      	nop
 8005c66:	370c      	adds	r7, #12
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6e:	4770      	bx	lr

08005c70 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005c70:	b480      	push	{r7}
 8005c72:	b083      	sub	sp, #12
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005c7e:	bf00      	nop
 8005c80:	370c      	adds	r7, #12
 8005c82:	46bd      	mov	sp, r7
 8005c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c88:	4770      	bx	lr

08005c8a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005c8a:	b480      	push	{r7}
 8005c8c:	b085      	sub	sp, #20
 8005c8e:	af00      	add	r7, sp, #0
 8005c90:	6078      	str	r0, [r7, #4]
 8005c92:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	685b      	ldr	r3, [r3, #4]
 8005c98:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005c9a:	683b      	ldr	r3, [r7, #0]
 8005c9c:	68fa      	ldr	r2, [r7, #12]
 8005c9e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	689a      	ldr	r2, [r3, #8]
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	689b      	ldr	r3, [r3, #8]
 8005cac:	683a      	ldr	r2, [r7, #0]
 8005cae:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	683a      	ldr	r2, [r7, #0]
 8005cb4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	687a      	ldr	r2, [r7, #4]
 8005cba:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	1c5a      	adds	r2, r3, #1
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	601a      	str	r2, [r3, #0]
}
 8005cc6:	bf00      	nop
 8005cc8:	3714      	adds	r7, #20
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd0:	4770      	bx	lr

08005cd2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005cd2:	b480      	push	{r7}
 8005cd4:	b085      	sub	sp, #20
 8005cd6:	af00      	add	r7, sp, #0
 8005cd8:	6078      	str	r0, [r7, #4]
 8005cda:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005ce2:	68bb      	ldr	r3, [r7, #8]
 8005ce4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005ce8:	d103      	bne.n	8005cf2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	691b      	ldr	r3, [r3, #16]
 8005cee:	60fb      	str	r3, [r7, #12]
 8005cf0:	e00c      	b.n	8005d0c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	3308      	adds	r3, #8
 8005cf6:	60fb      	str	r3, [r7, #12]
 8005cf8:	e002      	b.n	8005d00 <vListInsert+0x2e>
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	685b      	ldr	r3, [r3, #4]
 8005cfe:	60fb      	str	r3, [r7, #12]
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	685b      	ldr	r3, [r3, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	68ba      	ldr	r2, [r7, #8]
 8005d08:	429a      	cmp	r2, r3
 8005d0a:	d2f6      	bcs.n	8005cfa <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	685a      	ldr	r2, [r3, #4]
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005d14:	683b      	ldr	r3, [r7, #0]
 8005d16:	685b      	ldr	r3, [r3, #4]
 8005d18:	683a      	ldr	r2, [r7, #0]
 8005d1a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005d1c:	683b      	ldr	r3, [r7, #0]
 8005d1e:	68fa      	ldr	r2, [r7, #12]
 8005d20:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	683a      	ldr	r2, [r7, #0]
 8005d26:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005d28:	683b      	ldr	r3, [r7, #0]
 8005d2a:	687a      	ldr	r2, [r7, #4]
 8005d2c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	1c5a      	adds	r2, r3, #1
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	601a      	str	r2, [r3, #0]
}
 8005d38:	bf00      	nop
 8005d3a:	3714      	adds	r7, #20
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d42:	4770      	bx	lr

08005d44 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005d44:	b480      	push	{r7}
 8005d46:	b085      	sub	sp, #20
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	691b      	ldr	r3, [r3, #16]
 8005d50:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	685b      	ldr	r3, [r3, #4]
 8005d56:	687a      	ldr	r2, [r7, #4]
 8005d58:	6892      	ldr	r2, [r2, #8]
 8005d5a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	689b      	ldr	r3, [r3, #8]
 8005d60:	687a      	ldr	r2, [r7, #4]
 8005d62:	6852      	ldr	r2, [r2, #4]
 8005d64:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	685b      	ldr	r3, [r3, #4]
 8005d6a:	687a      	ldr	r2, [r7, #4]
 8005d6c:	429a      	cmp	r2, r3
 8005d6e:	d103      	bne.n	8005d78 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	689a      	ldr	r2, [r3, #8]
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	1e5a      	subs	r2, r3, #1
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	681b      	ldr	r3, [r3, #0]
}
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	3714      	adds	r7, #20
 8005d90:	46bd      	mov	sp, r7
 8005d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d96:	4770      	bx	lr

08005d98 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b084      	sub	sp, #16
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
 8005da0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d10d      	bne.n	8005dc8 <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005dac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005db0:	b672      	cpsid	i
 8005db2:	f383 8811 	msr	BASEPRI, r3
 8005db6:	f3bf 8f6f 	isb	sy
 8005dba:	f3bf 8f4f 	dsb	sy
 8005dbe:	b662      	cpsie	i
 8005dc0:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005dc2:	bf00      	nop
 8005dc4:	bf00      	nop
 8005dc6:	e7fd      	b.n	8005dc4 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8005dc8:	f002 f9a0 	bl	800810c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	681a      	ldr	r2, [r3, #0]
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005dd4:	68f9      	ldr	r1, [r7, #12]
 8005dd6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005dd8:	fb01 f303 	mul.w	r3, r1, r3
 8005ddc:	441a      	add	r2, r3
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	2200      	movs	r2, #0
 8005de6:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	681a      	ldr	r2, [r3, #0]
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	681a      	ldr	r2, [r3, #0]
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005df8:	3b01      	subs	r3, #1
 8005dfa:	68f9      	ldr	r1, [r7, #12]
 8005dfc:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005dfe:	fb01 f303 	mul.w	r3, r1, r3
 8005e02:	441a      	add	r2, r3
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	22ff      	movs	r2, #255	@ 0xff
 8005e0c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	22ff      	movs	r2, #255	@ 0xff
 8005e14:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8005e18:	683b      	ldr	r3, [r7, #0]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d114      	bne.n	8005e48 <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	691b      	ldr	r3, [r3, #16]
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d01a      	beq.n	8005e5c <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	3310      	adds	r3, #16
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	f001 fa44 	bl	80072b8 <xTaskRemoveFromEventList>
 8005e30:	4603      	mov	r3, r0
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d012      	beq.n	8005e5c <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005e36:	4b0d      	ldr	r3, [pc, #52]	@ (8005e6c <xQueueGenericReset+0xd4>)
 8005e38:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005e3c:	601a      	str	r2, [r3, #0]
 8005e3e:	f3bf 8f4f 	dsb	sy
 8005e42:	f3bf 8f6f 	isb	sy
 8005e46:	e009      	b.n	8005e5c <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	3310      	adds	r3, #16
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	f7ff feef 	bl	8005c30 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	3324      	adds	r3, #36	@ 0x24
 8005e56:	4618      	mov	r0, r3
 8005e58:	f7ff feea 	bl	8005c30 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005e5c:	f002 f98c 	bl	8008178 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005e60:	2301      	movs	r3, #1
}
 8005e62:	4618      	mov	r0, r3
 8005e64:	3710      	adds	r7, #16
 8005e66:	46bd      	mov	sp, r7
 8005e68:	bd80      	pop	{r7, pc}
 8005e6a:	bf00      	nop
 8005e6c:	e000ed04 	.word	0xe000ed04

08005e70 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005e70:	b580      	push	{r7, lr}
 8005e72:	b08e      	sub	sp, #56	@ 0x38
 8005e74:	af02      	add	r7, sp, #8
 8005e76:	60f8      	str	r0, [r7, #12]
 8005e78:	60b9      	str	r1, [r7, #8]
 8005e7a:	607a      	str	r2, [r7, #4]
 8005e7c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d10d      	bne.n	8005ea0 <xQueueGenericCreateStatic+0x30>
	__asm volatile
 8005e84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e88:	b672      	cpsid	i
 8005e8a:	f383 8811 	msr	BASEPRI, r3
 8005e8e:	f3bf 8f6f 	isb	sy
 8005e92:	f3bf 8f4f 	dsb	sy
 8005e96:	b662      	cpsie	i
 8005e98:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005e9a:	bf00      	nop
 8005e9c:	bf00      	nop
 8005e9e:	e7fd      	b.n	8005e9c <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d10d      	bne.n	8005ec2 <xQueueGenericCreateStatic+0x52>
	__asm volatile
 8005ea6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005eaa:	b672      	cpsid	i
 8005eac:	f383 8811 	msr	BASEPRI, r3
 8005eb0:	f3bf 8f6f 	isb	sy
 8005eb4:	f3bf 8f4f 	dsb	sy
 8005eb8:	b662      	cpsie	i
 8005eba:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005ebc:	bf00      	nop
 8005ebe:	bf00      	nop
 8005ec0:	e7fd      	b.n	8005ebe <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d002      	beq.n	8005ece <xQueueGenericCreateStatic+0x5e>
 8005ec8:	68bb      	ldr	r3, [r7, #8]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d001      	beq.n	8005ed2 <xQueueGenericCreateStatic+0x62>
 8005ece:	2301      	movs	r3, #1
 8005ed0:	e000      	b.n	8005ed4 <xQueueGenericCreateStatic+0x64>
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d10d      	bne.n	8005ef4 <xQueueGenericCreateStatic+0x84>
	__asm volatile
 8005ed8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005edc:	b672      	cpsid	i
 8005ede:	f383 8811 	msr	BASEPRI, r3
 8005ee2:	f3bf 8f6f 	isb	sy
 8005ee6:	f3bf 8f4f 	dsb	sy
 8005eea:	b662      	cpsie	i
 8005eec:	623b      	str	r3, [r7, #32]
}
 8005eee:	bf00      	nop
 8005ef0:	bf00      	nop
 8005ef2:	e7fd      	b.n	8005ef0 <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d102      	bne.n	8005f00 <xQueueGenericCreateStatic+0x90>
 8005efa:	68bb      	ldr	r3, [r7, #8]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d101      	bne.n	8005f04 <xQueueGenericCreateStatic+0x94>
 8005f00:	2301      	movs	r3, #1
 8005f02:	e000      	b.n	8005f06 <xQueueGenericCreateStatic+0x96>
 8005f04:	2300      	movs	r3, #0
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d10d      	bne.n	8005f26 <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 8005f0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f0e:	b672      	cpsid	i
 8005f10:	f383 8811 	msr	BASEPRI, r3
 8005f14:	f3bf 8f6f 	isb	sy
 8005f18:	f3bf 8f4f 	dsb	sy
 8005f1c:	b662      	cpsie	i
 8005f1e:	61fb      	str	r3, [r7, #28]
}
 8005f20:	bf00      	nop
 8005f22:	bf00      	nop
 8005f24:	e7fd      	b.n	8005f22 <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005f26:	2350      	movs	r3, #80	@ 0x50
 8005f28:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005f2a:	697b      	ldr	r3, [r7, #20]
 8005f2c:	2b50      	cmp	r3, #80	@ 0x50
 8005f2e:	d00d      	beq.n	8005f4c <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 8005f30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f34:	b672      	cpsid	i
 8005f36:	f383 8811 	msr	BASEPRI, r3
 8005f3a:	f3bf 8f6f 	isb	sy
 8005f3e:	f3bf 8f4f 	dsb	sy
 8005f42:	b662      	cpsie	i
 8005f44:	61bb      	str	r3, [r7, #24]
}
 8005f46:	bf00      	nop
 8005f48:	bf00      	nop
 8005f4a:	e7fd      	b.n	8005f48 <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005f4c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005f4e:	683b      	ldr	r3, [r7, #0]
 8005f50:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8005f52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d00d      	beq.n	8005f74 <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005f58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f5a:	2201      	movs	r2, #1
 8005f5c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005f60:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8005f64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f66:	9300      	str	r3, [sp, #0]
 8005f68:	4613      	mov	r3, r2
 8005f6a:	687a      	ldr	r2, [r7, #4]
 8005f6c:	68b9      	ldr	r1, [r7, #8]
 8005f6e:	68f8      	ldr	r0, [r7, #12]
 8005f70:	f000 f848 	bl	8006004 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005f74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8005f76:	4618      	mov	r0, r3
 8005f78:	3730      	adds	r7, #48	@ 0x30
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	bd80      	pop	{r7, pc}

08005f7e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005f7e:	b580      	push	{r7, lr}
 8005f80:	b08a      	sub	sp, #40	@ 0x28
 8005f82:	af02      	add	r7, sp, #8
 8005f84:	60f8      	str	r0, [r7, #12]
 8005f86:	60b9      	str	r1, [r7, #8]
 8005f88:	4613      	mov	r3, r2
 8005f8a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d10d      	bne.n	8005fae <xQueueGenericCreate+0x30>
	__asm volatile
 8005f92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f96:	b672      	cpsid	i
 8005f98:	f383 8811 	msr	BASEPRI, r3
 8005f9c:	f3bf 8f6f 	isb	sy
 8005fa0:	f3bf 8f4f 	dsb	sy
 8005fa4:	b662      	cpsie	i
 8005fa6:	613b      	str	r3, [r7, #16]
}
 8005fa8:	bf00      	nop
 8005faa:	bf00      	nop
 8005fac:	e7fd      	b.n	8005faa <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8005fae:	68bb      	ldr	r3, [r7, #8]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d102      	bne.n	8005fba <xQueueGenericCreate+0x3c>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8005fb4:	2300      	movs	r3, #0
 8005fb6:	61fb      	str	r3, [r7, #28]
 8005fb8:	e004      	b.n	8005fc4 <xQueueGenericCreate+0x46>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	68ba      	ldr	r2, [r7, #8]
 8005fbe:	fb02 f303 	mul.w	r3, r2, r3
 8005fc2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005fc4:	69fb      	ldr	r3, [r7, #28]
 8005fc6:	3350      	adds	r3, #80	@ 0x50
 8005fc8:	4618      	mov	r0, r3
 8005fca:	f002 f9cd 	bl	8008368 <pvPortMalloc>
 8005fce:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005fd0:	69bb      	ldr	r3, [r7, #24]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d011      	beq.n	8005ffa <xQueueGenericCreate+0x7c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005fd6:	69bb      	ldr	r3, [r7, #24]
 8005fd8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005fda:	697b      	ldr	r3, [r7, #20]
 8005fdc:	3350      	adds	r3, #80	@ 0x50
 8005fde:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005fe0:	69bb      	ldr	r3, [r7, #24]
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005fe8:	79fa      	ldrb	r2, [r7, #7]
 8005fea:	69bb      	ldr	r3, [r7, #24]
 8005fec:	9300      	str	r3, [sp, #0]
 8005fee:	4613      	mov	r3, r2
 8005ff0:	697a      	ldr	r2, [r7, #20]
 8005ff2:	68b9      	ldr	r1, [r7, #8]
 8005ff4:	68f8      	ldr	r0, [r7, #12]
 8005ff6:	f000 f805 	bl	8006004 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005ffa:	69bb      	ldr	r3, [r7, #24]
	}
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	3720      	adds	r7, #32
 8006000:	46bd      	mov	sp, r7
 8006002:	bd80      	pop	{r7, pc}

08006004 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006004:	b580      	push	{r7, lr}
 8006006:	b084      	sub	sp, #16
 8006008:	af00      	add	r7, sp, #0
 800600a:	60f8      	str	r0, [r7, #12]
 800600c:	60b9      	str	r1, [r7, #8]
 800600e:	607a      	str	r2, [r7, #4]
 8006010:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006012:	68bb      	ldr	r3, [r7, #8]
 8006014:	2b00      	cmp	r3, #0
 8006016:	d103      	bne.n	8006020 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006018:	69bb      	ldr	r3, [r7, #24]
 800601a:	69ba      	ldr	r2, [r7, #24]
 800601c:	601a      	str	r2, [r3, #0]
 800601e:	e002      	b.n	8006026 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006020:	69bb      	ldr	r3, [r7, #24]
 8006022:	687a      	ldr	r2, [r7, #4]
 8006024:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006026:	69bb      	ldr	r3, [r7, #24]
 8006028:	68fa      	ldr	r2, [r7, #12]
 800602a:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800602c:	69bb      	ldr	r3, [r7, #24]
 800602e:	68ba      	ldr	r2, [r7, #8]
 8006030:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006032:	2101      	movs	r1, #1
 8006034:	69b8      	ldr	r0, [r7, #24]
 8006036:	f7ff feaf 	bl	8005d98 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800603a:	69bb      	ldr	r3, [r7, #24]
 800603c:	78fa      	ldrb	r2, [r7, #3]
 800603e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006042:	bf00      	nop
 8006044:	3710      	adds	r7, #16
 8006046:	46bd      	mov	sp, r7
 8006048:	bd80      	pop	{r7, pc}
	...

0800604c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800604c:	b580      	push	{r7, lr}
 800604e:	b08e      	sub	sp, #56	@ 0x38
 8006050:	af00      	add	r7, sp, #0
 8006052:	60f8      	str	r0, [r7, #12]
 8006054:	60b9      	str	r1, [r7, #8]
 8006056:	607a      	str	r2, [r7, #4]
 8006058:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800605a:	2300      	movs	r3, #0
 800605c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8006062:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006064:	2b00      	cmp	r3, #0
 8006066:	d10d      	bne.n	8006084 <xQueueGenericSend+0x38>
	__asm volatile
 8006068:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800606c:	b672      	cpsid	i
 800606e:	f383 8811 	msr	BASEPRI, r3
 8006072:	f3bf 8f6f 	isb	sy
 8006076:	f3bf 8f4f 	dsb	sy
 800607a:	b662      	cpsie	i
 800607c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800607e:	bf00      	nop
 8006080:	bf00      	nop
 8006082:	e7fd      	b.n	8006080 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006084:	68bb      	ldr	r3, [r7, #8]
 8006086:	2b00      	cmp	r3, #0
 8006088:	d103      	bne.n	8006092 <xQueueGenericSend+0x46>
 800608a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800608c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800608e:	2b00      	cmp	r3, #0
 8006090:	d101      	bne.n	8006096 <xQueueGenericSend+0x4a>
 8006092:	2301      	movs	r3, #1
 8006094:	e000      	b.n	8006098 <xQueueGenericSend+0x4c>
 8006096:	2300      	movs	r3, #0
 8006098:	2b00      	cmp	r3, #0
 800609a:	d10d      	bne.n	80060b8 <xQueueGenericSend+0x6c>
	__asm volatile
 800609c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060a0:	b672      	cpsid	i
 80060a2:	f383 8811 	msr	BASEPRI, r3
 80060a6:	f3bf 8f6f 	isb	sy
 80060aa:	f3bf 8f4f 	dsb	sy
 80060ae:	b662      	cpsie	i
 80060b0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80060b2:	bf00      	nop
 80060b4:	bf00      	nop
 80060b6:	e7fd      	b.n	80060b4 <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80060b8:	683b      	ldr	r3, [r7, #0]
 80060ba:	2b02      	cmp	r3, #2
 80060bc:	d103      	bne.n	80060c6 <xQueueGenericSend+0x7a>
 80060be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060c2:	2b01      	cmp	r3, #1
 80060c4:	d101      	bne.n	80060ca <xQueueGenericSend+0x7e>
 80060c6:	2301      	movs	r3, #1
 80060c8:	e000      	b.n	80060cc <xQueueGenericSend+0x80>
 80060ca:	2300      	movs	r3, #0
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d10d      	bne.n	80060ec <xQueueGenericSend+0xa0>
	__asm volatile
 80060d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060d4:	b672      	cpsid	i
 80060d6:	f383 8811 	msr	BASEPRI, r3
 80060da:	f3bf 8f6f 	isb	sy
 80060de:	f3bf 8f4f 	dsb	sy
 80060e2:	b662      	cpsie	i
 80060e4:	623b      	str	r3, [r7, #32]
}
 80060e6:	bf00      	nop
 80060e8:	bf00      	nop
 80060ea:	e7fd      	b.n	80060e8 <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80060ec:	f001 fab2 	bl	8007654 <xTaskGetSchedulerState>
 80060f0:	4603      	mov	r3, r0
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d102      	bne.n	80060fc <xQueueGenericSend+0xb0>
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d101      	bne.n	8006100 <xQueueGenericSend+0xb4>
 80060fc:	2301      	movs	r3, #1
 80060fe:	e000      	b.n	8006102 <xQueueGenericSend+0xb6>
 8006100:	2300      	movs	r3, #0
 8006102:	2b00      	cmp	r3, #0
 8006104:	d10d      	bne.n	8006122 <xQueueGenericSend+0xd6>
	__asm volatile
 8006106:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800610a:	b672      	cpsid	i
 800610c:	f383 8811 	msr	BASEPRI, r3
 8006110:	f3bf 8f6f 	isb	sy
 8006114:	f3bf 8f4f 	dsb	sy
 8006118:	b662      	cpsie	i
 800611a:	61fb      	str	r3, [r7, #28]
}
 800611c:	bf00      	nop
 800611e:	bf00      	nop
 8006120:	e7fd      	b.n	800611e <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006122:	f001 fff3 	bl	800810c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006126:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006128:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800612a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800612c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800612e:	429a      	cmp	r2, r3
 8006130:	d302      	bcc.n	8006138 <xQueueGenericSend+0xec>
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	2b02      	cmp	r3, #2
 8006136:	d129      	bne.n	800618c <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006138:	683a      	ldr	r2, [r7, #0]
 800613a:	68b9      	ldr	r1, [r7, #8]
 800613c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800613e:	f000 faa3 	bl	8006688 <prvCopyDataToQueue>
 8006142:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006144:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006146:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006148:	2b00      	cmp	r3, #0
 800614a:	d010      	beq.n	800616e <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800614c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800614e:	3324      	adds	r3, #36	@ 0x24
 8006150:	4618      	mov	r0, r3
 8006152:	f001 f8b1 	bl	80072b8 <xTaskRemoveFromEventList>
 8006156:	4603      	mov	r3, r0
 8006158:	2b00      	cmp	r3, #0
 800615a:	d013      	beq.n	8006184 <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800615c:	4b3f      	ldr	r3, [pc, #252]	@ (800625c <xQueueGenericSend+0x210>)
 800615e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006162:	601a      	str	r2, [r3, #0]
 8006164:	f3bf 8f4f 	dsb	sy
 8006168:	f3bf 8f6f 	isb	sy
 800616c:	e00a      	b.n	8006184 <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800616e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006170:	2b00      	cmp	r3, #0
 8006172:	d007      	beq.n	8006184 <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006174:	4b39      	ldr	r3, [pc, #228]	@ (800625c <xQueueGenericSend+0x210>)
 8006176:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800617a:	601a      	str	r2, [r3, #0]
 800617c:	f3bf 8f4f 	dsb	sy
 8006180:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006184:	f001 fff8 	bl	8008178 <vPortExitCritical>
				return pdPASS;
 8006188:	2301      	movs	r3, #1
 800618a:	e063      	b.n	8006254 <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2b00      	cmp	r3, #0
 8006190:	d103      	bne.n	800619a <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006192:	f001 fff1 	bl	8008178 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006196:	2300      	movs	r3, #0
 8006198:	e05c      	b.n	8006254 <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 800619a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800619c:	2b00      	cmp	r3, #0
 800619e:	d106      	bne.n	80061ae <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80061a0:	f107 0314 	add.w	r3, r7, #20
 80061a4:	4618      	mov	r0, r3
 80061a6:	f001 f8ed 	bl	8007384 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80061aa:	2301      	movs	r3, #1
 80061ac:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80061ae:	f001 ffe3 	bl	8008178 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80061b2:	f000 fe49 	bl	8006e48 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80061b6:	f001 ffa9 	bl	800810c <vPortEnterCritical>
 80061ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061bc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80061c0:	b25b      	sxtb	r3, r3
 80061c2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80061c6:	d103      	bne.n	80061d0 <xQueueGenericSend+0x184>
 80061c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061ca:	2200      	movs	r2, #0
 80061cc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80061d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061d2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80061d6:	b25b      	sxtb	r3, r3
 80061d8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80061dc:	d103      	bne.n	80061e6 <xQueueGenericSend+0x19a>
 80061de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061e0:	2200      	movs	r2, #0
 80061e2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80061e6:	f001 ffc7 	bl	8008178 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80061ea:	1d3a      	adds	r2, r7, #4
 80061ec:	f107 0314 	add.w	r3, r7, #20
 80061f0:	4611      	mov	r1, r2
 80061f2:	4618      	mov	r0, r3
 80061f4:	f001 f8dc 	bl	80073b0 <xTaskCheckForTimeOut>
 80061f8:	4603      	mov	r3, r0
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d124      	bne.n	8006248 <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80061fe:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006200:	f000 fb3a 	bl	8006878 <prvIsQueueFull>
 8006204:	4603      	mov	r3, r0
 8006206:	2b00      	cmp	r3, #0
 8006208:	d018      	beq.n	800623c <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800620a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800620c:	3310      	adds	r3, #16
 800620e:	687a      	ldr	r2, [r7, #4]
 8006210:	4611      	mov	r1, r2
 8006212:	4618      	mov	r0, r3
 8006214:	f000 fffa 	bl	800720c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006218:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800621a:	f000 fac5 	bl	80067a8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800621e:	f000 fe21 	bl	8006e64 <xTaskResumeAll>
 8006222:	4603      	mov	r3, r0
 8006224:	2b00      	cmp	r3, #0
 8006226:	f47f af7c 	bne.w	8006122 <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 800622a:	4b0c      	ldr	r3, [pc, #48]	@ (800625c <xQueueGenericSend+0x210>)
 800622c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006230:	601a      	str	r2, [r3, #0]
 8006232:	f3bf 8f4f 	dsb	sy
 8006236:	f3bf 8f6f 	isb	sy
 800623a:	e772      	b.n	8006122 <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800623c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800623e:	f000 fab3 	bl	80067a8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006242:	f000 fe0f 	bl	8006e64 <xTaskResumeAll>
 8006246:	e76c      	b.n	8006122 <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006248:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800624a:	f000 faad 	bl	80067a8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800624e:	f000 fe09 	bl	8006e64 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006252:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006254:	4618      	mov	r0, r3
 8006256:	3738      	adds	r7, #56	@ 0x38
 8006258:	46bd      	mov	sp, r7
 800625a:	bd80      	pop	{r7, pc}
 800625c:	e000ed04 	.word	0xe000ed04

08006260 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006260:	b580      	push	{r7, lr}
 8006262:	b08e      	sub	sp, #56	@ 0x38
 8006264:	af00      	add	r7, sp, #0
 8006266:	60f8      	str	r0, [r7, #12]
 8006268:	60b9      	str	r1, [r7, #8]
 800626a:	607a      	str	r2, [r7, #4]
 800626c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8006272:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006274:	2b00      	cmp	r3, #0
 8006276:	d10d      	bne.n	8006294 <xQueueGenericSendFromISR+0x34>
	__asm volatile
 8006278:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800627c:	b672      	cpsid	i
 800627e:	f383 8811 	msr	BASEPRI, r3
 8006282:	f3bf 8f6f 	isb	sy
 8006286:	f3bf 8f4f 	dsb	sy
 800628a:	b662      	cpsie	i
 800628c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800628e:	bf00      	nop
 8006290:	bf00      	nop
 8006292:	e7fd      	b.n	8006290 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006294:	68bb      	ldr	r3, [r7, #8]
 8006296:	2b00      	cmp	r3, #0
 8006298:	d103      	bne.n	80062a2 <xQueueGenericSendFromISR+0x42>
 800629a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800629c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d101      	bne.n	80062a6 <xQueueGenericSendFromISR+0x46>
 80062a2:	2301      	movs	r3, #1
 80062a4:	e000      	b.n	80062a8 <xQueueGenericSendFromISR+0x48>
 80062a6:	2300      	movs	r3, #0
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d10d      	bne.n	80062c8 <xQueueGenericSendFromISR+0x68>
	__asm volatile
 80062ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062b0:	b672      	cpsid	i
 80062b2:	f383 8811 	msr	BASEPRI, r3
 80062b6:	f3bf 8f6f 	isb	sy
 80062ba:	f3bf 8f4f 	dsb	sy
 80062be:	b662      	cpsie	i
 80062c0:	623b      	str	r3, [r7, #32]
}
 80062c2:	bf00      	nop
 80062c4:	bf00      	nop
 80062c6:	e7fd      	b.n	80062c4 <xQueueGenericSendFromISR+0x64>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	2b02      	cmp	r3, #2
 80062cc:	d103      	bne.n	80062d6 <xQueueGenericSendFromISR+0x76>
 80062ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80062d2:	2b01      	cmp	r3, #1
 80062d4:	d101      	bne.n	80062da <xQueueGenericSendFromISR+0x7a>
 80062d6:	2301      	movs	r3, #1
 80062d8:	e000      	b.n	80062dc <xQueueGenericSendFromISR+0x7c>
 80062da:	2300      	movs	r3, #0
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d10d      	bne.n	80062fc <xQueueGenericSendFromISR+0x9c>
	__asm volatile
 80062e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062e4:	b672      	cpsid	i
 80062e6:	f383 8811 	msr	BASEPRI, r3
 80062ea:	f3bf 8f6f 	isb	sy
 80062ee:	f3bf 8f4f 	dsb	sy
 80062f2:	b662      	cpsie	i
 80062f4:	61fb      	str	r3, [r7, #28]
}
 80062f6:	bf00      	nop
 80062f8:	bf00      	nop
 80062fa:	e7fd      	b.n	80062f8 <xQueueGenericSendFromISR+0x98>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80062fc:	f001 ffee 	bl	80082dc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006300:	f3ef 8211 	mrs	r2, BASEPRI
 8006304:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006308:	b672      	cpsid	i
 800630a:	f383 8811 	msr	BASEPRI, r3
 800630e:	f3bf 8f6f 	isb	sy
 8006312:	f3bf 8f4f 	dsb	sy
 8006316:	b662      	cpsie	i
 8006318:	61ba      	str	r2, [r7, #24]
 800631a:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800631c:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800631e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006320:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006322:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006324:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006326:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006328:	429a      	cmp	r2, r3
 800632a:	d302      	bcc.n	8006332 <xQueueGenericSendFromISR+0xd2>
 800632c:	683b      	ldr	r3, [r7, #0]
 800632e:	2b02      	cmp	r3, #2
 8006330:	d12c      	bne.n	800638c <xQueueGenericSendFromISR+0x12c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006332:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006334:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006338:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800633c:	683a      	ldr	r2, [r7, #0]
 800633e:	68b9      	ldr	r1, [r7, #8]
 8006340:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006342:	f000 f9a1 	bl	8006688 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006346:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 800634a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800634e:	d112      	bne.n	8006376 <xQueueGenericSendFromISR+0x116>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006350:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006352:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006354:	2b00      	cmp	r3, #0
 8006356:	d016      	beq.n	8006386 <xQueueGenericSendFromISR+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006358:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800635a:	3324      	adds	r3, #36	@ 0x24
 800635c:	4618      	mov	r0, r3
 800635e:	f000 ffab 	bl	80072b8 <xTaskRemoveFromEventList>
 8006362:	4603      	mov	r3, r0
 8006364:	2b00      	cmp	r3, #0
 8006366:	d00e      	beq.n	8006386 <xQueueGenericSendFromISR+0x126>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2b00      	cmp	r3, #0
 800636c:	d00b      	beq.n	8006386 <xQueueGenericSendFromISR+0x126>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	2201      	movs	r2, #1
 8006372:	601a      	str	r2, [r3, #0]
 8006374:	e007      	b.n	8006386 <xQueueGenericSendFromISR+0x126>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006376:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800637a:	3301      	adds	r3, #1
 800637c:	b2db      	uxtb	r3, r3
 800637e:	b25a      	sxtb	r2, r3
 8006380:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006382:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8006386:	2301      	movs	r3, #1
 8006388:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 800638a:	e001      	b.n	8006390 <xQueueGenericSendFromISR+0x130>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800638c:	2300      	movs	r3, #0
 800638e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006390:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006392:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006394:	693b      	ldr	r3, [r7, #16]
 8006396:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800639a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800639c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800639e:	4618      	mov	r0, r3
 80063a0:	3738      	adds	r7, #56	@ 0x38
 80063a2:	46bd      	mov	sp, r7
 80063a4:	bd80      	pop	{r7, pc}
	...

080063a8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80063a8:	b580      	push	{r7, lr}
 80063aa:	b08c      	sub	sp, #48	@ 0x30
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	60f8      	str	r0, [r7, #12]
 80063b0:	60b9      	str	r1, [r7, #8]
 80063b2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80063b4:	2300      	movs	r3, #0
 80063b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80063bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d10d      	bne.n	80063de <xQueueReceive+0x36>
	__asm volatile
 80063c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063c6:	b672      	cpsid	i
 80063c8:	f383 8811 	msr	BASEPRI, r3
 80063cc:	f3bf 8f6f 	isb	sy
 80063d0:	f3bf 8f4f 	dsb	sy
 80063d4:	b662      	cpsie	i
 80063d6:	623b      	str	r3, [r7, #32]
}
 80063d8:	bf00      	nop
 80063da:	bf00      	nop
 80063dc:	e7fd      	b.n	80063da <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80063de:	68bb      	ldr	r3, [r7, #8]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d103      	bne.n	80063ec <xQueueReceive+0x44>
 80063e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d101      	bne.n	80063f0 <xQueueReceive+0x48>
 80063ec:	2301      	movs	r3, #1
 80063ee:	e000      	b.n	80063f2 <xQueueReceive+0x4a>
 80063f0:	2300      	movs	r3, #0
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d10d      	bne.n	8006412 <xQueueReceive+0x6a>
	__asm volatile
 80063f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063fa:	b672      	cpsid	i
 80063fc:	f383 8811 	msr	BASEPRI, r3
 8006400:	f3bf 8f6f 	isb	sy
 8006404:	f3bf 8f4f 	dsb	sy
 8006408:	b662      	cpsie	i
 800640a:	61fb      	str	r3, [r7, #28]
}
 800640c:	bf00      	nop
 800640e:	bf00      	nop
 8006410:	e7fd      	b.n	800640e <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006412:	f001 f91f 	bl	8007654 <xTaskGetSchedulerState>
 8006416:	4603      	mov	r3, r0
 8006418:	2b00      	cmp	r3, #0
 800641a:	d102      	bne.n	8006422 <xQueueReceive+0x7a>
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	2b00      	cmp	r3, #0
 8006420:	d101      	bne.n	8006426 <xQueueReceive+0x7e>
 8006422:	2301      	movs	r3, #1
 8006424:	e000      	b.n	8006428 <xQueueReceive+0x80>
 8006426:	2300      	movs	r3, #0
 8006428:	2b00      	cmp	r3, #0
 800642a:	d10d      	bne.n	8006448 <xQueueReceive+0xa0>
	__asm volatile
 800642c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006430:	b672      	cpsid	i
 8006432:	f383 8811 	msr	BASEPRI, r3
 8006436:	f3bf 8f6f 	isb	sy
 800643a:	f3bf 8f4f 	dsb	sy
 800643e:	b662      	cpsie	i
 8006440:	61bb      	str	r3, [r7, #24]
}
 8006442:	bf00      	nop
 8006444:	bf00      	nop
 8006446:	e7fd      	b.n	8006444 <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006448:	f001 fe60 	bl	800810c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800644c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800644e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006450:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006452:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006454:	2b00      	cmp	r3, #0
 8006456:	d01f      	beq.n	8006498 <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006458:	68b9      	ldr	r1, [r7, #8]
 800645a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800645c:	f000 f97e 	bl	800675c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006460:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006462:	1e5a      	subs	r2, r3, #1
 8006464:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006466:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006468:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800646a:	691b      	ldr	r3, [r3, #16]
 800646c:	2b00      	cmp	r3, #0
 800646e:	d00f      	beq.n	8006490 <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006470:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006472:	3310      	adds	r3, #16
 8006474:	4618      	mov	r0, r3
 8006476:	f000 ff1f 	bl	80072b8 <xTaskRemoveFromEventList>
 800647a:	4603      	mov	r3, r0
 800647c:	2b00      	cmp	r3, #0
 800647e:	d007      	beq.n	8006490 <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006480:	4b3c      	ldr	r3, [pc, #240]	@ (8006574 <xQueueReceive+0x1cc>)
 8006482:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006486:	601a      	str	r2, [r3, #0]
 8006488:	f3bf 8f4f 	dsb	sy
 800648c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006490:	f001 fe72 	bl	8008178 <vPortExitCritical>
				return pdPASS;
 8006494:	2301      	movs	r3, #1
 8006496:	e069      	b.n	800656c <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2b00      	cmp	r3, #0
 800649c:	d103      	bne.n	80064a6 <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800649e:	f001 fe6b 	bl	8008178 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80064a2:	2300      	movs	r3, #0
 80064a4:	e062      	b.n	800656c <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 80064a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d106      	bne.n	80064ba <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80064ac:	f107 0310 	add.w	r3, r7, #16
 80064b0:	4618      	mov	r0, r3
 80064b2:	f000 ff67 	bl	8007384 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80064b6:	2301      	movs	r3, #1
 80064b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80064ba:	f001 fe5d 	bl	8008178 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80064be:	f000 fcc3 	bl	8006e48 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80064c2:	f001 fe23 	bl	800810c <vPortEnterCritical>
 80064c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064c8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80064cc:	b25b      	sxtb	r3, r3
 80064ce:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80064d2:	d103      	bne.n	80064dc <xQueueReceive+0x134>
 80064d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064d6:	2200      	movs	r2, #0
 80064d8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80064dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064de:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80064e2:	b25b      	sxtb	r3, r3
 80064e4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80064e8:	d103      	bne.n	80064f2 <xQueueReceive+0x14a>
 80064ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064ec:	2200      	movs	r2, #0
 80064ee:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80064f2:	f001 fe41 	bl	8008178 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80064f6:	1d3a      	adds	r2, r7, #4
 80064f8:	f107 0310 	add.w	r3, r7, #16
 80064fc:	4611      	mov	r1, r2
 80064fe:	4618      	mov	r0, r3
 8006500:	f000 ff56 	bl	80073b0 <xTaskCheckForTimeOut>
 8006504:	4603      	mov	r3, r0
 8006506:	2b00      	cmp	r3, #0
 8006508:	d123      	bne.n	8006552 <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800650a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800650c:	f000 f99e 	bl	800684c <prvIsQueueEmpty>
 8006510:	4603      	mov	r3, r0
 8006512:	2b00      	cmp	r3, #0
 8006514:	d017      	beq.n	8006546 <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006516:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006518:	3324      	adds	r3, #36	@ 0x24
 800651a:	687a      	ldr	r2, [r7, #4]
 800651c:	4611      	mov	r1, r2
 800651e:	4618      	mov	r0, r3
 8006520:	f000 fe74 	bl	800720c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006524:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006526:	f000 f93f 	bl	80067a8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800652a:	f000 fc9b 	bl	8006e64 <xTaskResumeAll>
 800652e:	4603      	mov	r3, r0
 8006530:	2b00      	cmp	r3, #0
 8006532:	d189      	bne.n	8006448 <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 8006534:	4b0f      	ldr	r3, [pc, #60]	@ (8006574 <xQueueReceive+0x1cc>)
 8006536:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800653a:	601a      	str	r2, [r3, #0]
 800653c:	f3bf 8f4f 	dsb	sy
 8006540:	f3bf 8f6f 	isb	sy
 8006544:	e780      	b.n	8006448 <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006546:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006548:	f000 f92e 	bl	80067a8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800654c:	f000 fc8a 	bl	8006e64 <xTaskResumeAll>
 8006550:	e77a      	b.n	8006448 <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006552:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006554:	f000 f928 	bl	80067a8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006558:	f000 fc84 	bl	8006e64 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800655c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800655e:	f000 f975 	bl	800684c <prvIsQueueEmpty>
 8006562:	4603      	mov	r3, r0
 8006564:	2b00      	cmp	r3, #0
 8006566:	f43f af6f 	beq.w	8006448 <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800656a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800656c:	4618      	mov	r0, r3
 800656e:	3730      	adds	r7, #48	@ 0x30
 8006570:	46bd      	mov	sp, r7
 8006572:	bd80      	pop	{r7, pc}
 8006574:	e000ed04 	.word	0xe000ed04

08006578 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006578:	b580      	push	{r7, lr}
 800657a:	b08e      	sub	sp, #56	@ 0x38
 800657c:	af00      	add	r7, sp, #0
 800657e:	60f8      	str	r0, [r7, #12]
 8006580:	60b9      	str	r1, [r7, #8]
 8006582:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8006588:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800658a:	2b00      	cmp	r3, #0
 800658c:	d10d      	bne.n	80065aa <xQueueReceiveFromISR+0x32>
	__asm volatile
 800658e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006592:	b672      	cpsid	i
 8006594:	f383 8811 	msr	BASEPRI, r3
 8006598:	f3bf 8f6f 	isb	sy
 800659c:	f3bf 8f4f 	dsb	sy
 80065a0:	b662      	cpsie	i
 80065a2:	623b      	str	r3, [r7, #32]
}
 80065a4:	bf00      	nop
 80065a6:	bf00      	nop
 80065a8:	e7fd      	b.n	80065a6 <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80065aa:	68bb      	ldr	r3, [r7, #8]
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d103      	bne.n	80065b8 <xQueueReceiveFromISR+0x40>
 80065b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d101      	bne.n	80065bc <xQueueReceiveFromISR+0x44>
 80065b8:	2301      	movs	r3, #1
 80065ba:	e000      	b.n	80065be <xQueueReceiveFromISR+0x46>
 80065bc:	2300      	movs	r3, #0
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d10d      	bne.n	80065de <xQueueReceiveFromISR+0x66>
	__asm volatile
 80065c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065c6:	b672      	cpsid	i
 80065c8:	f383 8811 	msr	BASEPRI, r3
 80065cc:	f3bf 8f6f 	isb	sy
 80065d0:	f3bf 8f4f 	dsb	sy
 80065d4:	b662      	cpsie	i
 80065d6:	61fb      	str	r3, [r7, #28]
}
 80065d8:	bf00      	nop
 80065da:	bf00      	nop
 80065dc:	e7fd      	b.n	80065da <xQueueReceiveFromISR+0x62>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80065de:	f001 fe7d 	bl	80082dc <vPortValidateInterruptPriority>
	__asm volatile
 80065e2:	f3ef 8211 	mrs	r2, BASEPRI
 80065e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065ea:	b672      	cpsid	i
 80065ec:	f383 8811 	msr	BASEPRI, r3
 80065f0:	f3bf 8f6f 	isb	sy
 80065f4:	f3bf 8f4f 	dsb	sy
 80065f8:	b662      	cpsie	i
 80065fa:	61ba      	str	r2, [r7, #24]
 80065fc:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80065fe:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006600:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006602:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006604:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006606:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006608:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800660a:	2b00      	cmp	r3, #0
 800660c:	d02f      	beq.n	800666e <xQueueReceiveFromISR+0xf6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800660e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006610:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006614:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006618:	68b9      	ldr	r1, [r7, #8]
 800661a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800661c:	f000 f89e 	bl	800675c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006620:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006622:	1e5a      	subs	r2, r3, #1
 8006624:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006626:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8006628:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800662c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006630:	d112      	bne.n	8006658 <xQueueReceiveFromISR+0xe0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006632:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006634:	691b      	ldr	r3, [r3, #16]
 8006636:	2b00      	cmp	r3, #0
 8006638:	d016      	beq.n	8006668 <xQueueReceiveFromISR+0xf0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800663a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800663c:	3310      	adds	r3, #16
 800663e:	4618      	mov	r0, r3
 8006640:	f000 fe3a 	bl	80072b8 <xTaskRemoveFromEventList>
 8006644:	4603      	mov	r3, r0
 8006646:	2b00      	cmp	r3, #0
 8006648:	d00e      	beq.n	8006668 <xQueueReceiveFromISR+0xf0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	2b00      	cmp	r3, #0
 800664e:	d00b      	beq.n	8006668 <xQueueReceiveFromISR+0xf0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	2201      	movs	r2, #1
 8006654:	601a      	str	r2, [r3, #0]
 8006656:	e007      	b.n	8006668 <xQueueReceiveFromISR+0xf0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8006658:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800665c:	3301      	adds	r3, #1
 800665e:	b2db      	uxtb	r3, r3
 8006660:	b25a      	sxtb	r2, r3
 8006662:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006664:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8006668:	2301      	movs	r3, #1
 800666a:	637b      	str	r3, [r7, #52]	@ 0x34
 800666c:	e001      	b.n	8006672 <xQueueReceiveFromISR+0xfa>
		}
		else
		{
			xReturn = pdFAIL;
 800666e:	2300      	movs	r3, #0
 8006670:	637b      	str	r3, [r7, #52]	@ 0x34
 8006672:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006674:	613b      	str	r3, [r7, #16]
	__asm volatile
 8006676:	693b      	ldr	r3, [r7, #16]
 8006678:	f383 8811 	msr	BASEPRI, r3
}
 800667c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800667e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8006680:	4618      	mov	r0, r3
 8006682:	3738      	adds	r7, #56	@ 0x38
 8006684:	46bd      	mov	sp, r7
 8006686:	bd80      	pop	{r7, pc}

08006688 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006688:	b580      	push	{r7, lr}
 800668a:	b086      	sub	sp, #24
 800668c:	af00      	add	r7, sp, #0
 800668e:	60f8      	str	r0, [r7, #12]
 8006690:	60b9      	str	r1, [r7, #8]
 8006692:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006694:	2300      	movs	r3, #0
 8006696:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800669c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d10d      	bne.n	80066c2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d14d      	bne.n	800674a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	689b      	ldr	r3, [r3, #8]
 80066b2:	4618      	mov	r0, r3
 80066b4:	f000 ffec 	bl	8007690 <xTaskPriorityDisinherit>
 80066b8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	2200      	movs	r2, #0
 80066be:	609a      	str	r2, [r3, #8]
 80066c0:	e043      	b.n	800674a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d119      	bne.n	80066fc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	6858      	ldr	r0, [r3, #4]
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066d0:	461a      	mov	r2, r3
 80066d2:	68b9      	ldr	r1, [r7, #8]
 80066d4:	f002 fee9 	bl	80094aa <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	685a      	ldr	r2, [r3, #4]
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066e0:	441a      	add	r2, r3
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	685a      	ldr	r2, [r3, #4]
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	689b      	ldr	r3, [r3, #8]
 80066ee:	429a      	cmp	r2, r3
 80066f0:	d32b      	bcc.n	800674a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	681a      	ldr	r2, [r3, #0]
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	605a      	str	r2, [r3, #4]
 80066fa:	e026      	b.n	800674a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	68d8      	ldr	r0, [r3, #12]
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006704:	461a      	mov	r2, r3
 8006706:	68b9      	ldr	r1, [r7, #8]
 8006708:	f002 fecf 	bl	80094aa <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	68da      	ldr	r2, [r3, #12]
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006714:	425b      	negs	r3, r3
 8006716:	441a      	add	r2, r3
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	68da      	ldr	r2, [r3, #12]
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	429a      	cmp	r2, r3
 8006726:	d207      	bcs.n	8006738 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	689a      	ldr	r2, [r3, #8]
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006730:	425b      	negs	r3, r3
 8006732:	441a      	add	r2, r3
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	2b02      	cmp	r3, #2
 800673c:	d105      	bne.n	800674a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800673e:	693b      	ldr	r3, [r7, #16]
 8006740:	2b00      	cmp	r3, #0
 8006742:	d002      	beq.n	800674a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006744:	693b      	ldr	r3, [r7, #16]
 8006746:	3b01      	subs	r3, #1
 8006748:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800674a:	693b      	ldr	r3, [r7, #16]
 800674c:	1c5a      	adds	r2, r3, #1
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8006752:	697b      	ldr	r3, [r7, #20]
}
 8006754:	4618      	mov	r0, r3
 8006756:	3718      	adds	r7, #24
 8006758:	46bd      	mov	sp, r7
 800675a:	bd80      	pop	{r7, pc}

0800675c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800675c:	b580      	push	{r7, lr}
 800675e:	b082      	sub	sp, #8
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]
 8006764:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800676a:	2b00      	cmp	r3, #0
 800676c:	d018      	beq.n	80067a0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	68da      	ldr	r2, [r3, #12]
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006776:	441a      	add	r2, r3
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	68da      	ldr	r2, [r3, #12]
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	689b      	ldr	r3, [r3, #8]
 8006784:	429a      	cmp	r2, r3
 8006786:	d303      	bcc.n	8006790 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681a      	ldr	r2, [r3, #0]
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	68d9      	ldr	r1, [r3, #12]
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006798:	461a      	mov	r2, r3
 800679a:	6838      	ldr	r0, [r7, #0]
 800679c:	f002 fe85 	bl	80094aa <memcpy>
	}
}
 80067a0:	bf00      	nop
 80067a2:	3708      	adds	r7, #8
 80067a4:	46bd      	mov	sp, r7
 80067a6:	bd80      	pop	{r7, pc}

080067a8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80067a8:	b580      	push	{r7, lr}
 80067aa:	b084      	sub	sp, #16
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80067b0:	f001 fcac 	bl	800810c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80067ba:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80067bc:	e011      	b.n	80067e2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d012      	beq.n	80067ec <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	3324      	adds	r3, #36	@ 0x24
 80067ca:	4618      	mov	r0, r3
 80067cc:	f000 fd74 	bl	80072b8 <xTaskRemoveFromEventList>
 80067d0:	4603      	mov	r3, r0
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d001      	beq.n	80067da <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80067d6:	f000 fe53 	bl	8007480 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80067da:	7bfb      	ldrb	r3, [r7, #15]
 80067dc:	3b01      	subs	r3, #1
 80067de:	b2db      	uxtb	r3, r3
 80067e0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80067e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	dce9      	bgt.n	80067be <prvUnlockQueue+0x16>
 80067ea:	e000      	b.n	80067ee <prvUnlockQueue+0x46>
					break;
 80067ec:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	22ff      	movs	r2, #255	@ 0xff
 80067f2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80067f6:	f001 fcbf 	bl	8008178 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80067fa:	f001 fc87 	bl	800810c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006804:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006806:	e011      	b.n	800682c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	691b      	ldr	r3, [r3, #16]
 800680c:	2b00      	cmp	r3, #0
 800680e:	d012      	beq.n	8006836 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	3310      	adds	r3, #16
 8006814:	4618      	mov	r0, r3
 8006816:	f000 fd4f 	bl	80072b8 <xTaskRemoveFromEventList>
 800681a:	4603      	mov	r3, r0
 800681c:	2b00      	cmp	r3, #0
 800681e:	d001      	beq.n	8006824 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006820:	f000 fe2e 	bl	8007480 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006824:	7bbb      	ldrb	r3, [r7, #14]
 8006826:	3b01      	subs	r3, #1
 8006828:	b2db      	uxtb	r3, r3
 800682a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800682c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006830:	2b00      	cmp	r3, #0
 8006832:	dce9      	bgt.n	8006808 <prvUnlockQueue+0x60>
 8006834:	e000      	b.n	8006838 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006836:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	22ff      	movs	r2, #255	@ 0xff
 800683c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8006840:	f001 fc9a 	bl	8008178 <vPortExitCritical>
}
 8006844:	bf00      	nop
 8006846:	3710      	adds	r7, #16
 8006848:	46bd      	mov	sp, r7
 800684a:	bd80      	pop	{r7, pc}

0800684c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800684c:	b580      	push	{r7, lr}
 800684e:	b084      	sub	sp, #16
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006854:	f001 fc5a 	bl	800810c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800685c:	2b00      	cmp	r3, #0
 800685e:	d102      	bne.n	8006866 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006860:	2301      	movs	r3, #1
 8006862:	60fb      	str	r3, [r7, #12]
 8006864:	e001      	b.n	800686a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006866:	2300      	movs	r3, #0
 8006868:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800686a:	f001 fc85 	bl	8008178 <vPortExitCritical>

	return xReturn;
 800686e:	68fb      	ldr	r3, [r7, #12]
}
 8006870:	4618      	mov	r0, r3
 8006872:	3710      	adds	r7, #16
 8006874:	46bd      	mov	sp, r7
 8006876:	bd80      	pop	{r7, pc}

08006878 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006878:	b580      	push	{r7, lr}
 800687a:	b084      	sub	sp, #16
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006880:	f001 fc44 	bl	800810c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800688c:	429a      	cmp	r2, r3
 800688e:	d102      	bne.n	8006896 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006890:	2301      	movs	r3, #1
 8006892:	60fb      	str	r3, [r7, #12]
 8006894:	e001      	b.n	800689a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006896:	2300      	movs	r3, #0
 8006898:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800689a:	f001 fc6d 	bl	8008178 <vPortExitCritical>

	return xReturn;
 800689e:	68fb      	ldr	r3, [r7, #12]
}
 80068a0:	4618      	mov	r0, r3
 80068a2:	3710      	adds	r7, #16
 80068a4:	46bd      	mov	sp, r7
 80068a6:	bd80      	pop	{r7, pc}

080068a8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80068a8:	b480      	push	{r7}
 80068aa:	b085      	sub	sp, #20
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	6078      	str	r0, [r7, #4]
 80068b0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80068b2:	2300      	movs	r3, #0
 80068b4:	60fb      	str	r3, [r7, #12]
 80068b6:	e014      	b.n	80068e2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80068b8:	4a0f      	ldr	r2, [pc, #60]	@ (80068f8 <vQueueAddToRegistry+0x50>)
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d10b      	bne.n	80068dc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80068c4:	490c      	ldr	r1, [pc, #48]	@ (80068f8 <vQueueAddToRegistry+0x50>)
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	683a      	ldr	r2, [r7, #0]
 80068ca:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80068ce:	4a0a      	ldr	r2, [pc, #40]	@ (80068f8 <vQueueAddToRegistry+0x50>)
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	00db      	lsls	r3, r3, #3
 80068d4:	4413      	add	r3, r2
 80068d6:	687a      	ldr	r2, [r7, #4]
 80068d8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80068da:	e006      	b.n	80068ea <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	3301      	adds	r3, #1
 80068e0:	60fb      	str	r3, [r7, #12]
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	2b07      	cmp	r3, #7
 80068e6:	d9e7      	bls.n	80068b8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80068e8:	bf00      	nop
 80068ea:	bf00      	nop
 80068ec:	3714      	adds	r7, #20
 80068ee:	46bd      	mov	sp, r7
 80068f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f4:	4770      	bx	lr
 80068f6:	bf00      	nop
 80068f8:	200010a4 	.word	0x200010a4

080068fc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80068fc:	b580      	push	{r7, lr}
 80068fe:	b086      	sub	sp, #24
 8006900:	af00      	add	r7, sp, #0
 8006902:	60f8      	str	r0, [r7, #12]
 8006904:	60b9      	str	r1, [r7, #8]
 8006906:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800690c:	f001 fbfe 	bl	800810c <vPortEnterCritical>
 8006910:	697b      	ldr	r3, [r7, #20]
 8006912:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006916:	b25b      	sxtb	r3, r3
 8006918:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800691c:	d103      	bne.n	8006926 <vQueueWaitForMessageRestricted+0x2a>
 800691e:	697b      	ldr	r3, [r7, #20]
 8006920:	2200      	movs	r2, #0
 8006922:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006926:	697b      	ldr	r3, [r7, #20]
 8006928:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800692c:	b25b      	sxtb	r3, r3
 800692e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006932:	d103      	bne.n	800693c <vQueueWaitForMessageRestricted+0x40>
 8006934:	697b      	ldr	r3, [r7, #20]
 8006936:	2200      	movs	r2, #0
 8006938:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800693c:	f001 fc1c 	bl	8008178 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006940:	697b      	ldr	r3, [r7, #20]
 8006942:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006944:	2b00      	cmp	r3, #0
 8006946:	d106      	bne.n	8006956 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006948:	697b      	ldr	r3, [r7, #20]
 800694a:	3324      	adds	r3, #36	@ 0x24
 800694c:	687a      	ldr	r2, [r7, #4]
 800694e:	68b9      	ldr	r1, [r7, #8]
 8006950:	4618      	mov	r0, r3
 8006952:	f000 fc83 	bl	800725c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006956:	6978      	ldr	r0, [r7, #20]
 8006958:	f7ff ff26 	bl	80067a8 <prvUnlockQueue>
	}
 800695c:	bf00      	nop
 800695e:	3718      	adds	r7, #24
 8006960:	46bd      	mov	sp, r7
 8006962:	bd80      	pop	{r7, pc}

08006964 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006964:	b580      	push	{r7, lr}
 8006966:	b08e      	sub	sp, #56	@ 0x38
 8006968:	af04      	add	r7, sp, #16
 800696a:	60f8      	str	r0, [r7, #12]
 800696c:	60b9      	str	r1, [r7, #8]
 800696e:	607a      	str	r2, [r7, #4]
 8006970:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006972:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006974:	2b00      	cmp	r3, #0
 8006976:	d10d      	bne.n	8006994 <xTaskCreateStatic+0x30>
	__asm volatile
 8006978:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800697c:	b672      	cpsid	i
 800697e:	f383 8811 	msr	BASEPRI, r3
 8006982:	f3bf 8f6f 	isb	sy
 8006986:	f3bf 8f4f 	dsb	sy
 800698a:	b662      	cpsie	i
 800698c:	623b      	str	r3, [r7, #32]
}
 800698e:	bf00      	nop
 8006990:	bf00      	nop
 8006992:	e7fd      	b.n	8006990 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8006994:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006996:	2b00      	cmp	r3, #0
 8006998:	d10d      	bne.n	80069b6 <xTaskCreateStatic+0x52>
	__asm volatile
 800699a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800699e:	b672      	cpsid	i
 80069a0:	f383 8811 	msr	BASEPRI, r3
 80069a4:	f3bf 8f6f 	isb	sy
 80069a8:	f3bf 8f4f 	dsb	sy
 80069ac:	b662      	cpsie	i
 80069ae:	61fb      	str	r3, [r7, #28]
}
 80069b0:	bf00      	nop
 80069b2:	bf00      	nop
 80069b4:	e7fd      	b.n	80069b2 <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80069b6:	23a8      	movs	r3, #168	@ 0xa8
 80069b8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80069ba:	693b      	ldr	r3, [r7, #16]
 80069bc:	2ba8      	cmp	r3, #168	@ 0xa8
 80069be:	d00d      	beq.n	80069dc <xTaskCreateStatic+0x78>
	__asm volatile
 80069c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069c4:	b672      	cpsid	i
 80069c6:	f383 8811 	msr	BASEPRI, r3
 80069ca:	f3bf 8f6f 	isb	sy
 80069ce:	f3bf 8f4f 	dsb	sy
 80069d2:	b662      	cpsie	i
 80069d4:	61bb      	str	r3, [r7, #24]
}
 80069d6:	bf00      	nop
 80069d8:	bf00      	nop
 80069da:	e7fd      	b.n	80069d8 <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80069dc:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80069de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d01e      	beq.n	8006a22 <xTaskCreateStatic+0xbe>
 80069e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d01b      	beq.n	8006a22 <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80069ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069ec:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80069ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069f0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80069f2:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80069f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069f6:	2202      	movs	r2, #2
 80069f8:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80069fc:	2300      	movs	r3, #0
 80069fe:	9303      	str	r3, [sp, #12]
 8006a00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a02:	9302      	str	r3, [sp, #8]
 8006a04:	f107 0314 	add.w	r3, r7, #20
 8006a08:	9301      	str	r3, [sp, #4]
 8006a0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a0c:	9300      	str	r3, [sp, #0]
 8006a0e:	683b      	ldr	r3, [r7, #0]
 8006a10:	687a      	ldr	r2, [r7, #4]
 8006a12:	68b9      	ldr	r1, [r7, #8]
 8006a14:	68f8      	ldr	r0, [r7, #12]
 8006a16:	f000 f851 	bl	8006abc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006a1a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006a1c:	f000 f8f8 	bl	8006c10 <prvAddNewTaskToReadyList>
 8006a20:	e001      	b.n	8006a26 <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 8006a22:	2300      	movs	r3, #0
 8006a24:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006a26:	697b      	ldr	r3, [r7, #20]
	}
 8006a28:	4618      	mov	r0, r3
 8006a2a:	3728      	adds	r7, #40	@ 0x28
 8006a2c:	46bd      	mov	sp, r7
 8006a2e:	bd80      	pop	{r7, pc}

08006a30 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006a30:	b580      	push	{r7, lr}
 8006a32:	b08c      	sub	sp, #48	@ 0x30
 8006a34:	af04      	add	r7, sp, #16
 8006a36:	60f8      	str	r0, [r7, #12]
 8006a38:	60b9      	str	r1, [r7, #8]
 8006a3a:	603b      	str	r3, [r7, #0]
 8006a3c:	4613      	mov	r3, r2
 8006a3e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006a40:	88fb      	ldrh	r3, [r7, #6]
 8006a42:	009b      	lsls	r3, r3, #2
 8006a44:	4618      	mov	r0, r3
 8006a46:	f001 fc8f 	bl	8008368 <pvPortMalloc>
 8006a4a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006a4c:	697b      	ldr	r3, [r7, #20]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d00e      	beq.n	8006a70 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006a52:	20a8      	movs	r0, #168	@ 0xa8
 8006a54:	f001 fc88 	bl	8008368 <pvPortMalloc>
 8006a58:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006a5a:	69fb      	ldr	r3, [r7, #28]
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d003      	beq.n	8006a68 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006a60:	69fb      	ldr	r3, [r7, #28]
 8006a62:	697a      	ldr	r2, [r7, #20]
 8006a64:	631a      	str	r2, [r3, #48]	@ 0x30
 8006a66:	e005      	b.n	8006a74 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006a68:	6978      	ldr	r0, [r7, #20]
 8006a6a:	f001 fd4b 	bl	8008504 <vPortFree>
 8006a6e:	e001      	b.n	8006a74 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006a70:	2300      	movs	r3, #0
 8006a72:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006a74:	69fb      	ldr	r3, [r7, #28]
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d017      	beq.n	8006aaa <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006a7a:	69fb      	ldr	r3, [r7, #28]
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006a82:	88fa      	ldrh	r2, [r7, #6]
 8006a84:	2300      	movs	r3, #0
 8006a86:	9303      	str	r3, [sp, #12]
 8006a88:	69fb      	ldr	r3, [r7, #28]
 8006a8a:	9302      	str	r3, [sp, #8]
 8006a8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a8e:	9301      	str	r3, [sp, #4]
 8006a90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a92:	9300      	str	r3, [sp, #0]
 8006a94:	683b      	ldr	r3, [r7, #0]
 8006a96:	68b9      	ldr	r1, [r7, #8]
 8006a98:	68f8      	ldr	r0, [r7, #12]
 8006a9a:	f000 f80f 	bl	8006abc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006a9e:	69f8      	ldr	r0, [r7, #28]
 8006aa0:	f000 f8b6 	bl	8006c10 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006aa4:	2301      	movs	r3, #1
 8006aa6:	61bb      	str	r3, [r7, #24]
 8006aa8:	e002      	b.n	8006ab0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006aaa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006aae:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006ab0:	69bb      	ldr	r3, [r7, #24]
	}
 8006ab2:	4618      	mov	r0, r3
 8006ab4:	3720      	adds	r7, #32
 8006ab6:	46bd      	mov	sp, r7
 8006ab8:	bd80      	pop	{r7, pc}
	...

08006abc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006abc:	b580      	push	{r7, lr}
 8006abe:	b088      	sub	sp, #32
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	60f8      	str	r0, [r7, #12]
 8006ac4:	60b9      	str	r1, [r7, #8]
 8006ac6:	607a      	str	r2, [r7, #4]
 8006ac8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006aca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006acc:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	009b      	lsls	r3, r3, #2
 8006ad2:	461a      	mov	r2, r3
 8006ad4:	21a5      	movs	r1, #165	@ 0xa5
 8006ad6:	f002 fc0a 	bl	80092ee <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006ada:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006adc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006ade:	6879      	ldr	r1, [r7, #4]
 8006ae0:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8006ae4:	440b      	add	r3, r1
 8006ae6:	009b      	lsls	r3, r3, #2
 8006ae8:	4413      	add	r3, r2
 8006aea:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006aec:	69bb      	ldr	r3, [r7, #24]
 8006aee:	f023 0307 	bic.w	r3, r3, #7
 8006af2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006af4:	69bb      	ldr	r3, [r7, #24]
 8006af6:	f003 0307 	and.w	r3, r3, #7
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d00d      	beq.n	8006b1a <prvInitialiseNewTask+0x5e>
	__asm volatile
 8006afe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b02:	b672      	cpsid	i
 8006b04:	f383 8811 	msr	BASEPRI, r3
 8006b08:	f3bf 8f6f 	isb	sy
 8006b0c:	f3bf 8f4f 	dsb	sy
 8006b10:	b662      	cpsie	i
 8006b12:	617b      	str	r3, [r7, #20]
}
 8006b14:	bf00      	nop
 8006b16:	bf00      	nop
 8006b18:	e7fd      	b.n	8006b16 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006b1a:	68bb      	ldr	r3, [r7, #8]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d01f      	beq.n	8006b60 <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006b20:	2300      	movs	r3, #0
 8006b22:	61fb      	str	r3, [r7, #28]
 8006b24:	e012      	b.n	8006b4c <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006b26:	68ba      	ldr	r2, [r7, #8]
 8006b28:	69fb      	ldr	r3, [r7, #28]
 8006b2a:	4413      	add	r3, r2
 8006b2c:	7819      	ldrb	r1, [r3, #0]
 8006b2e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006b30:	69fb      	ldr	r3, [r7, #28]
 8006b32:	4413      	add	r3, r2
 8006b34:	3334      	adds	r3, #52	@ 0x34
 8006b36:	460a      	mov	r2, r1
 8006b38:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006b3a:	68ba      	ldr	r2, [r7, #8]
 8006b3c:	69fb      	ldr	r3, [r7, #28]
 8006b3e:	4413      	add	r3, r2
 8006b40:	781b      	ldrb	r3, [r3, #0]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d006      	beq.n	8006b54 <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006b46:	69fb      	ldr	r3, [r7, #28]
 8006b48:	3301      	adds	r3, #1
 8006b4a:	61fb      	str	r3, [r7, #28]
 8006b4c:	69fb      	ldr	r3, [r7, #28]
 8006b4e:	2b0f      	cmp	r3, #15
 8006b50:	d9e9      	bls.n	8006b26 <prvInitialiseNewTask+0x6a>
 8006b52:	e000      	b.n	8006b56 <prvInitialiseNewTask+0x9a>
			{
				break;
 8006b54:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006b56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b58:	2200      	movs	r2, #0
 8006b5a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006b5e:	e003      	b.n	8006b68 <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006b60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b62:	2200      	movs	r2, #0
 8006b64:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006b68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b6a:	2b37      	cmp	r3, #55	@ 0x37
 8006b6c:	d901      	bls.n	8006b72 <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006b6e:	2337      	movs	r3, #55	@ 0x37
 8006b70:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006b72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b74:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006b76:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006b78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b7a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006b7c:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006b7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b80:	2200      	movs	r2, #0
 8006b82:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006b84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b86:	3304      	adds	r3, #4
 8006b88:	4618      	mov	r0, r3
 8006b8a:	f7ff f871 	bl	8005c70 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006b8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b90:	3318      	adds	r3, #24
 8006b92:	4618      	mov	r0, r3
 8006b94:	f7ff f86c 	bl	8005c70 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006b98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b9a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006b9c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006b9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ba0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006ba4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ba6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006ba8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006baa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006bac:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006bae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bb0:	2200      	movs	r2, #0
 8006bb2:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006bb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bb8:	2200      	movs	r2, #0
 8006bba:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006bbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bc0:	3354      	adds	r3, #84	@ 0x54
 8006bc2:	224c      	movs	r2, #76	@ 0x4c
 8006bc4:	2100      	movs	r1, #0
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	f002 fb91 	bl	80092ee <memset>
 8006bcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bce:	4a0d      	ldr	r2, [pc, #52]	@ (8006c04 <prvInitialiseNewTask+0x148>)
 8006bd0:	659a      	str	r2, [r3, #88]	@ 0x58
 8006bd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bd4:	4a0c      	ldr	r2, [pc, #48]	@ (8006c08 <prvInitialiseNewTask+0x14c>)
 8006bd6:	65da      	str	r2, [r3, #92]	@ 0x5c
 8006bd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bda:	4a0c      	ldr	r2, [pc, #48]	@ (8006c0c <prvInitialiseNewTask+0x150>)
 8006bdc:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006bde:	683a      	ldr	r2, [r7, #0]
 8006be0:	68f9      	ldr	r1, [r7, #12]
 8006be2:	69b8      	ldr	r0, [r7, #24]
 8006be4:	f001 f984 	bl	8007ef0 <pxPortInitialiseStack>
 8006be8:	4602      	mov	r2, r0
 8006bea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bec:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006bee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d002      	beq.n	8006bfa <prvInitialiseNewTask+0x13e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006bf4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bf6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006bf8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006bfa:	bf00      	nop
 8006bfc:	3720      	adds	r7, #32
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	bd80      	pop	{r7, pc}
 8006c02:	bf00      	nop
 8006c04:	20005330 	.word	0x20005330
 8006c08:	20005398 	.word	0x20005398
 8006c0c:	20005400 	.word	0x20005400

08006c10 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006c10:	b580      	push	{r7, lr}
 8006c12:	b082      	sub	sp, #8
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006c18:	f001 fa78 	bl	800810c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006c1c:	4b2d      	ldr	r3, [pc, #180]	@ (8006cd4 <prvAddNewTaskToReadyList+0xc4>)
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	3301      	adds	r3, #1
 8006c22:	4a2c      	ldr	r2, [pc, #176]	@ (8006cd4 <prvAddNewTaskToReadyList+0xc4>)
 8006c24:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006c26:	4b2c      	ldr	r3, [pc, #176]	@ (8006cd8 <prvAddNewTaskToReadyList+0xc8>)
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d109      	bne.n	8006c42 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006c2e:	4a2a      	ldr	r2, [pc, #168]	@ (8006cd8 <prvAddNewTaskToReadyList+0xc8>)
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006c34:	4b27      	ldr	r3, [pc, #156]	@ (8006cd4 <prvAddNewTaskToReadyList+0xc4>)
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	2b01      	cmp	r3, #1
 8006c3a:	d110      	bne.n	8006c5e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006c3c:	f000 fc44 	bl	80074c8 <prvInitialiseTaskLists>
 8006c40:	e00d      	b.n	8006c5e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006c42:	4b26      	ldr	r3, [pc, #152]	@ (8006cdc <prvAddNewTaskToReadyList+0xcc>)
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d109      	bne.n	8006c5e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006c4a:	4b23      	ldr	r3, [pc, #140]	@ (8006cd8 <prvAddNewTaskToReadyList+0xc8>)
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c54:	429a      	cmp	r2, r3
 8006c56:	d802      	bhi.n	8006c5e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006c58:	4a1f      	ldr	r2, [pc, #124]	@ (8006cd8 <prvAddNewTaskToReadyList+0xc8>)
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006c5e:	4b20      	ldr	r3, [pc, #128]	@ (8006ce0 <prvAddNewTaskToReadyList+0xd0>)
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	3301      	adds	r3, #1
 8006c64:	4a1e      	ldr	r2, [pc, #120]	@ (8006ce0 <prvAddNewTaskToReadyList+0xd0>)
 8006c66:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006c68:	4b1d      	ldr	r3, [pc, #116]	@ (8006ce0 <prvAddNewTaskToReadyList+0xd0>)
 8006c6a:	681a      	ldr	r2, [r3, #0]
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c74:	4b1b      	ldr	r3, [pc, #108]	@ (8006ce4 <prvAddNewTaskToReadyList+0xd4>)
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	429a      	cmp	r2, r3
 8006c7a:	d903      	bls.n	8006c84 <prvAddNewTaskToReadyList+0x74>
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c80:	4a18      	ldr	r2, [pc, #96]	@ (8006ce4 <prvAddNewTaskToReadyList+0xd4>)
 8006c82:	6013      	str	r3, [r2, #0]
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c88:	4613      	mov	r3, r2
 8006c8a:	009b      	lsls	r3, r3, #2
 8006c8c:	4413      	add	r3, r2
 8006c8e:	009b      	lsls	r3, r3, #2
 8006c90:	4a15      	ldr	r2, [pc, #84]	@ (8006ce8 <prvAddNewTaskToReadyList+0xd8>)
 8006c92:	441a      	add	r2, r3
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	3304      	adds	r3, #4
 8006c98:	4619      	mov	r1, r3
 8006c9a:	4610      	mov	r0, r2
 8006c9c:	f7fe fff5 	bl	8005c8a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006ca0:	f001 fa6a 	bl	8008178 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006ca4:	4b0d      	ldr	r3, [pc, #52]	@ (8006cdc <prvAddNewTaskToReadyList+0xcc>)
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d00e      	beq.n	8006cca <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006cac:	4b0a      	ldr	r3, [pc, #40]	@ (8006cd8 <prvAddNewTaskToReadyList+0xc8>)
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cb6:	429a      	cmp	r2, r3
 8006cb8:	d207      	bcs.n	8006cca <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006cba:	4b0c      	ldr	r3, [pc, #48]	@ (8006cec <prvAddNewTaskToReadyList+0xdc>)
 8006cbc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006cc0:	601a      	str	r2, [r3, #0]
 8006cc2:	f3bf 8f4f 	dsb	sy
 8006cc6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006cca:	bf00      	nop
 8006ccc:	3708      	adds	r7, #8
 8006cce:	46bd      	mov	sp, r7
 8006cd0:	bd80      	pop	{r7, pc}
 8006cd2:	bf00      	nop
 8006cd4:	200015b8 	.word	0x200015b8
 8006cd8:	200010e4 	.word	0x200010e4
 8006cdc:	200015c4 	.word	0x200015c4
 8006ce0:	200015d4 	.word	0x200015d4
 8006ce4:	200015c0 	.word	0x200015c0
 8006ce8:	200010e8 	.word	0x200010e8
 8006cec:	e000ed04 	.word	0xe000ed04

08006cf0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006cf0:	b580      	push	{r7, lr}
 8006cf2:	b084      	sub	sp, #16
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006cf8:	2300      	movs	r3, #0
 8006cfa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d01a      	beq.n	8006d38 <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006d02:	4b15      	ldr	r3, [pc, #84]	@ (8006d58 <vTaskDelay+0x68>)
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d00d      	beq.n	8006d26 <vTaskDelay+0x36>
	__asm volatile
 8006d0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d0e:	b672      	cpsid	i
 8006d10:	f383 8811 	msr	BASEPRI, r3
 8006d14:	f3bf 8f6f 	isb	sy
 8006d18:	f3bf 8f4f 	dsb	sy
 8006d1c:	b662      	cpsie	i
 8006d1e:	60bb      	str	r3, [r7, #8]
}
 8006d20:	bf00      	nop
 8006d22:	bf00      	nop
 8006d24:	e7fd      	b.n	8006d22 <vTaskDelay+0x32>
			vTaskSuspendAll();
 8006d26:	f000 f88f 	bl	8006e48 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006d2a:	2100      	movs	r1, #0
 8006d2c:	6878      	ldr	r0, [r7, #4]
 8006d2e:	f000 fd23 	bl	8007778 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006d32:	f000 f897 	bl	8006e64 <xTaskResumeAll>
 8006d36:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d107      	bne.n	8006d4e <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 8006d3e:	4b07      	ldr	r3, [pc, #28]	@ (8006d5c <vTaskDelay+0x6c>)
 8006d40:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006d44:	601a      	str	r2, [r3, #0]
 8006d46:	f3bf 8f4f 	dsb	sy
 8006d4a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006d4e:	bf00      	nop
 8006d50:	3710      	adds	r7, #16
 8006d52:	46bd      	mov	sp, r7
 8006d54:	bd80      	pop	{r7, pc}
 8006d56:	bf00      	nop
 8006d58:	200015e0 	.word	0x200015e0
 8006d5c:	e000ed04 	.word	0xe000ed04

08006d60 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006d60:	b580      	push	{r7, lr}
 8006d62:	b08a      	sub	sp, #40	@ 0x28
 8006d64:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006d66:	2300      	movs	r3, #0
 8006d68:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006d6a:	2300      	movs	r3, #0
 8006d6c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006d6e:	463a      	mov	r2, r7
 8006d70:	1d39      	adds	r1, r7, #4
 8006d72:	f107 0308 	add.w	r3, r7, #8
 8006d76:	4618      	mov	r0, r3
 8006d78:	f7fe ff26 	bl	8005bc8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006d7c:	6839      	ldr	r1, [r7, #0]
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	68ba      	ldr	r2, [r7, #8]
 8006d82:	9202      	str	r2, [sp, #8]
 8006d84:	9301      	str	r3, [sp, #4]
 8006d86:	2300      	movs	r3, #0
 8006d88:	9300      	str	r3, [sp, #0]
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	460a      	mov	r2, r1
 8006d8e:	4926      	ldr	r1, [pc, #152]	@ (8006e28 <vTaskStartScheduler+0xc8>)
 8006d90:	4826      	ldr	r0, [pc, #152]	@ (8006e2c <vTaskStartScheduler+0xcc>)
 8006d92:	f7ff fde7 	bl	8006964 <xTaskCreateStatic>
 8006d96:	4603      	mov	r3, r0
 8006d98:	4a25      	ldr	r2, [pc, #148]	@ (8006e30 <vTaskStartScheduler+0xd0>)
 8006d9a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006d9c:	4b24      	ldr	r3, [pc, #144]	@ (8006e30 <vTaskStartScheduler+0xd0>)
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d002      	beq.n	8006daa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006da4:	2301      	movs	r3, #1
 8006da6:	617b      	str	r3, [r7, #20]
 8006da8:	e001      	b.n	8006dae <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006daa:	2300      	movs	r3, #0
 8006dac:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006dae:	697b      	ldr	r3, [r7, #20]
 8006db0:	2b01      	cmp	r3, #1
 8006db2:	d102      	bne.n	8006dba <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006db4:	f000 fd34 	bl	8007820 <xTimerCreateTimerTask>
 8006db8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006dba:	697b      	ldr	r3, [r7, #20]
 8006dbc:	2b01      	cmp	r3, #1
 8006dbe:	d11d      	bne.n	8006dfc <vTaskStartScheduler+0x9c>
	__asm volatile
 8006dc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006dc4:	b672      	cpsid	i
 8006dc6:	f383 8811 	msr	BASEPRI, r3
 8006dca:	f3bf 8f6f 	isb	sy
 8006dce:	f3bf 8f4f 	dsb	sy
 8006dd2:	b662      	cpsie	i
 8006dd4:	613b      	str	r3, [r7, #16]
}
 8006dd6:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006dd8:	4b16      	ldr	r3, [pc, #88]	@ (8006e34 <vTaskStartScheduler+0xd4>)
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	3354      	adds	r3, #84	@ 0x54
 8006dde:	4a16      	ldr	r2, [pc, #88]	@ (8006e38 <vTaskStartScheduler+0xd8>)
 8006de0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006de2:	4b16      	ldr	r3, [pc, #88]	@ (8006e3c <vTaskStartScheduler+0xdc>)
 8006de4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006de8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006dea:	4b15      	ldr	r3, [pc, #84]	@ (8006e40 <vTaskStartScheduler+0xe0>)
 8006dec:	2201      	movs	r2, #1
 8006dee:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006df0:	4b14      	ldr	r3, [pc, #80]	@ (8006e44 <vTaskStartScheduler+0xe4>)
 8006df2:	2200      	movs	r2, #0
 8006df4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006df6:	f001 f90b 	bl	8008010 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006dfa:	e011      	b.n	8006e20 <vTaskStartScheduler+0xc0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006dfc:	697b      	ldr	r3, [r7, #20]
 8006dfe:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006e02:	d10d      	bne.n	8006e20 <vTaskStartScheduler+0xc0>
	__asm volatile
 8006e04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e08:	b672      	cpsid	i
 8006e0a:	f383 8811 	msr	BASEPRI, r3
 8006e0e:	f3bf 8f6f 	isb	sy
 8006e12:	f3bf 8f4f 	dsb	sy
 8006e16:	b662      	cpsie	i
 8006e18:	60fb      	str	r3, [r7, #12]
}
 8006e1a:	bf00      	nop
 8006e1c:	bf00      	nop
 8006e1e:	e7fd      	b.n	8006e1c <vTaskStartScheduler+0xbc>
}
 8006e20:	bf00      	nop
 8006e22:	3718      	adds	r7, #24
 8006e24:	46bd      	mov	sp, r7
 8006e26:	bd80      	pop	{r7, pc}
 8006e28:	0800b29c 	.word	0x0800b29c
 8006e2c:	08007499 	.word	0x08007499
 8006e30:	200015dc 	.word	0x200015dc
 8006e34:	200010e4 	.word	0x200010e4
 8006e38:	2000001c 	.word	0x2000001c
 8006e3c:	200015d8 	.word	0x200015d8
 8006e40:	200015c4 	.word	0x200015c4
 8006e44:	200015bc 	.word	0x200015bc

08006e48 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006e48:	b480      	push	{r7}
 8006e4a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006e4c:	4b04      	ldr	r3, [pc, #16]	@ (8006e60 <vTaskSuspendAll+0x18>)
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	3301      	adds	r3, #1
 8006e52:	4a03      	ldr	r2, [pc, #12]	@ (8006e60 <vTaskSuspendAll+0x18>)
 8006e54:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8006e56:	bf00      	nop
 8006e58:	46bd      	mov	sp, r7
 8006e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5e:	4770      	bx	lr
 8006e60:	200015e0 	.word	0x200015e0

08006e64 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006e64:	b580      	push	{r7, lr}
 8006e66:	b084      	sub	sp, #16
 8006e68:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006e6a:	2300      	movs	r3, #0
 8006e6c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006e6e:	2300      	movs	r3, #0
 8006e70:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006e72:	4b43      	ldr	r3, [pc, #268]	@ (8006f80 <xTaskResumeAll+0x11c>)
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d10d      	bne.n	8006e96 <xTaskResumeAll+0x32>
	__asm volatile
 8006e7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e7e:	b672      	cpsid	i
 8006e80:	f383 8811 	msr	BASEPRI, r3
 8006e84:	f3bf 8f6f 	isb	sy
 8006e88:	f3bf 8f4f 	dsb	sy
 8006e8c:	b662      	cpsie	i
 8006e8e:	603b      	str	r3, [r7, #0]
}
 8006e90:	bf00      	nop
 8006e92:	bf00      	nop
 8006e94:	e7fd      	b.n	8006e92 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006e96:	f001 f939 	bl	800810c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006e9a:	4b39      	ldr	r3, [pc, #228]	@ (8006f80 <xTaskResumeAll+0x11c>)
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	3b01      	subs	r3, #1
 8006ea0:	4a37      	ldr	r2, [pc, #220]	@ (8006f80 <xTaskResumeAll+0x11c>)
 8006ea2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006ea4:	4b36      	ldr	r3, [pc, #216]	@ (8006f80 <xTaskResumeAll+0x11c>)
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d162      	bne.n	8006f72 <xTaskResumeAll+0x10e>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006eac:	4b35      	ldr	r3, [pc, #212]	@ (8006f84 <xTaskResumeAll+0x120>)
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d05e      	beq.n	8006f72 <xTaskResumeAll+0x10e>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006eb4:	e02f      	b.n	8006f16 <xTaskResumeAll+0xb2>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006eb6:	4b34      	ldr	r3, [pc, #208]	@ (8006f88 <xTaskResumeAll+0x124>)
 8006eb8:	68db      	ldr	r3, [r3, #12]
 8006eba:	68db      	ldr	r3, [r3, #12]
 8006ebc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	3318      	adds	r3, #24
 8006ec2:	4618      	mov	r0, r3
 8006ec4:	f7fe ff3e 	bl	8005d44 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	3304      	adds	r3, #4
 8006ecc:	4618      	mov	r0, r3
 8006ece:	f7fe ff39 	bl	8005d44 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ed6:	4b2d      	ldr	r3, [pc, #180]	@ (8006f8c <xTaskResumeAll+0x128>)
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	429a      	cmp	r2, r3
 8006edc:	d903      	bls.n	8006ee6 <xTaskResumeAll+0x82>
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ee2:	4a2a      	ldr	r2, [pc, #168]	@ (8006f8c <xTaskResumeAll+0x128>)
 8006ee4:	6013      	str	r3, [r2, #0]
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006eea:	4613      	mov	r3, r2
 8006eec:	009b      	lsls	r3, r3, #2
 8006eee:	4413      	add	r3, r2
 8006ef0:	009b      	lsls	r3, r3, #2
 8006ef2:	4a27      	ldr	r2, [pc, #156]	@ (8006f90 <xTaskResumeAll+0x12c>)
 8006ef4:	441a      	add	r2, r3
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	3304      	adds	r3, #4
 8006efa:	4619      	mov	r1, r3
 8006efc:	4610      	mov	r0, r2
 8006efe:	f7fe fec4 	bl	8005c8a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f06:	4b23      	ldr	r3, [pc, #140]	@ (8006f94 <xTaskResumeAll+0x130>)
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f0c:	429a      	cmp	r2, r3
 8006f0e:	d302      	bcc.n	8006f16 <xTaskResumeAll+0xb2>
					{
						xYieldPending = pdTRUE;
 8006f10:	4b21      	ldr	r3, [pc, #132]	@ (8006f98 <xTaskResumeAll+0x134>)
 8006f12:	2201      	movs	r2, #1
 8006f14:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006f16:	4b1c      	ldr	r3, [pc, #112]	@ (8006f88 <xTaskResumeAll+0x124>)
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d1cb      	bne.n	8006eb6 <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d001      	beq.n	8006f28 <xTaskResumeAll+0xc4>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006f24:	f000 fb76 	bl	8007614 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006f28:	4b1c      	ldr	r3, [pc, #112]	@ (8006f9c <xTaskResumeAll+0x138>)
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d010      	beq.n	8006f56 <xTaskResumeAll+0xf2>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006f34:	f000 f846 	bl	8006fc4 <xTaskIncrementTick>
 8006f38:	4603      	mov	r3, r0
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d002      	beq.n	8006f44 <xTaskResumeAll+0xe0>
							{
								xYieldPending = pdTRUE;
 8006f3e:	4b16      	ldr	r3, [pc, #88]	@ (8006f98 <xTaskResumeAll+0x134>)
 8006f40:	2201      	movs	r2, #1
 8006f42:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	3b01      	subs	r3, #1
 8006f48:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d1f1      	bne.n	8006f34 <xTaskResumeAll+0xd0>

						uxPendedTicks = 0;
 8006f50:	4b12      	ldr	r3, [pc, #72]	@ (8006f9c <xTaskResumeAll+0x138>)
 8006f52:	2200      	movs	r2, #0
 8006f54:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006f56:	4b10      	ldr	r3, [pc, #64]	@ (8006f98 <xTaskResumeAll+0x134>)
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d009      	beq.n	8006f72 <xTaskResumeAll+0x10e>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006f5e:	2301      	movs	r3, #1
 8006f60:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006f62:	4b0f      	ldr	r3, [pc, #60]	@ (8006fa0 <xTaskResumeAll+0x13c>)
 8006f64:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006f68:	601a      	str	r2, [r3, #0]
 8006f6a:	f3bf 8f4f 	dsb	sy
 8006f6e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006f72:	f001 f901 	bl	8008178 <vPortExitCritical>

	return xAlreadyYielded;
 8006f76:	68bb      	ldr	r3, [r7, #8]
}
 8006f78:	4618      	mov	r0, r3
 8006f7a:	3710      	adds	r7, #16
 8006f7c:	46bd      	mov	sp, r7
 8006f7e:	bd80      	pop	{r7, pc}
 8006f80:	200015e0 	.word	0x200015e0
 8006f84:	200015b8 	.word	0x200015b8
 8006f88:	20001578 	.word	0x20001578
 8006f8c:	200015c0 	.word	0x200015c0
 8006f90:	200010e8 	.word	0x200010e8
 8006f94:	200010e4 	.word	0x200010e4
 8006f98:	200015cc 	.word	0x200015cc
 8006f9c:	200015c8 	.word	0x200015c8
 8006fa0:	e000ed04 	.word	0xe000ed04

08006fa4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006fa4:	b480      	push	{r7}
 8006fa6:	b083      	sub	sp, #12
 8006fa8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006faa:	4b05      	ldr	r3, [pc, #20]	@ (8006fc0 <xTaskGetTickCount+0x1c>)
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006fb0:	687b      	ldr	r3, [r7, #4]
}
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	370c      	adds	r7, #12
 8006fb6:	46bd      	mov	sp, r7
 8006fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fbc:	4770      	bx	lr
 8006fbe:	bf00      	nop
 8006fc0:	200015bc 	.word	0x200015bc

08006fc4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006fc4:	b580      	push	{r7, lr}
 8006fc6:	b086      	sub	sp, #24
 8006fc8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006fca:	2300      	movs	r3, #0
 8006fcc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006fce:	4b50      	ldr	r3, [pc, #320]	@ (8007110 <xTaskIncrementTick+0x14c>)
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	f040 808c 	bne.w	80070f0 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006fd8:	4b4e      	ldr	r3, [pc, #312]	@ (8007114 <xTaskIncrementTick+0x150>)
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	3301      	adds	r3, #1
 8006fde:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006fe0:	4a4c      	ldr	r2, [pc, #304]	@ (8007114 <xTaskIncrementTick+0x150>)
 8006fe2:	693b      	ldr	r3, [r7, #16]
 8006fe4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006fe6:	693b      	ldr	r3, [r7, #16]
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d123      	bne.n	8007034 <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 8006fec:	4b4a      	ldr	r3, [pc, #296]	@ (8007118 <xTaskIncrementTick+0x154>)
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d00d      	beq.n	8007012 <xTaskIncrementTick+0x4e>
	__asm volatile
 8006ff6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ffa:	b672      	cpsid	i
 8006ffc:	f383 8811 	msr	BASEPRI, r3
 8007000:	f3bf 8f6f 	isb	sy
 8007004:	f3bf 8f4f 	dsb	sy
 8007008:	b662      	cpsie	i
 800700a:	603b      	str	r3, [r7, #0]
}
 800700c:	bf00      	nop
 800700e:	bf00      	nop
 8007010:	e7fd      	b.n	800700e <xTaskIncrementTick+0x4a>
 8007012:	4b41      	ldr	r3, [pc, #260]	@ (8007118 <xTaskIncrementTick+0x154>)
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	60fb      	str	r3, [r7, #12]
 8007018:	4b40      	ldr	r3, [pc, #256]	@ (800711c <xTaskIncrementTick+0x158>)
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	4a3e      	ldr	r2, [pc, #248]	@ (8007118 <xTaskIncrementTick+0x154>)
 800701e:	6013      	str	r3, [r2, #0]
 8007020:	4a3e      	ldr	r2, [pc, #248]	@ (800711c <xTaskIncrementTick+0x158>)
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	6013      	str	r3, [r2, #0]
 8007026:	4b3e      	ldr	r3, [pc, #248]	@ (8007120 <xTaskIncrementTick+0x15c>)
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	3301      	adds	r3, #1
 800702c:	4a3c      	ldr	r2, [pc, #240]	@ (8007120 <xTaskIncrementTick+0x15c>)
 800702e:	6013      	str	r3, [r2, #0]
 8007030:	f000 faf0 	bl	8007614 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007034:	4b3b      	ldr	r3, [pc, #236]	@ (8007124 <xTaskIncrementTick+0x160>)
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	693a      	ldr	r2, [r7, #16]
 800703a:	429a      	cmp	r2, r3
 800703c:	d349      	bcc.n	80070d2 <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800703e:	4b36      	ldr	r3, [pc, #216]	@ (8007118 <xTaskIncrementTick+0x154>)
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	2b00      	cmp	r3, #0
 8007046:	d104      	bne.n	8007052 <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007048:	4b36      	ldr	r3, [pc, #216]	@ (8007124 <xTaskIncrementTick+0x160>)
 800704a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800704e:	601a      	str	r2, [r3, #0]
					break;
 8007050:	e03f      	b.n	80070d2 <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007052:	4b31      	ldr	r3, [pc, #196]	@ (8007118 <xTaskIncrementTick+0x154>)
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	68db      	ldr	r3, [r3, #12]
 8007058:	68db      	ldr	r3, [r3, #12]
 800705a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800705c:	68bb      	ldr	r3, [r7, #8]
 800705e:	685b      	ldr	r3, [r3, #4]
 8007060:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007062:	693a      	ldr	r2, [r7, #16]
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	429a      	cmp	r2, r3
 8007068:	d203      	bcs.n	8007072 <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800706a:	4a2e      	ldr	r2, [pc, #184]	@ (8007124 <xTaskIncrementTick+0x160>)
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007070:	e02f      	b.n	80070d2 <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007072:	68bb      	ldr	r3, [r7, #8]
 8007074:	3304      	adds	r3, #4
 8007076:	4618      	mov	r0, r3
 8007078:	f7fe fe64 	bl	8005d44 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800707c:	68bb      	ldr	r3, [r7, #8]
 800707e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007080:	2b00      	cmp	r3, #0
 8007082:	d004      	beq.n	800708e <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007084:	68bb      	ldr	r3, [r7, #8]
 8007086:	3318      	adds	r3, #24
 8007088:	4618      	mov	r0, r3
 800708a:	f7fe fe5b 	bl	8005d44 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800708e:	68bb      	ldr	r3, [r7, #8]
 8007090:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007092:	4b25      	ldr	r3, [pc, #148]	@ (8007128 <xTaskIncrementTick+0x164>)
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	429a      	cmp	r2, r3
 8007098:	d903      	bls.n	80070a2 <xTaskIncrementTick+0xde>
 800709a:	68bb      	ldr	r3, [r7, #8]
 800709c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800709e:	4a22      	ldr	r2, [pc, #136]	@ (8007128 <xTaskIncrementTick+0x164>)
 80070a0:	6013      	str	r3, [r2, #0]
 80070a2:	68bb      	ldr	r3, [r7, #8]
 80070a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80070a6:	4613      	mov	r3, r2
 80070a8:	009b      	lsls	r3, r3, #2
 80070aa:	4413      	add	r3, r2
 80070ac:	009b      	lsls	r3, r3, #2
 80070ae:	4a1f      	ldr	r2, [pc, #124]	@ (800712c <xTaskIncrementTick+0x168>)
 80070b0:	441a      	add	r2, r3
 80070b2:	68bb      	ldr	r3, [r7, #8]
 80070b4:	3304      	adds	r3, #4
 80070b6:	4619      	mov	r1, r3
 80070b8:	4610      	mov	r0, r2
 80070ba:	f7fe fde6 	bl	8005c8a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80070be:	68bb      	ldr	r3, [r7, #8]
 80070c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80070c2:	4b1b      	ldr	r3, [pc, #108]	@ (8007130 <xTaskIncrementTick+0x16c>)
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070c8:	429a      	cmp	r2, r3
 80070ca:	d3b8      	bcc.n	800703e <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 80070cc:	2301      	movs	r3, #1
 80070ce:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80070d0:	e7b5      	b.n	800703e <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80070d2:	4b17      	ldr	r3, [pc, #92]	@ (8007130 <xTaskIncrementTick+0x16c>)
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80070d8:	4914      	ldr	r1, [pc, #80]	@ (800712c <xTaskIncrementTick+0x168>)
 80070da:	4613      	mov	r3, r2
 80070dc:	009b      	lsls	r3, r3, #2
 80070de:	4413      	add	r3, r2
 80070e0:	009b      	lsls	r3, r3, #2
 80070e2:	440b      	add	r3, r1
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	2b01      	cmp	r3, #1
 80070e8:	d907      	bls.n	80070fa <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 80070ea:	2301      	movs	r3, #1
 80070ec:	617b      	str	r3, [r7, #20]
 80070ee:	e004      	b.n	80070fa <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80070f0:	4b10      	ldr	r3, [pc, #64]	@ (8007134 <xTaskIncrementTick+0x170>)
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	3301      	adds	r3, #1
 80070f6:	4a0f      	ldr	r2, [pc, #60]	@ (8007134 <xTaskIncrementTick+0x170>)
 80070f8:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80070fa:	4b0f      	ldr	r3, [pc, #60]	@ (8007138 <xTaskIncrementTick+0x174>)
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d001      	beq.n	8007106 <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 8007102:	2301      	movs	r3, #1
 8007104:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8007106:	697b      	ldr	r3, [r7, #20]
}
 8007108:	4618      	mov	r0, r3
 800710a:	3718      	adds	r7, #24
 800710c:	46bd      	mov	sp, r7
 800710e:	bd80      	pop	{r7, pc}
 8007110:	200015e0 	.word	0x200015e0
 8007114:	200015bc 	.word	0x200015bc
 8007118:	20001570 	.word	0x20001570
 800711c:	20001574 	.word	0x20001574
 8007120:	200015d0 	.word	0x200015d0
 8007124:	200015d8 	.word	0x200015d8
 8007128:	200015c0 	.word	0x200015c0
 800712c:	200010e8 	.word	0x200010e8
 8007130:	200010e4 	.word	0x200010e4
 8007134:	200015c8 	.word	0x200015c8
 8007138:	200015cc 	.word	0x200015cc

0800713c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800713c:	b480      	push	{r7}
 800713e:	b085      	sub	sp, #20
 8007140:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007142:	4b2c      	ldr	r3, [pc, #176]	@ (80071f4 <vTaskSwitchContext+0xb8>)
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	2b00      	cmp	r3, #0
 8007148:	d003      	beq.n	8007152 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800714a:	4b2b      	ldr	r3, [pc, #172]	@ (80071f8 <vTaskSwitchContext+0xbc>)
 800714c:	2201      	movs	r2, #1
 800714e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007150:	e049      	b.n	80071e6 <vTaskSwitchContext+0xaa>
		xYieldPending = pdFALSE;
 8007152:	4b29      	ldr	r3, [pc, #164]	@ (80071f8 <vTaskSwitchContext+0xbc>)
 8007154:	2200      	movs	r2, #0
 8007156:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007158:	4b28      	ldr	r3, [pc, #160]	@ (80071fc <vTaskSwitchContext+0xc0>)
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	60fb      	str	r3, [r7, #12]
 800715e:	e013      	b.n	8007188 <vTaskSwitchContext+0x4c>
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	2b00      	cmp	r3, #0
 8007164:	d10d      	bne.n	8007182 <vTaskSwitchContext+0x46>
	__asm volatile
 8007166:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800716a:	b672      	cpsid	i
 800716c:	f383 8811 	msr	BASEPRI, r3
 8007170:	f3bf 8f6f 	isb	sy
 8007174:	f3bf 8f4f 	dsb	sy
 8007178:	b662      	cpsie	i
 800717a:	607b      	str	r3, [r7, #4]
}
 800717c:	bf00      	nop
 800717e:	bf00      	nop
 8007180:	e7fd      	b.n	800717e <vTaskSwitchContext+0x42>
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	3b01      	subs	r3, #1
 8007186:	60fb      	str	r3, [r7, #12]
 8007188:	491d      	ldr	r1, [pc, #116]	@ (8007200 <vTaskSwitchContext+0xc4>)
 800718a:	68fa      	ldr	r2, [r7, #12]
 800718c:	4613      	mov	r3, r2
 800718e:	009b      	lsls	r3, r3, #2
 8007190:	4413      	add	r3, r2
 8007192:	009b      	lsls	r3, r3, #2
 8007194:	440b      	add	r3, r1
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	2b00      	cmp	r3, #0
 800719a:	d0e1      	beq.n	8007160 <vTaskSwitchContext+0x24>
 800719c:	68fa      	ldr	r2, [r7, #12]
 800719e:	4613      	mov	r3, r2
 80071a0:	009b      	lsls	r3, r3, #2
 80071a2:	4413      	add	r3, r2
 80071a4:	009b      	lsls	r3, r3, #2
 80071a6:	4a16      	ldr	r2, [pc, #88]	@ (8007200 <vTaskSwitchContext+0xc4>)
 80071a8:	4413      	add	r3, r2
 80071aa:	60bb      	str	r3, [r7, #8]
 80071ac:	68bb      	ldr	r3, [r7, #8]
 80071ae:	685b      	ldr	r3, [r3, #4]
 80071b0:	685a      	ldr	r2, [r3, #4]
 80071b2:	68bb      	ldr	r3, [r7, #8]
 80071b4:	605a      	str	r2, [r3, #4]
 80071b6:	68bb      	ldr	r3, [r7, #8]
 80071b8:	685a      	ldr	r2, [r3, #4]
 80071ba:	68bb      	ldr	r3, [r7, #8]
 80071bc:	3308      	adds	r3, #8
 80071be:	429a      	cmp	r2, r3
 80071c0:	d104      	bne.n	80071cc <vTaskSwitchContext+0x90>
 80071c2:	68bb      	ldr	r3, [r7, #8]
 80071c4:	685b      	ldr	r3, [r3, #4]
 80071c6:	685a      	ldr	r2, [r3, #4]
 80071c8:	68bb      	ldr	r3, [r7, #8]
 80071ca:	605a      	str	r2, [r3, #4]
 80071cc:	68bb      	ldr	r3, [r7, #8]
 80071ce:	685b      	ldr	r3, [r3, #4]
 80071d0:	68db      	ldr	r3, [r3, #12]
 80071d2:	4a0c      	ldr	r2, [pc, #48]	@ (8007204 <vTaskSwitchContext+0xc8>)
 80071d4:	6013      	str	r3, [r2, #0]
 80071d6:	4a09      	ldr	r2, [pc, #36]	@ (80071fc <vTaskSwitchContext+0xc0>)
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80071dc:	4b09      	ldr	r3, [pc, #36]	@ (8007204 <vTaskSwitchContext+0xc8>)
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	3354      	adds	r3, #84	@ 0x54
 80071e2:	4a09      	ldr	r2, [pc, #36]	@ (8007208 <vTaskSwitchContext+0xcc>)
 80071e4:	6013      	str	r3, [r2, #0]
}
 80071e6:	bf00      	nop
 80071e8:	3714      	adds	r7, #20
 80071ea:	46bd      	mov	sp, r7
 80071ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f0:	4770      	bx	lr
 80071f2:	bf00      	nop
 80071f4:	200015e0 	.word	0x200015e0
 80071f8:	200015cc 	.word	0x200015cc
 80071fc:	200015c0 	.word	0x200015c0
 8007200:	200010e8 	.word	0x200010e8
 8007204:	200010e4 	.word	0x200010e4
 8007208:	2000001c 	.word	0x2000001c

0800720c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800720c:	b580      	push	{r7, lr}
 800720e:	b084      	sub	sp, #16
 8007210:	af00      	add	r7, sp, #0
 8007212:	6078      	str	r0, [r7, #4]
 8007214:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	2b00      	cmp	r3, #0
 800721a:	d10d      	bne.n	8007238 <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 800721c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007220:	b672      	cpsid	i
 8007222:	f383 8811 	msr	BASEPRI, r3
 8007226:	f3bf 8f6f 	isb	sy
 800722a:	f3bf 8f4f 	dsb	sy
 800722e:	b662      	cpsie	i
 8007230:	60fb      	str	r3, [r7, #12]
}
 8007232:	bf00      	nop
 8007234:	bf00      	nop
 8007236:	e7fd      	b.n	8007234 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007238:	4b07      	ldr	r3, [pc, #28]	@ (8007258 <vTaskPlaceOnEventList+0x4c>)
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	3318      	adds	r3, #24
 800723e:	4619      	mov	r1, r3
 8007240:	6878      	ldr	r0, [r7, #4]
 8007242:	f7fe fd46 	bl	8005cd2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007246:	2101      	movs	r1, #1
 8007248:	6838      	ldr	r0, [r7, #0]
 800724a:	f000 fa95 	bl	8007778 <prvAddCurrentTaskToDelayedList>
}
 800724e:	bf00      	nop
 8007250:	3710      	adds	r7, #16
 8007252:	46bd      	mov	sp, r7
 8007254:	bd80      	pop	{r7, pc}
 8007256:	bf00      	nop
 8007258:	200010e4 	.word	0x200010e4

0800725c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800725c:	b580      	push	{r7, lr}
 800725e:	b086      	sub	sp, #24
 8007260:	af00      	add	r7, sp, #0
 8007262:	60f8      	str	r0, [r7, #12]
 8007264:	60b9      	str	r1, [r7, #8]
 8007266:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	2b00      	cmp	r3, #0
 800726c:	d10d      	bne.n	800728a <vTaskPlaceOnEventListRestricted+0x2e>
	__asm volatile
 800726e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007272:	b672      	cpsid	i
 8007274:	f383 8811 	msr	BASEPRI, r3
 8007278:	f3bf 8f6f 	isb	sy
 800727c:	f3bf 8f4f 	dsb	sy
 8007280:	b662      	cpsie	i
 8007282:	617b      	str	r3, [r7, #20]
}
 8007284:	bf00      	nop
 8007286:	bf00      	nop
 8007288:	e7fd      	b.n	8007286 <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800728a:	4b0a      	ldr	r3, [pc, #40]	@ (80072b4 <vTaskPlaceOnEventListRestricted+0x58>)
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	3318      	adds	r3, #24
 8007290:	4619      	mov	r1, r3
 8007292:	68f8      	ldr	r0, [r7, #12]
 8007294:	f7fe fcf9 	bl	8005c8a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	2b00      	cmp	r3, #0
 800729c:	d002      	beq.n	80072a4 <vTaskPlaceOnEventListRestricted+0x48>
		{
			xTicksToWait = portMAX_DELAY;
 800729e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80072a2:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80072a4:	6879      	ldr	r1, [r7, #4]
 80072a6:	68b8      	ldr	r0, [r7, #8]
 80072a8:	f000 fa66 	bl	8007778 <prvAddCurrentTaskToDelayedList>
	}
 80072ac:	bf00      	nop
 80072ae:	3718      	adds	r7, #24
 80072b0:	46bd      	mov	sp, r7
 80072b2:	bd80      	pop	{r7, pc}
 80072b4:	200010e4 	.word	0x200010e4

080072b8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80072b8:	b580      	push	{r7, lr}
 80072ba:	b086      	sub	sp, #24
 80072bc:	af00      	add	r7, sp, #0
 80072be:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	68db      	ldr	r3, [r3, #12]
 80072c4:	68db      	ldr	r3, [r3, #12]
 80072c6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80072c8:	693b      	ldr	r3, [r7, #16]
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d10d      	bne.n	80072ea <xTaskRemoveFromEventList+0x32>
	__asm volatile
 80072ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072d2:	b672      	cpsid	i
 80072d4:	f383 8811 	msr	BASEPRI, r3
 80072d8:	f3bf 8f6f 	isb	sy
 80072dc:	f3bf 8f4f 	dsb	sy
 80072e0:	b662      	cpsie	i
 80072e2:	60fb      	str	r3, [r7, #12]
}
 80072e4:	bf00      	nop
 80072e6:	bf00      	nop
 80072e8:	e7fd      	b.n	80072e6 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80072ea:	693b      	ldr	r3, [r7, #16]
 80072ec:	3318      	adds	r3, #24
 80072ee:	4618      	mov	r0, r3
 80072f0:	f7fe fd28 	bl	8005d44 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80072f4:	4b1d      	ldr	r3, [pc, #116]	@ (800736c <xTaskRemoveFromEventList+0xb4>)
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d11d      	bne.n	8007338 <xTaskRemoveFromEventList+0x80>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80072fc:	693b      	ldr	r3, [r7, #16]
 80072fe:	3304      	adds	r3, #4
 8007300:	4618      	mov	r0, r3
 8007302:	f7fe fd1f 	bl	8005d44 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007306:	693b      	ldr	r3, [r7, #16]
 8007308:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800730a:	4b19      	ldr	r3, [pc, #100]	@ (8007370 <xTaskRemoveFromEventList+0xb8>)
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	429a      	cmp	r2, r3
 8007310:	d903      	bls.n	800731a <xTaskRemoveFromEventList+0x62>
 8007312:	693b      	ldr	r3, [r7, #16]
 8007314:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007316:	4a16      	ldr	r2, [pc, #88]	@ (8007370 <xTaskRemoveFromEventList+0xb8>)
 8007318:	6013      	str	r3, [r2, #0]
 800731a:	693b      	ldr	r3, [r7, #16]
 800731c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800731e:	4613      	mov	r3, r2
 8007320:	009b      	lsls	r3, r3, #2
 8007322:	4413      	add	r3, r2
 8007324:	009b      	lsls	r3, r3, #2
 8007326:	4a13      	ldr	r2, [pc, #76]	@ (8007374 <xTaskRemoveFromEventList+0xbc>)
 8007328:	441a      	add	r2, r3
 800732a:	693b      	ldr	r3, [r7, #16]
 800732c:	3304      	adds	r3, #4
 800732e:	4619      	mov	r1, r3
 8007330:	4610      	mov	r0, r2
 8007332:	f7fe fcaa 	bl	8005c8a <vListInsertEnd>
 8007336:	e005      	b.n	8007344 <xTaskRemoveFromEventList+0x8c>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007338:	693b      	ldr	r3, [r7, #16]
 800733a:	3318      	adds	r3, #24
 800733c:	4619      	mov	r1, r3
 800733e:	480e      	ldr	r0, [pc, #56]	@ (8007378 <xTaskRemoveFromEventList+0xc0>)
 8007340:	f7fe fca3 	bl	8005c8a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007344:	693b      	ldr	r3, [r7, #16]
 8007346:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007348:	4b0c      	ldr	r3, [pc, #48]	@ (800737c <xTaskRemoveFromEventList+0xc4>)
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800734e:	429a      	cmp	r2, r3
 8007350:	d905      	bls.n	800735e <xTaskRemoveFromEventList+0xa6>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007352:	2301      	movs	r3, #1
 8007354:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007356:	4b0a      	ldr	r3, [pc, #40]	@ (8007380 <xTaskRemoveFromEventList+0xc8>)
 8007358:	2201      	movs	r2, #1
 800735a:	601a      	str	r2, [r3, #0]
 800735c:	e001      	b.n	8007362 <xTaskRemoveFromEventList+0xaa>
	}
	else
	{
		xReturn = pdFALSE;
 800735e:	2300      	movs	r3, #0
 8007360:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007362:	697b      	ldr	r3, [r7, #20]
}
 8007364:	4618      	mov	r0, r3
 8007366:	3718      	adds	r7, #24
 8007368:	46bd      	mov	sp, r7
 800736a:	bd80      	pop	{r7, pc}
 800736c:	200015e0 	.word	0x200015e0
 8007370:	200015c0 	.word	0x200015c0
 8007374:	200010e8 	.word	0x200010e8
 8007378:	20001578 	.word	0x20001578
 800737c:	200010e4 	.word	0x200010e4
 8007380:	200015cc 	.word	0x200015cc

08007384 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007384:	b480      	push	{r7}
 8007386:	b083      	sub	sp, #12
 8007388:	af00      	add	r7, sp, #0
 800738a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800738c:	4b06      	ldr	r3, [pc, #24]	@ (80073a8 <vTaskInternalSetTimeOutState+0x24>)
 800738e:	681a      	ldr	r2, [r3, #0]
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007394:	4b05      	ldr	r3, [pc, #20]	@ (80073ac <vTaskInternalSetTimeOutState+0x28>)
 8007396:	681a      	ldr	r2, [r3, #0]
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	605a      	str	r2, [r3, #4]
}
 800739c:	bf00      	nop
 800739e:	370c      	adds	r7, #12
 80073a0:	46bd      	mov	sp, r7
 80073a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a6:	4770      	bx	lr
 80073a8:	200015d0 	.word	0x200015d0
 80073ac:	200015bc 	.word	0x200015bc

080073b0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80073b0:	b580      	push	{r7, lr}
 80073b2:	b088      	sub	sp, #32
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	6078      	str	r0, [r7, #4]
 80073b8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d10d      	bne.n	80073dc <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 80073c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073c4:	b672      	cpsid	i
 80073c6:	f383 8811 	msr	BASEPRI, r3
 80073ca:	f3bf 8f6f 	isb	sy
 80073ce:	f3bf 8f4f 	dsb	sy
 80073d2:	b662      	cpsie	i
 80073d4:	613b      	str	r3, [r7, #16]
}
 80073d6:	bf00      	nop
 80073d8:	bf00      	nop
 80073da:	e7fd      	b.n	80073d8 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 80073dc:	683b      	ldr	r3, [r7, #0]
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d10d      	bne.n	80073fe <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 80073e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073e6:	b672      	cpsid	i
 80073e8:	f383 8811 	msr	BASEPRI, r3
 80073ec:	f3bf 8f6f 	isb	sy
 80073f0:	f3bf 8f4f 	dsb	sy
 80073f4:	b662      	cpsie	i
 80073f6:	60fb      	str	r3, [r7, #12]
}
 80073f8:	bf00      	nop
 80073fa:	bf00      	nop
 80073fc:	e7fd      	b.n	80073fa <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 80073fe:	f000 fe85 	bl	800810c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007402:	4b1d      	ldr	r3, [pc, #116]	@ (8007478 <xTaskCheckForTimeOut+0xc8>)
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	685b      	ldr	r3, [r3, #4]
 800740c:	69ba      	ldr	r2, [r7, #24]
 800740e:	1ad3      	subs	r3, r2, r3
 8007410:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007412:	683b      	ldr	r3, [r7, #0]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800741a:	d102      	bne.n	8007422 <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800741c:	2300      	movs	r3, #0
 800741e:	61fb      	str	r3, [r7, #28]
 8007420:	e023      	b.n	800746a <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681a      	ldr	r2, [r3, #0]
 8007426:	4b15      	ldr	r3, [pc, #84]	@ (800747c <xTaskCheckForTimeOut+0xcc>)
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	429a      	cmp	r2, r3
 800742c:	d007      	beq.n	800743e <xTaskCheckForTimeOut+0x8e>
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	685b      	ldr	r3, [r3, #4]
 8007432:	69ba      	ldr	r2, [r7, #24]
 8007434:	429a      	cmp	r2, r3
 8007436:	d302      	bcc.n	800743e <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007438:	2301      	movs	r3, #1
 800743a:	61fb      	str	r3, [r7, #28]
 800743c:	e015      	b.n	800746a <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800743e:	683b      	ldr	r3, [r7, #0]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	697a      	ldr	r2, [r7, #20]
 8007444:	429a      	cmp	r2, r3
 8007446:	d20b      	bcs.n	8007460 <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007448:	683b      	ldr	r3, [r7, #0]
 800744a:	681a      	ldr	r2, [r3, #0]
 800744c:	697b      	ldr	r3, [r7, #20]
 800744e:	1ad2      	subs	r2, r2, r3
 8007450:	683b      	ldr	r3, [r7, #0]
 8007452:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007454:	6878      	ldr	r0, [r7, #4]
 8007456:	f7ff ff95 	bl	8007384 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800745a:	2300      	movs	r3, #0
 800745c:	61fb      	str	r3, [r7, #28]
 800745e:	e004      	b.n	800746a <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 8007460:	683b      	ldr	r3, [r7, #0]
 8007462:	2200      	movs	r2, #0
 8007464:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007466:	2301      	movs	r3, #1
 8007468:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800746a:	f000 fe85 	bl	8008178 <vPortExitCritical>

	return xReturn;
 800746e:	69fb      	ldr	r3, [r7, #28]
}
 8007470:	4618      	mov	r0, r3
 8007472:	3720      	adds	r7, #32
 8007474:	46bd      	mov	sp, r7
 8007476:	bd80      	pop	{r7, pc}
 8007478:	200015bc 	.word	0x200015bc
 800747c:	200015d0 	.word	0x200015d0

08007480 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007480:	b480      	push	{r7}
 8007482:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007484:	4b03      	ldr	r3, [pc, #12]	@ (8007494 <vTaskMissedYield+0x14>)
 8007486:	2201      	movs	r2, #1
 8007488:	601a      	str	r2, [r3, #0]
}
 800748a:	bf00      	nop
 800748c:	46bd      	mov	sp, r7
 800748e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007492:	4770      	bx	lr
 8007494:	200015cc 	.word	0x200015cc

08007498 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007498:	b580      	push	{r7, lr}
 800749a:	b082      	sub	sp, #8
 800749c:	af00      	add	r7, sp, #0
 800749e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80074a0:	f000 f852 	bl	8007548 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80074a4:	4b06      	ldr	r3, [pc, #24]	@ (80074c0 <prvIdleTask+0x28>)
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	2b01      	cmp	r3, #1
 80074aa:	d9f9      	bls.n	80074a0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80074ac:	4b05      	ldr	r3, [pc, #20]	@ (80074c4 <prvIdleTask+0x2c>)
 80074ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80074b2:	601a      	str	r2, [r3, #0]
 80074b4:	f3bf 8f4f 	dsb	sy
 80074b8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80074bc:	e7f0      	b.n	80074a0 <prvIdleTask+0x8>
 80074be:	bf00      	nop
 80074c0:	200010e8 	.word	0x200010e8
 80074c4:	e000ed04 	.word	0xe000ed04

080074c8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80074c8:	b580      	push	{r7, lr}
 80074ca:	b082      	sub	sp, #8
 80074cc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80074ce:	2300      	movs	r3, #0
 80074d0:	607b      	str	r3, [r7, #4]
 80074d2:	e00c      	b.n	80074ee <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80074d4:	687a      	ldr	r2, [r7, #4]
 80074d6:	4613      	mov	r3, r2
 80074d8:	009b      	lsls	r3, r3, #2
 80074da:	4413      	add	r3, r2
 80074dc:	009b      	lsls	r3, r3, #2
 80074de:	4a12      	ldr	r2, [pc, #72]	@ (8007528 <prvInitialiseTaskLists+0x60>)
 80074e0:	4413      	add	r3, r2
 80074e2:	4618      	mov	r0, r3
 80074e4:	f7fe fba4 	bl	8005c30 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	3301      	adds	r3, #1
 80074ec:	607b      	str	r3, [r7, #4]
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	2b37      	cmp	r3, #55	@ 0x37
 80074f2:	d9ef      	bls.n	80074d4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80074f4:	480d      	ldr	r0, [pc, #52]	@ (800752c <prvInitialiseTaskLists+0x64>)
 80074f6:	f7fe fb9b 	bl	8005c30 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80074fa:	480d      	ldr	r0, [pc, #52]	@ (8007530 <prvInitialiseTaskLists+0x68>)
 80074fc:	f7fe fb98 	bl	8005c30 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007500:	480c      	ldr	r0, [pc, #48]	@ (8007534 <prvInitialiseTaskLists+0x6c>)
 8007502:	f7fe fb95 	bl	8005c30 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007506:	480c      	ldr	r0, [pc, #48]	@ (8007538 <prvInitialiseTaskLists+0x70>)
 8007508:	f7fe fb92 	bl	8005c30 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800750c:	480b      	ldr	r0, [pc, #44]	@ (800753c <prvInitialiseTaskLists+0x74>)
 800750e:	f7fe fb8f 	bl	8005c30 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007512:	4b0b      	ldr	r3, [pc, #44]	@ (8007540 <prvInitialiseTaskLists+0x78>)
 8007514:	4a05      	ldr	r2, [pc, #20]	@ (800752c <prvInitialiseTaskLists+0x64>)
 8007516:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007518:	4b0a      	ldr	r3, [pc, #40]	@ (8007544 <prvInitialiseTaskLists+0x7c>)
 800751a:	4a05      	ldr	r2, [pc, #20]	@ (8007530 <prvInitialiseTaskLists+0x68>)
 800751c:	601a      	str	r2, [r3, #0]
}
 800751e:	bf00      	nop
 8007520:	3708      	adds	r7, #8
 8007522:	46bd      	mov	sp, r7
 8007524:	bd80      	pop	{r7, pc}
 8007526:	bf00      	nop
 8007528:	200010e8 	.word	0x200010e8
 800752c:	20001548 	.word	0x20001548
 8007530:	2000155c 	.word	0x2000155c
 8007534:	20001578 	.word	0x20001578
 8007538:	2000158c 	.word	0x2000158c
 800753c:	200015a4 	.word	0x200015a4
 8007540:	20001570 	.word	0x20001570
 8007544:	20001574 	.word	0x20001574

08007548 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007548:	b580      	push	{r7, lr}
 800754a:	b082      	sub	sp, #8
 800754c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800754e:	e019      	b.n	8007584 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007550:	f000 fddc 	bl	800810c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007554:	4b10      	ldr	r3, [pc, #64]	@ (8007598 <prvCheckTasksWaitingTermination+0x50>)
 8007556:	68db      	ldr	r3, [r3, #12]
 8007558:	68db      	ldr	r3, [r3, #12]
 800755a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	3304      	adds	r3, #4
 8007560:	4618      	mov	r0, r3
 8007562:	f7fe fbef 	bl	8005d44 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007566:	4b0d      	ldr	r3, [pc, #52]	@ (800759c <prvCheckTasksWaitingTermination+0x54>)
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	3b01      	subs	r3, #1
 800756c:	4a0b      	ldr	r2, [pc, #44]	@ (800759c <prvCheckTasksWaitingTermination+0x54>)
 800756e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007570:	4b0b      	ldr	r3, [pc, #44]	@ (80075a0 <prvCheckTasksWaitingTermination+0x58>)
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	3b01      	subs	r3, #1
 8007576:	4a0a      	ldr	r2, [pc, #40]	@ (80075a0 <prvCheckTasksWaitingTermination+0x58>)
 8007578:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800757a:	f000 fdfd 	bl	8008178 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800757e:	6878      	ldr	r0, [r7, #4]
 8007580:	f000 f810 	bl	80075a4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007584:	4b06      	ldr	r3, [pc, #24]	@ (80075a0 <prvCheckTasksWaitingTermination+0x58>)
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	2b00      	cmp	r3, #0
 800758a:	d1e1      	bne.n	8007550 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800758c:	bf00      	nop
 800758e:	bf00      	nop
 8007590:	3708      	adds	r7, #8
 8007592:	46bd      	mov	sp, r7
 8007594:	bd80      	pop	{r7, pc}
 8007596:	bf00      	nop
 8007598:	2000158c 	.word	0x2000158c
 800759c:	200015b8 	.word	0x200015b8
 80075a0:	200015a0 	.word	0x200015a0

080075a4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80075a4:	b580      	push	{r7, lr}
 80075a6:	b084      	sub	sp, #16
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	3354      	adds	r3, #84	@ 0x54
 80075b0:	4618      	mov	r0, r3
 80075b2:	f001 feb9 	bl	8009328 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d108      	bne.n	80075d2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80075c4:	4618      	mov	r0, r3
 80075c6:	f000 ff9d 	bl	8008504 <vPortFree>
				vPortFree( pxTCB );
 80075ca:	6878      	ldr	r0, [r7, #4]
 80075cc:	f000 ff9a 	bl	8008504 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80075d0:	e01b      	b.n	800760a <prvDeleteTCB+0x66>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80075d8:	2b01      	cmp	r3, #1
 80075da:	d103      	bne.n	80075e4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80075dc:	6878      	ldr	r0, [r7, #4]
 80075de:	f000 ff91 	bl	8008504 <vPortFree>
	}
 80075e2:	e012      	b.n	800760a <prvDeleteTCB+0x66>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80075ea:	2b02      	cmp	r3, #2
 80075ec:	d00d      	beq.n	800760a <prvDeleteTCB+0x66>
	__asm volatile
 80075ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075f2:	b672      	cpsid	i
 80075f4:	f383 8811 	msr	BASEPRI, r3
 80075f8:	f3bf 8f6f 	isb	sy
 80075fc:	f3bf 8f4f 	dsb	sy
 8007600:	b662      	cpsie	i
 8007602:	60fb      	str	r3, [r7, #12]
}
 8007604:	bf00      	nop
 8007606:	bf00      	nop
 8007608:	e7fd      	b.n	8007606 <prvDeleteTCB+0x62>
	}
 800760a:	bf00      	nop
 800760c:	3710      	adds	r7, #16
 800760e:	46bd      	mov	sp, r7
 8007610:	bd80      	pop	{r7, pc}
	...

08007614 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007614:	b480      	push	{r7}
 8007616:	b083      	sub	sp, #12
 8007618:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800761a:	4b0c      	ldr	r3, [pc, #48]	@ (800764c <prvResetNextTaskUnblockTime+0x38>)
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	2b00      	cmp	r3, #0
 8007622:	d104      	bne.n	800762e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007624:	4b0a      	ldr	r3, [pc, #40]	@ (8007650 <prvResetNextTaskUnblockTime+0x3c>)
 8007626:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800762a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800762c:	e008      	b.n	8007640 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800762e:	4b07      	ldr	r3, [pc, #28]	@ (800764c <prvResetNextTaskUnblockTime+0x38>)
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	68db      	ldr	r3, [r3, #12]
 8007634:	68db      	ldr	r3, [r3, #12]
 8007636:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	685b      	ldr	r3, [r3, #4]
 800763c:	4a04      	ldr	r2, [pc, #16]	@ (8007650 <prvResetNextTaskUnblockTime+0x3c>)
 800763e:	6013      	str	r3, [r2, #0]
}
 8007640:	bf00      	nop
 8007642:	370c      	adds	r7, #12
 8007644:	46bd      	mov	sp, r7
 8007646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800764a:	4770      	bx	lr
 800764c:	20001570 	.word	0x20001570
 8007650:	200015d8 	.word	0x200015d8

08007654 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007654:	b480      	push	{r7}
 8007656:	b083      	sub	sp, #12
 8007658:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800765a:	4b0b      	ldr	r3, [pc, #44]	@ (8007688 <xTaskGetSchedulerState+0x34>)
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	2b00      	cmp	r3, #0
 8007660:	d102      	bne.n	8007668 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007662:	2301      	movs	r3, #1
 8007664:	607b      	str	r3, [r7, #4]
 8007666:	e008      	b.n	800767a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007668:	4b08      	ldr	r3, [pc, #32]	@ (800768c <xTaskGetSchedulerState+0x38>)
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	2b00      	cmp	r3, #0
 800766e:	d102      	bne.n	8007676 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007670:	2302      	movs	r3, #2
 8007672:	607b      	str	r3, [r7, #4]
 8007674:	e001      	b.n	800767a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007676:	2300      	movs	r3, #0
 8007678:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800767a:	687b      	ldr	r3, [r7, #4]
	}
 800767c:	4618      	mov	r0, r3
 800767e:	370c      	adds	r7, #12
 8007680:	46bd      	mov	sp, r7
 8007682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007686:	4770      	bx	lr
 8007688:	200015c4 	.word	0x200015c4
 800768c:	200015e0 	.word	0x200015e0

08007690 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007690:	b580      	push	{r7, lr}
 8007692:	b086      	sub	sp, #24
 8007694:	af00      	add	r7, sp, #0
 8007696:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800769c:	2300      	movs	r3, #0
 800769e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d05c      	beq.n	8007760 <xTaskPriorityDisinherit+0xd0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80076a6:	4b31      	ldr	r3, [pc, #196]	@ (800776c <xTaskPriorityDisinherit+0xdc>)
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	693a      	ldr	r2, [r7, #16]
 80076ac:	429a      	cmp	r2, r3
 80076ae:	d00d      	beq.n	80076cc <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 80076b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076b4:	b672      	cpsid	i
 80076b6:	f383 8811 	msr	BASEPRI, r3
 80076ba:	f3bf 8f6f 	isb	sy
 80076be:	f3bf 8f4f 	dsb	sy
 80076c2:	b662      	cpsie	i
 80076c4:	60fb      	str	r3, [r7, #12]
}
 80076c6:	bf00      	nop
 80076c8:	bf00      	nop
 80076ca:	e7fd      	b.n	80076c8 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 80076cc:	693b      	ldr	r3, [r7, #16]
 80076ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d10d      	bne.n	80076f0 <xTaskPriorityDisinherit+0x60>
	__asm volatile
 80076d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076d8:	b672      	cpsid	i
 80076da:	f383 8811 	msr	BASEPRI, r3
 80076de:	f3bf 8f6f 	isb	sy
 80076e2:	f3bf 8f4f 	dsb	sy
 80076e6:	b662      	cpsie	i
 80076e8:	60bb      	str	r3, [r7, #8]
}
 80076ea:	bf00      	nop
 80076ec:	bf00      	nop
 80076ee:	e7fd      	b.n	80076ec <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 80076f0:	693b      	ldr	r3, [r7, #16]
 80076f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80076f4:	1e5a      	subs	r2, r3, #1
 80076f6:	693b      	ldr	r3, [r7, #16]
 80076f8:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80076fa:	693b      	ldr	r3, [r7, #16]
 80076fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80076fe:	693b      	ldr	r3, [r7, #16]
 8007700:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007702:	429a      	cmp	r2, r3
 8007704:	d02c      	beq.n	8007760 <xTaskPriorityDisinherit+0xd0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007706:	693b      	ldr	r3, [r7, #16]
 8007708:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800770a:	2b00      	cmp	r3, #0
 800770c:	d128      	bne.n	8007760 <xTaskPriorityDisinherit+0xd0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800770e:	693b      	ldr	r3, [r7, #16]
 8007710:	3304      	adds	r3, #4
 8007712:	4618      	mov	r0, r3
 8007714:	f7fe fb16 	bl	8005d44 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007718:	693b      	ldr	r3, [r7, #16]
 800771a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800771c:	693b      	ldr	r3, [r7, #16]
 800771e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007720:	693b      	ldr	r3, [r7, #16]
 8007722:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007724:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007728:	693b      	ldr	r3, [r7, #16]
 800772a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800772c:	693b      	ldr	r3, [r7, #16]
 800772e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007730:	4b0f      	ldr	r3, [pc, #60]	@ (8007770 <xTaskPriorityDisinherit+0xe0>)
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	429a      	cmp	r2, r3
 8007736:	d903      	bls.n	8007740 <xTaskPriorityDisinherit+0xb0>
 8007738:	693b      	ldr	r3, [r7, #16]
 800773a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800773c:	4a0c      	ldr	r2, [pc, #48]	@ (8007770 <xTaskPriorityDisinherit+0xe0>)
 800773e:	6013      	str	r3, [r2, #0]
 8007740:	693b      	ldr	r3, [r7, #16]
 8007742:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007744:	4613      	mov	r3, r2
 8007746:	009b      	lsls	r3, r3, #2
 8007748:	4413      	add	r3, r2
 800774a:	009b      	lsls	r3, r3, #2
 800774c:	4a09      	ldr	r2, [pc, #36]	@ (8007774 <xTaskPriorityDisinherit+0xe4>)
 800774e:	441a      	add	r2, r3
 8007750:	693b      	ldr	r3, [r7, #16]
 8007752:	3304      	adds	r3, #4
 8007754:	4619      	mov	r1, r3
 8007756:	4610      	mov	r0, r2
 8007758:	f7fe fa97 	bl	8005c8a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800775c:	2301      	movs	r3, #1
 800775e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007760:	697b      	ldr	r3, [r7, #20]
	}
 8007762:	4618      	mov	r0, r3
 8007764:	3718      	adds	r7, #24
 8007766:	46bd      	mov	sp, r7
 8007768:	bd80      	pop	{r7, pc}
 800776a:	bf00      	nop
 800776c:	200010e4 	.word	0x200010e4
 8007770:	200015c0 	.word	0x200015c0
 8007774:	200010e8 	.word	0x200010e8

08007778 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007778:	b580      	push	{r7, lr}
 800777a:	b084      	sub	sp, #16
 800777c:	af00      	add	r7, sp, #0
 800777e:	6078      	str	r0, [r7, #4]
 8007780:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007782:	4b21      	ldr	r3, [pc, #132]	@ (8007808 <prvAddCurrentTaskToDelayedList+0x90>)
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007788:	4b20      	ldr	r3, [pc, #128]	@ (800780c <prvAddCurrentTaskToDelayedList+0x94>)
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	3304      	adds	r3, #4
 800778e:	4618      	mov	r0, r3
 8007790:	f7fe fad8 	bl	8005d44 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800779a:	d10a      	bne.n	80077b2 <prvAddCurrentTaskToDelayedList+0x3a>
 800779c:	683b      	ldr	r3, [r7, #0]
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d007      	beq.n	80077b2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80077a2:	4b1a      	ldr	r3, [pc, #104]	@ (800780c <prvAddCurrentTaskToDelayedList+0x94>)
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	3304      	adds	r3, #4
 80077a8:	4619      	mov	r1, r3
 80077aa:	4819      	ldr	r0, [pc, #100]	@ (8007810 <prvAddCurrentTaskToDelayedList+0x98>)
 80077ac:	f7fe fa6d 	bl	8005c8a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80077b0:	e026      	b.n	8007800 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80077b2:	68fa      	ldr	r2, [r7, #12]
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	4413      	add	r3, r2
 80077b8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80077ba:	4b14      	ldr	r3, [pc, #80]	@ (800780c <prvAddCurrentTaskToDelayedList+0x94>)
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	68ba      	ldr	r2, [r7, #8]
 80077c0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80077c2:	68ba      	ldr	r2, [r7, #8]
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	429a      	cmp	r2, r3
 80077c8:	d209      	bcs.n	80077de <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80077ca:	4b12      	ldr	r3, [pc, #72]	@ (8007814 <prvAddCurrentTaskToDelayedList+0x9c>)
 80077cc:	681a      	ldr	r2, [r3, #0]
 80077ce:	4b0f      	ldr	r3, [pc, #60]	@ (800780c <prvAddCurrentTaskToDelayedList+0x94>)
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	3304      	adds	r3, #4
 80077d4:	4619      	mov	r1, r3
 80077d6:	4610      	mov	r0, r2
 80077d8:	f7fe fa7b 	bl	8005cd2 <vListInsert>
}
 80077dc:	e010      	b.n	8007800 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80077de:	4b0e      	ldr	r3, [pc, #56]	@ (8007818 <prvAddCurrentTaskToDelayedList+0xa0>)
 80077e0:	681a      	ldr	r2, [r3, #0]
 80077e2:	4b0a      	ldr	r3, [pc, #40]	@ (800780c <prvAddCurrentTaskToDelayedList+0x94>)
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	3304      	adds	r3, #4
 80077e8:	4619      	mov	r1, r3
 80077ea:	4610      	mov	r0, r2
 80077ec:	f7fe fa71 	bl	8005cd2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80077f0:	4b0a      	ldr	r3, [pc, #40]	@ (800781c <prvAddCurrentTaskToDelayedList+0xa4>)
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	68ba      	ldr	r2, [r7, #8]
 80077f6:	429a      	cmp	r2, r3
 80077f8:	d202      	bcs.n	8007800 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80077fa:	4a08      	ldr	r2, [pc, #32]	@ (800781c <prvAddCurrentTaskToDelayedList+0xa4>)
 80077fc:	68bb      	ldr	r3, [r7, #8]
 80077fe:	6013      	str	r3, [r2, #0]
}
 8007800:	bf00      	nop
 8007802:	3710      	adds	r7, #16
 8007804:	46bd      	mov	sp, r7
 8007806:	bd80      	pop	{r7, pc}
 8007808:	200015bc 	.word	0x200015bc
 800780c:	200010e4 	.word	0x200010e4
 8007810:	200015a4 	.word	0x200015a4
 8007814:	20001574 	.word	0x20001574
 8007818:	20001570 	.word	0x20001570
 800781c:	200015d8 	.word	0x200015d8

08007820 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007820:	b580      	push	{r7, lr}
 8007822:	b08a      	sub	sp, #40	@ 0x28
 8007824:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007826:	2300      	movs	r3, #0
 8007828:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800782a:	f000 fb21 	bl	8007e70 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800782e:	4b1e      	ldr	r3, [pc, #120]	@ (80078a8 <xTimerCreateTimerTask+0x88>)
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	2b00      	cmp	r3, #0
 8007834:	d021      	beq.n	800787a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007836:	2300      	movs	r3, #0
 8007838:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800783a:	2300      	movs	r3, #0
 800783c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800783e:	1d3a      	adds	r2, r7, #4
 8007840:	f107 0108 	add.w	r1, r7, #8
 8007844:	f107 030c 	add.w	r3, r7, #12
 8007848:	4618      	mov	r0, r3
 800784a:	f7fe f9d7 	bl	8005bfc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800784e:	6879      	ldr	r1, [r7, #4]
 8007850:	68bb      	ldr	r3, [r7, #8]
 8007852:	68fa      	ldr	r2, [r7, #12]
 8007854:	9202      	str	r2, [sp, #8]
 8007856:	9301      	str	r3, [sp, #4]
 8007858:	2302      	movs	r3, #2
 800785a:	9300      	str	r3, [sp, #0]
 800785c:	2300      	movs	r3, #0
 800785e:	460a      	mov	r2, r1
 8007860:	4912      	ldr	r1, [pc, #72]	@ (80078ac <xTimerCreateTimerTask+0x8c>)
 8007862:	4813      	ldr	r0, [pc, #76]	@ (80078b0 <xTimerCreateTimerTask+0x90>)
 8007864:	f7ff f87e 	bl	8006964 <xTaskCreateStatic>
 8007868:	4603      	mov	r3, r0
 800786a:	4a12      	ldr	r2, [pc, #72]	@ (80078b4 <xTimerCreateTimerTask+0x94>)
 800786c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800786e:	4b11      	ldr	r3, [pc, #68]	@ (80078b4 <xTimerCreateTimerTask+0x94>)
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	2b00      	cmp	r3, #0
 8007874:	d001      	beq.n	800787a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007876:	2301      	movs	r3, #1
 8007878:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800787a:	697b      	ldr	r3, [r7, #20]
 800787c:	2b00      	cmp	r3, #0
 800787e:	d10d      	bne.n	800789c <xTimerCreateTimerTask+0x7c>
	__asm volatile
 8007880:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007884:	b672      	cpsid	i
 8007886:	f383 8811 	msr	BASEPRI, r3
 800788a:	f3bf 8f6f 	isb	sy
 800788e:	f3bf 8f4f 	dsb	sy
 8007892:	b662      	cpsie	i
 8007894:	613b      	str	r3, [r7, #16]
}
 8007896:	bf00      	nop
 8007898:	bf00      	nop
 800789a:	e7fd      	b.n	8007898 <xTimerCreateTimerTask+0x78>
	return xReturn;
 800789c:	697b      	ldr	r3, [r7, #20]
}
 800789e:	4618      	mov	r0, r3
 80078a0:	3718      	adds	r7, #24
 80078a2:	46bd      	mov	sp, r7
 80078a4:	bd80      	pop	{r7, pc}
 80078a6:	bf00      	nop
 80078a8:	20001614 	.word	0x20001614
 80078ac:	0800b2a4 	.word	0x0800b2a4
 80078b0:	080079f9 	.word	0x080079f9
 80078b4:	20001618 	.word	0x20001618

080078b8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80078b8:	b580      	push	{r7, lr}
 80078ba:	b08a      	sub	sp, #40	@ 0x28
 80078bc:	af00      	add	r7, sp, #0
 80078be:	60f8      	str	r0, [r7, #12]
 80078c0:	60b9      	str	r1, [r7, #8]
 80078c2:	607a      	str	r2, [r7, #4]
 80078c4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80078c6:	2300      	movs	r3, #0
 80078c8:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d10d      	bne.n	80078ec <xTimerGenericCommand+0x34>
	__asm volatile
 80078d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078d4:	b672      	cpsid	i
 80078d6:	f383 8811 	msr	BASEPRI, r3
 80078da:	f3bf 8f6f 	isb	sy
 80078de:	f3bf 8f4f 	dsb	sy
 80078e2:	b662      	cpsie	i
 80078e4:	623b      	str	r3, [r7, #32]
}
 80078e6:	bf00      	nop
 80078e8:	bf00      	nop
 80078ea:	e7fd      	b.n	80078e8 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80078ec:	4b19      	ldr	r3, [pc, #100]	@ (8007954 <xTimerGenericCommand+0x9c>)
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d02a      	beq.n	800794a <xTimerGenericCommand+0x92>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80078f4:	68bb      	ldr	r3, [r7, #8]
 80078f6:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007900:	68bb      	ldr	r3, [r7, #8]
 8007902:	2b05      	cmp	r3, #5
 8007904:	dc18      	bgt.n	8007938 <xTimerGenericCommand+0x80>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007906:	f7ff fea5 	bl	8007654 <xTaskGetSchedulerState>
 800790a:	4603      	mov	r3, r0
 800790c:	2b02      	cmp	r3, #2
 800790e:	d109      	bne.n	8007924 <xTimerGenericCommand+0x6c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007910:	4b10      	ldr	r3, [pc, #64]	@ (8007954 <xTimerGenericCommand+0x9c>)
 8007912:	6818      	ldr	r0, [r3, #0]
 8007914:	f107 0110 	add.w	r1, r7, #16
 8007918:	2300      	movs	r3, #0
 800791a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800791c:	f7fe fb96 	bl	800604c <xQueueGenericSend>
 8007920:	6278      	str	r0, [r7, #36]	@ 0x24
 8007922:	e012      	b.n	800794a <xTimerGenericCommand+0x92>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007924:	4b0b      	ldr	r3, [pc, #44]	@ (8007954 <xTimerGenericCommand+0x9c>)
 8007926:	6818      	ldr	r0, [r3, #0]
 8007928:	f107 0110 	add.w	r1, r7, #16
 800792c:	2300      	movs	r3, #0
 800792e:	2200      	movs	r2, #0
 8007930:	f7fe fb8c 	bl	800604c <xQueueGenericSend>
 8007934:	6278      	str	r0, [r7, #36]	@ 0x24
 8007936:	e008      	b.n	800794a <xTimerGenericCommand+0x92>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007938:	4b06      	ldr	r3, [pc, #24]	@ (8007954 <xTimerGenericCommand+0x9c>)
 800793a:	6818      	ldr	r0, [r3, #0]
 800793c:	f107 0110 	add.w	r1, r7, #16
 8007940:	2300      	movs	r3, #0
 8007942:	683a      	ldr	r2, [r7, #0]
 8007944:	f7fe fc8c 	bl	8006260 <xQueueGenericSendFromISR>
 8007948:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800794a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800794c:	4618      	mov	r0, r3
 800794e:	3728      	adds	r7, #40	@ 0x28
 8007950:	46bd      	mov	sp, r7
 8007952:	bd80      	pop	{r7, pc}
 8007954:	20001614 	.word	0x20001614

08007958 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007958:	b580      	push	{r7, lr}
 800795a:	b088      	sub	sp, #32
 800795c:	af02      	add	r7, sp, #8
 800795e:	6078      	str	r0, [r7, #4]
 8007960:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007962:	4b24      	ldr	r3, [pc, #144]	@ (80079f4 <prvProcessExpiredTimer+0x9c>)
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	68db      	ldr	r3, [r3, #12]
 8007968:	68db      	ldr	r3, [r3, #12]
 800796a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800796c:	697b      	ldr	r3, [r7, #20]
 800796e:	3304      	adds	r3, #4
 8007970:	4618      	mov	r0, r3
 8007972:	f7fe f9e7 	bl	8005d44 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007976:	697b      	ldr	r3, [r7, #20]
 8007978:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800797c:	f003 0304 	and.w	r3, r3, #4
 8007980:	2b00      	cmp	r3, #0
 8007982:	d025      	beq.n	80079d0 <prvProcessExpiredTimer+0x78>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007984:	697b      	ldr	r3, [r7, #20]
 8007986:	699a      	ldr	r2, [r3, #24]
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	18d1      	adds	r1, r2, r3
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	683a      	ldr	r2, [r7, #0]
 8007990:	6978      	ldr	r0, [r7, #20]
 8007992:	f000 f8d7 	bl	8007b44 <prvInsertTimerInActiveList>
 8007996:	4603      	mov	r3, r0
 8007998:	2b00      	cmp	r3, #0
 800799a:	d022      	beq.n	80079e2 <prvProcessExpiredTimer+0x8a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800799c:	2300      	movs	r3, #0
 800799e:	9300      	str	r3, [sp, #0]
 80079a0:	2300      	movs	r3, #0
 80079a2:	687a      	ldr	r2, [r7, #4]
 80079a4:	2100      	movs	r1, #0
 80079a6:	6978      	ldr	r0, [r7, #20]
 80079a8:	f7ff ff86 	bl	80078b8 <xTimerGenericCommand>
 80079ac:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80079ae:	693b      	ldr	r3, [r7, #16]
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d116      	bne.n	80079e2 <prvProcessExpiredTimer+0x8a>
	__asm volatile
 80079b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079b8:	b672      	cpsid	i
 80079ba:	f383 8811 	msr	BASEPRI, r3
 80079be:	f3bf 8f6f 	isb	sy
 80079c2:	f3bf 8f4f 	dsb	sy
 80079c6:	b662      	cpsie	i
 80079c8:	60fb      	str	r3, [r7, #12]
}
 80079ca:	bf00      	nop
 80079cc:	bf00      	nop
 80079ce:	e7fd      	b.n	80079cc <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80079d0:	697b      	ldr	r3, [r7, #20]
 80079d2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80079d6:	f023 0301 	bic.w	r3, r3, #1
 80079da:	b2da      	uxtb	r2, r3
 80079dc:	697b      	ldr	r3, [r7, #20]
 80079de:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80079e2:	697b      	ldr	r3, [r7, #20]
 80079e4:	6a1b      	ldr	r3, [r3, #32]
 80079e6:	6978      	ldr	r0, [r7, #20]
 80079e8:	4798      	blx	r3
}
 80079ea:	bf00      	nop
 80079ec:	3718      	adds	r7, #24
 80079ee:	46bd      	mov	sp, r7
 80079f0:	bd80      	pop	{r7, pc}
 80079f2:	bf00      	nop
 80079f4:	2000160c 	.word	0x2000160c

080079f8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80079f8:	b580      	push	{r7, lr}
 80079fa:	b084      	sub	sp, #16
 80079fc:	af00      	add	r7, sp, #0
 80079fe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007a00:	f107 0308 	add.w	r3, r7, #8
 8007a04:	4618      	mov	r0, r3
 8007a06:	f000 f859 	bl	8007abc <prvGetNextExpireTime>
 8007a0a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007a0c:	68bb      	ldr	r3, [r7, #8]
 8007a0e:	4619      	mov	r1, r3
 8007a10:	68f8      	ldr	r0, [r7, #12]
 8007a12:	f000 f805 	bl	8007a20 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007a16:	f000 f8d7 	bl	8007bc8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007a1a:	bf00      	nop
 8007a1c:	e7f0      	b.n	8007a00 <prvTimerTask+0x8>
	...

08007a20 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007a20:	b580      	push	{r7, lr}
 8007a22:	b084      	sub	sp, #16
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	6078      	str	r0, [r7, #4]
 8007a28:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007a2a:	f7ff fa0d 	bl	8006e48 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007a2e:	f107 0308 	add.w	r3, r7, #8
 8007a32:	4618      	mov	r0, r3
 8007a34:	f000 f866 	bl	8007b04 <prvSampleTimeNow>
 8007a38:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007a3a:	68bb      	ldr	r3, [r7, #8]
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d130      	bne.n	8007aa2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007a40:	683b      	ldr	r3, [r7, #0]
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d10a      	bne.n	8007a5c <prvProcessTimerOrBlockTask+0x3c>
 8007a46:	687a      	ldr	r2, [r7, #4]
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	429a      	cmp	r2, r3
 8007a4c:	d806      	bhi.n	8007a5c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007a4e:	f7ff fa09 	bl	8006e64 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007a52:	68f9      	ldr	r1, [r7, #12]
 8007a54:	6878      	ldr	r0, [r7, #4]
 8007a56:	f7ff ff7f 	bl	8007958 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007a5a:	e024      	b.n	8007aa6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007a5c:	683b      	ldr	r3, [r7, #0]
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d008      	beq.n	8007a74 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007a62:	4b13      	ldr	r3, [pc, #76]	@ (8007ab0 <prvProcessTimerOrBlockTask+0x90>)
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d101      	bne.n	8007a70 <prvProcessTimerOrBlockTask+0x50>
 8007a6c:	2301      	movs	r3, #1
 8007a6e:	e000      	b.n	8007a72 <prvProcessTimerOrBlockTask+0x52>
 8007a70:	2300      	movs	r3, #0
 8007a72:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007a74:	4b0f      	ldr	r3, [pc, #60]	@ (8007ab4 <prvProcessTimerOrBlockTask+0x94>)
 8007a76:	6818      	ldr	r0, [r3, #0]
 8007a78:	687a      	ldr	r2, [r7, #4]
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	1ad3      	subs	r3, r2, r3
 8007a7e:	683a      	ldr	r2, [r7, #0]
 8007a80:	4619      	mov	r1, r3
 8007a82:	f7fe ff3b 	bl	80068fc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007a86:	f7ff f9ed 	bl	8006e64 <xTaskResumeAll>
 8007a8a:	4603      	mov	r3, r0
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d10a      	bne.n	8007aa6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007a90:	4b09      	ldr	r3, [pc, #36]	@ (8007ab8 <prvProcessTimerOrBlockTask+0x98>)
 8007a92:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007a96:	601a      	str	r2, [r3, #0]
 8007a98:	f3bf 8f4f 	dsb	sy
 8007a9c:	f3bf 8f6f 	isb	sy
}
 8007aa0:	e001      	b.n	8007aa6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007aa2:	f7ff f9df 	bl	8006e64 <xTaskResumeAll>
}
 8007aa6:	bf00      	nop
 8007aa8:	3710      	adds	r7, #16
 8007aaa:	46bd      	mov	sp, r7
 8007aac:	bd80      	pop	{r7, pc}
 8007aae:	bf00      	nop
 8007ab0:	20001610 	.word	0x20001610
 8007ab4:	20001614 	.word	0x20001614
 8007ab8:	e000ed04 	.word	0xe000ed04

08007abc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007abc:	b480      	push	{r7}
 8007abe:	b085      	sub	sp, #20
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007ac4:	4b0e      	ldr	r3, [pc, #56]	@ (8007b00 <prvGetNextExpireTime+0x44>)
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d101      	bne.n	8007ad2 <prvGetNextExpireTime+0x16>
 8007ace:	2201      	movs	r2, #1
 8007ad0:	e000      	b.n	8007ad4 <prvGetNextExpireTime+0x18>
 8007ad2:	2200      	movs	r2, #0
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d105      	bne.n	8007aec <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007ae0:	4b07      	ldr	r3, [pc, #28]	@ (8007b00 <prvGetNextExpireTime+0x44>)
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	68db      	ldr	r3, [r3, #12]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	60fb      	str	r3, [r7, #12]
 8007aea:	e001      	b.n	8007af0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007aec:	2300      	movs	r3, #0
 8007aee:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007af0:	68fb      	ldr	r3, [r7, #12]
}
 8007af2:	4618      	mov	r0, r3
 8007af4:	3714      	adds	r7, #20
 8007af6:	46bd      	mov	sp, r7
 8007af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afc:	4770      	bx	lr
 8007afe:	bf00      	nop
 8007b00:	2000160c 	.word	0x2000160c

08007b04 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007b04:	b580      	push	{r7, lr}
 8007b06:	b084      	sub	sp, #16
 8007b08:	af00      	add	r7, sp, #0
 8007b0a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007b0c:	f7ff fa4a 	bl	8006fa4 <xTaskGetTickCount>
 8007b10:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007b12:	4b0b      	ldr	r3, [pc, #44]	@ (8007b40 <prvSampleTimeNow+0x3c>)
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	68fa      	ldr	r2, [r7, #12]
 8007b18:	429a      	cmp	r2, r3
 8007b1a:	d205      	bcs.n	8007b28 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007b1c:	f000 f940 	bl	8007da0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	2201      	movs	r2, #1
 8007b24:	601a      	str	r2, [r3, #0]
 8007b26:	e002      	b.n	8007b2e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	2200      	movs	r2, #0
 8007b2c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007b2e:	4a04      	ldr	r2, [pc, #16]	@ (8007b40 <prvSampleTimeNow+0x3c>)
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007b34:	68fb      	ldr	r3, [r7, #12]
}
 8007b36:	4618      	mov	r0, r3
 8007b38:	3710      	adds	r7, #16
 8007b3a:	46bd      	mov	sp, r7
 8007b3c:	bd80      	pop	{r7, pc}
 8007b3e:	bf00      	nop
 8007b40:	2000161c 	.word	0x2000161c

08007b44 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007b44:	b580      	push	{r7, lr}
 8007b46:	b086      	sub	sp, #24
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	60f8      	str	r0, [r7, #12]
 8007b4c:	60b9      	str	r1, [r7, #8]
 8007b4e:	607a      	str	r2, [r7, #4]
 8007b50:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007b52:	2300      	movs	r3, #0
 8007b54:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	68ba      	ldr	r2, [r7, #8]
 8007b5a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	68fa      	ldr	r2, [r7, #12]
 8007b60:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007b62:	68ba      	ldr	r2, [r7, #8]
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	429a      	cmp	r2, r3
 8007b68:	d812      	bhi.n	8007b90 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007b6a:	687a      	ldr	r2, [r7, #4]
 8007b6c:	683b      	ldr	r3, [r7, #0]
 8007b6e:	1ad2      	subs	r2, r2, r3
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	699b      	ldr	r3, [r3, #24]
 8007b74:	429a      	cmp	r2, r3
 8007b76:	d302      	bcc.n	8007b7e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007b78:	2301      	movs	r3, #1
 8007b7a:	617b      	str	r3, [r7, #20]
 8007b7c:	e01b      	b.n	8007bb6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007b7e:	4b10      	ldr	r3, [pc, #64]	@ (8007bc0 <prvInsertTimerInActiveList+0x7c>)
 8007b80:	681a      	ldr	r2, [r3, #0]
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	3304      	adds	r3, #4
 8007b86:	4619      	mov	r1, r3
 8007b88:	4610      	mov	r0, r2
 8007b8a:	f7fe f8a2 	bl	8005cd2 <vListInsert>
 8007b8e:	e012      	b.n	8007bb6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007b90:	687a      	ldr	r2, [r7, #4]
 8007b92:	683b      	ldr	r3, [r7, #0]
 8007b94:	429a      	cmp	r2, r3
 8007b96:	d206      	bcs.n	8007ba6 <prvInsertTimerInActiveList+0x62>
 8007b98:	68ba      	ldr	r2, [r7, #8]
 8007b9a:	683b      	ldr	r3, [r7, #0]
 8007b9c:	429a      	cmp	r2, r3
 8007b9e:	d302      	bcc.n	8007ba6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007ba0:	2301      	movs	r3, #1
 8007ba2:	617b      	str	r3, [r7, #20]
 8007ba4:	e007      	b.n	8007bb6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007ba6:	4b07      	ldr	r3, [pc, #28]	@ (8007bc4 <prvInsertTimerInActiveList+0x80>)
 8007ba8:	681a      	ldr	r2, [r3, #0]
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	3304      	adds	r3, #4
 8007bae:	4619      	mov	r1, r3
 8007bb0:	4610      	mov	r0, r2
 8007bb2:	f7fe f88e 	bl	8005cd2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007bb6:	697b      	ldr	r3, [r7, #20]
}
 8007bb8:	4618      	mov	r0, r3
 8007bba:	3718      	adds	r7, #24
 8007bbc:	46bd      	mov	sp, r7
 8007bbe:	bd80      	pop	{r7, pc}
 8007bc0:	20001610 	.word	0x20001610
 8007bc4:	2000160c 	.word	0x2000160c

08007bc8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007bc8:	b580      	push	{r7, lr}
 8007bca:	b08e      	sub	sp, #56	@ 0x38
 8007bcc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007bce:	e0d4      	b.n	8007d7a <prvProcessReceivedCommands+0x1b2>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	da1b      	bge.n	8007c0e <prvProcessReceivedCommands+0x46>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007bd6:	1d3b      	adds	r3, r7, #4
 8007bd8:	3304      	adds	r3, #4
 8007bda:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007bdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d10d      	bne.n	8007bfe <prvProcessReceivedCommands+0x36>
	__asm volatile
 8007be2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007be6:	b672      	cpsid	i
 8007be8:	f383 8811 	msr	BASEPRI, r3
 8007bec:	f3bf 8f6f 	isb	sy
 8007bf0:	f3bf 8f4f 	dsb	sy
 8007bf4:	b662      	cpsie	i
 8007bf6:	61fb      	str	r3, [r7, #28]
}
 8007bf8:	bf00      	nop
 8007bfa:	bf00      	nop
 8007bfc:	e7fd      	b.n	8007bfa <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007bfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007c04:	6850      	ldr	r0, [r2, #4]
 8007c06:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007c08:	6892      	ldr	r2, [r2, #8]
 8007c0a:	4611      	mov	r1, r2
 8007c0c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	f2c0 80b2 	blt.w	8007d7a <prvProcessReceivedCommands+0x1b2>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007c1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c1c:	695b      	ldr	r3, [r3, #20]
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d004      	beq.n	8007c2c <prvProcessReceivedCommands+0x64>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007c22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c24:	3304      	adds	r3, #4
 8007c26:	4618      	mov	r0, r3
 8007c28:	f7fe f88c 	bl	8005d44 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007c2c:	463b      	mov	r3, r7
 8007c2e:	4618      	mov	r0, r3
 8007c30:	f7ff ff68 	bl	8007b04 <prvSampleTimeNow>
 8007c34:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	2b09      	cmp	r3, #9
 8007c3a:	f200 809b 	bhi.w	8007d74 <prvProcessReceivedCommands+0x1ac>
 8007c3e:	a201      	add	r2, pc, #4	@ (adr r2, 8007c44 <prvProcessReceivedCommands+0x7c>)
 8007c40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c44:	08007c6d 	.word	0x08007c6d
 8007c48:	08007c6d 	.word	0x08007c6d
 8007c4c:	08007c6d 	.word	0x08007c6d
 8007c50:	08007ce7 	.word	0x08007ce7
 8007c54:	08007cfb 	.word	0x08007cfb
 8007c58:	08007d4b 	.word	0x08007d4b
 8007c5c:	08007c6d 	.word	0x08007c6d
 8007c60:	08007c6d 	.word	0x08007c6d
 8007c64:	08007ce7 	.word	0x08007ce7
 8007c68:	08007cfb 	.word	0x08007cfb
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007c6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c6e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007c72:	f043 0301 	orr.w	r3, r3, #1
 8007c76:	b2da      	uxtb	r2, r3
 8007c78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c7a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007c7e:	68ba      	ldr	r2, [r7, #8]
 8007c80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c82:	699b      	ldr	r3, [r3, #24]
 8007c84:	18d1      	adds	r1, r2, r3
 8007c86:	68bb      	ldr	r3, [r7, #8]
 8007c88:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007c8a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007c8c:	f7ff ff5a 	bl	8007b44 <prvInsertTimerInActiveList>
 8007c90:	4603      	mov	r3, r0
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d070      	beq.n	8007d78 <prvProcessReceivedCommands+0x1b0>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007c96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c98:	6a1b      	ldr	r3, [r3, #32]
 8007c9a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007c9c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007c9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ca0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007ca4:	f003 0304 	and.w	r3, r3, #4
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d065      	beq.n	8007d78 <prvProcessReceivedCommands+0x1b0>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007cac:	68ba      	ldr	r2, [r7, #8]
 8007cae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cb0:	699b      	ldr	r3, [r3, #24]
 8007cb2:	441a      	add	r2, r3
 8007cb4:	2300      	movs	r3, #0
 8007cb6:	9300      	str	r3, [sp, #0]
 8007cb8:	2300      	movs	r3, #0
 8007cba:	2100      	movs	r1, #0
 8007cbc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007cbe:	f7ff fdfb 	bl	80078b8 <xTimerGenericCommand>
 8007cc2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007cc4:	6a3b      	ldr	r3, [r7, #32]
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d156      	bne.n	8007d78 <prvProcessReceivedCommands+0x1b0>
	__asm volatile
 8007cca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cce:	b672      	cpsid	i
 8007cd0:	f383 8811 	msr	BASEPRI, r3
 8007cd4:	f3bf 8f6f 	isb	sy
 8007cd8:	f3bf 8f4f 	dsb	sy
 8007cdc:	b662      	cpsie	i
 8007cde:	61bb      	str	r3, [r7, #24]
}
 8007ce0:	bf00      	nop
 8007ce2:	bf00      	nop
 8007ce4:	e7fd      	b.n	8007ce2 <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007ce6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ce8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007cec:	f023 0301 	bic.w	r3, r3, #1
 8007cf0:	b2da      	uxtb	r2, r3
 8007cf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cf4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8007cf8:	e03f      	b.n	8007d7a <prvProcessReceivedCommands+0x1b2>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007cfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cfc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007d00:	f043 0301 	orr.w	r3, r3, #1
 8007d04:	b2da      	uxtb	r2, r3
 8007d06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d08:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007d0c:	68ba      	ldr	r2, [r7, #8]
 8007d0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d10:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007d12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d14:	699b      	ldr	r3, [r3, #24]
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d10d      	bne.n	8007d36 <prvProcessReceivedCommands+0x16e>
	__asm volatile
 8007d1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d1e:	b672      	cpsid	i
 8007d20:	f383 8811 	msr	BASEPRI, r3
 8007d24:	f3bf 8f6f 	isb	sy
 8007d28:	f3bf 8f4f 	dsb	sy
 8007d2c:	b662      	cpsie	i
 8007d2e:	617b      	str	r3, [r7, #20]
}
 8007d30:	bf00      	nop
 8007d32:	bf00      	nop
 8007d34:	e7fd      	b.n	8007d32 <prvProcessReceivedCommands+0x16a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007d36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d38:	699a      	ldr	r2, [r3, #24]
 8007d3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d3c:	18d1      	adds	r1, r2, r3
 8007d3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d40:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007d42:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007d44:	f7ff fefe 	bl	8007b44 <prvInsertTimerInActiveList>
					break;
 8007d48:	e017      	b.n	8007d7a <prvProcessReceivedCommands+0x1b2>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007d4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d4c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007d50:	f003 0302 	and.w	r3, r3, #2
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d103      	bne.n	8007d60 <prvProcessReceivedCommands+0x198>
						{
							vPortFree( pxTimer );
 8007d58:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007d5a:	f000 fbd3 	bl	8008504 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007d5e:	e00c      	b.n	8007d7a <prvProcessReceivedCommands+0x1b2>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007d60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d62:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007d66:	f023 0301 	bic.w	r3, r3, #1
 8007d6a:	b2da      	uxtb	r2, r3
 8007d6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d6e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8007d72:	e002      	b.n	8007d7a <prvProcessReceivedCommands+0x1b2>

				default	:
					/* Don't expect to get here. */
					break;
 8007d74:	bf00      	nop
 8007d76:	e000      	b.n	8007d7a <prvProcessReceivedCommands+0x1b2>
					break;
 8007d78:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007d7a:	4b08      	ldr	r3, [pc, #32]	@ (8007d9c <prvProcessReceivedCommands+0x1d4>)
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	1d39      	adds	r1, r7, #4
 8007d80:	2200      	movs	r2, #0
 8007d82:	4618      	mov	r0, r3
 8007d84:	f7fe fb10 	bl	80063a8 <xQueueReceive>
 8007d88:	4603      	mov	r3, r0
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	f47f af20 	bne.w	8007bd0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8007d90:	bf00      	nop
 8007d92:	bf00      	nop
 8007d94:	3730      	adds	r7, #48	@ 0x30
 8007d96:	46bd      	mov	sp, r7
 8007d98:	bd80      	pop	{r7, pc}
 8007d9a:	bf00      	nop
 8007d9c:	20001614 	.word	0x20001614

08007da0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007da0:	b580      	push	{r7, lr}
 8007da2:	b088      	sub	sp, #32
 8007da4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007da6:	e04b      	b.n	8007e40 <prvSwitchTimerLists+0xa0>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007da8:	4b2f      	ldr	r3, [pc, #188]	@ (8007e68 <prvSwitchTimerLists+0xc8>)
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	68db      	ldr	r3, [r3, #12]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007db2:	4b2d      	ldr	r3, [pc, #180]	@ (8007e68 <prvSwitchTimerLists+0xc8>)
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	68db      	ldr	r3, [r3, #12]
 8007db8:	68db      	ldr	r3, [r3, #12]
 8007dba:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	3304      	adds	r3, #4
 8007dc0:	4618      	mov	r0, r3
 8007dc2:	f7fd ffbf 	bl	8005d44 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	6a1b      	ldr	r3, [r3, #32]
 8007dca:	68f8      	ldr	r0, [r7, #12]
 8007dcc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007dd4:	f003 0304 	and.w	r3, r3, #4
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d031      	beq.n	8007e40 <prvSwitchTimerLists+0xa0>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	699b      	ldr	r3, [r3, #24]
 8007de0:	693a      	ldr	r2, [r7, #16]
 8007de2:	4413      	add	r3, r2
 8007de4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007de6:	68ba      	ldr	r2, [r7, #8]
 8007de8:	693b      	ldr	r3, [r7, #16]
 8007dea:	429a      	cmp	r2, r3
 8007dec:	d90e      	bls.n	8007e0c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	68ba      	ldr	r2, [r7, #8]
 8007df2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	68fa      	ldr	r2, [r7, #12]
 8007df8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007dfa:	4b1b      	ldr	r3, [pc, #108]	@ (8007e68 <prvSwitchTimerLists+0xc8>)
 8007dfc:	681a      	ldr	r2, [r3, #0]
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	3304      	adds	r3, #4
 8007e02:	4619      	mov	r1, r3
 8007e04:	4610      	mov	r0, r2
 8007e06:	f7fd ff64 	bl	8005cd2 <vListInsert>
 8007e0a:	e019      	b.n	8007e40 <prvSwitchTimerLists+0xa0>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007e0c:	2300      	movs	r3, #0
 8007e0e:	9300      	str	r3, [sp, #0]
 8007e10:	2300      	movs	r3, #0
 8007e12:	693a      	ldr	r2, [r7, #16]
 8007e14:	2100      	movs	r1, #0
 8007e16:	68f8      	ldr	r0, [r7, #12]
 8007e18:	f7ff fd4e 	bl	80078b8 <xTimerGenericCommand>
 8007e1c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d10d      	bne.n	8007e40 <prvSwitchTimerLists+0xa0>
	__asm volatile
 8007e24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e28:	b672      	cpsid	i
 8007e2a:	f383 8811 	msr	BASEPRI, r3
 8007e2e:	f3bf 8f6f 	isb	sy
 8007e32:	f3bf 8f4f 	dsb	sy
 8007e36:	b662      	cpsie	i
 8007e38:	603b      	str	r3, [r7, #0]
}
 8007e3a:	bf00      	nop
 8007e3c:	bf00      	nop
 8007e3e:	e7fd      	b.n	8007e3c <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007e40:	4b09      	ldr	r3, [pc, #36]	@ (8007e68 <prvSwitchTimerLists+0xc8>)
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d1ae      	bne.n	8007da8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007e4a:	4b07      	ldr	r3, [pc, #28]	@ (8007e68 <prvSwitchTimerLists+0xc8>)
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007e50:	4b06      	ldr	r3, [pc, #24]	@ (8007e6c <prvSwitchTimerLists+0xcc>)
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	4a04      	ldr	r2, [pc, #16]	@ (8007e68 <prvSwitchTimerLists+0xc8>)
 8007e56:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007e58:	4a04      	ldr	r2, [pc, #16]	@ (8007e6c <prvSwitchTimerLists+0xcc>)
 8007e5a:	697b      	ldr	r3, [r7, #20]
 8007e5c:	6013      	str	r3, [r2, #0]
}
 8007e5e:	bf00      	nop
 8007e60:	3718      	adds	r7, #24
 8007e62:	46bd      	mov	sp, r7
 8007e64:	bd80      	pop	{r7, pc}
 8007e66:	bf00      	nop
 8007e68:	2000160c 	.word	0x2000160c
 8007e6c:	20001610 	.word	0x20001610

08007e70 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007e70:	b580      	push	{r7, lr}
 8007e72:	b082      	sub	sp, #8
 8007e74:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007e76:	f000 f949 	bl	800810c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007e7a:	4b15      	ldr	r3, [pc, #84]	@ (8007ed0 <prvCheckForValidListAndQueue+0x60>)
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d120      	bne.n	8007ec4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007e82:	4814      	ldr	r0, [pc, #80]	@ (8007ed4 <prvCheckForValidListAndQueue+0x64>)
 8007e84:	f7fd fed4 	bl	8005c30 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007e88:	4813      	ldr	r0, [pc, #76]	@ (8007ed8 <prvCheckForValidListAndQueue+0x68>)
 8007e8a:	f7fd fed1 	bl	8005c30 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007e8e:	4b13      	ldr	r3, [pc, #76]	@ (8007edc <prvCheckForValidListAndQueue+0x6c>)
 8007e90:	4a10      	ldr	r2, [pc, #64]	@ (8007ed4 <prvCheckForValidListAndQueue+0x64>)
 8007e92:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007e94:	4b12      	ldr	r3, [pc, #72]	@ (8007ee0 <prvCheckForValidListAndQueue+0x70>)
 8007e96:	4a10      	ldr	r2, [pc, #64]	@ (8007ed8 <prvCheckForValidListAndQueue+0x68>)
 8007e98:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007e9a:	2300      	movs	r3, #0
 8007e9c:	9300      	str	r3, [sp, #0]
 8007e9e:	4b11      	ldr	r3, [pc, #68]	@ (8007ee4 <prvCheckForValidListAndQueue+0x74>)
 8007ea0:	4a11      	ldr	r2, [pc, #68]	@ (8007ee8 <prvCheckForValidListAndQueue+0x78>)
 8007ea2:	2110      	movs	r1, #16
 8007ea4:	200a      	movs	r0, #10
 8007ea6:	f7fd ffe3 	bl	8005e70 <xQueueGenericCreateStatic>
 8007eaa:	4603      	mov	r3, r0
 8007eac:	4a08      	ldr	r2, [pc, #32]	@ (8007ed0 <prvCheckForValidListAndQueue+0x60>)
 8007eae:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007eb0:	4b07      	ldr	r3, [pc, #28]	@ (8007ed0 <prvCheckForValidListAndQueue+0x60>)
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d005      	beq.n	8007ec4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007eb8:	4b05      	ldr	r3, [pc, #20]	@ (8007ed0 <prvCheckForValidListAndQueue+0x60>)
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	490b      	ldr	r1, [pc, #44]	@ (8007eec <prvCheckForValidListAndQueue+0x7c>)
 8007ebe:	4618      	mov	r0, r3
 8007ec0:	f7fe fcf2 	bl	80068a8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007ec4:	f000 f958 	bl	8008178 <vPortExitCritical>
}
 8007ec8:	bf00      	nop
 8007eca:	46bd      	mov	sp, r7
 8007ecc:	bd80      	pop	{r7, pc}
 8007ece:	bf00      	nop
 8007ed0:	20001614 	.word	0x20001614
 8007ed4:	200015e4 	.word	0x200015e4
 8007ed8:	200015f8 	.word	0x200015f8
 8007edc:	2000160c 	.word	0x2000160c
 8007ee0:	20001610 	.word	0x20001610
 8007ee4:	200016c0 	.word	0x200016c0
 8007ee8:	20001620 	.word	0x20001620
 8007eec:	0800b2ac 	.word	0x0800b2ac

08007ef0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007ef0:	b480      	push	{r7}
 8007ef2:	b085      	sub	sp, #20
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	60f8      	str	r0, [r7, #12]
 8007ef8:	60b9      	str	r1, [r7, #8]
 8007efa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	3b04      	subs	r3, #4
 8007f00:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8007f08:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	3b04      	subs	r3, #4
 8007f0e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007f10:	68bb      	ldr	r3, [r7, #8]
 8007f12:	f023 0201 	bic.w	r2, r3, #1
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	3b04      	subs	r3, #4
 8007f1e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007f20:	4a0c      	ldr	r2, [pc, #48]	@ (8007f54 <pxPortInitialiseStack+0x64>)
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	3b14      	subs	r3, #20
 8007f2a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007f2c:	687a      	ldr	r2, [r7, #4]
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	3b04      	subs	r3, #4
 8007f36:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	f06f 0202 	mvn.w	r2, #2
 8007f3e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	3b20      	subs	r3, #32
 8007f44:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007f46:	68fb      	ldr	r3, [r7, #12]
}
 8007f48:	4618      	mov	r0, r3
 8007f4a:	3714      	adds	r7, #20
 8007f4c:	46bd      	mov	sp, r7
 8007f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f52:	4770      	bx	lr
 8007f54:	08007f59 	.word	0x08007f59

08007f58 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007f58:	b480      	push	{r7}
 8007f5a:	b085      	sub	sp, #20
 8007f5c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007f5e:	2300      	movs	r3, #0
 8007f60:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007f62:	4b15      	ldr	r3, [pc, #84]	@ (8007fb8 <prvTaskExitError+0x60>)
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007f6a:	d00d      	beq.n	8007f88 <prvTaskExitError+0x30>
	__asm volatile
 8007f6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f70:	b672      	cpsid	i
 8007f72:	f383 8811 	msr	BASEPRI, r3
 8007f76:	f3bf 8f6f 	isb	sy
 8007f7a:	f3bf 8f4f 	dsb	sy
 8007f7e:	b662      	cpsie	i
 8007f80:	60fb      	str	r3, [r7, #12]
}
 8007f82:	bf00      	nop
 8007f84:	bf00      	nop
 8007f86:	e7fd      	b.n	8007f84 <prvTaskExitError+0x2c>
	__asm volatile
 8007f88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f8c:	b672      	cpsid	i
 8007f8e:	f383 8811 	msr	BASEPRI, r3
 8007f92:	f3bf 8f6f 	isb	sy
 8007f96:	f3bf 8f4f 	dsb	sy
 8007f9a:	b662      	cpsie	i
 8007f9c:	60bb      	str	r3, [r7, #8]
}
 8007f9e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007fa0:	bf00      	nop
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d0fc      	beq.n	8007fa2 <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007fa8:	bf00      	nop
 8007faa:	bf00      	nop
 8007fac:	3714      	adds	r7, #20
 8007fae:	46bd      	mov	sp, r7
 8007fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb4:	4770      	bx	lr
 8007fb6:	bf00      	nop
 8007fb8:	2000000c 	.word	0x2000000c
 8007fbc:	00000000 	.word	0x00000000

08007fc0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007fc0:	4b07      	ldr	r3, [pc, #28]	@ (8007fe0 <pxCurrentTCBConst2>)
 8007fc2:	6819      	ldr	r1, [r3, #0]
 8007fc4:	6808      	ldr	r0, [r1, #0]
 8007fc6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fca:	f380 8809 	msr	PSP, r0
 8007fce:	f3bf 8f6f 	isb	sy
 8007fd2:	f04f 0000 	mov.w	r0, #0
 8007fd6:	f380 8811 	msr	BASEPRI, r0
 8007fda:	4770      	bx	lr
 8007fdc:	f3af 8000 	nop.w

08007fe0 <pxCurrentTCBConst2>:
 8007fe0:	200010e4 	.word	0x200010e4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007fe4:	bf00      	nop
 8007fe6:	bf00      	nop

08007fe8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007fe8:	4808      	ldr	r0, [pc, #32]	@ (800800c <prvPortStartFirstTask+0x24>)
 8007fea:	6800      	ldr	r0, [r0, #0]
 8007fec:	6800      	ldr	r0, [r0, #0]
 8007fee:	f380 8808 	msr	MSP, r0
 8007ff2:	f04f 0000 	mov.w	r0, #0
 8007ff6:	f380 8814 	msr	CONTROL, r0
 8007ffa:	b662      	cpsie	i
 8007ffc:	b661      	cpsie	f
 8007ffe:	f3bf 8f4f 	dsb	sy
 8008002:	f3bf 8f6f 	isb	sy
 8008006:	df00      	svc	0
 8008008:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800800a:	bf00      	nop
 800800c:	e000ed08 	.word	0xe000ed08

08008010 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008010:	b580      	push	{r7, lr}
 8008012:	b084      	sub	sp, #16
 8008014:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008016:	4b37      	ldr	r3, [pc, #220]	@ (80080f4 <xPortStartScheduler+0xe4>)
 8008018:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	781b      	ldrb	r3, [r3, #0]
 800801e:	b2db      	uxtb	r3, r3
 8008020:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	22ff      	movs	r2, #255	@ 0xff
 8008026:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	781b      	ldrb	r3, [r3, #0]
 800802c:	b2db      	uxtb	r3, r3
 800802e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008030:	78fb      	ldrb	r3, [r7, #3]
 8008032:	b2db      	uxtb	r3, r3
 8008034:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8008038:	b2da      	uxtb	r2, r3
 800803a:	4b2f      	ldr	r3, [pc, #188]	@ (80080f8 <xPortStartScheduler+0xe8>)
 800803c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800803e:	4b2f      	ldr	r3, [pc, #188]	@ (80080fc <xPortStartScheduler+0xec>)
 8008040:	2207      	movs	r2, #7
 8008042:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008044:	e009      	b.n	800805a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8008046:	4b2d      	ldr	r3, [pc, #180]	@ (80080fc <xPortStartScheduler+0xec>)
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	3b01      	subs	r3, #1
 800804c:	4a2b      	ldr	r2, [pc, #172]	@ (80080fc <xPortStartScheduler+0xec>)
 800804e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008050:	78fb      	ldrb	r3, [r7, #3]
 8008052:	b2db      	uxtb	r3, r3
 8008054:	005b      	lsls	r3, r3, #1
 8008056:	b2db      	uxtb	r3, r3
 8008058:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800805a:	78fb      	ldrb	r3, [r7, #3]
 800805c:	b2db      	uxtb	r3, r3
 800805e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008062:	2b80      	cmp	r3, #128	@ 0x80
 8008064:	d0ef      	beq.n	8008046 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008066:	4b25      	ldr	r3, [pc, #148]	@ (80080fc <xPortStartScheduler+0xec>)
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	f1c3 0307 	rsb	r3, r3, #7
 800806e:	2b04      	cmp	r3, #4
 8008070:	d00d      	beq.n	800808e <xPortStartScheduler+0x7e>
	__asm volatile
 8008072:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008076:	b672      	cpsid	i
 8008078:	f383 8811 	msr	BASEPRI, r3
 800807c:	f3bf 8f6f 	isb	sy
 8008080:	f3bf 8f4f 	dsb	sy
 8008084:	b662      	cpsie	i
 8008086:	60bb      	str	r3, [r7, #8]
}
 8008088:	bf00      	nop
 800808a:	bf00      	nop
 800808c:	e7fd      	b.n	800808a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800808e:	4b1b      	ldr	r3, [pc, #108]	@ (80080fc <xPortStartScheduler+0xec>)
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	021b      	lsls	r3, r3, #8
 8008094:	4a19      	ldr	r2, [pc, #100]	@ (80080fc <xPortStartScheduler+0xec>)
 8008096:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008098:	4b18      	ldr	r3, [pc, #96]	@ (80080fc <xPortStartScheduler+0xec>)
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80080a0:	4a16      	ldr	r2, [pc, #88]	@ (80080fc <xPortStartScheduler+0xec>)
 80080a2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	b2da      	uxtb	r2, r3
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80080ac:	4b14      	ldr	r3, [pc, #80]	@ (8008100 <xPortStartScheduler+0xf0>)
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	4a13      	ldr	r2, [pc, #76]	@ (8008100 <xPortStartScheduler+0xf0>)
 80080b2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80080b6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80080b8:	4b11      	ldr	r3, [pc, #68]	@ (8008100 <xPortStartScheduler+0xf0>)
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	4a10      	ldr	r2, [pc, #64]	@ (8008100 <xPortStartScheduler+0xf0>)
 80080be:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80080c2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80080c4:	f000 f8dc 	bl	8008280 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80080c8:	4b0e      	ldr	r3, [pc, #56]	@ (8008104 <xPortStartScheduler+0xf4>)
 80080ca:	2200      	movs	r2, #0
 80080cc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80080ce:	f000 f8fb 	bl	80082c8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80080d2:	4b0d      	ldr	r3, [pc, #52]	@ (8008108 <xPortStartScheduler+0xf8>)
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	4a0c      	ldr	r2, [pc, #48]	@ (8008108 <xPortStartScheduler+0xf8>)
 80080d8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80080dc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80080de:	f7ff ff83 	bl	8007fe8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80080e2:	f7ff f82b 	bl	800713c <vTaskSwitchContext>
	prvTaskExitError();
 80080e6:	f7ff ff37 	bl	8007f58 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80080ea:	2300      	movs	r3, #0
}
 80080ec:	4618      	mov	r0, r3
 80080ee:	3710      	adds	r7, #16
 80080f0:	46bd      	mov	sp, r7
 80080f2:	bd80      	pop	{r7, pc}
 80080f4:	e000e400 	.word	0xe000e400
 80080f8:	20001710 	.word	0x20001710
 80080fc:	20001714 	.word	0x20001714
 8008100:	e000ed20 	.word	0xe000ed20
 8008104:	2000000c 	.word	0x2000000c
 8008108:	e000ef34 	.word	0xe000ef34

0800810c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800810c:	b480      	push	{r7}
 800810e:	b083      	sub	sp, #12
 8008110:	af00      	add	r7, sp, #0
	__asm volatile
 8008112:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008116:	b672      	cpsid	i
 8008118:	f383 8811 	msr	BASEPRI, r3
 800811c:	f3bf 8f6f 	isb	sy
 8008120:	f3bf 8f4f 	dsb	sy
 8008124:	b662      	cpsie	i
 8008126:	607b      	str	r3, [r7, #4]
}
 8008128:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800812a:	4b11      	ldr	r3, [pc, #68]	@ (8008170 <vPortEnterCritical+0x64>)
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	3301      	adds	r3, #1
 8008130:	4a0f      	ldr	r2, [pc, #60]	@ (8008170 <vPortEnterCritical+0x64>)
 8008132:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008134:	4b0e      	ldr	r3, [pc, #56]	@ (8008170 <vPortEnterCritical+0x64>)
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	2b01      	cmp	r3, #1
 800813a:	d112      	bne.n	8008162 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800813c:	4b0d      	ldr	r3, [pc, #52]	@ (8008174 <vPortEnterCritical+0x68>)
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	b2db      	uxtb	r3, r3
 8008142:	2b00      	cmp	r3, #0
 8008144:	d00d      	beq.n	8008162 <vPortEnterCritical+0x56>
	__asm volatile
 8008146:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800814a:	b672      	cpsid	i
 800814c:	f383 8811 	msr	BASEPRI, r3
 8008150:	f3bf 8f6f 	isb	sy
 8008154:	f3bf 8f4f 	dsb	sy
 8008158:	b662      	cpsie	i
 800815a:	603b      	str	r3, [r7, #0]
}
 800815c:	bf00      	nop
 800815e:	bf00      	nop
 8008160:	e7fd      	b.n	800815e <vPortEnterCritical+0x52>
	}
}
 8008162:	bf00      	nop
 8008164:	370c      	adds	r7, #12
 8008166:	46bd      	mov	sp, r7
 8008168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800816c:	4770      	bx	lr
 800816e:	bf00      	nop
 8008170:	2000000c 	.word	0x2000000c
 8008174:	e000ed04 	.word	0xe000ed04

08008178 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008178:	b480      	push	{r7}
 800817a:	b083      	sub	sp, #12
 800817c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800817e:	4b13      	ldr	r3, [pc, #76]	@ (80081cc <vPortExitCritical+0x54>)
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	2b00      	cmp	r3, #0
 8008184:	d10d      	bne.n	80081a2 <vPortExitCritical+0x2a>
	__asm volatile
 8008186:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800818a:	b672      	cpsid	i
 800818c:	f383 8811 	msr	BASEPRI, r3
 8008190:	f3bf 8f6f 	isb	sy
 8008194:	f3bf 8f4f 	dsb	sy
 8008198:	b662      	cpsie	i
 800819a:	607b      	str	r3, [r7, #4]
}
 800819c:	bf00      	nop
 800819e:	bf00      	nop
 80081a0:	e7fd      	b.n	800819e <vPortExitCritical+0x26>
	uxCriticalNesting--;
 80081a2:	4b0a      	ldr	r3, [pc, #40]	@ (80081cc <vPortExitCritical+0x54>)
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	3b01      	subs	r3, #1
 80081a8:	4a08      	ldr	r2, [pc, #32]	@ (80081cc <vPortExitCritical+0x54>)
 80081aa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80081ac:	4b07      	ldr	r3, [pc, #28]	@ (80081cc <vPortExitCritical+0x54>)
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d105      	bne.n	80081c0 <vPortExitCritical+0x48>
 80081b4:	2300      	movs	r3, #0
 80081b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80081b8:	683b      	ldr	r3, [r7, #0]
 80081ba:	f383 8811 	msr	BASEPRI, r3
}
 80081be:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80081c0:	bf00      	nop
 80081c2:	370c      	adds	r7, #12
 80081c4:	46bd      	mov	sp, r7
 80081c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ca:	4770      	bx	lr
 80081cc:	2000000c 	.word	0x2000000c

080081d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80081d0:	f3ef 8009 	mrs	r0, PSP
 80081d4:	f3bf 8f6f 	isb	sy
 80081d8:	4b15      	ldr	r3, [pc, #84]	@ (8008230 <pxCurrentTCBConst>)
 80081da:	681a      	ldr	r2, [r3, #0]
 80081dc:	f01e 0f10 	tst.w	lr, #16
 80081e0:	bf08      	it	eq
 80081e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80081e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081ea:	6010      	str	r0, [r2, #0]
 80081ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80081f0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80081f4:	b672      	cpsid	i
 80081f6:	f380 8811 	msr	BASEPRI, r0
 80081fa:	f3bf 8f4f 	dsb	sy
 80081fe:	f3bf 8f6f 	isb	sy
 8008202:	b662      	cpsie	i
 8008204:	f7fe ff9a 	bl	800713c <vTaskSwitchContext>
 8008208:	f04f 0000 	mov.w	r0, #0
 800820c:	f380 8811 	msr	BASEPRI, r0
 8008210:	bc09      	pop	{r0, r3}
 8008212:	6819      	ldr	r1, [r3, #0]
 8008214:	6808      	ldr	r0, [r1, #0]
 8008216:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800821a:	f01e 0f10 	tst.w	lr, #16
 800821e:	bf08      	it	eq
 8008220:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008224:	f380 8809 	msr	PSP, r0
 8008228:	f3bf 8f6f 	isb	sy
 800822c:	4770      	bx	lr
 800822e:	bf00      	nop

08008230 <pxCurrentTCBConst>:
 8008230:	200010e4 	.word	0x200010e4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008234:	bf00      	nop
 8008236:	bf00      	nop

08008238 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008238:	b580      	push	{r7, lr}
 800823a:	b082      	sub	sp, #8
 800823c:	af00      	add	r7, sp, #0
	__asm volatile
 800823e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008242:	b672      	cpsid	i
 8008244:	f383 8811 	msr	BASEPRI, r3
 8008248:	f3bf 8f6f 	isb	sy
 800824c:	f3bf 8f4f 	dsb	sy
 8008250:	b662      	cpsie	i
 8008252:	607b      	str	r3, [r7, #4]
}
 8008254:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008256:	f7fe feb5 	bl	8006fc4 <xTaskIncrementTick>
 800825a:	4603      	mov	r3, r0
 800825c:	2b00      	cmp	r3, #0
 800825e:	d003      	beq.n	8008268 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008260:	4b06      	ldr	r3, [pc, #24]	@ (800827c <SysTick_Handler+0x44>)
 8008262:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008266:	601a      	str	r2, [r3, #0]
 8008268:	2300      	movs	r3, #0
 800826a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800826c:	683b      	ldr	r3, [r7, #0]
 800826e:	f383 8811 	msr	BASEPRI, r3
}
 8008272:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008274:	bf00      	nop
 8008276:	3708      	adds	r7, #8
 8008278:	46bd      	mov	sp, r7
 800827a:	bd80      	pop	{r7, pc}
 800827c:	e000ed04 	.word	0xe000ed04

08008280 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008280:	b480      	push	{r7}
 8008282:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008284:	4b0b      	ldr	r3, [pc, #44]	@ (80082b4 <vPortSetupTimerInterrupt+0x34>)
 8008286:	2200      	movs	r2, #0
 8008288:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800828a:	4b0b      	ldr	r3, [pc, #44]	@ (80082b8 <vPortSetupTimerInterrupt+0x38>)
 800828c:	2200      	movs	r2, #0
 800828e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008290:	4b0a      	ldr	r3, [pc, #40]	@ (80082bc <vPortSetupTimerInterrupt+0x3c>)
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	4a0a      	ldr	r2, [pc, #40]	@ (80082c0 <vPortSetupTimerInterrupt+0x40>)
 8008296:	fba2 2303 	umull	r2, r3, r2, r3
 800829a:	099b      	lsrs	r3, r3, #6
 800829c:	4a09      	ldr	r2, [pc, #36]	@ (80082c4 <vPortSetupTimerInterrupt+0x44>)
 800829e:	3b01      	subs	r3, #1
 80082a0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80082a2:	4b04      	ldr	r3, [pc, #16]	@ (80082b4 <vPortSetupTimerInterrupt+0x34>)
 80082a4:	2207      	movs	r2, #7
 80082a6:	601a      	str	r2, [r3, #0]
}
 80082a8:	bf00      	nop
 80082aa:	46bd      	mov	sp, r7
 80082ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b0:	4770      	bx	lr
 80082b2:	bf00      	nop
 80082b4:	e000e010 	.word	0xe000e010
 80082b8:	e000e018 	.word	0xe000e018
 80082bc:	20000000 	.word	0x20000000
 80082c0:	10624dd3 	.word	0x10624dd3
 80082c4:	e000e014 	.word	0xe000e014

080082c8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80082c8:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80082d8 <vPortEnableVFP+0x10>
 80082cc:	6801      	ldr	r1, [r0, #0]
 80082ce:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80082d2:	6001      	str	r1, [r0, #0]
 80082d4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80082d6:	bf00      	nop
 80082d8:	e000ed88 	.word	0xe000ed88

080082dc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80082dc:	b480      	push	{r7}
 80082de:	b085      	sub	sp, #20
 80082e0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80082e2:	f3ef 8305 	mrs	r3, IPSR
 80082e6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	2b0f      	cmp	r3, #15
 80082ec:	d917      	bls.n	800831e <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80082ee:	4a1a      	ldr	r2, [pc, #104]	@ (8008358 <vPortValidateInterruptPriority+0x7c>)
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	4413      	add	r3, r2
 80082f4:	781b      	ldrb	r3, [r3, #0]
 80082f6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80082f8:	4b18      	ldr	r3, [pc, #96]	@ (800835c <vPortValidateInterruptPriority+0x80>)
 80082fa:	781b      	ldrb	r3, [r3, #0]
 80082fc:	7afa      	ldrb	r2, [r7, #11]
 80082fe:	429a      	cmp	r2, r3
 8008300:	d20d      	bcs.n	800831e <vPortValidateInterruptPriority+0x42>
	__asm volatile
 8008302:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008306:	b672      	cpsid	i
 8008308:	f383 8811 	msr	BASEPRI, r3
 800830c:	f3bf 8f6f 	isb	sy
 8008310:	f3bf 8f4f 	dsb	sy
 8008314:	b662      	cpsie	i
 8008316:	607b      	str	r3, [r7, #4]
}
 8008318:	bf00      	nop
 800831a:	bf00      	nop
 800831c:	e7fd      	b.n	800831a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800831e:	4b10      	ldr	r3, [pc, #64]	@ (8008360 <vPortValidateInterruptPriority+0x84>)
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8008326:	4b0f      	ldr	r3, [pc, #60]	@ (8008364 <vPortValidateInterruptPriority+0x88>)
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	429a      	cmp	r2, r3
 800832c:	d90d      	bls.n	800834a <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 800832e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008332:	b672      	cpsid	i
 8008334:	f383 8811 	msr	BASEPRI, r3
 8008338:	f3bf 8f6f 	isb	sy
 800833c:	f3bf 8f4f 	dsb	sy
 8008340:	b662      	cpsie	i
 8008342:	603b      	str	r3, [r7, #0]
}
 8008344:	bf00      	nop
 8008346:	bf00      	nop
 8008348:	e7fd      	b.n	8008346 <vPortValidateInterruptPriority+0x6a>
	}
 800834a:	bf00      	nop
 800834c:	3714      	adds	r7, #20
 800834e:	46bd      	mov	sp, r7
 8008350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008354:	4770      	bx	lr
 8008356:	bf00      	nop
 8008358:	e000e3f0 	.word	0xe000e3f0
 800835c:	20001710 	.word	0x20001710
 8008360:	e000ed0c 	.word	0xe000ed0c
 8008364:	20001714 	.word	0x20001714

08008368 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008368:	b580      	push	{r7, lr}
 800836a:	b08a      	sub	sp, #40	@ 0x28
 800836c:	af00      	add	r7, sp, #0
 800836e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008370:	2300      	movs	r3, #0
 8008372:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008374:	f7fe fd68 	bl	8006e48 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008378:	4b5d      	ldr	r3, [pc, #372]	@ (80084f0 <pvPortMalloc+0x188>)
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	2b00      	cmp	r3, #0
 800837e:	d101      	bne.n	8008384 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008380:	f000 f920 	bl	80085c4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008384:	4b5b      	ldr	r3, [pc, #364]	@ (80084f4 <pvPortMalloc+0x18c>)
 8008386:	681a      	ldr	r2, [r3, #0]
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	4013      	ands	r3, r2
 800838c:	2b00      	cmp	r3, #0
 800838e:	f040 8094 	bne.w	80084ba <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	2b00      	cmp	r3, #0
 8008396:	d020      	beq.n	80083da <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 8008398:	2208      	movs	r2, #8
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	4413      	add	r3, r2
 800839e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	f003 0307 	and.w	r3, r3, #7
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d017      	beq.n	80083da <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	f023 0307 	bic.w	r3, r3, #7
 80083b0:	3308      	adds	r3, #8
 80083b2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	f003 0307 	and.w	r3, r3, #7
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d00d      	beq.n	80083da <pvPortMalloc+0x72>
	__asm volatile
 80083be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083c2:	b672      	cpsid	i
 80083c4:	f383 8811 	msr	BASEPRI, r3
 80083c8:	f3bf 8f6f 	isb	sy
 80083cc:	f3bf 8f4f 	dsb	sy
 80083d0:	b662      	cpsie	i
 80083d2:	617b      	str	r3, [r7, #20]
}
 80083d4:	bf00      	nop
 80083d6:	bf00      	nop
 80083d8:	e7fd      	b.n	80083d6 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d06c      	beq.n	80084ba <pvPortMalloc+0x152>
 80083e0:	4b45      	ldr	r3, [pc, #276]	@ (80084f8 <pvPortMalloc+0x190>)
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	687a      	ldr	r2, [r7, #4]
 80083e6:	429a      	cmp	r2, r3
 80083e8:	d867      	bhi.n	80084ba <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80083ea:	4b44      	ldr	r3, [pc, #272]	@ (80084fc <pvPortMalloc+0x194>)
 80083ec:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80083ee:	4b43      	ldr	r3, [pc, #268]	@ (80084fc <pvPortMalloc+0x194>)
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80083f4:	e004      	b.n	8008400 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 80083f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083f8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80083fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008400:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008402:	685b      	ldr	r3, [r3, #4]
 8008404:	687a      	ldr	r2, [r7, #4]
 8008406:	429a      	cmp	r2, r3
 8008408:	d903      	bls.n	8008412 <pvPortMalloc+0xaa>
 800840a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	2b00      	cmp	r3, #0
 8008410:	d1f1      	bne.n	80083f6 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008412:	4b37      	ldr	r3, [pc, #220]	@ (80084f0 <pvPortMalloc+0x188>)
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008418:	429a      	cmp	r2, r3
 800841a:	d04e      	beq.n	80084ba <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800841c:	6a3b      	ldr	r3, [r7, #32]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	2208      	movs	r2, #8
 8008422:	4413      	add	r3, r2
 8008424:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008426:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008428:	681a      	ldr	r2, [r3, #0]
 800842a:	6a3b      	ldr	r3, [r7, #32]
 800842c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800842e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008430:	685a      	ldr	r2, [r3, #4]
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	1ad2      	subs	r2, r2, r3
 8008436:	2308      	movs	r3, #8
 8008438:	005b      	lsls	r3, r3, #1
 800843a:	429a      	cmp	r2, r3
 800843c:	d922      	bls.n	8008484 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800843e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	4413      	add	r3, r2
 8008444:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008446:	69bb      	ldr	r3, [r7, #24]
 8008448:	f003 0307 	and.w	r3, r3, #7
 800844c:	2b00      	cmp	r3, #0
 800844e:	d00d      	beq.n	800846c <pvPortMalloc+0x104>
	__asm volatile
 8008450:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008454:	b672      	cpsid	i
 8008456:	f383 8811 	msr	BASEPRI, r3
 800845a:	f3bf 8f6f 	isb	sy
 800845e:	f3bf 8f4f 	dsb	sy
 8008462:	b662      	cpsie	i
 8008464:	613b      	str	r3, [r7, #16]
}
 8008466:	bf00      	nop
 8008468:	bf00      	nop
 800846a:	e7fd      	b.n	8008468 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800846c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800846e:	685a      	ldr	r2, [r3, #4]
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	1ad2      	subs	r2, r2, r3
 8008474:	69bb      	ldr	r3, [r7, #24]
 8008476:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008478:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800847a:	687a      	ldr	r2, [r7, #4]
 800847c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800847e:	69b8      	ldr	r0, [r7, #24]
 8008480:	f000 f902 	bl	8008688 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008484:	4b1c      	ldr	r3, [pc, #112]	@ (80084f8 <pvPortMalloc+0x190>)
 8008486:	681a      	ldr	r2, [r3, #0]
 8008488:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800848a:	685b      	ldr	r3, [r3, #4]
 800848c:	1ad3      	subs	r3, r2, r3
 800848e:	4a1a      	ldr	r2, [pc, #104]	@ (80084f8 <pvPortMalloc+0x190>)
 8008490:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008492:	4b19      	ldr	r3, [pc, #100]	@ (80084f8 <pvPortMalloc+0x190>)
 8008494:	681a      	ldr	r2, [r3, #0]
 8008496:	4b1a      	ldr	r3, [pc, #104]	@ (8008500 <pvPortMalloc+0x198>)
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	429a      	cmp	r2, r3
 800849c:	d203      	bcs.n	80084a6 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800849e:	4b16      	ldr	r3, [pc, #88]	@ (80084f8 <pvPortMalloc+0x190>)
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	4a17      	ldr	r2, [pc, #92]	@ (8008500 <pvPortMalloc+0x198>)
 80084a4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80084a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084a8:	685a      	ldr	r2, [r3, #4]
 80084aa:	4b12      	ldr	r3, [pc, #72]	@ (80084f4 <pvPortMalloc+0x18c>)
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	431a      	orrs	r2, r3
 80084b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084b2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80084b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084b6:	2200      	movs	r2, #0
 80084b8:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80084ba:	f7fe fcd3 	bl	8006e64 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80084be:	69fb      	ldr	r3, [r7, #28]
 80084c0:	f003 0307 	and.w	r3, r3, #7
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d00d      	beq.n	80084e4 <pvPortMalloc+0x17c>
	__asm volatile
 80084c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084cc:	b672      	cpsid	i
 80084ce:	f383 8811 	msr	BASEPRI, r3
 80084d2:	f3bf 8f6f 	isb	sy
 80084d6:	f3bf 8f4f 	dsb	sy
 80084da:	b662      	cpsie	i
 80084dc:	60fb      	str	r3, [r7, #12]
}
 80084de:	bf00      	nop
 80084e0:	bf00      	nop
 80084e2:	e7fd      	b.n	80084e0 <pvPortMalloc+0x178>
	return pvReturn;
 80084e4:	69fb      	ldr	r3, [r7, #28]
}
 80084e6:	4618      	mov	r0, r3
 80084e8:	3728      	adds	r7, #40	@ 0x28
 80084ea:	46bd      	mov	sp, r7
 80084ec:	bd80      	pop	{r7, pc}
 80084ee:	bf00      	nop
 80084f0:	20005320 	.word	0x20005320
 80084f4:	2000532c 	.word	0x2000532c
 80084f8:	20005324 	.word	0x20005324
 80084fc:	20005318 	.word	0x20005318
 8008500:	20005328 	.word	0x20005328

08008504 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008504:	b580      	push	{r7, lr}
 8008506:	b086      	sub	sp, #24
 8008508:	af00      	add	r7, sp, #0
 800850a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	2b00      	cmp	r3, #0
 8008514:	d04e      	beq.n	80085b4 <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008516:	2308      	movs	r3, #8
 8008518:	425b      	negs	r3, r3
 800851a:	697a      	ldr	r2, [r7, #20]
 800851c:	4413      	add	r3, r2
 800851e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008520:	697b      	ldr	r3, [r7, #20]
 8008522:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008524:	693b      	ldr	r3, [r7, #16]
 8008526:	685a      	ldr	r2, [r3, #4]
 8008528:	4b24      	ldr	r3, [pc, #144]	@ (80085bc <vPortFree+0xb8>)
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	4013      	ands	r3, r2
 800852e:	2b00      	cmp	r3, #0
 8008530:	d10d      	bne.n	800854e <vPortFree+0x4a>
	__asm volatile
 8008532:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008536:	b672      	cpsid	i
 8008538:	f383 8811 	msr	BASEPRI, r3
 800853c:	f3bf 8f6f 	isb	sy
 8008540:	f3bf 8f4f 	dsb	sy
 8008544:	b662      	cpsie	i
 8008546:	60fb      	str	r3, [r7, #12]
}
 8008548:	bf00      	nop
 800854a:	bf00      	nop
 800854c:	e7fd      	b.n	800854a <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800854e:	693b      	ldr	r3, [r7, #16]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	2b00      	cmp	r3, #0
 8008554:	d00d      	beq.n	8008572 <vPortFree+0x6e>
	__asm volatile
 8008556:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800855a:	b672      	cpsid	i
 800855c:	f383 8811 	msr	BASEPRI, r3
 8008560:	f3bf 8f6f 	isb	sy
 8008564:	f3bf 8f4f 	dsb	sy
 8008568:	b662      	cpsie	i
 800856a:	60bb      	str	r3, [r7, #8]
}
 800856c:	bf00      	nop
 800856e:	bf00      	nop
 8008570:	e7fd      	b.n	800856e <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008572:	693b      	ldr	r3, [r7, #16]
 8008574:	685a      	ldr	r2, [r3, #4]
 8008576:	4b11      	ldr	r3, [pc, #68]	@ (80085bc <vPortFree+0xb8>)
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	4013      	ands	r3, r2
 800857c:	2b00      	cmp	r3, #0
 800857e:	d019      	beq.n	80085b4 <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008580:	693b      	ldr	r3, [r7, #16]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	2b00      	cmp	r3, #0
 8008586:	d115      	bne.n	80085b4 <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008588:	693b      	ldr	r3, [r7, #16]
 800858a:	685a      	ldr	r2, [r3, #4]
 800858c:	4b0b      	ldr	r3, [pc, #44]	@ (80085bc <vPortFree+0xb8>)
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	43db      	mvns	r3, r3
 8008592:	401a      	ands	r2, r3
 8008594:	693b      	ldr	r3, [r7, #16]
 8008596:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008598:	f7fe fc56 	bl	8006e48 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800859c:	693b      	ldr	r3, [r7, #16]
 800859e:	685a      	ldr	r2, [r3, #4]
 80085a0:	4b07      	ldr	r3, [pc, #28]	@ (80085c0 <vPortFree+0xbc>)
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	4413      	add	r3, r2
 80085a6:	4a06      	ldr	r2, [pc, #24]	@ (80085c0 <vPortFree+0xbc>)
 80085a8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80085aa:	6938      	ldr	r0, [r7, #16]
 80085ac:	f000 f86c 	bl	8008688 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80085b0:	f7fe fc58 	bl	8006e64 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80085b4:	bf00      	nop
 80085b6:	3718      	adds	r7, #24
 80085b8:	46bd      	mov	sp, r7
 80085ba:	bd80      	pop	{r7, pc}
 80085bc:	2000532c 	.word	0x2000532c
 80085c0:	20005324 	.word	0x20005324

080085c4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80085c4:	b480      	push	{r7}
 80085c6:	b085      	sub	sp, #20
 80085c8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80085ca:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80085ce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80085d0:	4b27      	ldr	r3, [pc, #156]	@ (8008670 <prvHeapInit+0xac>)
 80085d2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	f003 0307 	and.w	r3, r3, #7
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d00c      	beq.n	80085f8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	3307      	adds	r3, #7
 80085e2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	f023 0307 	bic.w	r3, r3, #7
 80085ea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80085ec:	68ba      	ldr	r2, [r7, #8]
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	1ad3      	subs	r3, r2, r3
 80085f2:	4a1f      	ldr	r2, [pc, #124]	@ (8008670 <prvHeapInit+0xac>)
 80085f4:	4413      	add	r3, r2
 80085f6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80085fc:	4a1d      	ldr	r2, [pc, #116]	@ (8008674 <prvHeapInit+0xb0>)
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008602:	4b1c      	ldr	r3, [pc, #112]	@ (8008674 <prvHeapInit+0xb0>)
 8008604:	2200      	movs	r2, #0
 8008606:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	68ba      	ldr	r2, [r7, #8]
 800860c:	4413      	add	r3, r2
 800860e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008610:	2208      	movs	r2, #8
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	1a9b      	subs	r3, r3, r2
 8008616:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	f023 0307 	bic.w	r3, r3, #7
 800861e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	4a15      	ldr	r2, [pc, #84]	@ (8008678 <prvHeapInit+0xb4>)
 8008624:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008626:	4b14      	ldr	r3, [pc, #80]	@ (8008678 <prvHeapInit+0xb4>)
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	2200      	movs	r2, #0
 800862c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800862e:	4b12      	ldr	r3, [pc, #72]	@ (8008678 <prvHeapInit+0xb4>)
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	2200      	movs	r2, #0
 8008634:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800863a:	683b      	ldr	r3, [r7, #0]
 800863c:	68fa      	ldr	r2, [r7, #12]
 800863e:	1ad2      	subs	r2, r2, r3
 8008640:	683b      	ldr	r3, [r7, #0]
 8008642:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008644:	4b0c      	ldr	r3, [pc, #48]	@ (8008678 <prvHeapInit+0xb4>)
 8008646:	681a      	ldr	r2, [r3, #0]
 8008648:	683b      	ldr	r3, [r7, #0]
 800864a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800864c:	683b      	ldr	r3, [r7, #0]
 800864e:	685b      	ldr	r3, [r3, #4]
 8008650:	4a0a      	ldr	r2, [pc, #40]	@ (800867c <prvHeapInit+0xb8>)
 8008652:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008654:	683b      	ldr	r3, [r7, #0]
 8008656:	685b      	ldr	r3, [r3, #4]
 8008658:	4a09      	ldr	r2, [pc, #36]	@ (8008680 <prvHeapInit+0xbc>)
 800865a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800865c:	4b09      	ldr	r3, [pc, #36]	@ (8008684 <prvHeapInit+0xc0>)
 800865e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8008662:	601a      	str	r2, [r3, #0]
}
 8008664:	bf00      	nop
 8008666:	3714      	adds	r7, #20
 8008668:	46bd      	mov	sp, r7
 800866a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800866e:	4770      	bx	lr
 8008670:	20001718 	.word	0x20001718
 8008674:	20005318 	.word	0x20005318
 8008678:	20005320 	.word	0x20005320
 800867c:	20005328 	.word	0x20005328
 8008680:	20005324 	.word	0x20005324
 8008684:	2000532c 	.word	0x2000532c

08008688 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008688:	b480      	push	{r7}
 800868a:	b085      	sub	sp, #20
 800868c:	af00      	add	r7, sp, #0
 800868e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008690:	4b28      	ldr	r3, [pc, #160]	@ (8008734 <prvInsertBlockIntoFreeList+0xac>)
 8008692:	60fb      	str	r3, [r7, #12]
 8008694:	e002      	b.n	800869c <prvInsertBlockIntoFreeList+0x14>
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	60fb      	str	r3, [r7, #12]
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	687a      	ldr	r2, [r7, #4]
 80086a2:	429a      	cmp	r2, r3
 80086a4:	d8f7      	bhi.n	8008696 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	685b      	ldr	r3, [r3, #4]
 80086ae:	68ba      	ldr	r2, [r7, #8]
 80086b0:	4413      	add	r3, r2
 80086b2:	687a      	ldr	r2, [r7, #4]
 80086b4:	429a      	cmp	r2, r3
 80086b6:	d108      	bne.n	80086ca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	685a      	ldr	r2, [r3, #4]
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	685b      	ldr	r3, [r3, #4]
 80086c0:	441a      	add	r2, r3
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	685b      	ldr	r3, [r3, #4]
 80086d2:	68ba      	ldr	r2, [r7, #8]
 80086d4:	441a      	add	r2, r3
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	429a      	cmp	r2, r3
 80086dc:	d118      	bne.n	8008710 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	681a      	ldr	r2, [r3, #0]
 80086e2:	4b15      	ldr	r3, [pc, #84]	@ (8008738 <prvInsertBlockIntoFreeList+0xb0>)
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	429a      	cmp	r2, r3
 80086e8:	d00d      	beq.n	8008706 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	685a      	ldr	r2, [r3, #4]
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	685b      	ldr	r3, [r3, #4]
 80086f4:	441a      	add	r2, r3
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	681a      	ldr	r2, [r3, #0]
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	601a      	str	r2, [r3, #0]
 8008704:	e008      	b.n	8008718 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008706:	4b0c      	ldr	r3, [pc, #48]	@ (8008738 <prvInsertBlockIntoFreeList+0xb0>)
 8008708:	681a      	ldr	r2, [r3, #0]
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	601a      	str	r2, [r3, #0]
 800870e:	e003      	b.n	8008718 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	681a      	ldr	r2, [r3, #0]
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008718:	68fa      	ldr	r2, [r7, #12]
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	429a      	cmp	r2, r3
 800871e:	d002      	beq.n	8008726 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	687a      	ldr	r2, [r7, #4]
 8008724:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008726:	bf00      	nop
 8008728:	3714      	adds	r7, #20
 800872a:	46bd      	mov	sp, r7
 800872c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008730:	4770      	bx	lr
 8008732:	bf00      	nop
 8008734:	20005318 	.word	0x20005318
 8008738:	20005320 	.word	0x20005320

0800873c <srand>:
 800873c:	b538      	push	{r3, r4, r5, lr}
 800873e:	4b10      	ldr	r3, [pc, #64]	@ (8008780 <srand+0x44>)
 8008740:	681d      	ldr	r5, [r3, #0]
 8008742:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8008744:	4604      	mov	r4, r0
 8008746:	b9b3      	cbnz	r3, 8008776 <srand+0x3a>
 8008748:	2018      	movs	r0, #24
 800874a:	f001 fd7f 	bl	800a24c <malloc>
 800874e:	4602      	mov	r2, r0
 8008750:	6328      	str	r0, [r5, #48]	@ 0x30
 8008752:	b920      	cbnz	r0, 800875e <srand+0x22>
 8008754:	4b0b      	ldr	r3, [pc, #44]	@ (8008784 <srand+0x48>)
 8008756:	480c      	ldr	r0, [pc, #48]	@ (8008788 <srand+0x4c>)
 8008758:	2146      	movs	r1, #70	@ 0x46
 800875a:	f000 feb5 	bl	80094c8 <__assert_func>
 800875e:	490b      	ldr	r1, [pc, #44]	@ (800878c <srand+0x50>)
 8008760:	4b0b      	ldr	r3, [pc, #44]	@ (8008790 <srand+0x54>)
 8008762:	e9c0 1300 	strd	r1, r3, [r0]
 8008766:	4b0b      	ldr	r3, [pc, #44]	@ (8008794 <srand+0x58>)
 8008768:	6083      	str	r3, [r0, #8]
 800876a:	230b      	movs	r3, #11
 800876c:	8183      	strh	r3, [r0, #12]
 800876e:	2100      	movs	r1, #0
 8008770:	2001      	movs	r0, #1
 8008772:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8008776:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8008778:	2200      	movs	r2, #0
 800877a:	611c      	str	r4, [r3, #16]
 800877c:	615a      	str	r2, [r3, #20]
 800877e:	bd38      	pop	{r3, r4, r5, pc}
 8008780:	2000001c 	.word	0x2000001c
 8008784:	0800b350 	.word	0x0800b350
 8008788:	0800b367 	.word	0x0800b367
 800878c:	abcd330e 	.word	0xabcd330e
 8008790:	e66d1234 	.word	0xe66d1234
 8008794:	0005deec 	.word	0x0005deec

08008798 <rand>:
 8008798:	4b16      	ldr	r3, [pc, #88]	@ (80087f4 <rand+0x5c>)
 800879a:	b510      	push	{r4, lr}
 800879c:	681c      	ldr	r4, [r3, #0]
 800879e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80087a0:	b9b3      	cbnz	r3, 80087d0 <rand+0x38>
 80087a2:	2018      	movs	r0, #24
 80087a4:	f001 fd52 	bl	800a24c <malloc>
 80087a8:	4602      	mov	r2, r0
 80087aa:	6320      	str	r0, [r4, #48]	@ 0x30
 80087ac:	b920      	cbnz	r0, 80087b8 <rand+0x20>
 80087ae:	4b12      	ldr	r3, [pc, #72]	@ (80087f8 <rand+0x60>)
 80087b0:	4812      	ldr	r0, [pc, #72]	@ (80087fc <rand+0x64>)
 80087b2:	2152      	movs	r1, #82	@ 0x52
 80087b4:	f000 fe88 	bl	80094c8 <__assert_func>
 80087b8:	4911      	ldr	r1, [pc, #68]	@ (8008800 <rand+0x68>)
 80087ba:	4b12      	ldr	r3, [pc, #72]	@ (8008804 <rand+0x6c>)
 80087bc:	e9c0 1300 	strd	r1, r3, [r0]
 80087c0:	4b11      	ldr	r3, [pc, #68]	@ (8008808 <rand+0x70>)
 80087c2:	6083      	str	r3, [r0, #8]
 80087c4:	230b      	movs	r3, #11
 80087c6:	8183      	strh	r3, [r0, #12]
 80087c8:	2100      	movs	r1, #0
 80087ca:	2001      	movs	r0, #1
 80087cc:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80087d0:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80087d2:	480e      	ldr	r0, [pc, #56]	@ (800880c <rand+0x74>)
 80087d4:	690b      	ldr	r3, [r1, #16]
 80087d6:	694c      	ldr	r4, [r1, #20]
 80087d8:	4a0d      	ldr	r2, [pc, #52]	@ (8008810 <rand+0x78>)
 80087da:	4358      	muls	r0, r3
 80087dc:	fb02 0004 	mla	r0, r2, r4, r0
 80087e0:	fba3 3202 	umull	r3, r2, r3, r2
 80087e4:	3301      	adds	r3, #1
 80087e6:	eb40 0002 	adc.w	r0, r0, r2
 80087ea:	e9c1 3004 	strd	r3, r0, [r1, #16]
 80087ee:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 80087f2:	bd10      	pop	{r4, pc}
 80087f4:	2000001c 	.word	0x2000001c
 80087f8:	0800b350 	.word	0x0800b350
 80087fc:	0800b367 	.word	0x0800b367
 8008800:	abcd330e 	.word	0xabcd330e
 8008804:	e66d1234 	.word	0xe66d1234
 8008808:	0005deec 	.word	0x0005deec
 800880c:	5851f42d 	.word	0x5851f42d
 8008810:	4c957f2d 	.word	0x4c957f2d

08008814 <__cvt>:
 8008814:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008818:	ec57 6b10 	vmov	r6, r7, d0
 800881c:	2f00      	cmp	r7, #0
 800881e:	460c      	mov	r4, r1
 8008820:	4619      	mov	r1, r3
 8008822:	463b      	mov	r3, r7
 8008824:	bfbb      	ittet	lt
 8008826:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800882a:	461f      	movlt	r7, r3
 800882c:	2300      	movge	r3, #0
 800882e:	232d      	movlt	r3, #45	@ 0x2d
 8008830:	700b      	strb	r3, [r1, #0]
 8008832:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008834:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8008838:	4691      	mov	r9, r2
 800883a:	f023 0820 	bic.w	r8, r3, #32
 800883e:	bfbc      	itt	lt
 8008840:	4632      	movlt	r2, r6
 8008842:	4616      	movlt	r6, r2
 8008844:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008848:	d005      	beq.n	8008856 <__cvt+0x42>
 800884a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800884e:	d100      	bne.n	8008852 <__cvt+0x3e>
 8008850:	3401      	adds	r4, #1
 8008852:	2102      	movs	r1, #2
 8008854:	e000      	b.n	8008858 <__cvt+0x44>
 8008856:	2103      	movs	r1, #3
 8008858:	ab03      	add	r3, sp, #12
 800885a:	9301      	str	r3, [sp, #4]
 800885c:	ab02      	add	r3, sp, #8
 800885e:	9300      	str	r3, [sp, #0]
 8008860:	ec47 6b10 	vmov	d0, r6, r7
 8008864:	4653      	mov	r3, sl
 8008866:	4622      	mov	r2, r4
 8008868:	f000 fed6 	bl	8009618 <_dtoa_r>
 800886c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8008870:	4605      	mov	r5, r0
 8008872:	d119      	bne.n	80088a8 <__cvt+0x94>
 8008874:	f019 0f01 	tst.w	r9, #1
 8008878:	d00e      	beq.n	8008898 <__cvt+0x84>
 800887a:	eb00 0904 	add.w	r9, r0, r4
 800887e:	2200      	movs	r2, #0
 8008880:	2300      	movs	r3, #0
 8008882:	4630      	mov	r0, r6
 8008884:	4639      	mov	r1, r7
 8008886:	f7f8 f93f 	bl	8000b08 <__aeabi_dcmpeq>
 800888a:	b108      	cbz	r0, 8008890 <__cvt+0x7c>
 800888c:	f8cd 900c 	str.w	r9, [sp, #12]
 8008890:	2230      	movs	r2, #48	@ 0x30
 8008892:	9b03      	ldr	r3, [sp, #12]
 8008894:	454b      	cmp	r3, r9
 8008896:	d31e      	bcc.n	80088d6 <__cvt+0xc2>
 8008898:	9b03      	ldr	r3, [sp, #12]
 800889a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800889c:	1b5b      	subs	r3, r3, r5
 800889e:	4628      	mov	r0, r5
 80088a0:	6013      	str	r3, [r2, #0]
 80088a2:	b004      	add	sp, #16
 80088a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80088a8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80088ac:	eb00 0904 	add.w	r9, r0, r4
 80088b0:	d1e5      	bne.n	800887e <__cvt+0x6a>
 80088b2:	7803      	ldrb	r3, [r0, #0]
 80088b4:	2b30      	cmp	r3, #48	@ 0x30
 80088b6:	d10a      	bne.n	80088ce <__cvt+0xba>
 80088b8:	2200      	movs	r2, #0
 80088ba:	2300      	movs	r3, #0
 80088bc:	4630      	mov	r0, r6
 80088be:	4639      	mov	r1, r7
 80088c0:	f7f8 f922 	bl	8000b08 <__aeabi_dcmpeq>
 80088c4:	b918      	cbnz	r0, 80088ce <__cvt+0xba>
 80088c6:	f1c4 0401 	rsb	r4, r4, #1
 80088ca:	f8ca 4000 	str.w	r4, [sl]
 80088ce:	f8da 3000 	ldr.w	r3, [sl]
 80088d2:	4499      	add	r9, r3
 80088d4:	e7d3      	b.n	800887e <__cvt+0x6a>
 80088d6:	1c59      	adds	r1, r3, #1
 80088d8:	9103      	str	r1, [sp, #12]
 80088da:	701a      	strb	r2, [r3, #0]
 80088dc:	e7d9      	b.n	8008892 <__cvt+0x7e>

080088de <__exponent>:
 80088de:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80088e0:	2900      	cmp	r1, #0
 80088e2:	bfba      	itte	lt
 80088e4:	4249      	neglt	r1, r1
 80088e6:	232d      	movlt	r3, #45	@ 0x2d
 80088e8:	232b      	movge	r3, #43	@ 0x2b
 80088ea:	2909      	cmp	r1, #9
 80088ec:	7002      	strb	r2, [r0, #0]
 80088ee:	7043      	strb	r3, [r0, #1]
 80088f0:	dd29      	ble.n	8008946 <__exponent+0x68>
 80088f2:	f10d 0307 	add.w	r3, sp, #7
 80088f6:	461d      	mov	r5, r3
 80088f8:	270a      	movs	r7, #10
 80088fa:	461a      	mov	r2, r3
 80088fc:	fbb1 f6f7 	udiv	r6, r1, r7
 8008900:	fb07 1416 	mls	r4, r7, r6, r1
 8008904:	3430      	adds	r4, #48	@ 0x30
 8008906:	f802 4c01 	strb.w	r4, [r2, #-1]
 800890a:	460c      	mov	r4, r1
 800890c:	2c63      	cmp	r4, #99	@ 0x63
 800890e:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8008912:	4631      	mov	r1, r6
 8008914:	dcf1      	bgt.n	80088fa <__exponent+0x1c>
 8008916:	3130      	adds	r1, #48	@ 0x30
 8008918:	1e94      	subs	r4, r2, #2
 800891a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800891e:	1c41      	adds	r1, r0, #1
 8008920:	4623      	mov	r3, r4
 8008922:	42ab      	cmp	r3, r5
 8008924:	d30a      	bcc.n	800893c <__exponent+0x5e>
 8008926:	f10d 0309 	add.w	r3, sp, #9
 800892a:	1a9b      	subs	r3, r3, r2
 800892c:	42ac      	cmp	r4, r5
 800892e:	bf88      	it	hi
 8008930:	2300      	movhi	r3, #0
 8008932:	3302      	adds	r3, #2
 8008934:	4403      	add	r3, r0
 8008936:	1a18      	subs	r0, r3, r0
 8008938:	b003      	add	sp, #12
 800893a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800893c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8008940:	f801 6f01 	strb.w	r6, [r1, #1]!
 8008944:	e7ed      	b.n	8008922 <__exponent+0x44>
 8008946:	2330      	movs	r3, #48	@ 0x30
 8008948:	3130      	adds	r1, #48	@ 0x30
 800894a:	7083      	strb	r3, [r0, #2]
 800894c:	70c1      	strb	r1, [r0, #3]
 800894e:	1d03      	adds	r3, r0, #4
 8008950:	e7f1      	b.n	8008936 <__exponent+0x58>
	...

08008954 <_printf_float>:
 8008954:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008958:	b08d      	sub	sp, #52	@ 0x34
 800895a:	460c      	mov	r4, r1
 800895c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8008960:	4616      	mov	r6, r2
 8008962:	461f      	mov	r7, r3
 8008964:	4605      	mov	r5, r0
 8008966:	f000 fccb 	bl	8009300 <_localeconv_r>
 800896a:	6803      	ldr	r3, [r0, #0]
 800896c:	9304      	str	r3, [sp, #16]
 800896e:	4618      	mov	r0, r3
 8008970:	f7f7 fc9e 	bl	80002b0 <strlen>
 8008974:	2300      	movs	r3, #0
 8008976:	930a      	str	r3, [sp, #40]	@ 0x28
 8008978:	f8d8 3000 	ldr.w	r3, [r8]
 800897c:	9005      	str	r0, [sp, #20]
 800897e:	3307      	adds	r3, #7
 8008980:	f023 0307 	bic.w	r3, r3, #7
 8008984:	f103 0208 	add.w	r2, r3, #8
 8008988:	f894 a018 	ldrb.w	sl, [r4, #24]
 800898c:	f8d4 b000 	ldr.w	fp, [r4]
 8008990:	f8c8 2000 	str.w	r2, [r8]
 8008994:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008998:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800899c:	9307      	str	r3, [sp, #28]
 800899e:	f8cd 8018 	str.w	r8, [sp, #24]
 80089a2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80089a6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80089aa:	4b9c      	ldr	r3, [pc, #624]	@ (8008c1c <_printf_float+0x2c8>)
 80089ac:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80089b0:	f7f8 f8dc 	bl	8000b6c <__aeabi_dcmpun>
 80089b4:	bb70      	cbnz	r0, 8008a14 <_printf_float+0xc0>
 80089b6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80089ba:	4b98      	ldr	r3, [pc, #608]	@ (8008c1c <_printf_float+0x2c8>)
 80089bc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80089c0:	f7f8 f8b6 	bl	8000b30 <__aeabi_dcmple>
 80089c4:	bb30      	cbnz	r0, 8008a14 <_printf_float+0xc0>
 80089c6:	2200      	movs	r2, #0
 80089c8:	2300      	movs	r3, #0
 80089ca:	4640      	mov	r0, r8
 80089cc:	4649      	mov	r1, r9
 80089ce:	f7f8 f8a5 	bl	8000b1c <__aeabi_dcmplt>
 80089d2:	b110      	cbz	r0, 80089da <_printf_float+0x86>
 80089d4:	232d      	movs	r3, #45	@ 0x2d
 80089d6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80089da:	4a91      	ldr	r2, [pc, #580]	@ (8008c20 <_printf_float+0x2cc>)
 80089dc:	4b91      	ldr	r3, [pc, #580]	@ (8008c24 <_printf_float+0x2d0>)
 80089de:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80089e2:	bf8c      	ite	hi
 80089e4:	4690      	movhi	r8, r2
 80089e6:	4698      	movls	r8, r3
 80089e8:	2303      	movs	r3, #3
 80089ea:	6123      	str	r3, [r4, #16]
 80089ec:	f02b 0304 	bic.w	r3, fp, #4
 80089f0:	6023      	str	r3, [r4, #0]
 80089f2:	f04f 0900 	mov.w	r9, #0
 80089f6:	9700      	str	r7, [sp, #0]
 80089f8:	4633      	mov	r3, r6
 80089fa:	aa0b      	add	r2, sp, #44	@ 0x2c
 80089fc:	4621      	mov	r1, r4
 80089fe:	4628      	mov	r0, r5
 8008a00:	f000 f9d2 	bl	8008da8 <_printf_common>
 8008a04:	3001      	adds	r0, #1
 8008a06:	f040 808d 	bne.w	8008b24 <_printf_float+0x1d0>
 8008a0a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008a0e:	b00d      	add	sp, #52	@ 0x34
 8008a10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a14:	4642      	mov	r2, r8
 8008a16:	464b      	mov	r3, r9
 8008a18:	4640      	mov	r0, r8
 8008a1a:	4649      	mov	r1, r9
 8008a1c:	f7f8 f8a6 	bl	8000b6c <__aeabi_dcmpun>
 8008a20:	b140      	cbz	r0, 8008a34 <_printf_float+0xe0>
 8008a22:	464b      	mov	r3, r9
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	bfbc      	itt	lt
 8008a28:	232d      	movlt	r3, #45	@ 0x2d
 8008a2a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8008a2e:	4a7e      	ldr	r2, [pc, #504]	@ (8008c28 <_printf_float+0x2d4>)
 8008a30:	4b7e      	ldr	r3, [pc, #504]	@ (8008c2c <_printf_float+0x2d8>)
 8008a32:	e7d4      	b.n	80089de <_printf_float+0x8a>
 8008a34:	6863      	ldr	r3, [r4, #4]
 8008a36:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8008a3a:	9206      	str	r2, [sp, #24]
 8008a3c:	1c5a      	adds	r2, r3, #1
 8008a3e:	d13b      	bne.n	8008ab8 <_printf_float+0x164>
 8008a40:	2306      	movs	r3, #6
 8008a42:	6063      	str	r3, [r4, #4]
 8008a44:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8008a48:	2300      	movs	r3, #0
 8008a4a:	6022      	str	r2, [r4, #0]
 8008a4c:	9303      	str	r3, [sp, #12]
 8008a4e:	ab0a      	add	r3, sp, #40	@ 0x28
 8008a50:	e9cd a301 	strd	sl, r3, [sp, #4]
 8008a54:	ab09      	add	r3, sp, #36	@ 0x24
 8008a56:	9300      	str	r3, [sp, #0]
 8008a58:	6861      	ldr	r1, [r4, #4]
 8008a5a:	ec49 8b10 	vmov	d0, r8, r9
 8008a5e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8008a62:	4628      	mov	r0, r5
 8008a64:	f7ff fed6 	bl	8008814 <__cvt>
 8008a68:	9b06      	ldr	r3, [sp, #24]
 8008a6a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008a6c:	2b47      	cmp	r3, #71	@ 0x47
 8008a6e:	4680      	mov	r8, r0
 8008a70:	d129      	bne.n	8008ac6 <_printf_float+0x172>
 8008a72:	1cc8      	adds	r0, r1, #3
 8008a74:	db02      	blt.n	8008a7c <_printf_float+0x128>
 8008a76:	6863      	ldr	r3, [r4, #4]
 8008a78:	4299      	cmp	r1, r3
 8008a7a:	dd41      	ble.n	8008b00 <_printf_float+0x1ac>
 8008a7c:	f1aa 0a02 	sub.w	sl, sl, #2
 8008a80:	fa5f fa8a 	uxtb.w	sl, sl
 8008a84:	3901      	subs	r1, #1
 8008a86:	4652      	mov	r2, sl
 8008a88:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8008a8c:	9109      	str	r1, [sp, #36]	@ 0x24
 8008a8e:	f7ff ff26 	bl	80088de <__exponent>
 8008a92:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008a94:	1813      	adds	r3, r2, r0
 8008a96:	2a01      	cmp	r2, #1
 8008a98:	4681      	mov	r9, r0
 8008a9a:	6123      	str	r3, [r4, #16]
 8008a9c:	dc02      	bgt.n	8008aa4 <_printf_float+0x150>
 8008a9e:	6822      	ldr	r2, [r4, #0]
 8008aa0:	07d2      	lsls	r2, r2, #31
 8008aa2:	d501      	bpl.n	8008aa8 <_printf_float+0x154>
 8008aa4:	3301      	adds	r3, #1
 8008aa6:	6123      	str	r3, [r4, #16]
 8008aa8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d0a2      	beq.n	80089f6 <_printf_float+0xa2>
 8008ab0:	232d      	movs	r3, #45	@ 0x2d
 8008ab2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008ab6:	e79e      	b.n	80089f6 <_printf_float+0xa2>
 8008ab8:	9a06      	ldr	r2, [sp, #24]
 8008aba:	2a47      	cmp	r2, #71	@ 0x47
 8008abc:	d1c2      	bne.n	8008a44 <_printf_float+0xf0>
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d1c0      	bne.n	8008a44 <_printf_float+0xf0>
 8008ac2:	2301      	movs	r3, #1
 8008ac4:	e7bd      	b.n	8008a42 <_printf_float+0xee>
 8008ac6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008aca:	d9db      	bls.n	8008a84 <_printf_float+0x130>
 8008acc:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8008ad0:	d118      	bne.n	8008b04 <_printf_float+0x1b0>
 8008ad2:	2900      	cmp	r1, #0
 8008ad4:	6863      	ldr	r3, [r4, #4]
 8008ad6:	dd0b      	ble.n	8008af0 <_printf_float+0x19c>
 8008ad8:	6121      	str	r1, [r4, #16]
 8008ada:	b913      	cbnz	r3, 8008ae2 <_printf_float+0x18e>
 8008adc:	6822      	ldr	r2, [r4, #0]
 8008ade:	07d0      	lsls	r0, r2, #31
 8008ae0:	d502      	bpl.n	8008ae8 <_printf_float+0x194>
 8008ae2:	3301      	adds	r3, #1
 8008ae4:	440b      	add	r3, r1
 8008ae6:	6123      	str	r3, [r4, #16]
 8008ae8:	65a1      	str	r1, [r4, #88]	@ 0x58
 8008aea:	f04f 0900 	mov.w	r9, #0
 8008aee:	e7db      	b.n	8008aa8 <_printf_float+0x154>
 8008af0:	b913      	cbnz	r3, 8008af8 <_printf_float+0x1a4>
 8008af2:	6822      	ldr	r2, [r4, #0]
 8008af4:	07d2      	lsls	r2, r2, #31
 8008af6:	d501      	bpl.n	8008afc <_printf_float+0x1a8>
 8008af8:	3302      	adds	r3, #2
 8008afa:	e7f4      	b.n	8008ae6 <_printf_float+0x192>
 8008afc:	2301      	movs	r3, #1
 8008afe:	e7f2      	b.n	8008ae6 <_printf_float+0x192>
 8008b00:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8008b04:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008b06:	4299      	cmp	r1, r3
 8008b08:	db05      	blt.n	8008b16 <_printf_float+0x1c2>
 8008b0a:	6823      	ldr	r3, [r4, #0]
 8008b0c:	6121      	str	r1, [r4, #16]
 8008b0e:	07d8      	lsls	r0, r3, #31
 8008b10:	d5ea      	bpl.n	8008ae8 <_printf_float+0x194>
 8008b12:	1c4b      	adds	r3, r1, #1
 8008b14:	e7e7      	b.n	8008ae6 <_printf_float+0x192>
 8008b16:	2900      	cmp	r1, #0
 8008b18:	bfd4      	ite	le
 8008b1a:	f1c1 0202 	rsble	r2, r1, #2
 8008b1e:	2201      	movgt	r2, #1
 8008b20:	4413      	add	r3, r2
 8008b22:	e7e0      	b.n	8008ae6 <_printf_float+0x192>
 8008b24:	6823      	ldr	r3, [r4, #0]
 8008b26:	055a      	lsls	r2, r3, #21
 8008b28:	d407      	bmi.n	8008b3a <_printf_float+0x1e6>
 8008b2a:	6923      	ldr	r3, [r4, #16]
 8008b2c:	4642      	mov	r2, r8
 8008b2e:	4631      	mov	r1, r6
 8008b30:	4628      	mov	r0, r5
 8008b32:	47b8      	blx	r7
 8008b34:	3001      	adds	r0, #1
 8008b36:	d12b      	bne.n	8008b90 <_printf_float+0x23c>
 8008b38:	e767      	b.n	8008a0a <_printf_float+0xb6>
 8008b3a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008b3e:	f240 80dd 	bls.w	8008cfc <_printf_float+0x3a8>
 8008b42:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008b46:	2200      	movs	r2, #0
 8008b48:	2300      	movs	r3, #0
 8008b4a:	f7f7 ffdd 	bl	8000b08 <__aeabi_dcmpeq>
 8008b4e:	2800      	cmp	r0, #0
 8008b50:	d033      	beq.n	8008bba <_printf_float+0x266>
 8008b52:	4a37      	ldr	r2, [pc, #220]	@ (8008c30 <_printf_float+0x2dc>)
 8008b54:	2301      	movs	r3, #1
 8008b56:	4631      	mov	r1, r6
 8008b58:	4628      	mov	r0, r5
 8008b5a:	47b8      	blx	r7
 8008b5c:	3001      	adds	r0, #1
 8008b5e:	f43f af54 	beq.w	8008a0a <_printf_float+0xb6>
 8008b62:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8008b66:	4543      	cmp	r3, r8
 8008b68:	db02      	blt.n	8008b70 <_printf_float+0x21c>
 8008b6a:	6823      	ldr	r3, [r4, #0]
 8008b6c:	07d8      	lsls	r0, r3, #31
 8008b6e:	d50f      	bpl.n	8008b90 <_printf_float+0x23c>
 8008b70:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008b74:	4631      	mov	r1, r6
 8008b76:	4628      	mov	r0, r5
 8008b78:	47b8      	blx	r7
 8008b7a:	3001      	adds	r0, #1
 8008b7c:	f43f af45 	beq.w	8008a0a <_printf_float+0xb6>
 8008b80:	f04f 0900 	mov.w	r9, #0
 8008b84:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8008b88:	f104 0a1a 	add.w	sl, r4, #26
 8008b8c:	45c8      	cmp	r8, r9
 8008b8e:	dc09      	bgt.n	8008ba4 <_printf_float+0x250>
 8008b90:	6823      	ldr	r3, [r4, #0]
 8008b92:	079b      	lsls	r3, r3, #30
 8008b94:	f100 8103 	bmi.w	8008d9e <_printf_float+0x44a>
 8008b98:	68e0      	ldr	r0, [r4, #12]
 8008b9a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008b9c:	4298      	cmp	r0, r3
 8008b9e:	bfb8      	it	lt
 8008ba0:	4618      	movlt	r0, r3
 8008ba2:	e734      	b.n	8008a0e <_printf_float+0xba>
 8008ba4:	2301      	movs	r3, #1
 8008ba6:	4652      	mov	r2, sl
 8008ba8:	4631      	mov	r1, r6
 8008baa:	4628      	mov	r0, r5
 8008bac:	47b8      	blx	r7
 8008bae:	3001      	adds	r0, #1
 8008bb0:	f43f af2b 	beq.w	8008a0a <_printf_float+0xb6>
 8008bb4:	f109 0901 	add.w	r9, r9, #1
 8008bb8:	e7e8      	b.n	8008b8c <_printf_float+0x238>
 8008bba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	dc39      	bgt.n	8008c34 <_printf_float+0x2e0>
 8008bc0:	4a1b      	ldr	r2, [pc, #108]	@ (8008c30 <_printf_float+0x2dc>)
 8008bc2:	2301      	movs	r3, #1
 8008bc4:	4631      	mov	r1, r6
 8008bc6:	4628      	mov	r0, r5
 8008bc8:	47b8      	blx	r7
 8008bca:	3001      	adds	r0, #1
 8008bcc:	f43f af1d 	beq.w	8008a0a <_printf_float+0xb6>
 8008bd0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8008bd4:	ea59 0303 	orrs.w	r3, r9, r3
 8008bd8:	d102      	bne.n	8008be0 <_printf_float+0x28c>
 8008bda:	6823      	ldr	r3, [r4, #0]
 8008bdc:	07d9      	lsls	r1, r3, #31
 8008bde:	d5d7      	bpl.n	8008b90 <_printf_float+0x23c>
 8008be0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008be4:	4631      	mov	r1, r6
 8008be6:	4628      	mov	r0, r5
 8008be8:	47b8      	blx	r7
 8008bea:	3001      	adds	r0, #1
 8008bec:	f43f af0d 	beq.w	8008a0a <_printf_float+0xb6>
 8008bf0:	f04f 0a00 	mov.w	sl, #0
 8008bf4:	f104 0b1a 	add.w	fp, r4, #26
 8008bf8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008bfa:	425b      	negs	r3, r3
 8008bfc:	4553      	cmp	r3, sl
 8008bfe:	dc01      	bgt.n	8008c04 <_printf_float+0x2b0>
 8008c00:	464b      	mov	r3, r9
 8008c02:	e793      	b.n	8008b2c <_printf_float+0x1d8>
 8008c04:	2301      	movs	r3, #1
 8008c06:	465a      	mov	r2, fp
 8008c08:	4631      	mov	r1, r6
 8008c0a:	4628      	mov	r0, r5
 8008c0c:	47b8      	blx	r7
 8008c0e:	3001      	adds	r0, #1
 8008c10:	f43f aefb 	beq.w	8008a0a <_printf_float+0xb6>
 8008c14:	f10a 0a01 	add.w	sl, sl, #1
 8008c18:	e7ee      	b.n	8008bf8 <_printf_float+0x2a4>
 8008c1a:	bf00      	nop
 8008c1c:	7fefffff 	.word	0x7fefffff
 8008c20:	0800b3c3 	.word	0x0800b3c3
 8008c24:	0800b3bf 	.word	0x0800b3bf
 8008c28:	0800b3cb 	.word	0x0800b3cb
 8008c2c:	0800b3c7 	.word	0x0800b3c7
 8008c30:	0800b3cf 	.word	0x0800b3cf
 8008c34:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008c36:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008c3a:	4553      	cmp	r3, sl
 8008c3c:	bfa8      	it	ge
 8008c3e:	4653      	movge	r3, sl
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	4699      	mov	r9, r3
 8008c44:	dc36      	bgt.n	8008cb4 <_printf_float+0x360>
 8008c46:	f04f 0b00 	mov.w	fp, #0
 8008c4a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008c4e:	f104 021a 	add.w	r2, r4, #26
 8008c52:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008c54:	9306      	str	r3, [sp, #24]
 8008c56:	eba3 0309 	sub.w	r3, r3, r9
 8008c5a:	455b      	cmp	r3, fp
 8008c5c:	dc31      	bgt.n	8008cc2 <_printf_float+0x36e>
 8008c5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008c60:	459a      	cmp	sl, r3
 8008c62:	dc3a      	bgt.n	8008cda <_printf_float+0x386>
 8008c64:	6823      	ldr	r3, [r4, #0]
 8008c66:	07da      	lsls	r2, r3, #31
 8008c68:	d437      	bmi.n	8008cda <_printf_float+0x386>
 8008c6a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008c6c:	ebaa 0903 	sub.w	r9, sl, r3
 8008c70:	9b06      	ldr	r3, [sp, #24]
 8008c72:	ebaa 0303 	sub.w	r3, sl, r3
 8008c76:	4599      	cmp	r9, r3
 8008c78:	bfa8      	it	ge
 8008c7a:	4699      	movge	r9, r3
 8008c7c:	f1b9 0f00 	cmp.w	r9, #0
 8008c80:	dc33      	bgt.n	8008cea <_printf_float+0x396>
 8008c82:	f04f 0800 	mov.w	r8, #0
 8008c86:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008c8a:	f104 0b1a 	add.w	fp, r4, #26
 8008c8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008c90:	ebaa 0303 	sub.w	r3, sl, r3
 8008c94:	eba3 0309 	sub.w	r3, r3, r9
 8008c98:	4543      	cmp	r3, r8
 8008c9a:	f77f af79 	ble.w	8008b90 <_printf_float+0x23c>
 8008c9e:	2301      	movs	r3, #1
 8008ca0:	465a      	mov	r2, fp
 8008ca2:	4631      	mov	r1, r6
 8008ca4:	4628      	mov	r0, r5
 8008ca6:	47b8      	blx	r7
 8008ca8:	3001      	adds	r0, #1
 8008caa:	f43f aeae 	beq.w	8008a0a <_printf_float+0xb6>
 8008cae:	f108 0801 	add.w	r8, r8, #1
 8008cb2:	e7ec      	b.n	8008c8e <_printf_float+0x33a>
 8008cb4:	4642      	mov	r2, r8
 8008cb6:	4631      	mov	r1, r6
 8008cb8:	4628      	mov	r0, r5
 8008cba:	47b8      	blx	r7
 8008cbc:	3001      	adds	r0, #1
 8008cbe:	d1c2      	bne.n	8008c46 <_printf_float+0x2f2>
 8008cc0:	e6a3      	b.n	8008a0a <_printf_float+0xb6>
 8008cc2:	2301      	movs	r3, #1
 8008cc4:	4631      	mov	r1, r6
 8008cc6:	4628      	mov	r0, r5
 8008cc8:	9206      	str	r2, [sp, #24]
 8008cca:	47b8      	blx	r7
 8008ccc:	3001      	adds	r0, #1
 8008cce:	f43f ae9c 	beq.w	8008a0a <_printf_float+0xb6>
 8008cd2:	9a06      	ldr	r2, [sp, #24]
 8008cd4:	f10b 0b01 	add.w	fp, fp, #1
 8008cd8:	e7bb      	b.n	8008c52 <_printf_float+0x2fe>
 8008cda:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008cde:	4631      	mov	r1, r6
 8008ce0:	4628      	mov	r0, r5
 8008ce2:	47b8      	blx	r7
 8008ce4:	3001      	adds	r0, #1
 8008ce6:	d1c0      	bne.n	8008c6a <_printf_float+0x316>
 8008ce8:	e68f      	b.n	8008a0a <_printf_float+0xb6>
 8008cea:	9a06      	ldr	r2, [sp, #24]
 8008cec:	464b      	mov	r3, r9
 8008cee:	4442      	add	r2, r8
 8008cf0:	4631      	mov	r1, r6
 8008cf2:	4628      	mov	r0, r5
 8008cf4:	47b8      	blx	r7
 8008cf6:	3001      	adds	r0, #1
 8008cf8:	d1c3      	bne.n	8008c82 <_printf_float+0x32e>
 8008cfa:	e686      	b.n	8008a0a <_printf_float+0xb6>
 8008cfc:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008d00:	f1ba 0f01 	cmp.w	sl, #1
 8008d04:	dc01      	bgt.n	8008d0a <_printf_float+0x3b6>
 8008d06:	07db      	lsls	r3, r3, #31
 8008d08:	d536      	bpl.n	8008d78 <_printf_float+0x424>
 8008d0a:	2301      	movs	r3, #1
 8008d0c:	4642      	mov	r2, r8
 8008d0e:	4631      	mov	r1, r6
 8008d10:	4628      	mov	r0, r5
 8008d12:	47b8      	blx	r7
 8008d14:	3001      	adds	r0, #1
 8008d16:	f43f ae78 	beq.w	8008a0a <_printf_float+0xb6>
 8008d1a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008d1e:	4631      	mov	r1, r6
 8008d20:	4628      	mov	r0, r5
 8008d22:	47b8      	blx	r7
 8008d24:	3001      	adds	r0, #1
 8008d26:	f43f ae70 	beq.w	8008a0a <_printf_float+0xb6>
 8008d2a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008d2e:	2200      	movs	r2, #0
 8008d30:	2300      	movs	r3, #0
 8008d32:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8008d36:	f7f7 fee7 	bl	8000b08 <__aeabi_dcmpeq>
 8008d3a:	b9c0      	cbnz	r0, 8008d6e <_printf_float+0x41a>
 8008d3c:	4653      	mov	r3, sl
 8008d3e:	f108 0201 	add.w	r2, r8, #1
 8008d42:	4631      	mov	r1, r6
 8008d44:	4628      	mov	r0, r5
 8008d46:	47b8      	blx	r7
 8008d48:	3001      	adds	r0, #1
 8008d4a:	d10c      	bne.n	8008d66 <_printf_float+0x412>
 8008d4c:	e65d      	b.n	8008a0a <_printf_float+0xb6>
 8008d4e:	2301      	movs	r3, #1
 8008d50:	465a      	mov	r2, fp
 8008d52:	4631      	mov	r1, r6
 8008d54:	4628      	mov	r0, r5
 8008d56:	47b8      	blx	r7
 8008d58:	3001      	adds	r0, #1
 8008d5a:	f43f ae56 	beq.w	8008a0a <_printf_float+0xb6>
 8008d5e:	f108 0801 	add.w	r8, r8, #1
 8008d62:	45d0      	cmp	r8, sl
 8008d64:	dbf3      	blt.n	8008d4e <_printf_float+0x3fa>
 8008d66:	464b      	mov	r3, r9
 8008d68:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8008d6c:	e6df      	b.n	8008b2e <_printf_float+0x1da>
 8008d6e:	f04f 0800 	mov.w	r8, #0
 8008d72:	f104 0b1a 	add.w	fp, r4, #26
 8008d76:	e7f4      	b.n	8008d62 <_printf_float+0x40e>
 8008d78:	2301      	movs	r3, #1
 8008d7a:	4642      	mov	r2, r8
 8008d7c:	e7e1      	b.n	8008d42 <_printf_float+0x3ee>
 8008d7e:	2301      	movs	r3, #1
 8008d80:	464a      	mov	r2, r9
 8008d82:	4631      	mov	r1, r6
 8008d84:	4628      	mov	r0, r5
 8008d86:	47b8      	blx	r7
 8008d88:	3001      	adds	r0, #1
 8008d8a:	f43f ae3e 	beq.w	8008a0a <_printf_float+0xb6>
 8008d8e:	f108 0801 	add.w	r8, r8, #1
 8008d92:	68e3      	ldr	r3, [r4, #12]
 8008d94:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008d96:	1a5b      	subs	r3, r3, r1
 8008d98:	4543      	cmp	r3, r8
 8008d9a:	dcf0      	bgt.n	8008d7e <_printf_float+0x42a>
 8008d9c:	e6fc      	b.n	8008b98 <_printf_float+0x244>
 8008d9e:	f04f 0800 	mov.w	r8, #0
 8008da2:	f104 0919 	add.w	r9, r4, #25
 8008da6:	e7f4      	b.n	8008d92 <_printf_float+0x43e>

08008da8 <_printf_common>:
 8008da8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008dac:	4616      	mov	r6, r2
 8008dae:	4698      	mov	r8, r3
 8008db0:	688a      	ldr	r2, [r1, #8]
 8008db2:	690b      	ldr	r3, [r1, #16]
 8008db4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008db8:	4293      	cmp	r3, r2
 8008dba:	bfb8      	it	lt
 8008dbc:	4613      	movlt	r3, r2
 8008dbe:	6033      	str	r3, [r6, #0]
 8008dc0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008dc4:	4607      	mov	r7, r0
 8008dc6:	460c      	mov	r4, r1
 8008dc8:	b10a      	cbz	r2, 8008dce <_printf_common+0x26>
 8008dca:	3301      	adds	r3, #1
 8008dcc:	6033      	str	r3, [r6, #0]
 8008dce:	6823      	ldr	r3, [r4, #0]
 8008dd0:	0699      	lsls	r1, r3, #26
 8008dd2:	bf42      	ittt	mi
 8008dd4:	6833      	ldrmi	r3, [r6, #0]
 8008dd6:	3302      	addmi	r3, #2
 8008dd8:	6033      	strmi	r3, [r6, #0]
 8008dda:	6825      	ldr	r5, [r4, #0]
 8008ddc:	f015 0506 	ands.w	r5, r5, #6
 8008de0:	d106      	bne.n	8008df0 <_printf_common+0x48>
 8008de2:	f104 0a19 	add.w	sl, r4, #25
 8008de6:	68e3      	ldr	r3, [r4, #12]
 8008de8:	6832      	ldr	r2, [r6, #0]
 8008dea:	1a9b      	subs	r3, r3, r2
 8008dec:	42ab      	cmp	r3, r5
 8008dee:	dc26      	bgt.n	8008e3e <_printf_common+0x96>
 8008df0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008df4:	6822      	ldr	r2, [r4, #0]
 8008df6:	3b00      	subs	r3, #0
 8008df8:	bf18      	it	ne
 8008dfa:	2301      	movne	r3, #1
 8008dfc:	0692      	lsls	r2, r2, #26
 8008dfe:	d42b      	bmi.n	8008e58 <_printf_common+0xb0>
 8008e00:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008e04:	4641      	mov	r1, r8
 8008e06:	4638      	mov	r0, r7
 8008e08:	47c8      	blx	r9
 8008e0a:	3001      	adds	r0, #1
 8008e0c:	d01e      	beq.n	8008e4c <_printf_common+0xa4>
 8008e0e:	6823      	ldr	r3, [r4, #0]
 8008e10:	6922      	ldr	r2, [r4, #16]
 8008e12:	f003 0306 	and.w	r3, r3, #6
 8008e16:	2b04      	cmp	r3, #4
 8008e18:	bf02      	ittt	eq
 8008e1a:	68e5      	ldreq	r5, [r4, #12]
 8008e1c:	6833      	ldreq	r3, [r6, #0]
 8008e1e:	1aed      	subeq	r5, r5, r3
 8008e20:	68a3      	ldr	r3, [r4, #8]
 8008e22:	bf0c      	ite	eq
 8008e24:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008e28:	2500      	movne	r5, #0
 8008e2a:	4293      	cmp	r3, r2
 8008e2c:	bfc4      	itt	gt
 8008e2e:	1a9b      	subgt	r3, r3, r2
 8008e30:	18ed      	addgt	r5, r5, r3
 8008e32:	2600      	movs	r6, #0
 8008e34:	341a      	adds	r4, #26
 8008e36:	42b5      	cmp	r5, r6
 8008e38:	d11a      	bne.n	8008e70 <_printf_common+0xc8>
 8008e3a:	2000      	movs	r0, #0
 8008e3c:	e008      	b.n	8008e50 <_printf_common+0xa8>
 8008e3e:	2301      	movs	r3, #1
 8008e40:	4652      	mov	r2, sl
 8008e42:	4641      	mov	r1, r8
 8008e44:	4638      	mov	r0, r7
 8008e46:	47c8      	blx	r9
 8008e48:	3001      	adds	r0, #1
 8008e4a:	d103      	bne.n	8008e54 <_printf_common+0xac>
 8008e4c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008e50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e54:	3501      	adds	r5, #1
 8008e56:	e7c6      	b.n	8008de6 <_printf_common+0x3e>
 8008e58:	18e1      	adds	r1, r4, r3
 8008e5a:	1c5a      	adds	r2, r3, #1
 8008e5c:	2030      	movs	r0, #48	@ 0x30
 8008e5e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008e62:	4422      	add	r2, r4
 8008e64:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008e68:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008e6c:	3302      	adds	r3, #2
 8008e6e:	e7c7      	b.n	8008e00 <_printf_common+0x58>
 8008e70:	2301      	movs	r3, #1
 8008e72:	4622      	mov	r2, r4
 8008e74:	4641      	mov	r1, r8
 8008e76:	4638      	mov	r0, r7
 8008e78:	47c8      	blx	r9
 8008e7a:	3001      	adds	r0, #1
 8008e7c:	d0e6      	beq.n	8008e4c <_printf_common+0xa4>
 8008e7e:	3601      	adds	r6, #1
 8008e80:	e7d9      	b.n	8008e36 <_printf_common+0x8e>
	...

08008e84 <_printf_i>:
 8008e84:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008e88:	7e0f      	ldrb	r7, [r1, #24]
 8008e8a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008e8c:	2f78      	cmp	r7, #120	@ 0x78
 8008e8e:	4691      	mov	r9, r2
 8008e90:	4680      	mov	r8, r0
 8008e92:	460c      	mov	r4, r1
 8008e94:	469a      	mov	sl, r3
 8008e96:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008e9a:	d807      	bhi.n	8008eac <_printf_i+0x28>
 8008e9c:	2f62      	cmp	r7, #98	@ 0x62
 8008e9e:	d80a      	bhi.n	8008eb6 <_printf_i+0x32>
 8008ea0:	2f00      	cmp	r7, #0
 8008ea2:	f000 80d1 	beq.w	8009048 <_printf_i+0x1c4>
 8008ea6:	2f58      	cmp	r7, #88	@ 0x58
 8008ea8:	f000 80b8 	beq.w	800901c <_printf_i+0x198>
 8008eac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008eb0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008eb4:	e03a      	b.n	8008f2c <_printf_i+0xa8>
 8008eb6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008eba:	2b15      	cmp	r3, #21
 8008ebc:	d8f6      	bhi.n	8008eac <_printf_i+0x28>
 8008ebe:	a101      	add	r1, pc, #4	@ (adr r1, 8008ec4 <_printf_i+0x40>)
 8008ec0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008ec4:	08008f1d 	.word	0x08008f1d
 8008ec8:	08008f31 	.word	0x08008f31
 8008ecc:	08008ead 	.word	0x08008ead
 8008ed0:	08008ead 	.word	0x08008ead
 8008ed4:	08008ead 	.word	0x08008ead
 8008ed8:	08008ead 	.word	0x08008ead
 8008edc:	08008f31 	.word	0x08008f31
 8008ee0:	08008ead 	.word	0x08008ead
 8008ee4:	08008ead 	.word	0x08008ead
 8008ee8:	08008ead 	.word	0x08008ead
 8008eec:	08008ead 	.word	0x08008ead
 8008ef0:	0800902f 	.word	0x0800902f
 8008ef4:	08008f5b 	.word	0x08008f5b
 8008ef8:	08008fe9 	.word	0x08008fe9
 8008efc:	08008ead 	.word	0x08008ead
 8008f00:	08008ead 	.word	0x08008ead
 8008f04:	08009051 	.word	0x08009051
 8008f08:	08008ead 	.word	0x08008ead
 8008f0c:	08008f5b 	.word	0x08008f5b
 8008f10:	08008ead 	.word	0x08008ead
 8008f14:	08008ead 	.word	0x08008ead
 8008f18:	08008ff1 	.word	0x08008ff1
 8008f1c:	6833      	ldr	r3, [r6, #0]
 8008f1e:	1d1a      	adds	r2, r3, #4
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	6032      	str	r2, [r6, #0]
 8008f24:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008f28:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008f2c:	2301      	movs	r3, #1
 8008f2e:	e09c      	b.n	800906a <_printf_i+0x1e6>
 8008f30:	6833      	ldr	r3, [r6, #0]
 8008f32:	6820      	ldr	r0, [r4, #0]
 8008f34:	1d19      	adds	r1, r3, #4
 8008f36:	6031      	str	r1, [r6, #0]
 8008f38:	0606      	lsls	r6, r0, #24
 8008f3a:	d501      	bpl.n	8008f40 <_printf_i+0xbc>
 8008f3c:	681d      	ldr	r5, [r3, #0]
 8008f3e:	e003      	b.n	8008f48 <_printf_i+0xc4>
 8008f40:	0645      	lsls	r5, r0, #25
 8008f42:	d5fb      	bpl.n	8008f3c <_printf_i+0xb8>
 8008f44:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008f48:	2d00      	cmp	r5, #0
 8008f4a:	da03      	bge.n	8008f54 <_printf_i+0xd0>
 8008f4c:	232d      	movs	r3, #45	@ 0x2d
 8008f4e:	426d      	negs	r5, r5
 8008f50:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008f54:	4858      	ldr	r0, [pc, #352]	@ (80090b8 <_printf_i+0x234>)
 8008f56:	230a      	movs	r3, #10
 8008f58:	e011      	b.n	8008f7e <_printf_i+0xfa>
 8008f5a:	6821      	ldr	r1, [r4, #0]
 8008f5c:	6833      	ldr	r3, [r6, #0]
 8008f5e:	0608      	lsls	r0, r1, #24
 8008f60:	f853 5b04 	ldr.w	r5, [r3], #4
 8008f64:	d402      	bmi.n	8008f6c <_printf_i+0xe8>
 8008f66:	0649      	lsls	r1, r1, #25
 8008f68:	bf48      	it	mi
 8008f6a:	b2ad      	uxthmi	r5, r5
 8008f6c:	2f6f      	cmp	r7, #111	@ 0x6f
 8008f6e:	4852      	ldr	r0, [pc, #328]	@ (80090b8 <_printf_i+0x234>)
 8008f70:	6033      	str	r3, [r6, #0]
 8008f72:	bf14      	ite	ne
 8008f74:	230a      	movne	r3, #10
 8008f76:	2308      	moveq	r3, #8
 8008f78:	2100      	movs	r1, #0
 8008f7a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008f7e:	6866      	ldr	r6, [r4, #4]
 8008f80:	60a6      	str	r6, [r4, #8]
 8008f82:	2e00      	cmp	r6, #0
 8008f84:	db05      	blt.n	8008f92 <_printf_i+0x10e>
 8008f86:	6821      	ldr	r1, [r4, #0]
 8008f88:	432e      	orrs	r6, r5
 8008f8a:	f021 0104 	bic.w	r1, r1, #4
 8008f8e:	6021      	str	r1, [r4, #0]
 8008f90:	d04b      	beq.n	800902a <_printf_i+0x1a6>
 8008f92:	4616      	mov	r6, r2
 8008f94:	fbb5 f1f3 	udiv	r1, r5, r3
 8008f98:	fb03 5711 	mls	r7, r3, r1, r5
 8008f9c:	5dc7      	ldrb	r7, [r0, r7]
 8008f9e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008fa2:	462f      	mov	r7, r5
 8008fa4:	42bb      	cmp	r3, r7
 8008fa6:	460d      	mov	r5, r1
 8008fa8:	d9f4      	bls.n	8008f94 <_printf_i+0x110>
 8008faa:	2b08      	cmp	r3, #8
 8008fac:	d10b      	bne.n	8008fc6 <_printf_i+0x142>
 8008fae:	6823      	ldr	r3, [r4, #0]
 8008fb0:	07df      	lsls	r7, r3, #31
 8008fb2:	d508      	bpl.n	8008fc6 <_printf_i+0x142>
 8008fb4:	6923      	ldr	r3, [r4, #16]
 8008fb6:	6861      	ldr	r1, [r4, #4]
 8008fb8:	4299      	cmp	r1, r3
 8008fba:	bfde      	ittt	le
 8008fbc:	2330      	movle	r3, #48	@ 0x30
 8008fbe:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008fc2:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8008fc6:	1b92      	subs	r2, r2, r6
 8008fc8:	6122      	str	r2, [r4, #16]
 8008fca:	f8cd a000 	str.w	sl, [sp]
 8008fce:	464b      	mov	r3, r9
 8008fd0:	aa03      	add	r2, sp, #12
 8008fd2:	4621      	mov	r1, r4
 8008fd4:	4640      	mov	r0, r8
 8008fd6:	f7ff fee7 	bl	8008da8 <_printf_common>
 8008fda:	3001      	adds	r0, #1
 8008fdc:	d14a      	bne.n	8009074 <_printf_i+0x1f0>
 8008fde:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008fe2:	b004      	add	sp, #16
 8008fe4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008fe8:	6823      	ldr	r3, [r4, #0]
 8008fea:	f043 0320 	orr.w	r3, r3, #32
 8008fee:	6023      	str	r3, [r4, #0]
 8008ff0:	4832      	ldr	r0, [pc, #200]	@ (80090bc <_printf_i+0x238>)
 8008ff2:	2778      	movs	r7, #120	@ 0x78
 8008ff4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008ff8:	6823      	ldr	r3, [r4, #0]
 8008ffa:	6831      	ldr	r1, [r6, #0]
 8008ffc:	061f      	lsls	r7, r3, #24
 8008ffe:	f851 5b04 	ldr.w	r5, [r1], #4
 8009002:	d402      	bmi.n	800900a <_printf_i+0x186>
 8009004:	065f      	lsls	r7, r3, #25
 8009006:	bf48      	it	mi
 8009008:	b2ad      	uxthmi	r5, r5
 800900a:	6031      	str	r1, [r6, #0]
 800900c:	07d9      	lsls	r1, r3, #31
 800900e:	bf44      	itt	mi
 8009010:	f043 0320 	orrmi.w	r3, r3, #32
 8009014:	6023      	strmi	r3, [r4, #0]
 8009016:	b11d      	cbz	r5, 8009020 <_printf_i+0x19c>
 8009018:	2310      	movs	r3, #16
 800901a:	e7ad      	b.n	8008f78 <_printf_i+0xf4>
 800901c:	4826      	ldr	r0, [pc, #152]	@ (80090b8 <_printf_i+0x234>)
 800901e:	e7e9      	b.n	8008ff4 <_printf_i+0x170>
 8009020:	6823      	ldr	r3, [r4, #0]
 8009022:	f023 0320 	bic.w	r3, r3, #32
 8009026:	6023      	str	r3, [r4, #0]
 8009028:	e7f6      	b.n	8009018 <_printf_i+0x194>
 800902a:	4616      	mov	r6, r2
 800902c:	e7bd      	b.n	8008faa <_printf_i+0x126>
 800902e:	6833      	ldr	r3, [r6, #0]
 8009030:	6825      	ldr	r5, [r4, #0]
 8009032:	6961      	ldr	r1, [r4, #20]
 8009034:	1d18      	adds	r0, r3, #4
 8009036:	6030      	str	r0, [r6, #0]
 8009038:	062e      	lsls	r6, r5, #24
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	d501      	bpl.n	8009042 <_printf_i+0x1be>
 800903e:	6019      	str	r1, [r3, #0]
 8009040:	e002      	b.n	8009048 <_printf_i+0x1c4>
 8009042:	0668      	lsls	r0, r5, #25
 8009044:	d5fb      	bpl.n	800903e <_printf_i+0x1ba>
 8009046:	8019      	strh	r1, [r3, #0]
 8009048:	2300      	movs	r3, #0
 800904a:	6123      	str	r3, [r4, #16]
 800904c:	4616      	mov	r6, r2
 800904e:	e7bc      	b.n	8008fca <_printf_i+0x146>
 8009050:	6833      	ldr	r3, [r6, #0]
 8009052:	1d1a      	adds	r2, r3, #4
 8009054:	6032      	str	r2, [r6, #0]
 8009056:	681e      	ldr	r6, [r3, #0]
 8009058:	6862      	ldr	r2, [r4, #4]
 800905a:	2100      	movs	r1, #0
 800905c:	4630      	mov	r0, r6
 800905e:	f7f7 f8d7 	bl	8000210 <memchr>
 8009062:	b108      	cbz	r0, 8009068 <_printf_i+0x1e4>
 8009064:	1b80      	subs	r0, r0, r6
 8009066:	6060      	str	r0, [r4, #4]
 8009068:	6863      	ldr	r3, [r4, #4]
 800906a:	6123      	str	r3, [r4, #16]
 800906c:	2300      	movs	r3, #0
 800906e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009072:	e7aa      	b.n	8008fca <_printf_i+0x146>
 8009074:	6923      	ldr	r3, [r4, #16]
 8009076:	4632      	mov	r2, r6
 8009078:	4649      	mov	r1, r9
 800907a:	4640      	mov	r0, r8
 800907c:	47d0      	blx	sl
 800907e:	3001      	adds	r0, #1
 8009080:	d0ad      	beq.n	8008fde <_printf_i+0x15a>
 8009082:	6823      	ldr	r3, [r4, #0]
 8009084:	079b      	lsls	r3, r3, #30
 8009086:	d413      	bmi.n	80090b0 <_printf_i+0x22c>
 8009088:	68e0      	ldr	r0, [r4, #12]
 800908a:	9b03      	ldr	r3, [sp, #12]
 800908c:	4298      	cmp	r0, r3
 800908e:	bfb8      	it	lt
 8009090:	4618      	movlt	r0, r3
 8009092:	e7a6      	b.n	8008fe2 <_printf_i+0x15e>
 8009094:	2301      	movs	r3, #1
 8009096:	4632      	mov	r2, r6
 8009098:	4649      	mov	r1, r9
 800909a:	4640      	mov	r0, r8
 800909c:	47d0      	blx	sl
 800909e:	3001      	adds	r0, #1
 80090a0:	d09d      	beq.n	8008fde <_printf_i+0x15a>
 80090a2:	3501      	adds	r5, #1
 80090a4:	68e3      	ldr	r3, [r4, #12]
 80090a6:	9903      	ldr	r1, [sp, #12]
 80090a8:	1a5b      	subs	r3, r3, r1
 80090aa:	42ab      	cmp	r3, r5
 80090ac:	dcf2      	bgt.n	8009094 <_printf_i+0x210>
 80090ae:	e7eb      	b.n	8009088 <_printf_i+0x204>
 80090b0:	2500      	movs	r5, #0
 80090b2:	f104 0619 	add.w	r6, r4, #25
 80090b6:	e7f5      	b.n	80090a4 <_printf_i+0x220>
 80090b8:	0800b3d1 	.word	0x0800b3d1
 80090bc:	0800b3e2 	.word	0x0800b3e2

080090c0 <std>:
 80090c0:	2300      	movs	r3, #0
 80090c2:	b510      	push	{r4, lr}
 80090c4:	4604      	mov	r4, r0
 80090c6:	e9c0 3300 	strd	r3, r3, [r0]
 80090ca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80090ce:	6083      	str	r3, [r0, #8]
 80090d0:	8181      	strh	r1, [r0, #12]
 80090d2:	6643      	str	r3, [r0, #100]	@ 0x64
 80090d4:	81c2      	strh	r2, [r0, #14]
 80090d6:	6183      	str	r3, [r0, #24]
 80090d8:	4619      	mov	r1, r3
 80090da:	2208      	movs	r2, #8
 80090dc:	305c      	adds	r0, #92	@ 0x5c
 80090de:	f000 f906 	bl	80092ee <memset>
 80090e2:	4b0d      	ldr	r3, [pc, #52]	@ (8009118 <std+0x58>)
 80090e4:	6263      	str	r3, [r4, #36]	@ 0x24
 80090e6:	4b0d      	ldr	r3, [pc, #52]	@ (800911c <std+0x5c>)
 80090e8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80090ea:	4b0d      	ldr	r3, [pc, #52]	@ (8009120 <std+0x60>)
 80090ec:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80090ee:	4b0d      	ldr	r3, [pc, #52]	@ (8009124 <std+0x64>)
 80090f0:	6323      	str	r3, [r4, #48]	@ 0x30
 80090f2:	4b0d      	ldr	r3, [pc, #52]	@ (8009128 <std+0x68>)
 80090f4:	6224      	str	r4, [r4, #32]
 80090f6:	429c      	cmp	r4, r3
 80090f8:	d006      	beq.n	8009108 <std+0x48>
 80090fa:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80090fe:	4294      	cmp	r4, r2
 8009100:	d002      	beq.n	8009108 <std+0x48>
 8009102:	33d0      	adds	r3, #208	@ 0xd0
 8009104:	429c      	cmp	r4, r3
 8009106:	d105      	bne.n	8009114 <std+0x54>
 8009108:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800910c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009110:	f000 b9c8 	b.w	80094a4 <__retarget_lock_init_recursive>
 8009114:	bd10      	pop	{r4, pc}
 8009116:	bf00      	nop
 8009118:	08009269 	.word	0x08009269
 800911c:	0800928b 	.word	0x0800928b
 8009120:	080092c3 	.word	0x080092c3
 8009124:	080092e7 	.word	0x080092e7
 8009128:	20005330 	.word	0x20005330

0800912c <stdio_exit_handler>:
 800912c:	4a02      	ldr	r2, [pc, #8]	@ (8009138 <stdio_exit_handler+0xc>)
 800912e:	4903      	ldr	r1, [pc, #12]	@ (800913c <stdio_exit_handler+0x10>)
 8009130:	4803      	ldr	r0, [pc, #12]	@ (8009140 <stdio_exit_handler+0x14>)
 8009132:	f000 b869 	b.w	8009208 <_fwalk_sglue>
 8009136:	bf00      	nop
 8009138:	20000010 	.word	0x20000010
 800913c:	0800ae39 	.word	0x0800ae39
 8009140:	20000020 	.word	0x20000020

08009144 <cleanup_stdio>:
 8009144:	6841      	ldr	r1, [r0, #4]
 8009146:	4b0c      	ldr	r3, [pc, #48]	@ (8009178 <cleanup_stdio+0x34>)
 8009148:	4299      	cmp	r1, r3
 800914a:	b510      	push	{r4, lr}
 800914c:	4604      	mov	r4, r0
 800914e:	d001      	beq.n	8009154 <cleanup_stdio+0x10>
 8009150:	f001 fe72 	bl	800ae38 <_fflush_r>
 8009154:	68a1      	ldr	r1, [r4, #8]
 8009156:	4b09      	ldr	r3, [pc, #36]	@ (800917c <cleanup_stdio+0x38>)
 8009158:	4299      	cmp	r1, r3
 800915a:	d002      	beq.n	8009162 <cleanup_stdio+0x1e>
 800915c:	4620      	mov	r0, r4
 800915e:	f001 fe6b 	bl	800ae38 <_fflush_r>
 8009162:	68e1      	ldr	r1, [r4, #12]
 8009164:	4b06      	ldr	r3, [pc, #24]	@ (8009180 <cleanup_stdio+0x3c>)
 8009166:	4299      	cmp	r1, r3
 8009168:	d004      	beq.n	8009174 <cleanup_stdio+0x30>
 800916a:	4620      	mov	r0, r4
 800916c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009170:	f001 be62 	b.w	800ae38 <_fflush_r>
 8009174:	bd10      	pop	{r4, pc}
 8009176:	bf00      	nop
 8009178:	20005330 	.word	0x20005330
 800917c:	20005398 	.word	0x20005398
 8009180:	20005400 	.word	0x20005400

08009184 <global_stdio_init.part.0>:
 8009184:	b510      	push	{r4, lr}
 8009186:	4b0b      	ldr	r3, [pc, #44]	@ (80091b4 <global_stdio_init.part.0+0x30>)
 8009188:	4c0b      	ldr	r4, [pc, #44]	@ (80091b8 <global_stdio_init.part.0+0x34>)
 800918a:	4a0c      	ldr	r2, [pc, #48]	@ (80091bc <global_stdio_init.part.0+0x38>)
 800918c:	601a      	str	r2, [r3, #0]
 800918e:	4620      	mov	r0, r4
 8009190:	2200      	movs	r2, #0
 8009192:	2104      	movs	r1, #4
 8009194:	f7ff ff94 	bl	80090c0 <std>
 8009198:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800919c:	2201      	movs	r2, #1
 800919e:	2109      	movs	r1, #9
 80091a0:	f7ff ff8e 	bl	80090c0 <std>
 80091a4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80091a8:	2202      	movs	r2, #2
 80091aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80091ae:	2112      	movs	r1, #18
 80091b0:	f7ff bf86 	b.w	80090c0 <std>
 80091b4:	20005468 	.word	0x20005468
 80091b8:	20005330 	.word	0x20005330
 80091bc:	0800912d 	.word	0x0800912d

080091c0 <__sfp_lock_acquire>:
 80091c0:	4801      	ldr	r0, [pc, #4]	@ (80091c8 <__sfp_lock_acquire+0x8>)
 80091c2:	f000 b970 	b.w	80094a6 <__retarget_lock_acquire_recursive>
 80091c6:	bf00      	nop
 80091c8:	20005471 	.word	0x20005471

080091cc <__sfp_lock_release>:
 80091cc:	4801      	ldr	r0, [pc, #4]	@ (80091d4 <__sfp_lock_release+0x8>)
 80091ce:	f000 b96b 	b.w	80094a8 <__retarget_lock_release_recursive>
 80091d2:	bf00      	nop
 80091d4:	20005471 	.word	0x20005471

080091d8 <__sinit>:
 80091d8:	b510      	push	{r4, lr}
 80091da:	4604      	mov	r4, r0
 80091dc:	f7ff fff0 	bl	80091c0 <__sfp_lock_acquire>
 80091e0:	6a23      	ldr	r3, [r4, #32]
 80091e2:	b11b      	cbz	r3, 80091ec <__sinit+0x14>
 80091e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80091e8:	f7ff bff0 	b.w	80091cc <__sfp_lock_release>
 80091ec:	4b04      	ldr	r3, [pc, #16]	@ (8009200 <__sinit+0x28>)
 80091ee:	6223      	str	r3, [r4, #32]
 80091f0:	4b04      	ldr	r3, [pc, #16]	@ (8009204 <__sinit+0x2c>)
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d1f5      	bne.n	80091e4 <__sinit+0xc>
 80091f8:	f7ff ffc4 	bl	8009184 <global_stdio_init.part.0>
 80091fc:	e7f2      	b.n	80091e4 <__sinit+0xc>
 80091fe:	bf00      	nop
 8009200:	08009145 	.word	0x08009145
 8009204:	20005468 	.word	0x20005468

08009208 <_fwalk_sglue>:
 8009208:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800920c:	4607      	mov	r7, r0
 800920e:	4688      	mov	r8, r1
 8009210:	4614      	mov	r4, r2
 8009212:	2600      	movs	r6, #0
 8009214:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009218:	f1b9 0901 	subs.w	r9, r9, #1
 800921c:	d505      	bpl.n	800922a <_fwalk_sglue+0x22>
 800921e:	6824      	ldr	r4, [r4, #0]
 8009220:	2c00      	cmp	r4, #0
 8009222:	d1f7      	bne.n	8009214 <_fwalk_sglue+0xc>
 8009224:	4630      	mov	r0, r6
 8009226:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800922a:	89ab      	ldrh	r3, [r5, #12]
 800922c:	2b01      	cmp	r3, #1
 800922e:	d907      	bls.n	8009240 <_fwalk_sglue+0x38>
 8009230:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009234:	3301      	adds	r3, #1
 8009236:	d003      	beq.n	8009240 <_fwalk_sglue+0x38>
 8009238:	4629      	mov	r1, r5
 800923a:	4638      	mov	r0, r7
 800923c:	47c0      	blx	r8
 800923e:	4306      	orrs	r6, r0
 8009240:	3568      	adds	r5, #104	@ 0x68
 8009242:	e7e9      	b.n	8009218 <_fwalk_sglue+0x10>

08009244 <iprintf>:
 8009244:	b40f      	push	{r0, r1, r2, r3}
 8009246:	b507      	push	{r0, r1, r2, lr}
 8009248:	4906      	ldr	r1, [pc, #24]	@ (8009264 <iprintf+0x20>)
 800924a:	ab04      	add	r3, sp, #16
 800924c:	6808      	ldr	r0, [r1, #0]
 800924e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009252:	6881      	ldr	r1, [r0, #8]
 8009254:	9301      	str	r3, [sp, #4]
 8009256:	f001 fc53 	bl	800ab00 <_vfiprintf_r>
 800925a:	b003      	add	sp, #12
 800925c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009260:	b004      	add	sp, #16
 8009262:	4770      	bx	lr
 8009264:	2000001c 	.word	0x2000001c

08009268 <__sread>:
 8009268:	b510      	push	{r4, lr}
 800926a:	460c      	mov	r4, r1
 800926c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009270:	f000 f8ca 	bl	8009408 <_read_r>
 8009274:	2800      	cmp	r0, #0
 8009276:	bfab      	itete	ge
 8009278:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800927a:	89a3      	ldrhlt	r3, [r4, #12]
 800927c:	181b      	addge	r3, r3, r0
 800927e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009282:	bfac      	ite	ge
 8009284:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009286:	81a3      	strhlt	r3, [r4, #12]
 8009288:	bd10      	pop	{r4, pc}

0800928a <__swrite>:
 800928a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800928e:	461f      	mov	r7, r3
 8009290:	898b      	ldrh	r3, [r1, #12]
 8009292:	05db      	lsls	r3, r3, #23
 8009294:	4605      	mov	r5, r0
 8009296:	460c      	mov	r4, r1
 8009298:	4616      	mov	r6, r2
 800929a:	d505      	bpl.n	80092a8 <__swrite+0x1e>
 800929c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80092a0:	2302      	movs	r3, #2
 80092a2:	2200      	movs	r2, #0
 80092a4:	f000 f89e 	bl	80093e4 <_lseek_r>
 80092a8:	89a3      	ldrh	r3, [r4, #12]
 80092aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80092ae:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80092b2:	81a3      	strh	r3, [r4, #12]
 80092b4:	4632      	mov	r2, r6
 80092b6:	463b      	mov	r3, r7
 80092b8:	4628      	mov	r0, r5
 80092ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80092be:	f000 b8b5 	b.w	800942c <_write_r>

080092c2 <__sseek>:
 80092c2:	b510      	push	{r4, lr}
 80092c4:	460c      	mov	r4, r1
 80092c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80092ca:	f000 f88b 	bl	80093e4 <_lseek_r>
 80092ce:	1c43      	adds	r3, r0, #1
 80092d0:	89a3      	ldrh	r3, [r4, #12]
 80092d2:	bf15      	itete	ne
 80092d4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80092d6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80092da:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80092de:	81a3      	strheq	r3, [r4, #12]
 80092e0:	bf18      	it	ne
 80092e2:	81a3      	strhne	r3, [r4, #12]
 80092e4:	bd10      	pop	{r4, pc}

080092e6 <__sclose>:
 80092e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80092ea:	f000 b80d 	b.w	8009308 <_close_r>

080092ee <memset>:
 80092ee:	4402      	add	r2, r0
 80092f0:	4603      	mov	r3, r0
 80092f2:	4293      	cmp	r3, r2
 80092f4:	d100      	bne.n	80092f8 <memset+0xa>
 80092f6:	4770      	bx	lr
 80092f8:	f803 1b01 	strb.w	r1, [r3], #1
 80092fc:	e7f9      	b.n	80092f2 <memset+0x4>
	...

08009300 <_localeconv_r>:
 8009300:	4800      	ldr	r0, [pc, #0]	@ (8009304 <_localeconv_r+0x4>)
 8009302:	4770      	bx	lr
 8009304:	2000015c 	.word	0x2000015c

08009308 <_close_r>:
 8009308:	b538      	push	{r3, r4, r5, lr}
 800930a:	4d06      	ldr	r5, [pc, #24]	@ (8009324 <_close_r+0x1c>)
 800930c:	2300      	movs	r3, #0
 800930e:	4604      	mov	r4, r0
 8009310:	4608      	mov	r0, r1
 8009312:	602b      	str	r3, [r5, #0]
 8009314:	f7f8 f970 	bl	80015f8 <_close>
 8009318:	1c43      	adds	r3, r0, #1
 800931a:	d102      	bne.n	8009322 <_close_r+0x1a>
 800931c:	682b      	ldr	r3, [r5, #0]
 800931e:	b103      	cbz	r3, 8009322 <_close_r+0x1a>
 8009320:	6023      	str	r3, [r4, #0]
 8009322:	bd38      	pop	{r3, r4, r5, pc}
 8009324:	2000546c 	.word	0x2000546c

08009328 <_reclaim_reent>:
 8009328:	4b2d      	ldr	r3, [pc, #180]	@ (80093e0 <_reclaim_reent+0xb8>)
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	4283      	cmp	r3, r0
 800932e:	b570      	push	{r4, r5, r6, lr}
 8009330:	4604      	mov	r4, r0
 8009332:	d053      	beq.n	80093dc <_reclaim_reent+0xb4>
 8009334:	69c3      	ldr	r3, [r0, #28]
 8009336:	b31b      	cbz	r3, 8009380 <_reclaim_reent+0x58>
 8009338:	68db      	ldr	r3, [r3, #12]
 800933a:	b163      	cbz	r3, 8009356 <_reclaim_reent+0x2e>
 800933c:	2500      	movs	r5, #0
 800933e:	69e3      	ldr	r3, [r4, #28]
 8009340:	68db      	ldr	r3, [r3, #12]
 8009342:	5959      	ldr	r1, [r3, r5]
 8009344:	b9b1      	cbnz	r1, 8009374 <_reclaim_reent+0x4c>
 8009346:	3504      	adds	r5, #4
 8009348:	2d80      	cmp	r5, #128	@ 0x80
 800934a:	d1f8      	bne.n	800933e <_reclaim_reent+0x16>
 800934c:	69e3      	ldr	r3, [r4, #28]
 800934e:	4620      	mov	r0, r4
 8009350:	68d9      	ldr	r1, [r3, #12]
 8009352:	f000 ff31 	bl	800a1b8 <_free_r>
 8009356:	69e3      	ldr	r3, [r4, #28]
 8009358:	6819      	ldr	r1, [r3, #0]
 800935a:	b111      	cbz	r1, 8009362 <_reclaim_reent+0x3a>
 800935c:	4620      	mov	r0, r4
 800935e:	f000 ff2b 	bl	800a1b8 <_free_r>
 8009362:	69e3      	ldr	r3, [r4, #28]
 8009364:	689d      	ldr	r5, [r3, #8]
 8009366:	b15d      	cbz	r5, 8009380 <_reclaim_reent+0x58>
 8009368:	4629      	mov	r1, r5
 800936a:	4620      	mov	r0, r4
 800936c:	682d      	ldr	r5, [r5, #0]
 800936e:	f000 ff23 	bl	800a1b8 <_free_r>
 8009372:	e7f8      	b.n	8009366 <_reclaim_reent+0x3e>
 8009374:	680e      	ldr	r6, [r1, #0]
 8009376:	4620      	mov	r0, r4
 8009378:	f000 ff1e 	bl	800a1b8 <_free_r>
 800937c:	4631      	mov	r1, r6
 800937e:	e7e1      	b.n	8009344 <_reclaim_reent+0x1c>
 8009380:	6961      	ldr	r1, [r4, #20]
 8009382:	b111      	cbz	r1, 800938a <_reclaim_reent+0x62>
 8009384:	4620      	mov	r0, r4
 8009386:	f000 ff17 	bl	800a1b8 <_free_r>
 800938a:	69e1      	ldr	r1, [r4, #28]
 800938c:	b111      	cbz	r1, 8009394 <_reclaim_reent+0x6c>
 800938e:	4620      	mov	r0, r4
 8009390:	f000 ff12 	bl	800a1b8 <_free_r>
 8009394:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8009396:	b111      	cbz	r1, 800939e <_reclaim_reent+0x76>
 8009398:	4620      	mov	r0, r4
 800939a:	f000 ff0d 	bl	800a1b8 <_free_r>
 800939e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80093a0:	b111      	cbz	r1, 80093a8 <_reclaim_reent+0x80>
 80093a2:	4620      	mov	r0, r4
 80093a4:	f000 ff08 	bl	800a1b8 <_free_r>
 80093a8:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80093aa:	b111      	cbz	r1, 80093b2 <_reclaim_reent+0x8a>
 80093ac:	4620      	mov	r0, r4
 80093ae:	f000 ff03 	bl	800a1b8 <_free_r>
 80093b2:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80093b4:	b111      	cbz	r1, 80093bc <_reclaim_reent+0x94>
 80093b6:	4620      	mov	r0, r4
 80093b8:	f000 fefe 	bl	800a1b8 <_free_r>
 80093bc:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80093be:	b111      	cbz	r1, 80093c6 <_reclaim_reent+0x9e>
 80093c0:	4620      	mov	r0, r4
 80093c2:	f000 fef9 	bl	800a1b8 <_free_r>
 80093c6:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80093c8:	b111      	cbz	r1, 80093d0 <_reclaim_reent+0xa8>
 80093ca:	4620      	mov	r0, r4
 80093cc:	f000 fef4 	bl	800a1b8 <_free_r>
 80093d0:	6a23      	ldr	r3, [r4, #32]
 80093d2:	b11b      	cbz	r3, 80093dc <_reclaim_reent+0xb4>
 80093d4:	4620      	mov	r0, r4
 80093d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80093da:	4718      	bx	r3
 80093dc:	bd70      	pop	{r4, r5, r6, pc}
 80093de:	bf00      	nop
 80093e0:	2000001c 	.word	0x2000001c

080093e4 <_lseek_r>:
 80093e4:	b538      	push	{r3, r4, r5, lr}
 80093e6:	4d07      	ldr	r5, [pc, #28]	@ (8009404 <_lseek_r+0x20>)
 80093e8:	4604      	mov	r4, r0
 80093ea:	4608      	mov	r0, r1
 80093ec:	4611      	mov	r1, r2
 80093ee:	2200      	movs	r2, #0
 80093f0:	602a      	str	r2, [r5, #0]
 80093f2:	461a      	mov	r2, r3
 80093f4:	f7f8 f927 	bl	8001646 <_lseek>
 80093f8:	1c43      	adds	r3, r0, #1
 80093fa:	d102      	bne.n	8009402 <_lseek_r+0x1e>
 80093fc:	682b      	ldr	r3, [r5, #0]
 80093fe:	b103      	cbz	r3, 8009402 <_lseek_r+0x1e>
 8009400:	6023      	str	r3, [r4, #0]
 8009402:	bd38      	pop	{r3, r4, r5, pc}
 8009404:	2000546c 	.word	0x2000546c

08009408 <_read_r>:
 8009408:	b538      	push	{r3, r4, r5, lr}
 800940a:	4d07      	ldr	r5, [pc, #28]	@ (8009428 <_read_r+0x20>)
 800940c:	4604      	mov	r4, r0
 800940e:	4608      	mov	r0, r1
 8009410:	4611      	mov	r1, r2
 8009412:	2200      	movs	r2, #0
 8009414:	602a      	str	r2, [r5, #0]
 8009416:	461a      	mov	r2, r3
 8009418:	f7f8 f8d1 	bl	80015be <_read>
 800941c:	1c43      	adds	r3, r0, #1
 800941e:	d102      	bne.n	8009426 <_read_r+0x1e>
 8009420:	682b      	ldr	r3, [r5, #0]
 8009422:	b103      	cbz	r3, 8009426 <_read_r+0x1e>
 8009424:	6023      	str	r3, [r4, #0]
 8009426:	bd38      	pop	{r3, r4, r5, pc}
 8009428:	2000546c 	.word	0x2000546c

0800942c <_write_r>:
 800942c:	b538      	push	{r3, r4, r5, lr}
 800942e:	4d07      	ldr	r5, [pc, #28]	@ (800944c <_write_r+0x20>)
 8009430:	4604      	mov	r4, r0
 8009432:	4608      	mov	r0, r1
 8009434:	4611      	mov	r1, r2
 8009436:	2200      	movs	r2, #0
 8009438:	602a      	str	r2, [r5, #0]
 800943a:	461a      	mov	r2, r3
 800943c:	f7f7 fd6a 	bl	8000f14 <_write>
 8009440:	1c43      	adds	r3, r0, #1
 8009442:	d102      	bne.n	800944a <_write_r+0x1e>
 8009444:	682b      	ldr	r3, [r5, #0]
 8009446:	b103      	cbz	r3, 800944a <_write_r+0x1e>
 8009448:	6023      	str	r3, [r4, #0]
 800944a:	bd38      	pop	{r3, r4, r5, pc}
 800944c:	2000546c 	.word	0x2000546c

08009450 <__errno>:
 8009450:	4b01      	ldr	r3, [pc, #4]	@ (8009458 <__errno+0x8>)
 8009452:	6818      	ldr	r0, [r3, #0]
 8009454:	4770      	bx	lr
 8009456:	bf00      	nop
 8009458:	2000001c 	.word	0x2000001c

0800945c <__libc_init_array>:
 800945c:	b570      	push	{r4, r5, r6, lr}
 800945e:	4d0d      	ldr	r5, [pc, #52]	@ (8009494 <__libc_init_array+0x38>)
 8009460:	4c0d      	ldr	r4, [pc, #52]	@ (8009498 <__libc_init_array+0x3c>)
 8009462:	1b64      	subs	r4, r4, r5
 8009464:	10a4      	asrs	r4, r4, #2
 8009466:	2600      	movs	r6, #0
 8009468:	42a6      	cmp	r6, r4
 800946a:	d109      	bne.n	8009480 <__libc_init_array+0x24>
 800946c:	4d0b      	ldr	r5, [pc, #44]	@ (800949c <__libc_init_array+0x40>)
 800946e:	4c0c      	ldr	r4, [pc, #48]	@ (80094a0 <__libc_init_array+0x44>)
 8009470:	f001 fec2 	bl	800b1f8 <_init>
 8009474:	1b64      	subs	r4, r4, r5
 8009476:	10a4      	asrs	r4, r4, #2
 8009478:	2600      	movs	r6, #0
 800947a:	42a6      	cmp	r6, r4
 800947c:	d105      	bne.n	800948a <__libc_init_array+0x2e>
 800947e:	bd70      	pop	{r4, r5, r6, pc}
 8009480:	f855 3b04 	ldr.w	r3, [r5], #4
 8009484:	4798      	blx	r3
 8009486:	3601      	adds	r6, #1
 8009488:	e7ee      	b.n	8009468 <__libc_init_array+0xc>
 800948a:	f855 3b04 	ldr.w	r3, [r5], #4
 800948e:	4798      	blx	r3
 8009490:	3601      	adds	r6, #1
 8009492:	e7f2      	b.n	800947a <__libc_init_array+0x1e>
 8009494:	0800b724 	.word	0x0800b724
 8009498:	0800b724 	.word	0x0800b724
 800949c:	0800b724 	.word	0x0800b724
 80094a0:	0800b728 	.word	0x0800b728

080094a4 <__retarget_lock_init_recursive>:
 80094a4:	4770      	bx	lr

080094a6 <__retarget_lock_acquire_recursive>:
 80094a6:	4770      	bx	lr

080094a8 <__retarget_lock_release_recursive>:
 80094a8:	4770      	bx	lr

080094aa <memcpy>:
 80094aa:	440a      	add	r2, r1
 80094ac:	4291      	cmp	r1, r2
 80094ae:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80094b2:	d100      	bne.n	80094b6 <memcpy+0xc>
 80094b4:	4770      	bx	lr
 80094b6:	b510      	push	{r4, lr}
 80094b8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80094bc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80094c0:	4291      	cmp	r1, r2
 80094c2:	d1f9      	bne.n	80094b8 <memcpy+0xe>
 80094c4:	bd10      	pop	{r4, pc}
	...

080094c8 <__assert_func>:
 80094c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80094ca:	4614      	mov	r4, r2
 80094cc:	461a      	mov	r2, r3
 80094ce:	4b09      	ldr	r3, [pc, #36]	@ (80094f4 <__assert_func+0x2c>)
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	4605      	mov	r5, r0
 80094d4:	68d8      	ldr	r0, [r3, #12]
 80094d6:	b14c      	cbz	r4, 80094ec <__assert_func+0x24>
 80094d8:	4b07      	ldr	r3, [pc, #28]	@ (80094f8 <__assert_func+0x30>)
 80094da:	9100      	str	r1, [sp, #0]
 80094dc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80094e0:	4906      	ldr	r1, [pc, #24]	@ (80094fc <__assert_func+0x34>)
 80094e2:	462b      	mov	r3, r5
 80094e4:	f001 fcd0 	bl	800ae88 <fiprintf>
 80094e8:	f001 fd84 	bl	800aff4 <abort>
 80094ec:	4b04      	ldr	r3, [pc, #16]	@ (8009500 <__assert_func+0x38>)
 80094ee:	461c      	mov	r4, r3
 80094f0:	e7f3      	b.n	80094da <__assert_func+0x12>
 80094f2:	bf00      	nop
 80094f4:	2000001c 	.word	0x2000001c
 80094f8:	0800b3f3 	.word	0x0800b3f3
 80094fc:	0800b400 	.word	0x0800b400
 8009500:	0800b42e 	.word	0x0800b42e

08009504 <quorem>:
 8009504:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009508:	6903      	ldr	r3, [r0, #16]
 800950a:	690c      	ldr	r4, [r1, #16]
 800950c:	42a3      	cmp	r3, r4
 800950e:	4607      	mov	r7, r0
 8009510:	db7e      	blt.n	8009610 <quorem+0x10c>
 8009512:	3c01      	subs	r4, #1
 8009514:	f101 0814 	add.w	r8, r1, #20
 8009518:	00a3      	lsls	r3, r4, #2
 800951a:	f100 0514 	add.w	r5, r0, #20
 800951e:	9300      	str	r3, [sp, #0]
 8009520:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009524:	9301      	str	r3, [sp, #4]
 8009526:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800952a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800952e:	3301      	adds	r3, #1
 8009530:	429a      	cmp	r2, r3
 8009532:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009536:	fbb2 f6f3 	udiv	r6, r2, r3
 800953a:	d32e      	bcc.n	800959a <quorem+0x96>
 800953c:	f04f 0a00 	mov.w	sl, #0
 8009540:	46c4      	mov	ip, r8
 8009542:	46ae      	mov	lr, r5
 8009544:	46d3      	mov	fp, sl
 8009546:	f85c 3b04 	ldr.w	r3, [ip], #4
 800954a:	b298      	uxth	r0, r3
 800954c:	fb06 a000 	mla	r0, r6, r0, sl
 8009550:	0c02      	lsrs	r2, r0, #16
 8009552:	0c1b      	lsrs	r3, r3, #16
 8009554:	fb06 2303 	mla	r3, r6, r3, r2
 8009558:	f8de 2000 	ldr.w	r2, [lr]
 800955c:	b280      	uxth	r0, r0
 800955e:	b292      	uxth	r2, r2
 8009560:	1a12      	subs	r2, r2, r0
 8009562:	445a      	add	r2, fp
 8009564:	f8de 0000 	ldr.w	r0, [lr]
 8009568:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800956c:	b29b      	uxth	r3, r3
 800956e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8009572:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8009576:	b292      	uxth	r2, r2
 8009578:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800957c:	45e1      	cmp	r9, ip
 800957e:	f84e 2b04 	str.w	r2, [lr], #4
 8009582:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8009586:	d2de      	bcs.n	8009546 <quorem+0x42>
 8009588:	9b00      	ldr	r3, [sp, #0]
 800958a:	58eb      	ldr	r3, [r5, r3]
 800958c:	b92b      	cbnz	r3, 800959a <quorem+0x96>
 800958e:	9b01      	ldr	r3, [sp, #4]
 8009590:	3b04      	subs	r3, #4
 8009592:	429d      	cmp	r5, r3
 8009594:	461a      	mov	r2, r3
 8009596:	d32f      	bcc.n	80095f8 <quorem+0xf4>
 8009598:	613c      	str	r4, [r7, #16]
 800959a:	4638      	mov	r0, r7
 800959c:	f001 f97e 	bl	800a89c <__mcmp>
 80095a0:	2800      	cmp	r0, #0
 80095a2:	db25      	blt.n	80095f0 <quorem+0xec>
 80095a4:	4629      	mov	r1, r5
 80095a6:	2000      	movs	r0, #0
 80095a8:	f858 2b04 	ldr.w	r2, [r8], #4
 80095ac:	f8d1 c000 	ldr.w	ip, [r1]
 80095b0:	fa1f fe82 	uxth.w	lr, r2
 80095b4:	fa1f f38c 	uxth.w	r3, ip
 80095b8:	eba3 030e 	sub.w	r3, r3, lr
 80095bc:	4403      	add	r3, r0
 80095be:	0c12      	lsrs	r2, r2, #16
 80095c0:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80095c4:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80095c8:	b29b      	uxth	r3, r3
 80095ca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80095ce:	45c1      	cmp	r9, r8
 80095d0:	f841 3b04 	str.w	r3, [r1], #4
 80095d4:	ea4f 4022 	mov.w	r0, r2, asr #16
 80095d8:	d2e6      	bcs.n	80095a8 <quorem+0xa4>
 80095da:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80095de:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80095e2:	b922      	cbnz	r2, 80095ee <quorem+0xea>
 80095e4:	3b04      	subs	r3, #4
 80095e6:	429d      	cmp	r5, r3
 80095e8:	461a      	mov	r2, r3
 80095ea:	d30b      	bcc.n	8009604 <quorem+0x100>
 80095ec:	613c      	str	r4, [r7, #16]
 80095ee:	3601      	adds	r6, #1
 80095f0:	4630      	mov	r0, r6
 80095f2:	b003      	add	sp, #12
 80095f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095f8:	6812      	ldr	r2, [r2, #0]
 80095fa:	3b04      	subs	r3, #4
 80095fc:	2a00      	cmp	r2, #0
 80095fe:	d1cb      	bne.n	8009598 <quorem+0x94>
 8009600:	3c01      	subs	r4, #1
 8009602:	e7c6      	b.n	8009592 <quorem+0x8e>
 8009604:	6812      	ldr	r2, [r2, #0]
 8009606:	3b04      	subs	r3, #4
 8009608:	2a00      	cmp	r2, #0
 800960a:	d1ef      	bne.n	80095ec <quorem+0xe8>
 800960c:	3c01      	subs	r4, #1
 800960e:	e7ea      	b.n	80095e6 <quorem+0xe2>
 8009610:	2000      	movs	r0, #0
 8009612:	e7ee      	b.n	80095f2 <quorem+0xee>
 8009614:	0000      	movs	r0, r0
	...

08009618 <_dtoa_r>:
 8009618:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800961c:	69c7      	ldr	r7, [r0, #28]
 800961e:	b097      	sub	sp, #92	@ 0x5c
 8009620:	ed8d 0b04 	vstr	d0, [sp, #16]
 8009624:	ec55 4b10 	vmov	r4, r5, d0
 8009628:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800962a:	9107      	str	r1, [sp, #28]
 800962c:	4681      	mov	r9, r0
 800962e:	920c      	str	r2, [sp, #48]	@ 0x30
 8009630:	9311      	str	r3, [sp, #68]	@ 0x44
 8009632:	b97f      	cbnz	r7, 8009654 <_dtoa_r+0x3c>
 8009634:	2010      	movs	r0, #16
 8009636:	f000 fe09 	bl	800a24c <malloc>
 800963a:	4602      	mov	r2, r0
 800963c:	f8c9 001c 	str.w	r0, [r9, #28]
 8009640:	b920      	cbnz	r0, 800964c <_dtoa_r+0x34>
 8009642:	4ba9      	ldr	r3, [pc, #676]	@ (80098e8 <_dtoa_r+0x2d0>)
 8009644:	21ef      	movs	r1, #239	@ 0xef
 8009646:	48a9      	ldr	r0, [pc, #676]	@ (80098ec <_dtoa_r+0x2d4>)
 8009648:	f7ff ff3e 	bl	80094c8 <__assert_func>
 800964c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8009650:	6007      	str	r7, [r0, #0]
 8009652:	60c7      	str	r7, [r0, #12]
 8009654:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8009658:	6819      	ldr	r1, [r3, #0]
 800965a:	b159      	cbz	r1, 8009674 <_dtoa_r+0x5c>
 800965c:	685a      	ldr	r2, [r3, #4]
 800965e:	604a      	str	r2, [r1, #4]
 8009660:	2301      	movs	r3, #1
 8009662:	4093      	lsls	r3, r2
 8009664:	608b      	str	r3, [r1, #8]
 8009666:	4648      	mov	r0, r9
 8009668:	f000 fee6 	bl	800a438 <_Bfree>
 800966c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8009670:	2200      	movs	r2, #0
 8009672:	601a      	str	r2, [r3, #0]
 8009674:	1e2b      	subs	r3, r5, #0
 8009676:	bfb9      	ittee	lt
 8009678:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800967c:	9305      	strlt	r3, [sp, #20]
 800967e:	2300      	movge	r3, #0
 8009680:	6033      	strge	r3, [r6, #0]
 8009682:	9f05      	ldr	r7, [sp, #20]
 8009684:	4b9a      	ldr	r3, [pc, #616]	@ (80098f0 <_dtoa_r+0x2d8>)
 8009686:	bfbc      	itt	lt
 8009688:	2201      	movlt	r2, #1
 800968a:	6032      	strlt	r2, [r6, #0]
 800968c:	43bb      	bics	r3, r7
 800968e:	d112      	bne.n	80096b6 <_dtoa_r+0x9e>
 8009690:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8009692:	f242 730f 	movw	r3, #9999	@ 0x270f
 8009696:	6013      	str	r3, [r2, #0]
 8009698:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800969c:	4323      	orrs	r3, r4
 800969e:	f000 855a 	beq.w	800a156 <_dtoa_r+0xb3e>
 80096a2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80096a4:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8009904 <_dtoa_r+0x2ec>
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	f000 855c 	beq.w	800a166 <_dtoa_r+0xb4e>
 80096ae:	f10a 0303 	add.w	r3, sl, #3
 80096b2:	f000 bd56 	b.w	800a162 <_dtoa_r+0xb4a>
 80096b6:	ed9d 7b04 	vldr	d7, [sp, #16]
 80096ba:	2200      	movs	r2, #0
 80096bc:	ec51 0b17 	vmov	r0, r1, d7
 80096c0:	2300      	movs	r3, #0
 80096c2:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 80096c6:	f7f7 fa1f 	bl	8000b08 <__aeabi_dcmpeq>
 80096ca:	4680      	mov	r8, r0
 80096cc:	b158      	cbz	r0, 80096e6 <_dtoa_r+0xce>
 80096ce:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80096d0:	2301      	movs	r3, #1
 80096d2:	6013      	str	r3, [r2, #0]
 80096d4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80096d6:	b113      	cbz	r3, 80096de <_dtoa_r+0xc6>
 80096d8:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80096da:	4b86      	ldr	r3, [pc, #536]	@ (80098f4 <_dtoa_r+0x2dc>)
 80096dc:	6013      	str	r3, [r2, #0]
 80096de:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8009908 <_dtoa_r+0x2f0>
 80096e2:	f000 bd40 	b.w	800a166 <_dtoa_r+0xb4e>
 80096e6:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 80096ea:	aa14      	add	r2, sp, #80	@ 0x50
 80096ec:	a915      	add	r1, sp, #84	@ 0x54
 80096ee:	4648      	mov	r0, r9
 80096f0:	f001 f984 	bl	800a9fc <__d2b>
 80096f4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80096f8:	9002      	str	r0, [sp, #8]
 80096fa:	2e00      	cmp	r6, #0
 80096fc:	d078      	beq.n	80097f0 <_dtoa_r+0x1d8>
 80096fe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009700:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8009704:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009708:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800970c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8009710:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8009714:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8009718:	4619      	mov	r1, r3
 800971a:	2200      	movs	r2, #0
 800971c:	4b76      	ldr	r3, [pc, #472]	@ (80098f8 <_dtoa_r+0x2e0>)
 800971e:	f7f6 fdd3 	bl	80002c8 <__aeabi_dsub>
 8009722:	a36b      	add	r3, pc, #428	@ (adr r3, 80098d0 <_dtoa_r+0x2b8>)
 8009724:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009728:	f7f6 ff86 	bl	8000638 <__aeabi_dmul>
 800972c:	a36a      	add	r3, pc, #424	@ (adr r3, 80098d8 <_dtoa_r+0x2c0>)
 800972e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009732:	f7f6 fdcb 	bl	80002cc <__adddf3>
 8009736:	4604      	mov	r4, r0
 8009738:	4630      	mov	r0, r6
 800973a:	460d      	mov	r5, r1
 800973c:	f7f6 ff12 	bl	8000564 <__aeabi_i2d>
 8009740:	a367      	add	r3, pc, #412	@ (adr r3, 80098e0 <_dtoa_r+0x2c8>)
 8009742:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009746:	f7f6 ff77 	bl	8000638 <__aeabi_dmul>
 800974a:	4602      	mov	r2, r0
 800974c:	460b      	mov	r3, r1
 800974e:	4620      	mov	r0, r4
 8009750:	4629      	mov	r1, r5
 8009752:	f7f6 fdbb 	bl	80002cc <__adddf3>
 8009756:	4604      	mov	r4, r0
 8009758:	460d      	mov	r5, r1
 800975a:	f7f7 fa1d 	bl	8000b98 <__aeabi_d2iz>
 800975e:	2200      	movs	r2, #0
 8009760:	4607      	mov	r7, r0
 8009762:	2300      	movs	r3, #0
 8009764:	4620      	mov	r0, r4
 8009766:	4629      	mov	r1, r5
 8009768:	f7f7 f9d8 	bl	8000b1c <__aeabi_dcmplt>
 800976c:	b140      	cbz	r0, 8009780 <_dtoa_r+0x168>
 800976e:	4638      	mov	r0, r7
 8009770:	f7f6 fef8 	bl	8000564 <__aeabi_i2d>
 8009774:	4622      	mov	r2, r4
 8009776:	462b      	mov	r3, r5
 8009778:	f7f7 f9c6 	bl	8000b08 <__aeabi_dcmpeq>
 800977c:	b900      	cbnz	r0, 8009780 <_dtoa_r+0x168>
 800977e:	3f01      	subs	r7, #1
 8009780:	2f16      	cmp	r7, #22
 8009782:	d852      	bhi.n	800982a <_dtoa_r+0x212>
 8009784:	4b5d      	ldr	r3, [pc, #372]	@ (80098fc <_dtoa_r+0x2e4>)
 8009786:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800978a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800978e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8009792:	f7f7 f9c3 	bl	8000b1c <__aeabi_dcmplt>
 8009796:	2800      	cmp	r0, #0
 8009798:	d049      	beq.n	800982e <_dtoa_r+0x216>
 800979a:	3f01      	subs	r7, #1
 800979c:	2300      	movs	r3, #0
 800979e:	9310      	str	r3, [sp, #64]	@ 0x40
 80097a0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80097a2:	1b9b      	subs	r3, r3, r6
 80097a4:	1e5a      	subs	r2, r3, #1
 80097a6:	bf45      	ittet	mi
 80097a8:	f1c3 0301 	rsbmi	r3, r3, #1
 80097ac:	9300      	strmi	r3, [sp, #0]
 80097ae:	2300      	movpl	r3, #0
 80097b0:	2300      	movmi	r3, #0
 80097b2:	9206      	str	r2, [sp, #24]
 80097b4:	bf54      	ite	pl
 80097b6:	9300      	strpl	r3, [sp, #0]
 80097b8:	9306      	strmi	r3, [sp, #24]
 80097ba:	2f00      	cmp	r7, #0
 80097bc:	db39      	blt.n	8009832 <_dtoa_r+0x21a>
 80097be:	9b06      	ldr	r3, [sp, #24]
 80097c0:	970d      	str	r7, [sp, #52]	@ 0x34
 80097c2:	443b      	add	r3, r7
 80097c4:	9306      	str	r3, [sp, #24]
 80097c6:	2300      	movs	r3, #0
 80097c8:	9308      	str	r3, [sp, #32]
 80097ca:	9b07      	ldr	r3, [sp, #28]
 80097cc:	2b09      	cmp	r3, #9
 80097ce:	d863      	bhi.n	8009898 <_dtoa_r+0x280>
 80097d0:	2b05      	cmp	r3, #5
 80097d2:	bfc4      	itt	gt
 80097d4:	3b04      	subgt	r3, #4
 80097d6:	9307      	strgt	r3, [sp, #28]
 80097d8:	9b07      	ldr	r3, [sp, #28]
 80097da:	f1a3 0302 	sub.w	r3, r3, #2
 80097de:	bfcc      	ite	gt
 80097e0:	2400      	movgt	r4, #0
 80097e2:	2401      	movle	r4, #1
 80097e4:	2b03      	cmp	r3, #3
 80097e6:	d863      	bhi.n	80098b0 <_dtoa_r+0x298>
 80097e8:	e8df f003 	tbb	[pc, r3]
 80097ec:	2b375452 	.word	0x2b375452
 80097f0:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80097f4:	441e      	add	r6, r3
 80097f6:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80097fa:	2b20      	cmp	r3, #32
 80097fc:	bfc1      	itttt	gt
 80097fe:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8009802:	409f      	lslgt	r7, r3
 8009804:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8009808:	fa24 f303 	lsrgt.w	r3, r4, r3
 800980c:	bfd6      	itet	le
 800980e:	f1c3 0320 	rsble	r3, r3, #32
 8009812:	ea47 0003 	orrgt.w	r0, r7, r3
 8009816:	fa04 f003 	lslle.w	r0, r4, r3
 800981a:	f7f6 fe93 	bl	8000544 <__aeabi_ui2d>
 800981e:	2201      	movs	r2, #1
 8009820:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8009824:	3e01      	subs	r6, #1
 8009826:	9212      	str	r2, [sp, #72]	@ 0x48
 8009828:	e776      	b.n	8009718 <_dtoa_r+0x100>
 800982a:	2301      	movs	r3, #1
 800982c:	e7b7      	b.n	800979e <_dtoa_r+0x186>
 800982e:	9010      	str	r0, [sp, #64]	@ 0x40
 8009830:	e7b6      	b.n	80097a0 <_dtoa_r+0x188>
 8009832:	9b00      	ldr	r3, [sp, #0]
 8009834:	1bdb      	subs	r3, r3, r7
 8009836:	9300      	str	r3, [sp, #0]
 8009838:	427b      	negs	r3, r7
 800983a:	9308      	str	r3, [sp, #32]
 800983c:	2300      	movs	r3, #0
 800983e:	930d      	str	r3, [sp, #52]	@ 0x34
 8009840:	e7c3      	b.n	80097ca <_dtoa_r+0x1b2>
 8009842:	2301      	movs	r3, #1
 8009844:	9309      	str	r3, [sp, #36]	@ 0x24
 8009846:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009848:	eb07 0b03 	add.w	fp, r7, r3
 800984c:	f10b 0301 	add.w	r3, fp, #1
 8009850:	2b01      	cmp	r3, #1
 8009852:	9303      	str	r3, [sp, #12]
 8009854:	bfb8      	it	lt
 8009856:	2301      	movlt	r3, #1
 8009858:	e006      	b.n	8009868 <_dtoa_r+0x250>
 800985a:	2301      	movs	r3, #1
 800985c:	9309      	str	r3, [sp, #36]	@ 0x24
 800985e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009860:	2b00      	cmp	r3, #0
 8009862:	dd28      	ble.n	80098b6 <_dtoa_r+0x29e>
 8009864:	469b      	mov	fp, r3
 8009866:	9303      	str	r3, [sp, #12]
 8009868:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800986c:	2100      	movs	r1, #0
 800986e:	2204      	movs	r2, #4
 8009870:	f102 0514 	add.w	r5, r2, #20
 8009874:	429d      	cmp	r5, r3
 8009876:	d926      	bls.n	80098c6 <_dtoa_r+0x2ae>
 8009878:	6041      	str	r1, [r0, #4]
 800987a:	4648      	mov	r0, r9
 800987c:	f000 fd9c 	bl	800a3b8 <_Balloc>
 8009880:	4682      	mov	sl, r0
 8009882:	2800      	cmp	r0, #0
 8009884:	d142      	bne.n	800990c <_dtoa_r+0x2f4>
 8009886:	4b1e      	ldr	r3, [pc, #120]	@ (8009900 <_dtoa_r+0x2e8>)
 8009888:	4602      	mov	r2, r0
 800988a:	f240 11af 	movw	r1, #431	@ 0x1af
 800988e:	e6da      	b.n	8009646 <_dtoa_r+0x2e>
 8009890:	2300      	movs	r3, #0
 8009892:	e7e3      	b.n	800985c <_dtoa_r+0x244>
 8009894:	2300      	movs	r3, #0
 8009896:	e7d5      	b.n	8009844 <_dtoa_r+0x22c>
 8009898:	2401      	movs	r4, #1
 800989a:	2300      	movs	r3, #0
 800989c:	9307      	str	r3, [sp, #28]
 800989e:	9409      	str	r4, [sp, #36]	@ 0x24
 80098a0:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 80098a4:	2200      	movs	r2, #0
 80098a6:	f8cd b00c 	str.w	fp, [sp, #12]
 80098aa:	2312      	movs	r3, #18
 80098ac:	920c      	str	r2, [sp, #48]	@ 0x30
 80098ae:	e7db      	b.n	8009868 <_dtoa_r+0x250>
 80098b0:	2301      	movs	r3, #1
 80098b2:	9309      	str	r3, [sp, #36]	@ 0x24
 80098b4:	e7f4      	b.n	80098a0 <_dtoa_r+0x288>
 80098b6:	f04f 0b01 	mov.w	fp, #1
 80098ba:	f8cd b00c 	str.w	fp, [sp, #12]
 80098be:	465b      	mov	r3, fp
 80098c0:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 80098c4:	e7d0      	b.n	8009868 <_dtoa_r+0x250>
 80098c6:	3101      	adds	r1, #1
 80098c8:	0052      	lsls	r2, r2, #1
 80098ca:	e7d1      	b.n	8009870 <_dtoa_r+0x258>
 80098cc:	f3af 8000 	nop.w
 80098d0:	636f4361 	.word	0x636f4361
 80098d4:	3fd287a7 	.word	0x3fd287a7
 80098d8:	8b60c8b3 	.word	0x8b60c8b3
 80098dc:	3fc68a28 	.word	0x3fc68a28
 80098e0:	509f79fb 	.word	0x509f79fb
 80098e4:	3fd34413 	.word	0x3fd34413
 80098e8:	0800b350 	.word	0x0800b350
 80098ec:	0800b43c 	.word	0x0800b43c
 80098f0:	7ff00000 	.word	0x7ff00000
 80098f4:	0800b3d0 	.word	0x0800b3d0
 80098f8:	3ff80000 	.word	0x3ff80000
 80098fc:	0800b550 	.word	0x0800b550
 8009900:	0800b494 	.word	0x0800b494
 8009904:	0800b438 	.word	0x0800b438
 8009908:	0800b3cf 	.word	0x0800b3cf
 800990c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8009910:	6018      	str	r0, [r3, #0]
 8009912:	9b03      	ldr	r3, [sp, #12]
 8009914:	2b0e      	cmp	r3, #14
 8009916:	f200 80a1 	bhi.w	8009a5c <_dtoa_r+0x444>
 800991a:	2c00      	cmp	r4, #0
 800991c:	f000 809e 	beq.w	8009a5c <_dtoa_r+0x444>
 8009920:	2f00      	cmp	r7, #0
 8009922:	dd33      	ble.n	800998c <_dtoa_r+0x374>
 8009924:	4b9c      	ldr	r3, [pc, #624]	@ (8009b98 <_dtoa_r+0x580>)
 8009926:	f007 020f 	and.w	r2, r7, #15
 800992a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800992e:	ed93 7b00 	vldr	d7, [r3]
 8009932:	05f8      	lsls	r0, r7, #23
 8009934:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8009938:	ea4f 1427 	mov.w	r4, r7, asr #4
 800993c:	d516      	bpl.n	800996c <_dtoa_r+0x354>
 800993e:	4b97      	ldr	r3, [pc, #604]	@ (8009b9c <_dtoa_r+0x584>)
 8009940:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8009944:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009948:	f7f6 ffa0 	bl	800088c <__aeabi_ddiv>
 800994c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009950:	f004 040f 	and.w	r4, r4, #15
 8009954:	2603      	movs	r6, #3
 8009956:	4d91      	ldr	r5, [pc, #580]	@ (8009b9c <_dtoa_r+0x584>)
 8009958:	b954      	cbnz	r4, 8009970 <_dtoa_r+0x358>
 800995a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800995e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009962:	f7f6 ff93 	bl	800088c <__aeabi_ddiv>
 8009966:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800996a:	e028      	b.n	80099be <_dtoa_r+0x3a6>
 800996c:	2602      	movs	r6, #2
 800996e:	e7f2      	b.n	8009956 <_dtoa_r+0x33e>
 8009970:	07e1      	lsls	r1, r4, #31
 8009972:	d508      	bpl.n	8009986 <_dtoa_r+0x36e>
 8009974:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8009978:	e9d5 2300 	ldrd	r2, r3, [r5]
 800997c:	f7f6 fe5c 	bl	8000638 <__aeabi_dmul>
 8009980:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8009984:	3601      	adds	r6, #1
 8009986:	1064      	asrs	r4, r4, #1
 8009988:	3508      	adds	r5, #8
 800998a:	e7e5      	b.n	8009958 <_dtoa_r+0x340>
 800998c:	f000 80af 	beq.w	8009aee <_dtoa_r+0x4d6>
 8009990:	427c      	negs	r4, r7
 8009992:	4b81      	ldr	r3, [pc, #516]	@ (8009b98 <_dtoa_r+0x580>)
 8009994:	4d81      	ldr	r5, [pc, #516]	@ (8009b9c <_dtoa_r+0x584>)
 8009996:	f004 020f 	and.w	r2, r4, #15
 800999a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800999e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099a2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80099a6:	f7f6 fe47 	bl	8000638 <__aeabi_dmul>
 80099aa:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80099ae:	1124      	asrs	r4, r4, #4
 80099b0:	2300      	movs	r3, #0
 80099b2:	2602      	movs	r6, #2
 80099b4:	2c00      	cmp	r4, #0
 80099b6:	f040 808f 	bne.w	8009ad8 <_dtoa_r+0x4c0>
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d1d3      	bne.n	8009966 <_dtoa_r+0x34e>
 80099be:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80099c0:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	f000 8094 	beq.w	8009af2 <_dtoa_r+0x4da>
 80099ca:	4b75      	ldr	r3, [pc, #468]	@ (8009ba0 <_dtoa_r+0x588>)
 80099cc:	2200      	movs	r2, #0
 80099ce:	4620      	mov	r0, r4
 80099d0:	4629      	mov	r1, r5
 80099d2:	f7f7 f8a3 	bl	8000b1c <__aeabi_dcmplt>
 80099d6:	2800      	cmp	r0, #0
 80099d8:	f000 808b 	beq.w	8009af2 <_dtoa_r+0x4da>
 80099dc:	9b03      	ldr	r3, [sp, #12]
 80099de:	2b00      	cmp	r3, #0
 80099e0:	f000 8087 	beq.w	8009af2 <_dtoa_r+0x4da>
 80099e4:	f1bb 0f00 	cmp.w	fp, #0
 80099e8:	dd34      	ble.n	8009a54 <_dtoa_r+0x43c>
 80099ea:	4620      	mov	r0, r4
 80099ec:	4b6d      	ldr	r3, [pc, #436]	@ (8009ba4 <_dtoa_r+0x58c>)
 80099ee:	2200      	movs	r2, #0
 80099f0:	4629      	mov	r1, r5
 80099f2:	f7f6 fe21 	bl	8000638 <__aeabi_dmul>
 80099f6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80099fa:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 80099fe:	3601      	adds	r6, #1
 8009a00:	465c      	mov	r4, fp
 8009a02:	4630      	mov	r0, r6
 8009a04:	f7f6 fdae 	bl	8000564 <__aeabi_i2d>
 8009a08:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009a0c:	f7f6 fe14 	bl	8000638 <__aeabi_dmul>
 8009a10:	4b65      	ldr	r3, [pc, #404]	@ (8009ba8 <_dtoa_r+0x590>)
 8009a12:	2200      	movs	r2, #0
 8009a14:	f7f6 fc5a 	bl	80002cc <__adddf3>
 8009a18:	4605      	mov	r5, r0
 8009a1a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8009a1e:	2c00      	cmp	r4, #0
 8009a20:	d16a      	bne.n	8009af8 <_dtoa_r+0x4e0>
 8009a22:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009a26:	4b61      	ldr	r3, [pc, #388]	@ (8009bac <_dtoa_r+0x594>)
 8009a28:	2200      	movs	r2, #0
 8009a2a:	f7f6 fc4d 	bl	80002c8 <__aeabi_dsub>
 8009a2e:	4602      	mov	r2, r0
 8009a30:	460b      	mov	r3, r1
 8009a32:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009a36:	462a      	mov	r2, r5
 8009a38:	4633      	mov	r3, r6
 8009a3a:	f7f7 f88d 	bl	8000b58 <__aeabi_dcmpgt>
 8009a3e:	2800      	cmp	r0, #0
 8009a40:	f040 8298 	bne.w	8009f74 <_dtoa_r+0x95c>
 8009a44:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009a48:	462a      	mov	r2, r5
 8009a4a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8009a4e:	f7f7 f865 	bl	8000b1c <__aeabi_dcmplt>
 8009a52:	bb38      	cbnz	r0, 8009aa4 <_dtoa_r+0x48c>
 8009a54:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8009a58:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8009a5c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	f2c0 8157 	blt.w	8009d12 <_dtoa_r+0x6fa>
 8009a64:	2f0e      	cmp	r7, #14
 8009a66:	f300 8154 	bgt.w	8009d12 <_dtoa_r+0x6fa>
 8009a6a:	4b4b      	ldr	r3, [pc, #300]	@ (8009b98 <_dtoa_r+0x580>)
 8009a6c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009a70:	ed93 7b00 	vldr	d7, [r3]
 8009a74:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	ed8d 7b00 	vstr	d7, [sp]
 8009a7c:	f280 80e5 	bge.w	8009c4a <_dtoa_r+0x632>
 8009a80:	9b03      	ldr	r3, [sp, #12]
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	f300 80e1 	bgt.w	8009c4a <_dtoa_r+0x632>
 8009a88:	d10c      	bne.n	8009aa4 <_dtoa_r+0x48c>
 8009a8a:	4b48      	ldr	r3, [pc, #288]	@ (8009bac <_dtoa_r+0x594>)
 8009a8c:	2200      	movs	r2, #0
 8009a8e:	ec51 0b17 	vmov	r0, r1, d7
 8009a92:	f7f6 fdd1 	bl	8000638 <__aeabi_dmul>
 8009a96:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009a9a:	f7f7 f853 	bl	8000b44 <__aeabi_dcmpge>
 8009a9e:	2800      	cmp	r0, #0
 8009aa0:	f000 8266 	beq.w	8009f70 <_dtoa_r+0x958>
 8009aa4:	2400      	movs	r4, #0
 8009aa6:	4625      	mov	r5, r4
 8009aa8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009aaa:	4656      	mov	r6, sl
 8009aac:	ea6f 0803 	mvn.w	r8, r3
 8009ab0:	2700      	movs	r7, #0
 8009ab2:	4621      	mov	r1, r4
 8009ab4:	4648      	mov	r0, r9
 8009ab6:	f000 fcbf 	bl	800a438 <_Bfree>
 8009aba:	2d00      	cmp	r5, #0
 8009abc:	f000 80bd 	beq.w	8009c3a <_dtoa_r+0x622>
 8009ac0:	b12f      	cbz	r7, 8009ace <_dtoa_r+0x4b6>
 8009ac2:	42af      	cmp	r7, r5
 8009ac4:	d003      	beq.n	8009ace <_dtoa_r+0x4b6>
 8009ac6:	4639      	mov	r1, r7
 8009ac8:	4648      	mov	r0, r9
 8009aca:	f000 fcb5 	bl	800a438 <_Bfree>
 8009ace:	4629      	mov	r1, r5
 8009ad0:	4648      	mov	r0, r9
 8009ad2:	f000 fcb1 	bl	800a438 <_Bfree>
 8009ad6:	e0b0      	b.n	8009c3a <_dtoa_r+0x622>
 8009ad8:	07e2      	lsls	r2, r4, #31
 8009ada:	d505      	bpl.n	8009ae8 <_dtoa_r+0x4d0>
 8009adc:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009ae0:	f7f6 fdaa 	bl	8000638 <__aeabi_dmul>
 8009ae4:	3601      	adds	r6, #1
 8009ae6:	2301      	movs	r3, #1
 8009ae8:	1064      	asrs	r4, r4, #1
 8009aea:	3508      	adds	r5, #8
 8009aec:	e762      	b.n	80099b4 <_dtoa_r+0x39c>
 8009aee:	2602      	movs	r6, #2
 8009af0:	e765      	b.n	80099be <_dtoa_r+0x3a6>
 8009af2:	9c03      	ldr	r4, [sp, #12]
 8009af4:	46b8      	mov	r8, r7
 8009af6:	e784      	b.n	8009a02 <_dtoa_r+0x3ea>
 8009af8:	4b27      	ldr	r3, [pc, #156]	@ (8009b98 <_dtoa_r+0x580>)
 8009afa:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009afc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009b00:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009b04:	4454      	add	r4, sl
 8009b06:	2900      	cmp	r1, #0
 8009b08:	d054      	beq.n	8009bb4 <_dtoa_r+0x59c>
 8009b0a:	4929      	ldr	r1, [pc, #164]	@ (8009bb0 <_dtoa_r+0x598>)
 8009b0c:	2000      	movs	r0, #0
 8009b0e:	f7f6 febd 	bl	800088c <__aeabi_ddiv>
 8009b12:	4633      	mov	r3, r6
 8009b14:	462a      	mov	r2, r5
 8009b16:	f7f6 fbd7 	bl	80002c8 <__aeabi_dsub>
 8009b1a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8009b1e:	4656      	mov	r6, sl
 8009b20:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009b24:	f7f7 f838 	bl	8000b98 <__aeabi_d2iz>
 8009b28:	4605      	mov	r5, r0
 8009b2a:	f7f6 fd1b 	bl	8000564 <__aeabi_i2d>
 8009b2e:	4602      	mov	r2, r0
 8009b30:	460b      	mov	r3, r1
 8009b32:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009b36:	f7f6 fbc7 	bl	80002c8 <__aeabi_dsub>
 8009b3a:	3530      	adds	r5, #48	@ 0x30
 8009b3c:	4602      	mov	r2, r0
 8009b3e:	460b      	mov	r3, r1
 8009b40:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009b44:	f806 5b01 	strb.w	r5, [r6], #1
 8009b48:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8009b4c:	f7f6 ffe6 	bl	8000b1c <__aeabi_dcmplt>
 8009b50:	2800      	cmp	r0, #0
 8009b52:	d172      	bne.n	8009c3a <_dtoa_r+0x622>
 8009b54:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009b58:	4911      	ldr	r1, [pc, #68]	@ (8009ba0 <_dtoa_r+0x588>)
 8009b5a:	2000      	movs	r0, #0
 8009b5c:	f7f6 fbb4 	bl	80002c8 <__aeabi_dsub>
 8009b60:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8009b64:	f7f6 ffda 	bl	8000b1c <__aeabi_dcmplt>
 8009b68:	2800      	cmp	r0, #0
 8009b6a:	f040 80b4 	bne.w	8009cd6 <_dtoa_r+0x6be>
 8009b6e:	42a6      	cmp	r6, r4
 8009b70:	f43f af70 	beq.w	8009a54 <_dtoa_r+0x43c>
 8009b74:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8009b78:	4b0a      	ldr	r3, [pc, #40]	@ (8009ba4 <_dtoa_r+0x58c>)
 8009b7a:	2200      	movs	r2, #0
 8009b7c:	f7f6 fd5c 	bl	8000638 <__aeabi_dmul>
 8009b80:	4b08      	ldr	r3, [pc, #32]	@ (8009ba4 <_dtoa_r+0x58c>)
 8009b82:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8009b86:	2200      	movs	r2, #0
 8009b88:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009b8c:	f7f6 fd54 	bl	8000638 <__aeabi_dmul>
 8009b90:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009b94:	e7c4      	b.n	8009b20 <_dtoa_r+0x508>
 8009b96:	bf00      	nop
 8009b98:	0800b550 	.word	0x0800b550
 8009b9c:	0800b528 	.word	0x0800b528
 8009ba0:	3ff00000 	.word	0x3ff00000
 8009ba4:	40240000 	.word	0x40240000
 8009ba8:	401c0000 	.word	0x401c0000
 8009bac:	40140000 	.word	0x40140000
 8009bb0:	3fe00000 	.word	0x3fe00000
 8009bb4:	4631      	mov	r1, r6
 8009bb6:	4628      	mov	r0, r5
 8009bb8:	f7f6 fd3e 	bl	8000638 <__aeabi_dmul>
 8009bbc:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8009bc0:	9413      	str	r4, [sp, #76]	@ 0x4c
 8009bc2:	4656      	mov	r6, sl
 8009bc4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009bc8:	f7f6 ffe6 	bl	8000b98 <__aeabi_d2iz>
 8009bcc:	4605      	mov	r5, r0
 8009bce:	f7f6 fcc9 	bl	8000564 <__aeabi_i2d>
 8009bd2:	4602      	mov	r2, r0
 8009bd4:	460b      	mov	r3, r1
 8009bd6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009bda:	f7f6 fb75 	bl	80002c8 <__aeabi_dsub>
 8009bde:	3530      	adds	r5, #48	@ 0x30
 8009be0:	f806 5b01 	strb.w	r5, [r6], #1
 8009be4:	4602      	mov	r2, r0
 8009be6:	460b      	mov	r3, r1
 8009be8:	42a6      	cmp	r6, r4
 8009bea:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009bee:	f04f 0200 	mov.w	r2, #0
 8009bf2:	d124      	bne.n	8009c3e <_dtoa_r+0x626>
 8009bf4:	4baf      	ldr	r3, [pc, #700]	@ (8009eb4 <_dtoa_r+0x89c>)
 8009bf6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8009bfa:	f7f6 fb67 	bl	80002cc <__adddf3>
 8009bfe:	4602      	mov	r2, r0
 8009c00:	460b      	mov	r3, r1
 8009c02:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009c06:	f7f6 ffa7 	bl	8000b58 <__aeabi_dcmpgt>
 8009c0a:	2800      	cmp	r0, #0
 8009c0c:	d163      	bne.n	8009cd6 <_dtoa_r+0x6be>
 8009c0e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8009c12:	49a8      	ldr	r1, [pc, #672]	@ (8009eb4 <_dtoa_r+0x89c>)
 8009c14:	2000      	movs	r0, #0
 8009c16:	f7f6 fb57 	bl	80002c8 <__aeabi_dsub>
 8009c1a:	4602      	mov	r2, r0
 8009c1c:	460b      	mov	r3, r1
 8009c1e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009c22:	f7f6 ff7b 	bl	8000b1c <__aeabi_dcmplt>
 8009c26:	2800      	cmp	r0, #0
 8009c28:	f43f af14 	beq.w	8009a54 <_dtoa_r+0x43c>
 8009c2c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8009c2e:	1e73      	subs	r3, r6, #1
 8009c30:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009c32:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009c36:	2b30      	cmp	r3, #48	@ 0x30
 8009c38:	d0f8      	beq.n	8009c2c <_dtoa_r+0x614>
 8009c3a:	4647      	mov	r7, r8
 8009c3c:	e03b      	b.n	8009cb6 <_dtoa_r+0x69e>
 8009c3e:	4b9e      	ldr	r3, [pc, #632]	@ (8009eb8 <_dtoa_r+0x8a0>)
 8009c40:	f7f6 fcfa 	bl	8000638 <__aeabi_dmul>
 8009c44:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009c48:	e7bc      	b.n	8009bc4 <_dtoa_r+0x5ac>
 8009c4a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8009c4e:	4656      	mov	r6, sl
 8009c50:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009c54:	4620      	mov	r0, r4
 8009c56:	4629      	mov	r1, r5
 8009c58:	f7f6 fe18 	bl	800088c <__aeabi_ddiv>
 8009c5c:	f7f6 ff9c 	bl	8000b98 <__aeabi_d2iz>
 8009c60:	4680      	mov	r8, r0
 8009c62:	f7f6 fc7f 	bl	8000564 <__aeabi_i2d>
 8009c66:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009c6a:	f7f6 fce5 	bl	8000638 <__aeabi_dmul>
 8009c6e:	4602      	mov	r2, r0
 8009c70:	460b      	mov	r3, r1
 8009c72:	4620      	mov	r0, r4
 8009c74:	4629      	mov	r1, r5
 8009c76:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8009c7a:	f7f6 fb25 	bl	80002c8 <__aeabi_dsub>
 8009c7e:	f806 4b01 	strb.w	r4, [r6], #1
 8009c82:	9d03      	ldr	r5, [sp, #12]
 8009c84:	eba6 040a 	sub.w	r4, r6, sl
 8009c88:	42a5      	cmp	r5, r4
 8009c8a:	4602      	mov	r2, r0
 8009c8c:	460b      	mov	r3, r1
 8009c8e:	d133      	bne.n	8009cf8 <_dtoa_r+0x6e0>
 8009c90:	f7f6 fb1c 	bl	80002cc <__adddf3>
 8009c94:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009c98:	4604      	mov	r4, r0
 8009c9a:	460d      	mov	r5, r1
 8009c9c:	f7f6 ff5c 	bl	8000b58 <__aeabi_dcmpgt>
 8009ca0:	b9c0      	cbnz	r0, 8009cd4 <_dtoa_r+0x6bc>
 8009ca2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009ca6:	4620      	mov	r0, r4
 8009ca8:	4629      	mov	r1, r5
 8009caa:	f7f6 ff2d 	bl	8000b08 <__aeabi_dcmpeq>
 8009cae:	b110      	cbz	r0, 8009cb6 <_dtoa_r+0x69e>
 8009cb0:	f018 0f01 	tst.w	r8, #1
 8009cb4:	d10e      	bne.n	8009cd4 <_dtoa_r+0x6bc>
 8009cb6:	9902      	ldr	r1, [sp, #8]
 8009cb8:	4648      	mov	r0, r9
 8009cba:	f000 fbbd 	bl	800a438 <_Bfree>
 8009cbe:	2300      	movs	r3, #0
 8009cc0:	7033      	strb	r3, [r6, #0]
 8009cc2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009cc4:	3701      	adds	r7, #1
 8009cc6:	601f      	str	r7, [r3, #0]
 8009cc8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	f000 824b 	beq.w	800a166 <_dtoa_r+0xb4e>
 8009cd0:	601e      	str	r6, [r3, #0]
 8009cd2:	e248      	b.n	800a166 <_dtoa_r+0xb4e>
 8009cd4:	46b8      	mov	r8, r7
 8009cd6:	4633      	mov	r3, r6
 8009cd8:	461e      	mov	r6, r3
 8009cda:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009cde:	2a39      	cmp	r2, #57	@ 0x39
 8009ce0:	d106      	bne.n	8009cf0 <_dtoa_r+0x6d8>
 8009ce2:	459a      	cmp	sl, r3
 8009ce4:	d1f8      	bne.n	8009cd8 <_dtoa_r+0x6c0>
 8009ce6:	2230      	movs	r2, #48	@ 0x30
 8009ce8:	f108 0801 	add.w	r8, r8, #1
 8009cec:	f88a 2000 	strb.w	r2, [sl]
 8009cf0:	781a      	ldrb	r2, [r3, #0]
 8009cf2:	3201      	adds	r2, #1
 8009cf4:	701a      	strb	r2, [r3, #0]
 8009cf6:	e7a0      	b.n	8009c3a <_dtoa_r+0x622>
 8009cf8:	4b6f      	ldr	r3, [pc, #444]	@ (8009eb8 <_dtoa_r+0x8a0>)
 8009cfa:	2200      	movs	r2, #0
 8009cfc:	f7f6 fc9c 	bl	8000638 <__aeabi_dmul>
 8009d00:	2200      	movs	r2, #0
 8009d02:	2300      	movs	r3, #0
 8009d04:	4604      	mov	r4, r0
 8009d06:	460d      	mov	r5, r1
 8009d08:	f7f6 fefe 	bl	8000b08 <__aeabi_dcmpeq>
 8009d0c:	2800      	cmp	r0, #0
 8009d0e:	d09f      	beq.n	8009c50 <_dtoa_r+0x638>
 8009d10:	e7d1      	b.n	8009cb6 <_dtoa_r+0x69e>
 8009d12:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009d14:	2a00      	cmp	r2, #0
 8009d16:	f000 80ea 	beq.w	8009eee <_dtoa_r+0x8d6>
 8009d1a:	9a07      	ldr	r2, [sp, #28]
 8009d1c:	2a01      	cmp	r2, #1
 8009d1e:	f300 80cd 	bgt.w	8009ebc <_dtoa_r+0x8a4>
 8009d22:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8009d24:	2a00      	cmp	r2, #0
 8009d26:	f000 80c1 	beq.w	8009eac <_dtoa_r+0x894>
 8009d2a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8009d2e:	9c08      	ldr	r4, [sp, #32]
 8009d30:	9e00      	ldr	r6, [sp, #0]
 8009d32:	9a00      	ldr	r2, [sp, #0]
 8009d34:	441a      	add	r2, r3
 8009d36:	9200      	str	r2, [sp, #0]
 8009d38:	9a06      	ldr	r2, [sp, #24]
 8009d3a:	2101      	movs	r1, #1
 8009d3c:	441a      	add	r2, r3
 8009d3e:	4648      	mov	r0, r9
 8009d40:	9206      	str	r2, [sp, #24]
 8009d42:	f000 fc2d 	bl	800a5a0 <__i2b>
 8009d46:	4605      	mov	r5, r0
 8009d48:	b166      	cbz	r6, 8009d64 <_dtoa_r+0x74c>
 8009d4a:	9b06      	ldr	r3, [sp, #24]
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	dd09      	ble.n	8009d64 <_dtoa_r+0x74c>
 8009d50:	42b3      	cmp	r3, r6
 8009d52:	9a00      	ldr	r2, [sp, #0]
 8009d54:	bfa8      	it	ge
 8009d56:	4633      	movge	r3, r6
 8009d58:	1ad2      	subs	r2, r2, r3
 8009d5a:	9200      	str	r2, [sp, #0]
 8009d5c:	9a06      	ldr	r2, [sp, #24]
 8009d5e:	1af6      	subs	r6, r6, r3
 8009d60:	1ad3      	subs	r3, r2, r3
 8009d62:	9306      	str	r3, [sp, #24]
 8009d64:	9b08      	ldr	r3, [sp, #32]
 8009d66:	b30b      	cbz	r3, 8009dac <_dtoa_r+0x794>
 8009d68:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	f000 80c6 	beq.w	8009efc <_dtoa_r+0x8e4>
 8009d70:	2c00      	cmp	r4, #0
 8009d72:	f000 80c0 	beq.w	8009ef6 <_dtoa_r+0x8de>
 8009d76:	4629      	mov	r1, r5
 8009d78:	4622      	mov	r2, r4
 8009d7a:	4648      	mov	r0, r9
 8009d7c:	f000 fcc8 	bl	800a710 <__pow5mult>
 8009d80:	9a02      	ldr	r2, [sp, #8]
 8009d82:	4601      	mov	r1, r0
 8009d84:	4605      	mov	r5, r0
 8009d86:	4648      	mov	r0, r9
 8009d88:	f000 fc20 	bl	800a5cc <__multiply>
 8009d8c:	9902      	ldr	r1, [sp, #8]
 8009d8e:	4680      	mov	r8, r0
 8009d90:	4648      	mov	r0, r9
 8009d92:	f000 fb51 	bl	800a438 <_Bfree>
 8009d96:	9b08      	ldr	r3, [sp, #32]
 8009d98:	1b1b      	subs	r3, r3, r4
 8009d9a:	9308      	str	r3, [sp, #32]
 8009d9c:	f000 80b1 	beq.w	8009f02 <_dtoa_r+0x8ea>
 8009da0:	9a08      	ldr	r2, [sp, #32]
 8009da2:	4641      	mov	r1, r8
 8009da4:	4648      	mov	r0, r9
 8009da6:	f000 fcb3 	bl	800a710 <__pow5mult>
 8009daa:	9002      	str	r0, [sp, #8]
 8009dac:	2101      	movs	r1, #1
 8009dae:	4648      	mov	r0, r9
 8009db0:	f000 fbf6 	bl	800a5a0 <__i2b>
 8009db4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009db6:	4604      	mov	r4, r0
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	f000 81d8 	beq.w	800a16e <_dtoa_r+0xb56>
 8009dbe:	461a      	mov	r2, r3
 8009dc0:	4601      	mov	r1, r0
 8009dc2:	4648      	mov	r0, r9
 8009dc4:	f000 fca4 	bl	800a710 <__pow5mult>
 8009dc8:	9b07      	ldr	r3, [sp, #28]
 8009dca:	2b01      	cmp	r3, #1
 8009dcc:	4604      	mov	r4, r0
 8009dce:	f300 809f 	bgt.w	8009f10 <_dtoa_r+0x8f8>
 8009dd2:	9b04      	ldr	r3, [sp, #16]
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	f040 8097 	bne.w	8009f08 <_dtoa_r+0x8f0>
 8009dda:	9b05      	ldr	r3, [sp, #20]
 8009ddc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	f040 8093 	bne.w	8009f0c <_dtoa_r+0x8f4>
 8009de6:	9b05      	ldr	r3, [sp, #20]
 8009de8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009dec:	0d1b      	lsrs	r3, r3, #20
 8009dee:	051b      	lsls	r3, r3, #20
 8009df0:	b133      	cbz	r3, 8009e00 <_dtoa_r+0x7e8>
 8009df2:	9b00      	ldr	r3, [sp, #0]
 8009df4:	3301      	adds	r3, #1
 8009df6:	9300      	str	r3, [sp, #0]
 8009df8:	9b06      	ldr	r3, [sp, #24]
 8009dfa:	3301      	adds	r3, #1
 8009dfc:	9306      	str	r3, [sp, #24]
 8009dfe:	2301      	movs	r3, #1
 8009e00:	9308      	str	r3, [sp, #32]
 8009e02:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	f000 81b8 	beq.w	800a17a <_dtoa_r+0xb62>
 8009e0a:	6923      	ldr	r3, [r4, #16]
 8009e0c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009e10:	6918      	ldr	r0, [r3, #16]
 8009e12:	f000 fb79 	bl	800a508 <__hi0bits>
 8009e16:	f1c0 0020 	rsb	r0, r0, #32
 8009e1a:	9b06      	ldr	r3, [sp, #24]
 8009e1c:	4418      	add	r0, r3
 8009e1e:	f010 001f 	ands.w	r0, r0, #31
 8009e22:	f000 8082 	beq.w	8009f2a <_dtoa_r+0x912>
 8009e26:	f1c0 0320 	rsb	r3, r0, #32
 8009e2a:	2b04      	cmp	r3, #4
 8009e2c:	dd73      	ble.n	8009f16 <_dtoa_r+0x8fe>
 8009e2e:	9b00      	ldr	r3, [sp, #0]
 8009e30:	f1c0 001c 	rsb	r0, r0, #28
 8009e34:	4403      	add	r3, r0
 8009e36:	9300      	str	r3, [sp, #0]
 8009e38:	9b06      	ldr	r3, [sp, #24]
 8009e3a:	4403      	add	r3, r0
 8009e3c:	4406      	add	r6, r0
 8009e3e:	9306      	str	r3, [sp, #24]
 8009e40:	9b00      	ldr	r3, [sp, #0]
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	dd05      	ble.n	8009e52 <_dtoa_r+0x83a>
 8009e46:	9902      	ldr	r1, [sp, #8]
 8009e48:	461a      	mov	r2, r3
 8009e4a:	4648      	mov	r0, r9
 8009e4c:	f000 fcba 	bl	800a7c4 <__lshift>
 8009e50:	9002      	str	r0, [sp, #8]
 8009e52:	9b06      	ldr	r3, [sp, #24]
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	dd05      	ble.n	8009e64 <_dtoa_r+0x84c>
 8009e58:	4621      	mov	r1, r4
 8009e5a:	461a      	mov	r2, r3
 8009e5c:	4648      	mov	r0, r9
 8009e5e:	f000 fcb1 	bl	800a7c4 <__lshift>
 8009e62:	4604      	mov	r4, r0
 8009e64:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d061      	beq.n	8009f2e <_dtoa_r+0x916>
 8009e6a:	9802      	ldr	r0, [sp, #8]
 8009e6c:	4621      	mov	r1, r4
 8009e6e:	f000 fd15 	bl	800a89c <__mcmp>
 8009e72:	2800      	cmp	r0, #0
 8009e74:	da5b      	bge.n	8009f2e <_dtoa_r+0x916>
 8009e76:	2300      	movs	r3, #0
 8009e78:	9902      	ldr	r1, [sp, #8]
 8009e7a:	220a      	movs	r2, #10
 8009e7c:	4648      	mov	r0, r9
 8009e7e:	f000 fafd 	bl	800a47c <__multadd>
 8009e82:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009e84:	9002      	str	r0, [sp, #8]
 8009e86:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	f000 8177 	beq.w	800a17e <_dtoa_r+0xb66>
 8009e90:	4629      	mov	r1, r5
 8009e92:	2300      	movs	r3, #0
 8009e94:	220a      	movs	r2, #10
 8009e96:	4648      	mov	r0, r9
 8009e98:	f000 faf0 	bl	800a47c <__multadd>
 8009e9c:	f1bb 0f00 	cmp.w	fp, #0
 8009ea0:	4605      	mov	r5, r0
 8009ea2:	dc6f      	bgt.n	8009f84 <_dtoa_r+0x96c>
 8009ea4:	9b07      	ldr	r3, [sp, #28]
 8009ea6:	2b02      	cmp	r3, #2
 8009ea8:	dc49      	bgt.n	8009f3e <_dtoa_r+0x926>
 8009eaa:	e06b      	b.n	8009f84 <_dtoa_r+0x96c>
 8009eac:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8009eae:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8009eb2:	e73c      	b.n	8009d2e <_dtoa_r+0x716>
 8009eb4:	3fe00000 	.word	0x3fe00000
 8009eb8:	40240000 	.word	0x40240000
 8009ebc:	9b03      	ldr	r3, [sp, #12]
 8009ebe:	1e5c      	subs	r4, r3, #1
 8009ec0:	9b08      	ldr	r3, [sp, #32]
 8009ec2:	42a3      	cmp	r3, r4
 8009ec4:	db09      	blt.n	8009eda <_dtoa_r+0x8c2>
 8009ec6:	1b1c      	subs	r4, r3, r4
 8009ec8:	9b03      	ldr	r3, [sp, #12]
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	f6bf af30 	bge.w	8009d30 <_dtoa_r+0x718>
 8009ed0:	9b00      	ldr	r3, [sp, #0]
 8009ed2:	9a03      	ldr	r2, [sp, #12]
 8009ed4:	1a9e      	subs	r6, r3, r2
 8009ed6:	2300      	movs	r3, #0
 8009ed8:	e72b      	b.n	8009d32 <_dtoa_r+0x71a>
 8009eda:	9b08      	ldr	r3, [sp, #32]
 8009edc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009ede:	9408      	str	r4, [sp, #32]
 8009ee0:	1ae3      	subs	r3, r4, r3
 8009ee2:	441a      	add	r2, r3
 8009ee4:	9e00      	ldr	r6, [sp, #0]
 8009ee6:	9b03      	ldr	r3, [sp, #12]
 8009ee8:	920d      	str	r2, [sp, #52]	@ 0x34
 8009eea:	2400      	movs	r4, #0
 8009eec:	e721      	b.n	8009d32 <_dtoa_r+0x71a>
 8009eee:	9c08      	ldr	r4, [sp, #32]
 8009ef0:	9e00      	ldr	r6, [sp, #0]
 8009ef2:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8009ef4:	e728      	b.n	8009d48 <_dtoa_r+0x730>
 8009ef6:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8009efa:	e751      	b.n	8009da0 <_dtoa_r+0x788>
 8009efc:	9a08      	ldr	r2, [sp, #32]
 8009efe:	9902      	ldr	r1, [sp, #8]
 8009f00:	e750      	b.n	8009da4 <_dtoa_r+0x78c>
 8009f02:	f8cd 8008 	str.w	r8, [sp, #8]
 8009f06:	e751      	b.n	8009dac <_dtoa_r+0x794>
 8009f08:	2300      	movs	r3, #0
 8009f0a:	e779      	b.n	8009e00 <_dtoa_r+0x7e8>
 8009f0c:	9b04      	ldr	r3, [sp, #16]
 8009f0e:	e777      	b.n	8009e00 <_dtoa_r+0x7e8>
 8009f10:	2300      	movs	r3, #0
 8009f12:	9308      	str	r3, [sp, #32]
 8009f14:	e779      	b.n	8009e0a <_dtoa_r+0x7f2>
 8009f16:	d093      	beq.n	8009e40 <_dtoa_r+0x828>
 8009f18:	9a00      	ldr	r2, [sp, #0]
 8009f1a:	331c      	adds	r3, #28
 8009f1c:	441a      	add	r2, r3
 8009f1e:	9200      	str	r2, [sp, #0]
 8009f20:	9a06      	ldr	r2, [sp, #24]
 8009f22:	441a      	add	r2, r3
 8009f24:	441e      	add	r6, r3
 8009f26:	9206      	str	r2, [sp, #24]
 8009f28:	e78a      	b.n	8009e40 <_dtoa_r+0x828>
 8009f2a:	4603      	mov	r3, r0
 8009f2c:	e7f4      	b.n	8009f18 <_dtoa_r+0x900>
 8009f2e:	9b03      	ldr	r3, [sp, #12]
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	46b8      	mov	r8, r7
 8009f34:	dc20      	bgt.n	8009f78 <_dtoa_r+0x960>
 8009f36:	469b      	mov	fp, r3
 8009f38:	9b07      	ldr	r3, [sp, #28]
 8009f3a:	2b02      	cmp	r3, #2
 8009f3c:	dd1e      	ble.n	8009f7c <_dtoa_r+0x964>
 8009f3e:	f1bb 0f00 	cmp.w	fp, #0
 8009f42:	f47f adb1 	bne.w	8009aa8 <_dtoa_r+0x490>
 8009f46:	4621      	mov	r1, r4
 8009f48:	465b      	mov	r3, fp
 8009f4a:	2205      	movs	r2, #5
 8009f4c:	4648      	mov	r0, r9
 8009f4e:	f000 fa95 	bl	800a47c <__multadd>
 8009f52:	4601      	mov	r1, r0
 8009f54:	4604      	mov	r4, r0
 8009f56:	9802      	ldr	r0, [sp, #8]
 8009f58:	f000 fca0 	bl	800a89c <__mcmp>
 8009f5c:	2800      	cmp	r0, #0
 8009f5e:	f77f ada3 	ble.w	8009aa8 <_dtoa_r+0x490>
 8009f62:	4656      	mov	r6, sl
 8009f64:	2331      	movs	r3, #49	@ 0x31
 8009f66:	f806 3b01 	strb.w	r3, [r6], #1
 8009f6a:	f108 0801 	add.w	r8, r8, #1
 8009f6e:	e59f      	b.n	8009ab0 <_dtoa_r+0x498>
 8009f70:	9c03      	ldr	r4, [sp, #12]
 8009f72:	46b8      	mov	r8, r7
 8009f74:	4625      	mov	r5, r4
 8009f76:	e7f4      	b.n	8009f62 <_dtoa_r+0x94a>
 8009f78:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8009f7c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	f000 8101 	beq.w	800a186 <_dtoa_r+0xb6e>
 8009f84:	2e00      	cmp	r6, #0
 8009f86:	dd05      	ble.n	8009f94 <_dtoa_r+0x97c>
 8009f88:	4629      	mov	r1, r5
 8009f8a:	4632      	mov	r2, r6
 8009f8c:	4648      	mov	r0, r9
 8009f8e:	f000 fc19 	bl	800a7c4 <__lshift>
 8009f92:	4605      	mov	r5, r0
 8009f94:	9b08      	ldr	r3, [sp, #32]
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d05c      	beq.n	800a054 <_dtoa_r+0xa3c>
 8009f9a:	6869      	ldr	r1, [r5, #4]
 8009f9c:	4648      	mov	r0, r9
 8009f9e:	f000 fa0b 	bl	800a3b8 <_Balloc>
 8009fa2:	4606      	mov	r6, r0
 8009fa4:	b928      	cbnz	r0, 8009fb2 <_dtoa_r+0x99a>
 8009fa6:	4b82      	ldr	r3, [pc, #520]	@ (800a1b0 <_dtoa_r+0xb98>)
 8009fa8:	4602      	mov	r2, r0
 8009faa:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8009fae:	f7ff bb4a 	b.w	8009646 <_dtoa_r+0x2e>
 8009fb2:	692a      	ldr	r2, [r5, #16]
 8009fb4:	3202      	adds	r2, #2
 8009fb6:	0092      	lsls	r2, r2, #2
 8009fb8:	f105 010c 	add.w	r1, r5, #12
 8009fbc:	300c      	adds	r0, #12
 8009fbe:	f7ff fa74 	bl	80094aa <memcpy>
 8009fc2:	2201      	movs	r2, #1
 8009fc4:	4631      	mov	r1, r6
 8009fc6:	4648      	mov	r0, r9
 8009fc8:	f000 fbfc 	bl	800a7c4 <__lshift>
 8009fcc:	f10a 0301 	add.w	r3, sl, #1
 8009fd0:	9300      	str	r3, [sp, #0]
 8009fd2:	eb0a 030b 	add.w	r3, sl, fp
 8009fd6:	9308      	str	r3, [sp, #32]
 8009fd8:	9b04      	ldr	r3, [sp, #16]
 8009fda:	f003 0301 	and.w	r3, r3, #1
 8009fde:	462f      	mov	r7, r5
 8009fe0:	9306      	str	r3, [sp, #24]
 8009fe2:	4605      	mov	r5, r0
 8009fe4:	9b00      	ldr	r3, [sp, #0]
 8009fe6:	9802      	ldr	r0, [sp, #8]
 8009fe8:	4621      	mov	r1, r4
 8009fea:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 8009fee:	f7ff fa89 	bl	8009504 <quorem>
 8009ff2:	4603      	mov	r3, r0
 8009ff4:	3330      	adds	r3, #48	@ 0x30
 8009ff6:	9003      	str	r0, [sp, #12]
 8009ff8:	4639      	mov	r1, r7
 8009ffa:	9802      	ldr	r0, [sp, #8]
 8009ffc:	9309      	str	r3, [sp, #36]	@ 0x24
 8009ffe:	f000 fc4d 	bl	800a89c <__mcmp>
 800a002:	462a      	mov	r2, r5
 800a004:	9004      	str	r0, [sp, #16]
 800a006:	4621      	mov	r1, r4
 800a008:	4648      	mov	r0, r9
 800a00a:	f000 fc63 	bl	800a8d4 <__mdiff>
 800a00e:	68c2      	ldr	r2, [r0, #12]
 800a010:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a012:	4606      	mov	r6, r0
 800a014:	bb02      	cbnz	r2, 800a058 <_dtoa_r+0xa40>
 800a016:	4601      	mov	r1, r0
 800a018:	9802      	ldr	r0, [sp, #8]
 800a01a:	f000 fc3f 	bl	800a89c <__mcmp>
 800a01e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a020:	4602      	mov	r2, r0
 800a022:	4631      	mov	r1, r6
 800a024:	4648      	mov	r0, r9
 800a026:	920c      	str	r2, [sp, #48]	@ 0x30
 800a028:	9309      	str	r3, [sp, #36]	@ 0x24
 800a02a:	f000 fa05 	bl	800a438 <_Bfree>
 800a02e:	9b07      	ldr	r3, [sp, #28]
 800a030:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800a032:	9e00      	ldr	r6, [sp, #0]
 800a034:	ea42 0103 	orr.w	r1, r2, r3
 800a038:	9b06      	ldr	r3, [sp, #24]
 800a03a:	4319      	orrs	r1, r3
 800a03c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a03e:	d10d      	bne.n	800a05c <_dtoa_r+0xa44>
 800a040:	2b39      	cmp	r3, #57	@ 0x39
 800a042:	d027      	beq.n	800a094 <_dtoa_r+0xa7c>
 800a044:	9a04      	ldr	r2, [sp, #16]
 800a046:	2a00      	cmp	r2, #0
 800a048:	dd01      	ble.n	800a04e <_dtoa_r+0xa36>
 800a04a:	9b03      	ldr	r3, [sp, #12]
 800a04c:	3331      	adds	r3, #49	@ 0x31
 800a04e:	f88b 3000 	strb.w	r3, [fp]
 800a052:	e52e      	b.n	8009ab2 <_dtoa_r+0x49a>
 800a054:	4628      	mov	r0, r5
 800a056:	e7b9      	b.n	8009fcc <_dtoa_r+0x9b4>
 800a058:	2201      	movs	r2, #1
 800a05a:	e7e2      	b.n	800a022 <_dtoa_r+0xa0a>
 800a05c:	9904      	ldr	r1, [sp, #16]
 800a05e:	2900      	cmp	r1, #0
 800a060:	db04      	blt.n	800a06c <_dtoa_r+0xa54>
 800a062:	9807      	ldr	r0, [sp, #28]
 800a064:	4301      	orrs	r1, r0
 800a066:	9806      	ldr	r0, [sp, #24]
 800a068:	4301      	orrs	r1, r0
 800a06a:	d120      	bne.n	800a0ae <_dtoa_r+0xa96>
 800a06c:	2a00      	cmp	r2, #0
 800a06e:	ddee      	ble.n	800a04e <_dtoa_r+0xa36>
 800a070:	9902      	ldr	r1, [sp, #8]
 800a072:	9300      	str	r3, [sp, #0]
 800a074:	2201      	movs	r2, #1
 800a076:	4648      	mov	r0, r9
 800a078:	f000 fba4 	bl	800a7c4 <__lshift>
 800a07c:	4621      	mov	r1, r4
 800a07e:	9002      	str	r0, [sp, #8]
 800a080:	f000 fc0c 	bl	800a89c <__mcmp>
 800a084:	2800      	cmp	r0, #0
 800a086:	9b00      	ldr	r3, [sp, #0]
 800a088:	dc02      	bgt.n	800a090 <_dtoa_r+0xa78>
 800a08a:	d1e0      	bne.n	800a04e <_dtoa_r+0xa36>
 800a08c:	07da      	lsls	r2, r3, #31
 800a08e:	d5de      	bpl.n	800a04e <_dtoa_r+0xa36>
 800a090:	2b39      	cmp	r3, #57	@ 0x39
 800a092:	d1da      	bne.n	800a04a <_dtoa_r+0xa32>
 800a094:	2339      	movs	r3, #57	@ 0x39
 800a096:	f88b 3000 	strb.w	r3, [fp]
 800a09a:	4633      	mov	r3, r6
 800a09c:	461e      	mov	r6, r3
 800a09e:	3b01      	subs	r3, #1
 800a0a0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800a0a4:	2a39      	cmp	r2, #57	@ 0x39
 800a0a6:	d04e      	beq.n	800a146 <_dtoa_r+0xb2e>
 800a0a8:	3201      	adds	r2, #1
 800a0aa:	701a      	strb	r2, [r3, #0]
 800a0ac:	e501      	b.n	8009ab2 <_dtoa_r+0x49a>
 800a0ae:	2a00      	cmp	r2, #0
 800a0b0:	dd03      	ble.n	800a0ba <_dtoa_r+0xaa2>
 800a0b2:	2b39      	cmp	r3, #57	@ 0x39
 800a0b4:	d0ee      	beq.n	800a094 <_dtoa_r+0xa7c>
 800a0b6:	3301      	adds	r3, #1
 800a0b8:	e7c9      	b.n	800a04e <_dtoa_r+0xa36>
 800a0ba:	9a00      	ldr	r2, [sp, #0]
 800a0bc:	9908      	ldr	r1, [sp, #32]
 800a0be:	f802 3c01 	strb.w	r3, [r2, #-1]
 800a0c2:	428a      	cmp	r2, r1
 800a0c4:	d028      	beq.n	800a118 <_dtoa_r+0xb00>
 800a0c6:	9902      	ldr	r1, [sp, #8]
 800a0c8:	2300      	movs	r3, #0
 800a0ca:	220a      	movs	r2, #10
 800a0cc:	4648      	mov	r0, r9
 800a0ce:	f000 f9d5 	bl	800a47c <__multadd>
 800a0d2:	42af      	cmp	r7, r5
 800a0d4:	9002      	str	r0, [sp, #8]
 800a0d6:	f04f 0300 	mov.w	r3, #0
 800a0da:	f04f 020a 	mov.w	r2, #10
 800a0de:	4639      	mov	r1, r7
 800a0e0:	4648      	mov	r0, r9
 800a0e2:	d107      	bne.n	800a0f4 <_dtoa_r+0xadc>
 800a0e4:	f000 f9ca 	bl	800a47c <__multadd>
 800a0e8:	4607      	mov	r7, r0
 800a0ea:	4605      	mov	r5, r0
 800a0ec:	9b00      	ldr	r3, [sp, #0]
 800a0ee:	3301      	adds	r3, #1
 800a0f0:	9300      	str	r3, [sp, #0]
 800a0f2:	e777      	b.n	8009fe4 <_dtoa_r+0x9cc>
 800a0f4:	f000 f9c2 	bl	800a47c <__multadd>
 800a0f8:	4629      	mov	r1, r5
 800a0fa:	4607      	mov	r7, r0
 800a0fc:	2300      	movs	r3, #0
 800a0fe:	220a      	movs	r2, #10
 800a100:	4648      	mov	r0, r9
 800a102:	f000 f9bb 	bl	800a47c <__multadd>
 800a106:	4605      	mov	r5, r0
 800a108:	e7f0      	b.n	800a0ec <_dtoa_r+0xad4>
 800a10a:	f1bb 0f00 	cmp.w	fp, #0
 800a10e:	bfcc      	ite	gt
 800a110:	465e      	movgt	r6, fp
 800a112:	2601      	movle	r6, #1
 800a114:	4456      	add	r6, sl
 800a116:	2700      	movs	r7, #0
 800a118:	9902      	ldr	r1, [sp, #8]
 800a11a:	9300      	str	r3, [sp, #0]
 800a11c:	2201      	movs	r2, #1
 800a11e:	4648      	mov	r0, r9
 800a120:	f000 fb50 	bl	800a7c4 <__lshift>
 800a124:	4621      	mov	r1, r4
 800a126:	9002      	str	r0, [sp, #8]
 800a128:	f000 fbb8 	bl	800a89c <__mcmp>
 800a12c:	2800      	cmp	r0, #0
 800a12e:	dcb4      	bgt.n	800a09a <_dtoa_r+0xa82>
 800a130:	d102      	bne.n	800a138 <_dtoa_r+0xb20>
 800a132:	9b00      	ldr	r3, [sp, #0]
 800a134:	07db      	lsls	r3, r3, #31
 800a136:	d4b0      	bmi.n	800a09a <_dtoa_r+0xa82>
 800a138:	4633      	mov	r3, r6
 800a13a:	461e      	mov	r6, r3
 800a13c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a140:	2a30      	cmp	r2, #48	@ 0x30
 800a142:	d0fa      	beq.n	800a13a <_dtoa_r+0xb22>
 800a144:	e4b5      	b.n	8009ab2 <_dtoa_r+0x49a>
 800a146:	459a      	cmp	sl, r3
 800a148:	d1a8      	bne.n	800a09c <_dtoa_r+0xa84>
 800a14a:	2331      	movs	r3, #49	@ 0x31
 800a14c:	f108 0801 	add.w	r8, r8, #1
 800a150:	f88a 3000 	strb.w	r3, [sl]
 800a154:	e4ad      	b.n	8009ab2 <_dtoa_r+0x49a>
 800a156:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800a158:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800a1b4 <_dtoa_r+0xb9c>
 800a15c:	b11b      	cbz	r3, 800a166 <_dtoa_r+0xb4e>
 800a15e:	f10a 0308 	add.w	r3, sl, #8
 800a162:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800a164:	6013      	str	r3, [r2, #0]
 800a166:	4650      	mov	r0, sl
 800a168:	b017      	add	sp, #92	@ 0x5c
 800a16a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a16e:	9b07      	ldr	r3, [sp, #28]
 800a170:	2b01      	cmp	r3, #1
 800a172:	f77f ae2e 	ble.w	8009dd2 <_dtoa_r+0x7ba>
 800a176:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a178:	9308      	str	r3, [sp, #32]
 800a17a:	2001      	movs	r0, #1
 800a17c:	e64d      	b.n	8009e1a <_dtoa_r+0x802>
 800a17e:	f1bb 0f00 	cmp.w	fp, #0
 800a182:	f77f aed9 	ble.w	8009f38 <_dtoa_r+0x920>
 800a186:	4656      	mov	r6, sl
 800a188:	9802      	ldr	r0, [sp, #8]
 800a18a:	4621      	mov	r1, r4
 800a18c:	f7ff f9ba 	bl	8009504 <quorem>
 800a190:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800a194:	f806 3b01 	strb.w	r3, [r6], #1
 800a198:	eba6 020a 	sub.w	r2, r6, sl
 800a19c:	4593      	cmp	fp, r2
 800a19e:	ddb4      	ble.n	800a10a <_dtoa_r+0xaf2>
 800a1a0:	9902      	ldr	r1, [sp, #8]
 800a1a2:	2300      	movs	r3, #0
 800a1a4:	220a      	movs	r2, #10
 800a1a6:	4648      	mov	r0, r9
 800a1a8:	f000 f968 	bl	800a47c <__multadd>
 800a1ac:	9002      	str	r0, [sp, #8]
 800a1ae:	e7eb      	b.n	800a188 <_dtoa_r+0xb70>
 800a1b0:	0800b494 	.word	0x0800b494
 800a1b4:	0800b42f 	.word	0x0800b42f

0800a1b8 <_free_r>:
 800a1b8:	b538      	push	{r3, r4, r5, lr}
 800a1ba:	4605      	mov	r5, r0
 800a1bc:	2900      	cmp	r1, #0
 800a1be:	d041      	beq.n	800a244 <_free_r+0x8c>
 800a1c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a1c4:	1f0c      	subs	r4, r1, #4
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	bfb8      	it	lt
 800a1ca:	18e4      	addlt	r4, r4, r3
 800a1cc:	f000 f8e8 	bl	800a3a0 <__malloc_lock>
 800a1d0:	4a1d      	ldr	r2, [pc, #116]	@ (800a248 <_free_r+0x90>)
 800a1d2:	6813      	ldr	r3, [r2, #0]
 800a1d4:	b933      	cbnz	r3, 800a1e4 <_free_r+0x2c>
 800a1d6:	6063      	str	r3, [r4, #4]
 800a1d8:	6014      	str	r4, [r2, #0]
 800a1da:	4628      	mov	r0, r5
 800a1dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a1e0:	f000 b8e4 	b.w	800a3ac <__malloc_unlock>
 800a1e4:	42a3      	cmp	r3, r4
 800a1e6:	d908      	bls.n	800a1fa <_free_r+0x42>
 800a1e8:	6820      	ldr	r0, [r4, #0]
 800a1ea:	1821      	adds	r1, r4, r0
 800a1ec:	428b      	cmp	r3, r1
 800a1ee:	bf01      	itttt	eq
 800a1f0:	6819      	ldreq	r1, [r3, #0]
 800a1f2:	685b      	ldreq	r3, [r3, #4]
 800a1f4:	1809      	addeq	r1, r1, r0
 800a1f6:	6021      	streq	r1, [r4, #0]
 800a1f8:	e7ed      	b.n	800a1d6 <_free_r+0x1e>
 800a1fa:	461a      	mov	r2, r3
 800a1fc:	685b      	ldr	r3, [r3, #4]
 800a1fe:	b10b      	cbz	r3, 800a204 <_free_r+0x4c>
 800a200:	42a3      	cmp	r3, r4
 800a202:	d9fa      	bls.n	800a1fa <_free_r+0x42>
 800a204:	6811      	ldr	r1, [r2, #0]
 800a206:	1850      	adds	r0, r2, r1
 800a208:	42a0      	cmp	r0, r4
 800a20a:	d10b      	bne.n	800a224 <_free_r+0x6c>
 800a20c:	6820      	ldr	r0, [r4, #0]
 800a20e:	4401      	add	r1, r0
 800a210:	1850      	adds	r0, r2, r1
 800a212:	4283      	cmp	r3, r0
 800a214:	6011      	str	r1, [r2, #0]
 800a216:	d1e0      	bne.n	800a1da <_free_r+0x22>
 800a218:	6818      	ldr	r0, [r3, #0]
 800a21a:	685b      	ldr	r3, [r3, #4]
 800a21c:	6053      	str	r3, [r2, #4]
 800a21e:	4408      	add	r0, r1
 800a220:	6010      	str	r0, [r2, #0]
 800a222:	e7da      	b.n	800a1da <_free_r+0x22>
 800a224:	d902      	bls.n	800a22c <_free_r+0x74>
 800a226:	230c      	movs	r3, #12
 800a228:	602b      	str	r3, [r5, #0]
 800a22a:	e7d6      	b.n	800a1da <_free_r+0x22>
 800a22c:	6820      	ldr	r0, [r4, #0]
 800a22e:	1821      	adds	r1, r4, r0
 800a230:	428b      	cmp	r3, r1
 800a232:	bf04      	itt	eq
 800a234:	6819      	ldreq	r1, [r3, #0]
 800a236:	685b      	ldreq	r3, [r3, #4]
 800a238:	6063      	str	r3, [r4, #4]
 800a23a:	bf04      	itt	eq
 800a23c:	1809      	addeq	r1, r1, r0
 800a23e:	6021      	streq	r1, [r4, #0]
 800a240:	6054      	str	r4, [r2, #4]
 800a242:	e7ca      	b.n	800a1da <_free_r+0x22>
 800a244:	bd38      	pop	{r3, r4, r5, pc}
 800a246:	bf00      	nop
 800a248:	20005478 	.word	0x20005478

0800a24c <malloc>:
 800a24c:	4b02      	ldr	r3, [pc, #8]	@ (800a258 <malloc+0xc>)
 800a24e:	4601      	mov	r1, r0
 800a250:	6818      	ldr	r0, [r3, #0]
 800a252:	f000 b825 	b.w	800a2a0 <_malloc_r>
 800a256:	bf00      	nop
 800a258:	2000001c 	.word	0x2000001c

0800a25c <sbrk_aligned>:
 800a25c:	b570      	push	{r4, r5, r6, lr}
 800a25e:	4e0f      	ldr	r6, [pc, #60]	@ (800a29c <sbrk_aligned+0x40>)
 800a260:	460c      	mov	r4, r1
 800a262:	6831      	ldr	r1, [r6, #0]
 800a264:	4605      	mov	r5, r0
 800a266:	b911      	cbnz	r1, 800a26e <sbrk_aligned+0x12>
 800a268:	f000 feb4 	bl	800afd4 <_sbrk_r>
 800a26c:	6030      	str	r0, [r6, #0]
 800a26e:	4621      	mov	r1, r4
 800a270:	4628      	mov	r0, r5
 800a272:	f000 feaf 	bl	800afd4 <_sbrk_r>
 800a276:	1c43      	adds	r3, r0, #1
 800a278:	d103      	bne.n	800a282 <sbrk_aligned+0x26>
 800a27a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800a27e:	4620      	mov	r0, r4
 800a280:	bd70      	pop	{r4, r5, r6, pc}
 800a282:	1cc4      	adds	r4, r0, #3
 800a284:	f024 0403 	bic.w	r4, r4, #3
 800a288:	42a0      	cmp	r0, r4
 800a28a:	d0f8      	beq.n	800a27e <sbrk_aligned+0x22>
 800a28c:	1a21      	subs	r1, r4, r0
 800a28e:	4628      	mov	r0, r5
 800a290:	f000 fea0 	bl	800afd4 <_sbrk_r>
 800a294:	3001      	adds	r0, #1
 800a296:	d1f2      	bne.n	800a27e <sbrk_aligned+0x22>
 800a298:	e7ef      	b.n	800a27a <sbrk_aligned+0x1e>
 800a29a:	bf00      	nop
 800a29c:	20005474 	.word	0x20005474

0800a2a0 <_malloc_r>:
 800a2a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a2a4:	1ccd      	adds	r5, r1, #3
 800a2a6:	f025 0503 	bic.w	r5, r5, #3
 800a2aa:	3508      	adds	r5, #8
 800a2ac:	2d0c      	cmp	r5, #12
 800a2ae:	bf38      	it	cc
 800a2b0:	250c      	movcc	r5, #12
 800a2b2:	2d00      	cmp	r5, #0
 800a2b4:	4606      	mov	r6, r0
 800a2b6:	db01      	blt.n	800a2bc <_malloc_r+0x1c>
 800a2b8:	42a9      	cmp	r1, r5
 800a2ba:	d904      	bls.n	800a2c6 <_malloc_r+0x26>
 800a2bc:	230c      	movs	r3, #12
 800a2be:	6033      	str	r3, [r6, #0]
 800a2c0:	2000      	movs	r0, #0
 800a2c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a2c6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a39c <_malloc_r+0xfc>
 800a2ca:	f000 f869 	bl	800a3a0 <__malloc_lock>
 800a2ce:	f8d8 3000 	ldr.w	r3, [r8]
 800a2d2:	461c      	mov	r4, r3
 800a2d4:	bb44      	cbnz	r4, 800a328 <_malloc_r+0x88>
 800a2d6:	4629      	mov	r1, r5
 800a2d8:	4630      	mov	r0, r6
 800a2da:	f7ff ffbf 	bl	800a25c <sbrk_aligned>
 800a2de:	1c43      	adds	r3, r0, #1
 800a2e0:	4604      	mov	r4, r0
 800a2e2:	d158      	bne.n	800a396 <_malloc_r+0xf6>
 800a2e4:	f8d8 4000 	ldr.w	r4, [r8]
 800a2e8:	4627      	mov	r7, r4
 800a2ea:	2f00      	cmp	r7, #0
 800a2ec:	d143      	bne.n	800a376 <_malloc_r+0xd6>
 800a2ee:	2c00      	cmp	r4, #0
 800a2f0:	d04b      	beq.n	800a38a <_malloc_r+0xea>
 800a2f2:	6823      	ldr	r3, [r4, #0]
 800a2f4:	4639      	mov	r1, r7
 800a2f6:	4630      	mov	r0, r6
 800a2f8:	eb04 0903 	add.w	r9, r4, r3
 800a2fc:	f000 fe6a 	bl	800afd4 <_sbrk_r>
 800a300:	4581      	cmp	r9, r0
 800a302:	d142      	bne.n	800a38a <_malloc_r+0xea>
 800a304:	6821      	ldr	r1, [r4, #0]
 800a306:	1a6d      	subs	r5, r5, r1
 800a308:	4629      	mov	r1, r5
 800a30a:	4630      	mov	r0, r6
 800a30c:	f7ff ffa6 	bl	800a25c <sbrk_aligned>
 800a310:	3001      	adds	r0, #1
 800a312:	d03a      	beq.n	800a38a <_malloc_r+0xea>
 800a314:	6823      	ldr	r3, [r4, #0]
 800a316:	442b      	add	r3, r5
 800a318:	6023      	str	r3, [r4, #0]
 800a31a:	f8d8 3000 	ldr.w	r3, [r8]
 800a31e:	685a      	ldr	r2, [r3, #4]
 800a320:	bb62      	cbnz	r2, 800a37c <_malloc_r+0xdc>
 800a322:	f8c8 7000 	str.w	r7, [r8]
 800a326:	e00f      	b.n	800a348 <_malloc_r+0xa8>
 800a328:	6822      	ldr	r2, [r4, #0]
 800a32a:	1b52      	subs	r2, r2, r5
 800a32c:	d420      	bmi.n	800a370 <_malloc_r+0xd0>
 800a32e:	2a0b      	cmp	r2, #11
 800a330:	d917      	bls.n	800a362 <_malloc_r+0xc2>
 800a332:	1961      	adds	r1, r4, r5
 800a334:	42a3      	cmp	r3, r4
 800a336:	6025      	str	r5, [r4, #0]
 800a338:	bf18      	it	ne
 800a33a:	6059      	strne	r1, [r3, #4]
 800a33c:	6863      	ldr	r3, [r4, #4]
 800a33e:	bf08      	it	eq
 800a340:	f8c8 1000 	streq.w	r1, [r8]
 800a344:	5162      	str	r2, [r4, r5]
 800a346:	604b      	str	r3, [r1, #4]
 800a348:	4630      	mov	r0, r6
 800a34a:	f000 f82f 	bl	800a3ac <__malloc_unlock>
 800a34e:	f104 000b 	add.w	r0, r4, #11
 800a352:	1d23      	adds	r3, r4, #4
 800a354:	f020 0007 	bic.w	r0, r0, #7
 800a358:	1ac2      	subs	r2, r0, r3
 800a35a:	bf1c      	itt	ne
 800a35c:	1a1b      	subne	r3, r3, r0
 800a35e:	50a3      	strne	r3, [r4, r2]
 800a360:	e7af      	b.n	800a2c2 <_malloc_r+0x22>
 800a362:	6862      	ldr	r2, [r4, #4]
 800a364:	42a3      	cmp	r3, r4
 800a366:	bf0c      	ite	eq
 800a368:	f8c8 2000 	streq.w	r2, [r8]
 800a36c:	605a      	strne	r2, [r3, #4]
 800a36e:	e7eb      	b.n	800a348 <_malloc_r+0xa8>
 800a370:	4623      	mov	r3, r4
 800a372:	6864      	ldr	r4, [r4, #4]
 800a374:	e7ae      	b.n	800a2d4 <_malloc_r+0x34>
 800a376:	463c      	mov	r4, r7
 800a378:	687f      	ldr	r7, [r7, #4]
 800a37a:	e7b6      	b.n	800a2ea <_malloc_r+0x4a>
 800a37c:	461a      	mov	r2, r3
 800a37e:	685b      	ldr	r3, [r3, #4]
 800a380:	42a3      	cmp	r3, r4
 800a382:	d1fb      	bne.n	800a37c <_malloc_r+0xdc>
 800a384:	2300      	movs	r3, #0
 800a386:	6053      	str	r3, [r2, #4]
 800a388:	e7de      	b.n	800a348 <_malloc_r+0xa8>
 800a38a:	230c      	movs	r3, #12
 800a38c:	6033      	str	r3, [r6, #0]
 800a38e:	4630      	mov	r0, r6
 800a390:	f000 f80c 	bl	800a3ac <__malloc_unlock>
 800a394:	e794      	b.n	800a2c0 <_malloc_r+0x20>
 800a396:	6005      	str	r5, [r0, #0]
 800a398:	e7d6      	b.n	800a348 <_malloc_r+0xa8>
 800a39a:	bf00      	nop
 800a39c:	20005478 	.word	0x20005478

0800a3a0 <__malloc_lock>:
 800a3a0:	4801      	ldr	r0, [pc, #4]	@ (800a3a8 <__malloc_lock+0x8>)
 800a3a2:	f7ff b880 	b.w	80094a6 <__retarget_lock_acquire_recursive>
 800a3a6:	bf00      	nop
 800a3a8:	20005470 	.word	0x20005470

0800a3ac <__malloc_unlock>:
 800a3ac:	4801      	ldr	r0, [pc, #4]	@ (800a3b4 <__malloc_unlock+0x8>)
 800a3ae:	f7ff b87b 	b.w	80094a8 <__retarget_lock_release_recursive>
 800a3b2:	bf00      	nop
 800a3b4:	20005470 	.word	0x20005470

0800a3b8 <_Balloc>:
 800a3b8:	b570      	push	{r4, r5, r6, lr}
 800a3ba:	69c6      	ldr	r6, [r0, #28]
 800a3bc:	4604      	mov	r4, r0
 800a3be:	460d      	mov	r5, r1
 800a3c0:	b976      	cbnz	r6, 800a3e0 <_Balloc+0x28>
 800a3c2:	2010      	movs	r0, #16
 800a3c4:	f7ff ff42 	bl	800a24c <malloc>
 800a3c8:	4602      	mov	r2, r0
 800a3ca:	61e0      	str	r0, [r4, #28]
 800a3cc:	b920      	cbnz	r0, 800a3d8 <_Balloc+0x20>
 800a3ce:	4b18      	ldr	r3, [pc, #96]	@ (800a430 <_Balloc+0x78>)
 800a3d0:	4818      	ldr	r0, [pc, #96]	@ (800a434 <_Balloc+0x7c>)
 800a3d2:	216b      	movs	r1, #107	@ 0x6b
 800a3d4:	f7ff f878 	bl	80094c8 <__assert_func>
 800a3d8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a3dc:	6006      	str	r6, [r0, #0]
 800a3de:	60c6      	str	r6, [r0, #12]
 800a3e0:	69e6      	ldr	r6, [r4, #28]
 800a3e2:	68f3      	ldr	r3, [r6, #12]
 800a3e4:	b183      	cbz	r3, 800a408 <_Balloc+0x50>
 800a3e6:	69e3      	ldr	r3, [r4, #28]
 800a3e8:	68db      	ldr	r3, [r3, #12]
 800a3ea:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a3ee:	b9b8      	cbnz	r0, 800a420 <_Balloc+0x68>
 800a3f0:	2101      	movs	r1, #1
 800a3f2:	fa01 f605 	lsl.w	r6, r1, r5
 800a3f6:	1d72      	adds	r2, r6, #5
 800a3f8:	0092      	lsls	r2, r2, #2
 800a3fa:	4620      	mov	r0, r4
 800a3fc:	f000 fe01 	bl	800b002 <_calloc_r>
 800a400:	b160      	cbz	r0, 800a41c <_Balloc+0x64>
 800a402:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a406:	e00e      	b.n	800a426 <_Balloc+0x6e>
 800a408:	2221      	movs	r2, #33	@ 0x21
 800a40a:	2104      	movs	r1, #4
 800a40c:	4620      	mov	r0, r4
 800a40e:	f000 fdf8 	bl	800b002 <_calloc_r>
 800a412:	69e3      	ldr	r3, [r4, #28]
 800a414:	60f0      	str	r0, [r6, #12]
 800a416:	68db      	ldr	r3, [r3, #12]
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d1e4      	bne.n	800a3e6 <_Balloc+0x2e>
 800a41c:	2000      	movs	r0, #0
 800a41e:	bd70      	pop	{r4, r5, r6, pc}
 800a420:	6802      	ldr	r2, [r0, #0]
 800a422:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a426:	2300      	movs	r3, #0
 800a428:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a42c:	e7f7      	b.n	800a41e <_Balloc+0x66>
 800a42e:	bf00      	nop
 800a430:	0800b350 	.word	0x0800b350
 800a434:	0800b4a5 	.word	0x0800b4a5

0800a438 <_Bfree>:
 800a438:	b570      	push	{r4, r5, r6, lr}
 800a43a:	69c6      	ldr	r6, [r0, #28]
 800a43c:	4605      	mov	r5, r0
 800a43e:	460c      	mov	r4, r1
 800a440:	b976      	cbnz	r6, 800a460 <_Bfree+0x28>
 800a442:	2010      	movs	r0, #16
 800a444:	f7ff ff02 	bl	800a24c <malloc>
 800a448:	4602      	mov	r2, r0
 800a44a:	61e8      	str	r0, [r5, #28]
 800a44c:	b920      	cbnz	r0, 800a458 <_Bfree+0x20>
 800a44e:	4b09      	ldr	r3, [pc, #36]	@ (800a474 <_Bfree+0x3c>)
 800a450:	4809      	ldr	r0, [pc, #36]	@ (800a478 <_Bfree+0x40>)
 800a452:	218f      	movs	r1, #143	@ 0x8f
 800a454:	f7ff f838 	bl	80094c8 <__assert_func>
 800a458:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a45c:	6006      	str	r6, [r0, #0]
 800a45e:	60c6      	str	r6, [r0, #12]
 800a460:	b13c      	cbz	r4, 800a472 <_Bfree+0x3a>
 800a462:	69eb      	ldr	r3, [r5, #28]
 800a464:	6862      	ldr	r2, [r4, #4]
 800a466:	68db      	ldr	r3, [r3, #12]
 800a468:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a46c:	6021      	str	r1, [r4, #0]
 800a46e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a472:	bd70      	pop	{r4, r5, r6, pc}
 800a474:	0800b350 	.word	0x0800b350
 800a478:	0800b4a5 	.word	0x0800b4a5

0800a47c <__multadd>:
 800a47c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a480:	690d      	ldr	r5, [r1, #16]
 800a482:	4607      	mov	r7, r0
 800a484:	460c      	mov	r4, r1
 800a486:	461e      	mov	r6, r3
 800a488:	f101 0c14 	add.w	ip, r1, #20
 800a48c:	2000      	movs	r0, #0
 800a48e:	f8dc 3000 	ldr.w	r3, [ip]
 800a492:	b299      	uxth	r1, r3
 800a494:	fb02 6101 	mla	r1, r2, r1, r6
 800a498:	0c1e      	lsrs	r6, r3, #16
 800a49a:	0c0b      	lsrs	r3, r1, #16
 800a49c:	fb02 3306 	mla	r3, r2, r6, r3
 800a4a0:	b289      	uxth	r1, r1
 800a4a2:	3001      	adds	r0, #1
 800a4a4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a4a8:	4285      	cmp	r5, r0
 800a4aa:	f84c 1b04 	str.w	r1, [ip], #4
 800a4ae:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a4b2:	dcec      	bgt.n	800a48e <__multadd+0x12>
 800a4b4:	b30e      	cbz	r6, 800a4fa <__multadd+0x7e>
 800a4b6:	68a3      	ldr	r3, [r4, #8]
 800a4b8:	42ab      	cmp	r3, r5
 800a4ba:	dc19      	bgt.n	800a4f0 <__multadd+0x74>
 800a4bc:	6861      	ldr	r1, [r4, #4]
 800a4be:	4638      	mov	r0, r7
 800a4c0:	3101      	adds	r1, #1
 800a4c2:	f7ff ff79 	bl	800a3b8 <_Balloc>
 800a4c6:	4680      	mov	r8, r0
 800a4c8:	b928      	cbnz	r0, 800a4d6 <__multadd+0x5a>
 800a4ca:	4602      	mov	r2, r0
 800a4cc:	4b0c      	ldr	r3, [pc, #48]	@ (800a500 <__multadd+0x84>)
 800a4ce:	480d      	ldr	r0, [pc, #52]	@ (800a504 <__multadd+0x88>)
 800a4d0:	21ba      	movs	r1, #186	@ 0xba
 800a4d2:	f7fe fff9 	bl	80094c8 <__assert_func>
 800a4d6:	6922      	ldr	r2, [r4, #16]
 800a4d8:	3202      	adds	r2, #2
 800a4da:	f104 010c 	add.w	r1, r4, #12
 800a4de:	0092      	lsls	r2, r2, #2
 800a4e0:	300c      	adds	r0, #12
 800a4e2:	f7fe ffe2 	bl	80094aa <memcpy>
 800a4e6:	4621      	mov	r1, r4
 800a4e8:	4638      	mov	r0, r7
 800a4ea:	f7ff ffa5 	bl	800a438 <_Bfree>
 800a4ee:	4644      	mov	r4, r8
 800a4f0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a4f4:	3501      	adds	r5, #1
 800a4f6:	615e      	str	r6, [r3, #20]
 800a4f8:	6125      	str	r5, [r4, #16]
 800a4fa:	4620      	mov	r0, r4
 800a4fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a500:	0800b494 	.word	0x0800b494
 800a504:	0800b4a5 	.word	0x0800b4a5

0800a508 <__hi0bits>:
 800a508:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800a50c:	4603      	mov	r3, r0
 800a50e:	bf36      	itet	cc
 800a510:	0403      	lslcc	r3, r0, #16
 800a512:	2000      	movcs	r0, #0
 800a514:	2010      	movcc	r0, #16
 800a516:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a51a:	bf3c      	itt	cc
 800a51c:	021b      	lslcc	r3, r3, #8
 800a51e:	3008      	addcc	r0, #8
 800a520:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a524:	bf3c      	itt	cc
 800a526:	011b      	lslcc	r3, r3, #4
 800a528:	3004      	addcc	r0, #4
 800a52a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a52e:	bf3c      	itt	cc
 800a530:	009b      	lslcc	r3, r3, #2
 800a532:	3002      	addcc	r0, #2
 800a534:	2b00      	cmp	r3, #0
 800a536:	db05      	blt.n	800a544 <__hi0bits+0x3c>
 800a538:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800a53c:	f100 0001 	add.w	r0, r0, #1
 800a540:	bf08      	it	eq
 800a542:	2020      	moveq	r0, #32
 800a544:	4770      	bx	lr

0800a546 <__lo0bits>:
 800a546:	6803      	ldr	r3, [r0, #0]
 800a548:	4602      	mov	r2, r0
 800a54a:	f013 0007 	ands.w	r0, r3, #7
 800a54e:	d00b      	beq.n	800a568 <__lo0bits+0x22>
 800a550:	07d9      	lsls	r1, r3, #31
 800a552:	d421      	bmi.n	800a598 <__lo0bits+0x52>
 800a554:	0798      	lsls	r0, r3, #30
 800a556:	bf49      	itett	mi
 800a558:	085b      	lsrmi	r3, r3, #1
 800a55a:	089b      	lsrpl	r3, r3, #2
 800a55c:	2001      	movmi	r0, #1
 800a55e:	6013      	strmi	r3, [r2, #0]
 800a560:	bf5c      	itt	pl
 800a562:	6013      	strpl	r3, [r2, #0]
 800a564:	2002      	movpl	r0, #2
 800a566:	4770      	bx	lr
 800a568:	b299      	uxth	r1, r3
 800a56a:	b909      	cbnz	r1, 800a570 <__lo0bits+0x2a>
 800a56c:	0c1b      	lsrs	r3, r3, #16
 800a56e:	2010      	movs	r0, #16
 800a570:	b2d9      	uxtb	r1, r3
 800a572:	b909      	cbnz	r1, 800a578 <__lo0bits+0x32>
 800a574:	3008      	adds	r0, #8
 800a576:	0a1b      	lsrs	r3, r3, #8
 800a578:	0719      	lsls	r1, r3, #28
 800a57a:	bf04      	itt	eq
 800a57c:	091b      	lsreq	r3, r3, #4
 800a57e:	3004      	addeq	r0, #4
 800a580:	0799      	lsls	r1, r3, #30
 800a582:	bf04      	itt	eq
 800a584:	089b      	lsreq	r3, r3, #2
 800a586:	3002      	addeq	r0, #2
 800a588:	07d9      	lsls	r1, r3, #31
 800a58a:	d403      	bmi.n	800a594 <__lo0bits+0x4e>
 800a58c:	085b      	lsrs	r3, r3, #1
 800a58e:	f100 0001 	add.w	r0, r0, #1
 800a592:	d003      	beq.n	800a59c <__lo0bits+0x56>
 800a594:	6013      	str	r3, [r2, #0]
 800a596:	4770      	bx	lr
 800a598:	2000      	movs	r0, #0
 800a59a:	4770      	bx	lr
 800a59c:	2020      	movs	r0, #32
 800a59e:	4770      	bx	lr

0800a5a0 <__i2b>:
 800a5a0:	b510      	push	{r4, lr}
 800a5a2:	460c      	mov	r4, r1
 800a5a4:	2101      	movs	r1, #1
 800a5a6:	f7ff ff07 	bl	800a3b8 <_Balloc>
 800a5aa:	4602      	mov	r2, r0
 800a5ac:	b928      	cbnz	r0, 800a5ba <__i2b+0x1a>
 800a5ae:	4b05      	ldr	r3, [pc, #20]	@ (800a5c4 <__i2b+0x24>)
 800a5b0:	4805      	ldr	r0, [pc, #20]	@ (800a5c8 <__i2b+0x28>)
 800a5b2:	f240 1145 	movw	r1, #325	@ 0x145
 800a5b6:	f7fe ff87 	bl	80094c8 <__assert_func>
 800a5ba:	2301      	movs	r3, #1
 800a5bc:	6144      	str	r4, [r0, #20]
 800a5be:	6103      	str	r3, [r0, #16]
 800a5c0:	bd10      	pop	{r4, pc}
 800a5c2:	bf00      	nop
 800a5c4:	0800b494 	.word	0x0800b494
 800a5c8:	0800b4a5 	.word	0x0800b4a5

0800a5cc <__multiply>:
 800a5cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5d0:	4617      	mov	r7, r2
 800a5d2:	690a      	ldr	r2, [r1, #16]
 800a5d4:	693b      	ldr	r3, [r7, #16]
 800a5d6:	429a      	cmp	r2, r3
 800a5d8:	bfa8      	it	ge
 800a5da:	463b      	movge	r3, r7
 800a5dc:	4689      	mov	r9, r1
 800a5de:	bfa4      	itt	ge
 800a5e0:	460f      	movge	r7, r1
 800a5e2:	4699      	movge	r9, r3
 800a5e4:	693d      	ldr	r5, [r7, #16]
 800a5e6:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a5ea:	68bb      	ldr	r3, [r7, #8]
 800a5ec:	6879      	ldr	r1, [r7, #4]
 800a5ee:	eb05 060a 	add.w	r6, r5, sl
 800a5f2:	42b3      	cmp	r3, r6
 800a5f4:	b085      	sub	sp, #20
 800a5f6:	bfb8      	it	lt
 800a5f8:	3101      	addlt	r1, #1
 800a5fa:	f7ff fedd 	bl	800a3b8 <_Balloc>
 800a5fe:	b930      	cbnz	r0, 800a60e <__multiply+0x42>
 800a600:	4602      	mov	r2, r0
 800a602:	4b41      	ldr	r3, [pc, #260]	@ (800a708 <__multiply+0x13c>)
 800a604:	4841      	ldr	r0, [pc, #260]	@ (800a70c <__multiply+0x140>)
 800a606:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800a60a:	f7fe ff5d 	bl	80094c8 <__assert_func>
 800a60e:	f100 0414 	add.w	r4, r0, #20
 800a612:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800a616:	4623      	mov	r3, r4
 800a618:	2200      	movs	r2, #0
 800a61a:	4573      	cmp	r3, lr
 800a61c:	d320      	bcc.n	800a660 <__multiply+0x94>
 800a61e:	f107 0814 	add.w	r8, r7, #20
 800a622:	f109 0114 	add.w	r1, r9, #20
 800a626:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800a62a:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800a62e:	9302      	str	r3, [sp, #8]
 800a630:	1beb      	subs	r3, r5, r7
 800a632:	3b15      	subs	r3, #21
 800a634:	f023 0303 	bic.w	r3, r3, #3
 800a638:	3304      	adds	r3, #4
 800a63a:	3715      	adds	r7, #21
 800a63c:	42bd      	cmp	r5, r7
 800a63e:	bf38      	it	cc
 800a640:	2304      	movcc	r3, #4
 800a642:	9301      	str	r3, [sp, #4]
 800a644:	9b02      	ldr	r3, [sp, #8]
 800a646:	9103      	str	r1, [sp, #12]
 800a648:	428b      	cmp	r3, r1
 800a64a:	d80c      	bhi.n	800a666 <__multiply+0x9a>
 800a64c:	2e00      	cmp	r6, #0
 800a64e:	dd03      	ble.n	800a658 <__multiply+0x8c>
 800a650:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800a654:	2b00      	cmp	r3, #0
 800a656:	d055      	beq.n	800a704 <__multiply+0x138>
 800a658:	6106      	str	r6, [r0, #16]
 800a65a:	b005      	add	sp, #20
 800a65c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a660:	f843 2b04 	str.w	r2, [r3], #4
 800a664:	e7d9      	b.n	800a61a <__multiply+0x4e>
 800a666:	f8b1 a000 	ldrh.w	sl, [r1]
 800a66a:	f1ba 0f00 	cmp.w	sl, #0
 800a66e:	d01f      	beq.n	800a6b0 <__multiply+0xe4>
 800a670:	46c4      	mov	ip, r8
 800a672:	46a1      	mov	r9, r4
 800a674:	2700      	movs	r7, #0
 800a676:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a67a:	f8d9 3000 	ldr.w	r3, [r9]
 800a67e:	fa1f fb82 	uxth.w	fp, r2
 800a682:	b29b      	uxth	r3, r3
 800a684:	fb0a 330b 	mla	r3, sl, fp, r3
 800a688:	443b      	add	r3, r7
 800a68a:	f8d9 7000 	ldr.w	r7, [r9]
 800a68e:	0c12      	lsrs	r2, r2, #16
 800a690:	0c3f      	lsrs	r7, r7, #16
 800a692:	fb0a 7202 	mla	r2, sl, r2, r7
 800a696:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800a69a:	b29b      	uxth	r3, r3
 800a69c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a6a0:	4565      	cmp	r5, ip
 800a6a2:	f849 3b04 	str.w	r3, [r9], #4
 800a6a6:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800a6aa:	d8e4      	bhi.n	800a676 <__multiply+0xaa>
 800a6ac:	9b01      	ldr	r3, [sp, #4]
 800a6ae:	50e7      	str	r7, [r4, r3]
 800a6b0:	9b03      	ldr	r3, [sp, #12]
 800a6b2:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800a6b6:	3104      	adds	r1, #4
 800a6b8:	f1b9 0f00 	cmp.w	r9, #0
 800a6bc:	d020      	beq.n	800a700 <__multiply+0x134>
 800a6be:	6823      	ldr	r3, [r4, #0]
 800a6c0:	4647      	mov	r7, r8
 800a6c2:	46a4      	mov	ip, r4
 800a6c4:	f04f 0a00 	mov.w	sl, #0
 800a6c8:	f8b7 b000 	ldrh.w	fp, [r7]
 800a6cc:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800a6d0:	fb09 220b 	mla	r2, r9, fp, r2
 800a6d4:	4452      	add	r2, sl
 800a6d6:	b29b      	uxth	r3, r3
 800a6d8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a6dc:	f84c 3b04 	str.w	r3, [ip], #4
 800a6e0:	f857 3b04 	ldr.w	r3, [r7], #4
 800a6e4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a6e8:	f8bc 3000 	ldrh.w	r3, [ip]
 800a6ec:	fb09 330a 	mla	r3, r9, sl, r3
 800a6f0:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800a6f4:	42bd      	cmp	r5, r7
 800a6f6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a6fa:	d8e5      	bhi.n	800a6c8 <__multiply+0xfc>
 800a6fc:	9a01      	ldr	r2, [sp, #4]
 800a6fe:	50a3      	str	r3, [r4, r2]
 800a700:	3404      	adds	r4, #4
 800a702:	e79f      	b.n	800a644 <__multiply+0x78>
 800a704:	3e01      	subs	r6, #1
 800a706:	e7a1      	b.n	800a64c <__multiply+0x80>
 800a708:	0800b494 	.word	0x0800b494
 800a70c:	0800b4a5 	.word	0x0800b4a5

0800a710 <__pow5mult>:
 800a710:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a714:	4615      	mov	r5, r2
 800a716:	f012 0203 	ands.w	r2, r2, #3
 800a71a:	4607      	mov	r7, r0
 800a71c:	460e      	mov	r6, r1
 800a71e:	d007      	beq.n	800a730 <__pow5mult+0x20>
 800a720:	4c25      	ldr	r4, [pc, #148]	@ (800a7b8 <__pow5mult+0xa8>)
 800a722:	3a01      	subs	r2, #1
 800a724:	2300      	movs	r3, #0
 800a726:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a72a:	f7ff fea7 	bl	800a47c <__multadd>
 800a72e:	4606      	mov	r6, r0
 800a730:	10ad      	asrs	r5, r5, #2
 800a732:	d03d      	beq.n	800a7b0 <__pow5mult+0xa0>
 800a734:	69fc      	ldr	r4, [r7, #28]
 800a736:	b97c      	cbnz	r4, 800a758 <__pow5mult+0x48>
 800a738:	2010      	movs	r0, #16
 800a73a:	f7ff fd87 	bl	800a24c <malloc>
 800a73e:	4602      	mov	r2, r0
 800a740:	61f8      	str	r0, [r7, #28]
 800a742:	b928      	cbnz	r0, 800a750 <__pow5mult+0x40>
 800a744:	4b1d      	ldr	r3, [pc, #116]	@ (800a7bc <__pow5mult+0xac>)
 800a746:	481e      	ldr	r0, [pc, #120]	@ (800a7c0 <__pow5mult+0xb0>)
 800a748:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800a74c:	f7fe febc 	bl	80094c8 <__assert_func>
 800a750:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a754:	6004      	str	r4, [r0, #0]
 800a756:	60c4      	str	r4, [r0, #12]
 800a758:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800a75c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a760:	b94c      	cbnz	r4, 800a776 <__pow5mult+0x66>
 800a762:	f240 2171 	movw	r1, #625	@ 0x271
 800a766:	4638      	mov	r0, r7
 800a768:	f7ff ff1a 	bl	800a5a0 <__i2b>
 800a76c:	2300      	movs	r3, #0
 800a76e:	f8c8 0008 	str.w	r0, [r8, #8]
 800a772:	4604      	mov	r4, r0
 800a774:	6003      	str	r3, [r0, #0]
 800a776:	f04f 0900 	mov.w	r9, #0
 800a77a:	07eb      	lsls	r3, r5, #31
 800a77c:	d50a      	bpl.n	800a794 <__pow5mult+0x84>
 800a77e:	4631      	mov	r1, r6
 800a780:	4622      	mov	r2, r4
 800a782:	4638      	mov	r0, r7
 800a784:	f7ff ff22 	bl	800a5cc <__multiply>
 800a788:	4631      	mov	r1, r6
 800a78a:	4680      	mov	r8, r0
 800a78c:	4638      	mov	r0, r7
 800a78e:	f7ff fe53 	bl	800a438 <_Bfree>
 800a792:	4646      	mov	r6, r8
 800a794:	106d      	asrs	r5, r5, #1
 800a796:	d00b      	beq.n	800a7b0 <__pow5mult+0xa0>
 800a798:	6820      	ldr	r0, [r4, #0]
 800a79a:	b938      	cbnz	r0, 800a7ac <__pow5mult+0x9c>
 800a79c:	4622      	mov	r2, r4
 800a79e:	4621      	mov	r1, r4
 800a7a0:	4638      	mov	r0, r7
 800a7a2:	f7ff ff13 	bl	800a5cc <__multiply>
 800a7a6:	6020      	str	r0, [r4, #0]
 800a7a8:	f8c0 9000 	str.w	r9, [r0]
 800a7ac:	4604      	mov	r4, r0
 800a7ae:	e7e4      	b.n	800a77a <__pow5mult+0x6a>
 800a7b0:	4630      	mov	r0, r6
 800a7b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a7b6:	bf00      	nop
 800a7b8:	0800b51c 	.word	0x0800b51c
 800a7bc:	0800b350 	.word	0x0800b350
 800a7c0:	0800b4a5 	.word	0x0800b4a5

0800a7c4 <__lshift>:
 800a7c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a7c8:	460c      	mov	r4, r1
 800a7ca:	6849      	ldr	r1, [r1, #4]
 800a7cc:	6923      	ldr	r3, [r4, #16]
 800a7ce:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a7d2:	68a3      	ldr	r3, [r4, #8]
 800a7d4:	4607      	mov	r7, r0
 800a7d6:	4691      	mov	r9, r2
 800a7d8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a7dc:	f108 0601 	add.w	r6, r8, #1
 800a7e0:	42b3      	cmp	r3, r6
 800a7e2:	db0b      	blt.n	800a7fc <__lshift+0x38>
 800a7e4:	4638      	mov	r0, r7
 800a7e6:	f7ff fde7 	bl	800a3b8 <_Balloc>
 800a7ea:	4605      	mov	r5, r0
 800a7ec:	b948      	cbnz	r0, 800a802 <__lshift+0x3e>
 800a7ee:	4602      	mov	r2, r0
 800a7f0:	4b28      	ldr	r3, [pc, #160]	@ (800a894 <__lshift+0xd0>)
 800a7f2:	4829      	ldr	r0, [pc, #164]	@ (800a898 <__lshift+0xd4>)
 800a7f4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800a7f8:	f7fe fe66 	bl	80094c8 <__assert_func>
 800a7fc:	3101      	adds	r1, #1
 800a7fe:	005b      	lsls	r3, r3, #1
 800a800:	e7ee      	b.n	800a7e0 <__lshift+0x1c>
 800a802:	2300      	movs	r3, #0
 800a804:	f100 0114 	add.w	r1, r0, #20
 800a808:	f100 0210 	add.w	r2, r0, #16
 800a80c:	4618      	mov	r0, r3
 800a80e:	4553      	cmp	r3, sl
 800a810:	db33      	blt.n	800a87a <__lshift+0xb6>
 800a812:	6920      	ldr	r0, [r4, #16]
 800a814:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a818:	f104 0314 	add.w	r3, r4, #20
 800a81c:	f019 091f 	ands.w	r9, r9, #31
 800a820:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a824:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a828:	d02b      	beq.n	800a882 <__lshift+0xbe>
 800a82a:	f1c9 0e20 	rsb	lr, r9, #32
 800a82e:	468a      	mov	sl, r1
 800a830:	2200      	movs	r2, #0
 800a832:	6818      	ldr	r0, [r3, #0]
 800a834:	fa00 f009 	lsl.w	r0, r0, r9
 800a838:	4310      	orrs	r0, r2
 800a83a:	f84a 0b04 	str.w	r0, [sl], #4
 800a83e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a842:	459c      	cmp	ip, r3
 800a844:	fa22 f20e 	lsr.w	r2, r2, lr
 800a848:	d8f3      	bhi.n	800a832 <__lshift+0x6e>
 800a84a:	ebac 0304 	sub.w	r3, ip, r4
 800a84e:	3b15      	subs	r3, #21
 800a850:	f023 0303 	bic.w	r3, r3, #3
 800a854:	3304      	adds	r3, #4
 800a856:	f104 0015 	add.w	r0, r4, #21
 800a85a:	4560      	cmp	r0, ip
 800a85c:	bf88      	it	hi
 800a85e:	2304      	movhi	r3, #4
 800a860:	50ca      	str	r2, [r1, r3]
 800a862:	b10a      	cbz	r2, 800a868 <__lshift+0xa4>
 800a864:	f108 0602 	add.w	r6, r8, #2
 800a868:	3e01      	subs	r6, #1
 800a86a:	4638      	mov	r0, r7
 800a86c:	612e      	str	r6, [r5, #16]
 800a86e:	4621      	mov	r1, r4
 800a870:	f7ff fde2 	bl	800a438 <_Bfree>
 800a874:	4628      	mov	r0, r5
 800a876:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a87a:	f842 0f04 	str.w	r0, [r2, #4]!
 800a87e:	3301      	adds	r3, #1
 800a880:	e7c5      	b.n	800a80e <__lshift+0x4a>
 800a882:	3904      	subs	r1, #4
 800a884:	f853 2b04 	ldr.w	r2, [r3], #4
 800a888:	f841 2f04 	str.w	r2, [r1, #4]!
 800a88c:	459c      	cmp	ip, r3
 800a88e:	d8f9      	bhi.n	800a884 <__lshift+0xc0>
 800a890:	e7ea      	b.n	800a868 <__lshift+0xa4>
 800a892:	bf00      	nop
 800a894:	0800b494 	.word	0x0800b494
 800a898:	0800b4a5 	.word	0x0800b4a5

0800a89c <__mcmp>:
 800a89c:	690a      	ldr	r2, [r1, #16]
 800a89e:	4603      	mov	r3, r0
 800a8a0:	6900      	ldr	r0, [r0, #16]
 800a8a2:	1a80      	subs	r0, r0, r2
 800a8a4:	b530      	push	{r4, r5, lr}
 800a8a6:	d10e      	bne.n	800a8c6 <__mcmp+0x2a>
 800a8a8:	3314      	adds	r3, #20
 800a8aa:	3114      	adds	r1, #20
 800a8ac:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a8b0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a8b4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a8b8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a8bc:	4295      	cmp	r5, r2
 800a8be:	d003      	beq.n	800a8c8 <__mcmp+0x2c>
 800a8c0:	d205      	bcs.n	800a8ce <__mcmp+0x32>
 800a8c2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a8c6:	bd30      	pop	{r4, r5, pc}
 800a8c8:	42a3      	cmp	r3, r4
 800a8ca:	d3f3      	bcc.n	800a8b4 <__mcmp+0x18>
 800a8cc:	e7fb      	b.n	800a8c6 <__mcmp+0x2a>
 800a8ce:	2001      	movs	r0, #1
 800a8d0:	e7f9      	b.n	800a8c6 <__mcmp+0x2a>
	...

0800a8d4 <__mdiff>:
 800a8d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8d8:	4689      	mov	r9, r1
 800a8da:	4606      	mov	r6, r0
 800a8dc:	4611      	mov	r1, r2
 800a8de:	4648      	mov	r0, r9
 800a8e0:	4614      	mov	r4, r2
 800a8e2:	f7ff ffdb 	bl	800a89c <__mcmp>
 800a8e6:	1e05      	subs	r5, r0, #0
 800a8e8:	d112      	bne.n	800a910 <__mdiff+0x3c>
 800a8ea:	4629      	mov	r1, r5
 800a8ec:	4630      	mov	r0, r6
 800a8ee:	f7ff fd63 	bl	800a3b8 <_Balloc>
 800a8f2:	4602      	mov	r2, r0
 800a8f4:	b928      	cbnz	r0, 800a902 <__mdiff+0x2e>
 800a8f6:	4b3f      	ldr	r3, [pc, #252]	@ (800a9f4 <__mdiff+0x120>)
 800a8f8:	f240 2137 	movw	r1, #567	@ 0x237
 800a8fc:	483e      	ldr	r0, [pc, #248]	@ (800a9f8 <__mdiff+0x124>)
 800a8fe:	f7fe fde3 	bl	80094c8 <__assert_func>
 800a902:	2301      	movs	r3, #1
 800a904:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a908:	4610      	mov	r0, r2
 800a90a:	b003      	add	sp, #12
 800a90c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a910:	bfbc      	itt	lt
 800a912:	464b      	movlt	r3, r9
 800a914:	46a1      	movlt	r9, r4
 800a916:	4630      	mov	r0, r6
 800a918:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800a91c:	bfba      	itte	lt
 800a91e:	461c      	movlt	r4, r3
 800a920:	2501      	movlt	r5, #1
 800a922:	2500      	movge	r5, #0
 800a924:	f7ff fd48 	bl	800a3b8 <_Balloc>
 800a928:	4602      	mov	r2, r0
 800a92a:	b918      	cbnz	r0, 800a934 <__mdiff+0x60>
 800a92c:	4b31      	ldr	r3, [pc, #196]	@ (800a9f4 <__mdiff+0x120>)
 800a92e:	f240 2145 	movw	r1, #581	@ 0x245
 800a932:	e7e3      	b.n	800a8fc <__mdiff+0x28>
 800a934:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800a938:	6926      	ldr	r6, [r4, #16]
 800a93a:	60c5      	str	r5, [r0, #12]
 800a93c:	f109 0310 	add.w	r3, r9, #16
 800a940:	f109 0514 	add.w	r5, r9, #20
 800a944:	f104 0e14 	add.w	lr, r4, #20
 800a948:	f100 0b14 	add.w	fp, r0, #20
 800a94c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800a950:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800a954:	9301      	str	r3, [sp, #4]
 800a956:	46d9      	mov	r9, fp
 800a958:	f04f 0c00 	mov.w	ip, #0
 800a95c:	9b01      	ldr	r3, [sp, #4]
 800a95e:	f85e 0b04 	ldr.w	r0, [lr], #4
 800a962:	f853 af04 	ldr.w	sl, [r3, #4]!
 800a966:	9301      	str	r3, [sp, #4]
 800a968:	fa1f f38a 	uxth.w	r3, sl
 800a96c:	4619      	mov	r1, r3
 800a96e:	b283      	uxth	r3, r0
 800a970:	1acb      	subs	r3, r1, r3
 800a972:	0c00      	lsrs	r0, r0, #16
 800a974:	4463      	add	r3, ip
 800a976:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800a97a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800a97e:	b29b      	uxth	r3, r3
 800a980:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800a984:	4576      	cmp	r6, lr
 800a986:	f849 3b04 	str.w	r3, [r9], #4
 800a98a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a98e:	d8e5      	bhi.n	800a95c <__mdiff+0x88>
 800a990:	1b33      	subs	r3, r6, r4
 800a992:	3b15      	subs	r3, #21
 800a994:	f023 0303 	bic.w	r3, r3, #3
 800a998:	3415      	adds	r4, #21
 800a99a:	3304      	adds	r3, #4
 800a99c:	42a6      	cmp	r6, r4
 800a99e:	bf38      	it	cc
 800a9a0:	2304      	movcc	r3, #4
 800a9a2:	441d      	add	r5, r3
 800a9a4:	445b      	add	r3, fp
 800a9a6:	461e      	mov	r6, r3
 800a9a8:	462c      	mov	r4, r5
 800a9aa:	4544      	cmp	r4, r8
 800a9ac:	d30e      	bcc.n	800a9cc <__mdiff+0xf8>
 800a9ae:	f108 0103 	add.w	r1, r8, #3
 800a9b2:	1b49      	subs	r1, r1, r5
 800a9b4:	f021 0103 	bic.w	r1, r1, #3
 800a9b8:	3d03      	subs	r5, #3
 800a9ba:	45a8      	cmp	r8, r5
 800a9bc:	bf38      	it	cc
 800a9be:	2100      	movcc	r1, #0
 800a9c0:	440b      	add	r3, r1
 800a9c2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a9c6:	b191      	cbz	r1, 800a9ee <__mdiff+0x11a>
 800a9c8:	6117      	str	r7, [r2, #16]
 800a9ca:	e79d      	b.n	800a908 <__mdiff+0x34>
 800a9cc:	f854 1b04 	ldr.w	r1, [r4], #4
 800a9d0:	46e6      	mov	lr, ip
 800a9d2:	0c08      	lsrs	r0, r1, #16
 800a9d4:	fa1c fc81 	uxtah	ip, ip, r1
 800a9d8:	4471      	add	r1, lr
 800a9da:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800a9de:	b289      	uxth	r1, r1
 800a9e0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800a9e4:	f846 1b04 	str.w	r1, [r6], #4
 800a9e8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a9ec:	e7dd      	b.n	800a9aa <__mdiff+0xd6>
 800a9ee:	3f01      	subs	r7, #1
 800a9f0:	e7e7      	b.n	800a9c2 <__mdiff+0xee>
 800a9f2:	bf00      	nop
 800a9f4:	0800b494 	.word	0x0800b494
 800a9f8:	0800b4a5 	.word	0x0800b4a5

0800a9fc <__d2b>:
 800a9fc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800aa00:	460f      	mov	r7, r1
 800aa02:	2101      	movs	r1, #1
 800aa04:	ec59 8b10 	vmov	r8, r9, d0
 800aa08:	4616      	mov	r6, r2
 800aa0a:	f7ff fcd5 	bl	800a3b8 <_Balloc>
 800aa0e:	4604      	mov	r4, r0
 800aa10:	b930      	cbnz	r0, 800aa20 <__d2b+0x24>
 800aa12:	4602      	mov	r2, r0
 800aa14:	4b23      	ldr	r3, [pc, #140]	@ (800aaa4 <__d2b+0xa8>)
 800aa16:	4824      	ldr	r0, [pc, #144]	@ (800aaa8 <__d2b+0xac>)
 800aa18:	f240 310f 	movw	r1, #783	@ 0x30f
 800aa1c:	f7fe fd54 	bl	80094c8 <__assert_func>
 800aa20:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800aa24:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800aa28:	b10d      	cbz	r5, 800aa2e <__d2b+0x32>
 800aa2a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800aa2e:	9301      	str	r3, [sp, #4]
 800aa30:	f1b8 0300 	subs.w	r3, r8, #0
 800aa34:	d023      	beq.n	800aa7e <__d2b+0x82>
 800aa36:	4668      	mov	r0, sp
 800aa38:	9300      	str	r3, [sp, #0]
 800aa3a:	f7ff fd84 	bl	800a546 <__lo0bits>
 800aa3e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800aa42:	b1d0      	cbz	r0, 800aa7a <__d2b+0x7e>
 800aa44:	f1c0 0320 	rsb	r3, r0, #32
 800aa48:	fa02 f303 	lsl.w	r3, r2, r3
 800aa4c:	430b      	orrs	r3, r1
 800aa4e:	40c2      	lsrs	r2, r0
 800aa50:	6163      	str	r3, [r4, #20]
 800aa52:	9201      	str	r2, [sp, #4]
 800aa54:	9b01      	ldr	r3, [sp, #4]
 800aa56:	61a3      	str	r3, [r4, #24]
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	bf0c      	ite	eq
 800aa5c:	2201      	moveq	r2, #1
 800aa5e:	2202      	movne	r2, #2
 800aa60:	6122      	str	r2, [r4, #16]
 800aa62:	b1a5      	cbz	r5, 800aa8e <__d2b+0x92>
 800aa64:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800aa68:	4405      	add	r5, r0
 800aa6a:	603d      	str	r5, [r7, #0]
 800aa6c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800aa70:	6030      	str	r0, [r6, #0]
 800aa72:	4620      	mov	r0, r4
 800aa74:	b003      	add	sp, #12
 800aa76:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800aa7a:	6161      	str	r1, [r4, #20]
 800aa7c:	e7ea      	b.n	800aa54 <__d2b+0x58>
 800aa7e:	a801      	add	r0, sp, #4
 800aa80:	f7ff fd61 	bl	800a546 <__lo0bits>
 800aa84:	9b01      	ldr	r3, [sp, #4]
 800aa86:	6163      	str	r3, [r4, #20]
 800aa88:	3020      	adds	r0, #32
 800aa8a:	2201      	movs	r2, #1
 800aa8c:	e7e8      	b.n	800aa60 <__d2b+0x64>
 800aa8e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800aa92:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800aa96:	6038      	str	r0, [r7, #0]
 800aa98:	6918      	ldr	r0, [r3, #16]
 800aa9a:	f7ff fd35 	bl	800a508 <__hi0bits>
 800aa9e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800aaa2:	e7e5      	b.n	800aa70 <__d2b+0x74>
 800aaa4:	0800b494 	.word	0x0800b494
 800aaa8:	0800b4a5 	.word	0x0800b4a5

0800aaac <__sfputc_r>:
 800aaac:	6893      	ldr	r3, [r2, #8]
 800aaae:	3b01      	subs	r3, #1
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	b410      	push	{r4}
 800aab4:	6093      	str	r3, [r2, #8]
 800aab6:	da08      	bge.n	800aaca <__sfputc_r+0x1e>
 800aab8:	6994      	ldr	r4, [r2, #24]
 800aaba:	42a3      	cmp	r3, r4
 800aabc:	db01      	blt.n	800aac2 <__sfputc_r+0x16>
 800aabe:	290a      	cmp	r1, #10
 800aac0:	d103      	bne.n	800aaca <__sfputc_r+0x1e>
 800aac2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aac6:	f000 b9f1 	b.w	800aeac <__swbuf_r>
 800aaca:	6813      	ldr	r3, [r2, #0]
 800aacc:	1c58      	adds	r0, r3, #1
 800aace:	6010      	str	r0, [r2, #0]
 800aad0:	7019      	strb	r1, [r3, #0]
 800aad2:	4608      	mov	r0, r1
 800aad4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aad8:	4770      	bx	lr

0800aada <__sfputs_r>:
 800aada:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aadc:	4606      	mov	r6, r0
 800aade:	460f      	mov	r7, r1
 800aae0:	4614      	mov	r4, r2
 800aae2:	18d5      	adds	r5, r2, r3
 800aae4:	42ac      	cmp	r4, r5
 800aae6:	d101      	bne.n	800aaec <__sfputs_r+0x12>
 800aae8:	2000      	movs	r0, #0
 800aaea:	e007      	b.n	800aafc <__sfputs_r+0x22>
 800aaec:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aaf0:	463a      	mov	r2, r7
 800aaf2:	4630      	mov	r0, r6
 800aaf4:	f7ff ffda 	bl	800aaac <__sfputc_r>
 800aaf8:	1c43      	adds	r3, r0, #1
 800aafa:	d1f3      	bne.n	800aae4 <__sfputs_r+0xa>
 800aafc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ab00 <_vfiprintf_r>:
 800ab00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab04:	460d      	mov	r5, r1
 800ab06:	b09d      	sub	sp, #116	@ 0x74
 800ab08:	4614      	mov	r4, r2
 800ab0a:	4698      	mov	r8, r3
 800ab0c:	4606      	mov	r6, r0
 800ab0e:	b118      	cbz	r0, 800ab18 <_vfiprintf_r+0x18>
 800ab10:	6a03      	ldr	r3, [r0, #32]
 800ab12:	b90b      	cbnz	r3, 800ab18 <_vfiprintf_r+0x18>
 800ab14:	f7fe fb60 	bl	80091d8 <__sinit>
 800ab18:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ab1a:	07d9      	lsls	r1, r3, #31
 800ab1c:	d405      	bmi.n	800ab2a <_vfiprintf_r+0x2a>
 800ab1e:	89ab      	ldrh	r3, [r5, #12]
 800ab20:	059a      	lsls	r2, r3, #22
 800ab22:	d402      	bmi.n	800ab2a <_vfiprintf_r+0x2a>
 800ab24:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ab26:	f7fe fcbe 	bl	80094a6 <__retarget_lock_acquire_recursive>
 800ab2a:	89ab      	ldrh	r3, [r5, #12]
 800ab2c:	071b      	lsls	r3, r3, #28
 800ab2e:	d501      	bpl.n	800ab34 <_vfiprintf_r+0x34>
 800ab30:	692b      	ldr	r3, [r5, #16]
 800ab32:	b99b      	cbnz	r3, 800ab5c <_vfiprintf_r+0x5c>
 800ab34:	4629      	mov	r1, r5
 800ab36:	4630      	mov	r0, r6
 800ab38:	f000 f9f6 	bl	800af28 <__swsetup_r>
 800ab3c:	b170      	cbz	r0, 800ab5c <_vfiprintf_r+0x5c>
 800ab3e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ab40:	07dc      	lsls	r4, r3, #31
 800ab42:	d504      	bpl.n	800ab4e <_vfiprintf_r+0x4e>
 800ab44:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ab48:	b01d      	add	sp, #116	@ 0x74
 800ab4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab4e:	89ab      	ldrh	r3, [r5, #12]
 800ab50:	0598      	lsls	r0, r3, #22
 800ab52:	d4f7      	bmi.n	800ab44 <_vfiprintf_r+0x44>
 800ab54:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ab56:	f7fe fca7 	bl	80094a8 <__retarget_lock_release_recursive>
 800ab5a:	e7f3      	b.n	800ab44 <_vfiprintf_r+0x44>
 800ab5c:	2300      	movs	r3, #0
 800ab5e:	9309      	str	r3, [sp, #36]	@ 0x24
 800ab60:	2320      	movs	r3, #32
 800ab62:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ab66:	f8cd 800c 	str.w	r8, [sp, #12]
 800ab6a:	2330      	movs	r3, #48	@ 0x30
 800ab6c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800ad1c <_vfiprintf_r+0x21c>
 800ab70:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ab74:	f04f 0901 	mov.w	r9, #1
 800ab78:	4623      	mov	r3, r4
 800ab7a:	469a      	mov	sl, r3
 800ab7c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ab80:	b10a      	cbz	r2, 800ab86 <_vfiprintf_r+0x86>
 800ab82:	2a25      	cmp	r2, #37	@ 0x25
 800ab84:	d1f9      	bne.n	800ab7a <_vfiprintf_r+0x7a>
 800ab86:	ebba 0b04 	subs.w	fp, sl, r4
 800ab8a:	d00b      	beq.n	800aba4 <_vfiprintf_r+0xa4>
 800ab8c:	465b      	mov	r3, fp
 800ab8e:	4622      	mov	r2, r4
 800ab90:	4629      	mov	r1, r5
 800ab92:	4630      	mov	r0, r6
 800ab94:	f7ff ffa1 	bl	800aada <__sfputs_r>
 800ab98:	3001      	adds	r0, #1
 800ab9a:	f000 80a7 	beq.w	800acec <_vfiprintf_r+0x1ec>
 800ab9e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800aba0:	445a      	add	r2, fp
 800aba2:	9209      	str	r2, [sp, #36]	@ 0x24
 800aba4:	f89a 3000 	ldrb.w	r3, [sl]
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	f000 809f 	beq.w	800acec <_vfiprintf_r+0x1ec>
 800abae:	2300      	movs	r3, #0
 800abb0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800abb4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800abb8:	f10a 0a01 	add.w	sl, sl, #1
 800abbc:	9304      	str	r3, [sp, #16]
 800abbe:	9307      	str	r3, [sp, #28]
 800abc0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800abc4:	931a      	str	r3, [sp, #104]	@ 0x68
 800abc6:	4654      	mov	r4, sl
 800abc8:	2205      	movs	r2, #5
 800abca:	f814 1b01 	ldrb.w	r1, [r4], #1
 800abce:	4853      	ldr	r0, [pc, #332]	@ (800ad1c <_vfiprintf_r+0x21c>)
 800abd0:	f7f5 fb1e 	bl	8000210 <memchr>
 800abd4:	9a04      	ldr	r2, [sp, #16]
 800abd6:	b9d8      	cbnz	r0, 800ac10 <_vfiprintf_r+0x110>
 800abd8:	06d1      	lsls	r1, r2, #27
 800abda:	bf44      	itt	mi
 800abdc:	2320      	movmi	r3, #32
 800abde:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800abe2:	0713      	lsls	r3, r2, #28
 800abe4:	bf44      	itt	mi
 800abe6:	232b      	movmi	r3, #43	@ 0x2b
 800abe8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800abec:	f89a 3000 	ldrb.w	r3, [sl]
 800abf0:	2b2a      	cmp	r3, #42	@ 0x2a
 800abf2:	d015      	beq.n	800ac20 <_vfiprintf_r+0x120>
 800abf4:	9a07      	ldr	r2, [sp, #28]
 800abf6:	4654      	mov	r4, sl
 800abf8:	2000      	movs	r0, #0
 800abfa:	f04f 0c0a 	mov.w	ip, #10
 800abfe:	4621      	mov	r1, r4
 800ac00:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ac04:	3b30      	subs	r3, #48	@ 0x30
 800ac06:	2b09      	cmp	r3, #9
 800ac08:	d94b      	bls.n	800aca2 <_vfiprintf_r+0x1a2>
 800ac0a:	b1b0      	cbz	r0, 800ac3a <_vfiprintf_r+0x13a>
 800ac0c:	9207      	str	r2, [sp, #28]
 800ac0e:	e014      	b.n	800ac3a <_vfiprintf_r+0x13a>
 800ac10:	eba0 0308 	sub.w	r3, r0, r8
 800ac14:	fa09 f303 	lsl.w	r3, r9, r3
 800ac18:	4313      	orrs	r3, r2
 800ac1a:	9304      	str	r3, [sp, #16]
 800ac1c:	46a2      	mov	sl, r4
 800ac1e:	e7d2      	b.n	800abc6 <_vfiprintf_r+0xc6>
 800ac20:	9b03      	ldr	r3, [sp, #12]
 800ac22:	1d19      	adds	r1, r3, #4
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	9103      	str	r1, [sp, #12]
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	bfbb      	ittet	lt
 800ac2c:	425b      	neglt	r3, r3
 800ac2e:	f042 0202 	orrlt.w	r2, r2, #2
 800ac32:	9307      	strge	r3, [sp, #28]
 800ac34:	9307      	strlt	r3, [sp, #28]
 800ac36:	bfb8      	it	lt
 800ac38:	9204      	strlt	r2, [sp, #16]
 800ac3a:	7823      	ldrb	r3, [r4, #0]
 800ac3c:	2b2e      	cmp	r3, #46	@ 0x2e
 800ac3e:	d10a      	bne.n	800ac56 <_vfiprintf_r+0x156>
 800ac40:	7863      	ldrb	r3, [r4, #1]
 800ac42:	2b2a      	cmp	r3, #42	@ 0x2a
 800ac44:	d132      	bne.n	800acac <_vfiprintf_r+0x1ac>
 800ac46:	9b03      	ldr	r3, [sp, #12]
 800ac48:	1d1a      	adds	r2, r3, #4
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	9203      	str	r2, [sp, #12]
 800ac4e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ac52:	3402      	adds	r4, #2
 800ac54:	9305      	str	r3, [sp, #20]
 800ac56:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800ad2c <_vfiprintf_r+0x22c>
 800ac5a:	7821      	ldrb	r1, [r4, #0]
 800ac5c:	2203      	movs	r2, #3
 800ac5e:	4650      	mov	r0, sl
 800ac60:	f7f5 fad6 	bl	8000210 <memchr>
 800ac64:	b138      	cbz	r0, 800ac76 <_vfiprintf_r+0x176>
 800ac66:	9b04      	ldr	r3, [sp, #16]
 800ac68:	eba0 000a 	sub.w	r0, r0, sl
 800ac6c:	2240      	movs	r2, #64	@ 0x40
 800ac6e:	4082      	lsls	r2, r0
 800ac70:	4313      	orrs	r3, r2
 800ac72:	3401      	adds	r4, #1
 800ac74:	9304      	str	r3, [sp, #16]
 800ac76:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ac7a:	4829      	ldr	r0, [pc, #164]	@ (800ad20 <_vfiprintf_r+0x220>)
 800ac7c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ac80:	2206      	movs	r2, #6
 800ac82:	f7f5 fac5 	bl	8000210 <memchr>
 800ac86:	2800      	cmp	r0, #0
 800ac88:	d03f      	beq.n	800ad0a <_vfiprintf_r+0x20a>
 800ac8a:	4b26      	ldr	r3, [pc, #152]	@ (800ad24 <_vfiprintf_r+0x224>)
 800ac8c:	bb1b      	cbnz	r3, 800acd6 <_vfiprintf_r+0x1d6>
 800ac8e:	9b03      	ldr	r3, [sp, #12]
 800ac90:	3307      	adds	r3, #7
 800ac92:	f023 0307 	bic.w	r3, r3, #7
 800ac96:	3308      	adds	r3, #8
 800ac98:	9303      	str	r3, [sp, #12]
 800ac9a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ac9c:	443b      	add	r3, r7
 800ac9e:	9309      	str	r3, [sp, #36]	@ 0x24
 800aca0:	e76a      	b.n	800ab78 <_vfiprintf_r+0x78>
 800aca2:	fb0c 3202 	mla	r2, ip, r2, r3
 800aca6:	460c      	mov	r4, r1
 800aca8:	2001      	movs	r0, #1
 800acaa:	e7a8      	b.n	800abfe <_vfiprintf_r+0xfe>
 800acac:	2300      	movs	r3, #0
 800acae:	3401      	adds	r4, #1
 800acb0:	9305      	str	r3, [sp, #20]
 800acb2:	4619      	mov	r1, r3
 800acb4:	f04f 0c0a 	mov.w	ip, #10
 800acb8:	4620      	mov	r0, r4
 800acba:	f810 2b01 	ldrb.w	r2, [r0], #1
 800acbe:	3a30      	subs	r2, #48	@ 0x30
 800acc0:	2a09      	cmp	r2, #9
 800acc2:	d903      	bls.n	800accc <_vfiprintf_r+0x1cc>
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	d0c6      	beq.n	800ac56 <_vfiprintf_r+0x156>
 800acc8:	9105      	str	r1, [sp, #20]
 800acca:	e7c4      	b.n	800ac56 <_vfiprintf_r+0x156>
 800accc:	fb0c 2101 	mla	r1, ip, r1, r2
 800acd0:	4604      	mov	r4, r0
 800acd2:	2301      	movs	r3, #1
 800acd4:	e7f0      	b.n	800acb8 <_vfiprintf_r+0x1b8>
 800acd6:	ab03      	add	r3, sp, #12
 800acd8:	9300      	str	r3, [sp, #0]
 800acda:	462a      	mov	r2, r5
 800acdc:	4b12      	ldr	r3, [pc, #72]	@ (800ad28 <_vfiprintf_r+0x228>)
 800acde:	a904      	add	r1, sp, #16
 800ace0:	4630      	mov	r0, r6
 800ace2:	f7fd fe37 	bl	8008954 <_printf_float>
 800ace6:	4607      	mov	r7, r0
 800ace8:	1c78      	adds	r0, r7, #1
 800acea:	d1d6      	bne.n	800ac9a <_vfiprintf_r+0x19a>
 800acec:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800acee:	07d9      	lsls	r1, r3, #31
 800acf0:	d405      	bmi.n	800acfe <_vfiprintf_r+0x1fe>
 800acf2:	89ab      	ldrh	r3, [r5, #12]
 800acf4:	059a      	lsls	r2, r3, #22
 800acf6:	d402      	bmi.n	800acfe <_vfiprintf_r+0x1fe>
 800acf8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800acfa:	f7fe fbd5 	bl	80094a8 <__retarget_lock_release_recursive>
 800acfe:	89ab      	ldrh	r3, [r5, #12]
 800ad00:	065b      	lsls	r3, r3, #25
 800ad02:	f53f af1f 	bmi.w	800ab44 <_vfiprintf_r+0x44>
 800ad06:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ad08:	e71e      	b.n	800ab48 <_vfiprintf_r+0x48>
 800ad0a:	ab03      	add	r3, sp, #12
 800ad0c:	9300      	str	r3, [sp, #0]
 800ad0e:	462a      	mov	r2, r5
 800ad10:	4b05      	ldr	r3, [pc, #20]	@ (800ad28 <_vfiprintf_r+0x228>)
 800ad12:	a904      	add	r1, sp, #16
 800ad14:	4630      	mov	r0, r6
 800ad16:	f7fe f8b5 	bl	8008e84 <_printf_i>
 800ad1a:	e7e4      	b.n	800ace6 <_vfiprintf_r+0x1e6>
 800ad1c:	0800b4fe 	.word	0x0800b4fe
 800ad20:	0800b508 	.word	0x0800b508
 800ad24:	08008955 	.word	0x08008955
 800ad28:	0800aadb 	.word	0x0800aadb
 800ad2c:	0800b504 	.word	0x0800b504

0800ad30 <__sflush_r>:
 800ad30:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ad34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad38:	0716      	lsls	r6, r2, #28
 800ad3a:	4605      	mov	r5, r0
 800ad3c:	460c      	mov	r4, r1
 800ad3e:	d454      	bmi.n	800adea <__sflush_r+0xba>
 800ad40:	684b      	ldr	r3, [r1, #4]
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	dc02      	bgt.n	800ad4c <__sflush_r+0x1c>
 800ad46:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	dd48      	ble.n	800adde <__sflush_r+0xae>
 800ad4c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ad4e:	2e00      	cmp	r6, #0
 800ad50:	d045      	beq.n	800adde <__sflush_r+0xae>
 800ad52:	2300      	movs	r3, #0
 800ad54:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800ad58:	682f      	ldr	r7, [r5, #0]
 800ad5a:	6a21      	ldr	r1, [r4, #32]
 800ad5c:	602b      	str	r3, [r5, #0]
 800ad5e:	d030      	beq.n	800adc2 <__sflush_r+0x92>
 800ad60:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800ad62:	89a3      	ldrh	r3, [r4, #12]
 800ad64:	0759      	lsls	r1, r3, #29
 800ad66:	d505      	bpl.n	800ad74 <__sflush_r+0x44>
 800ad68:	6863      	ldr	r3, [r4, #4]
 800ad6a:	1ad2      	subs	r2, r2, r3
 800ad6c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ad6e:	b10b      	cbz	r3, 800ad74 <__sflush_r+0x44>
 800ad70:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ad72:	1ad2      	subs	r2, r2, r3
 800ad74:	2300      	movs	r3, #0
 800ad76:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ad78:	6a21      	ldr	r1, [r4, #32]
 800ad7a:	4628      	mov	r0, r5
 800ad7c:	47b0      	blx	r6
 800ad7e:	1c43      	adds	r3, r0, #1
 800ad80:	89a3      	ldrh	r3, [r4, #12]
 800ad82:	d106      	bne.n	800ad92 <__sflush_r+0x62>
 800ad84:	6829      	ldr	r1, [r5, #0]
 800ad86:	291d      	cmp	r1, #29
 800ad88:	d82b      	bhi.n	800ade2 <__sflush_r+0xb2>
 800ad8a:	4a2a      	ldr	r2, [pc, #168]	@ (800ae34 <__sflush_r+0x104>)
 800ad8c:	40ca      	lsrs	r2, r1
 800ad8e:	07d6      	lsls	r6, r2, #31
 800ad90:	d527      	bpl.n	800ade2 <__sflush_r+0xb2>
 800ad92:	2200      	movs	r2, #0
 800ad94:	6062      	str	r2, [r4, #4]
 800ad96:	04d9      	lsls	r1, r3, #19
 800ad98:	6922      	ldr	r2, [r4, #16]
 800ad9a:	6022      	str	r2, [r4, #0]
 800ad9c:	d504      	bpl.n	800ada8 <__sflush_r+0x78>
 800ad9e:	1c42      	adds	r2, r0, #1
 800ada0:	d101      	bne.n	800ada6 <__sflush_r+0x76>
 800ada2:	682b      	ldr	r3, [r5, #0]
 800ada4:	b903      	cbnz	r3, 800ada8 <__sflush_r+0x78>
 800ada6:	6560      	str	r0, [r4, #84]	@ 0x54
 800ada8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800adaa:	602f      	str	r7, [r5, #0]
 800adac:	b1b9      	cbz	r1, 800adde <__sflush_r+0xae>
 800adae:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800adb2:	4299      	cmp	r1, r3
 800adb4:	d002      	beq.n	800adbc <__sflush_r+0x8c>
 800adb6:	4628      	mov	r0, r5
 800adb8:	f7ff f9fe 	bl	800a1b8 <_free_r>
 800adbc:	2300      	movs	r3, #0
 800adbe:	6363      	str	r3, [r4, #52]	@ 0x34
 800adc0:	e00d      	b.n	800adde <__sflush_r+0xae>
 800adc2:	2301      	movs	r3, #1
 800adc4:	4628      	mov	r0, r5
 800adc6:	47b0      	blx	r6
 800adc8:	4602      	mov	r2, r0
 800adca:	1c50      	adds	r0, r2, #1
 800adcc:	d1c9      	bne.n	800ad62 <__sflush_r+0x32>
 800adce:	682b      	ldr	r3, [r5, #0]
 800add0:	2b00      	cmp	r3, #0
 800add2:	d0c6      	beq.n	800ad62 <__sflush_r+0x32>
 800add4:	2b1d      	cmp	r3, #29
 800add6:	d001      	beq.n	800addc <__sflush_r+0xac>
 800add8:	2b16      	cmp	r3, #22
 800adda:	d11e      	bne.n	800ae1a <__sflush_r+0xea>
 800addc:	602f      	str	r7, [r5, #0]
 800adde:	2000      	movs	r0, #0
 800ade0:	e022      	b.n	800ae28 <__sflush_r+0xf8>
 800ade2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ade6:	b21b      	sxth	r3, r3
 800ade8:	e01b      	b.n	800ae22 <__sflush_r+0xf2>
 800adea:	690f      	ldr	r7, [r1, #16]
 800adec:	2f00      	cmp	r7, #0
 800adee:	d0f6      	beq.n	800adde <__sflush_r+0xae>
 800adf0:	0793      	lsls	r3, r2, #30
 800adf2:	680e      	ldr	r6, [r1, #0]
 800adf4:	bf08      	it	eq
 800adf6:	694b      	ldreq	r3, [r1, #20]
 800adf8:	600f      	str	r7, [r1, #0]
 800adfa:	bf18      	it	ne
 800adfc:	2300      	movne	r3, #0
 800adfe:	eba6 0807 	sub.w	r8, r6, r7
 800ae02:	608b      	str	r3, [r1, #8]
 800ae04:	f1b8 0f00 	cmp.w	r8, #0
 800ae08:	dde9      	ble.n	800adde <__sflush_r+0xae>
 800ae0a:	6a21      	ldr	r1, [r4, #32]
 800ae0c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800ae0e:	4643      	mov	r3, r8
 800ae10:	463a      	mov	r2, r7
 800ae12:	4628      	mov	r0, r5
 800ae14:	47b0      	blx	r6
 800ae16:	2800      	cmp	r0, #0
 800ae18:	dc08      	bgt.n	800ae2c <__sflush_r+0xfc>
 800ae1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ae1e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ae22:	81a3      	strh	r3, [r4, #12]
 800ae24:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ae28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ae2c:	4407      	add	r7, r0
 800ae2e:	eba8 0800 	sub.w	r8, r8, r0
 800ae32:	e7e7      	b.n	800ae04 <__sflush_r+0xd4>
 800ae34:	20400001 	.word	0x20400001

0800ae38 <_fflush_r>:
 800ae38:	b538      	push	{r3, r4, r5, lr}
 800ae3a:	690b      	ldr	r3, [r1, #16]
 800ae3c:	4605      	mov	r5, r0
 800ae3e:	460c      	mov	r4, r1
 800ae40:	b913      	cbnz	r3, 800ae48 <_fflush_r+0x10>
 800ae42:	2500      	movs	r5, #0
 800ae44:	4628      	mov	r0, r5
 800ae46:	bd38      	pop	{r3, r4, r5, pc}
 800ae48:	b118      	cbz	r0, 800ae52 <_fflush_r+0x1a>
 800ae4a:	6a03      	ldr	r3, [r0, #32]
 800ae4c:	b90b      	cbnz	r3, 800ae52 <_fflush_r+0x1a>
 800ae4e:	f7fe f9c3 	bl	80091d8 <__sinit>
 800ae52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d0f3      	beq.n	800ae42 <_fflush_r+0xa>
 800ae5a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800ae5c:	07d0      	lsls	r0, r2, #31
 800ae5e:	d404      	bmi.n	800ae6a <_fflush_r+0x32>
 800ae60:	0599      	lsls	r1, r3, #22
 800ae62:	d402      	bmi.n	800ae6a <_fflush_r+0x32>
 800ae64:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ae66:	f7fe fb1e 	bl	80094a6 <__retarget_lock_acquire_recursive>
 800ae6a:	4628      	mov	r0, r5
 800ae6c:	4621      	mov	r1, r4
 800ae6e:	f7ff ff5f 	bl	800ad30 <__sflush_r>
 800ae72:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ae74:	07da      	lsls	r2, r3, #31
 800ae76:	4605      	mov	r5, r0
 800ae78:	d4e4      	bmi.n	800ae44 <_fflush_r+0xc>
 800ae7a:	89a3      	ldrh	r3, [r4, #12]
 800ae7c:	059b      	lsls	r3, r3, #22
 800ae7e:	d4e1      	bmi.n	800ae44 <_fflush_r+0xc>
 800ae80:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ae82:	f7fe fb11 	bl	80094a8 <__retarget_lock_release_recursive>
 800ae86:	e7dd      	b.n	800ae44 <_fflush_r+0xc>

0800ae88 <fiprintf>:
 800ae88:	b40e      	push	{r1, r2, r3}
 800ae8a:	b503      	push	{r0, r1, lr}
 800ae8c:	4601      	mov	r1, r0
 800ae8e:	ab03      	add	r3, sp, #12
 800ae90:	4805      	ldr	r0, [pc, #20]	@ (800aea8 <fiprintf+0x20>)
 800ae92:	f853 2b04 	ldr.w	r2, [r3], #4
 800ae96:	6800      	ldr	r0, [r0, #0]
 800ae98:	9301      	str	r3, [sp, #4]
 800ae9a:	f7ff fe31 	bl	800ab00 <_vfiprintf_r>
 800ae9e:	b002      	add	sp, #8
 800aea0:	f85d eb04 	ldr.w	lr, [sp], #4
 800aea4:	b003      	add	sp, #12
 800aea6:	4770      	bx	lr
 800aea8:	2000001c 	.word	0x2000001c

0800aeac <__swbuf_r>:
 800aeac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aeae:	460e      	mov	r6, r1
 800aeb0:	4614      	mov	r4, r2
 800aeb2:	4605      	mov	r5, r0
 800aeb4:	b118      	cbz	r0, 800aebe <__swbuf_r+0x12>
 800aeb6:	6a03      	ldr	r3, [r0, #32]
 800aeb8:	b90b      	cbnz	r3, 800aebe <__swbuf_r+0x12>
 800aeba:	f7fe f98d 	bl	80091d8 <__sinit>
 800aebe:	69a3      	ldr	r3, [r4, #24]
 800aec0:	60a3      	str	r3, [r4, #8]
 800aec2:	89a3      	ldrh	r3, [r4, #12]
 800aec4:	071a      	lsls	r2, r3, #28
 800aec6:	d501      	bpl.n	800aecc <__swbuf_r+0x20>
 800aec8:	6923      	ldr	r3, [r4, #16]
 800aeca:	b943      	cbnz	r3, 800aede <__swbuf_r+0x32>
 800aecc:	4621      	mov	r1, r4
 800aece:	4628      	mov	r0, r5
 800aed0:	f000 f82a 	bl	800af28 <__swsetup_r>
 800aed4:	b118      	cbz	r0, 800aede <__swbuf_r+0x32>
 800aed6:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800aeda:	4638      	mov	r0, r7
 800aedc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aede:	6823      	ldr	r3, [r4, #0]
 800aee0:	6922      	ldr	r2, [r4, #16]
 800aee2:	1a98      	subs	r0, r3, r2
 800aee4:	6963      	ldr	r3, [r4, #20]
 800aee6:	b2f6      	uxtb	r6, r6
 800aee8:	4283      	cmp	r3, r0
 800aeea:	4637      	mov	r7, r6
 800aeec:	dc05      	bgt.n	800aefa <__swbuf_r+0x4e>
 800aeee:	4621      	mov	r1, r4
 800aef0:	4628      	mov	r0, r5
 800aef2:	f7ff ffa1 	bl	800ae38 <_fflush_r>
 800aef6:	2800      	cmp	r0, #0
 800aef8:	d1ed      	bne.n	800aed6 <__swbuf_r+0x2a>
 800aefa:	68a3      	ldr	r3, [r4, #8]
 800aefc:	3b01      	subs	r3, #1
 800aefe:	60a3      	str	r3, [r4, #8]
 800af00:	6823      	ldr	r3, [r4, #0]
 800af02:	1c5a      	adds	r2, r3, #1
 800af04:	6022      	str	r2, [r4, #0]
 800af06:	701e      	strb	r6, [r3, #0]
 800af08:	6962      	ldr	r2, [r4, #20]
 800af0a:	1c43      	adds	r3, r0, #1
 800af0c:	429a      	cmp	r2, r3
 800af0e:	d004      	beq.n	800af1a <__swbuf_r+0x6e>
 800af10:	89a3      	ldrh	r3, [r4, #12]
 800af12:	07db      	lsls	r3, r3, #31
 800af14:	d5e1      	bpl.n	800aeda <__swbuf_r+0x2e>
 800af16:	2e0a      	cmp	r6, #10
 800af18:	d1df      	bne.n	800aeda <__swbuf_r+0x2e>
 800af1a:	4621      	mov	r1, r4
 800af1c:	4628      	mov	r0, r5
 800af1e:	f7ff ff8b 	bl	800ae38 <_fflush_r>
 800af22:	2800      	cmp	r0, #0
 800af24:	d0d9      	beq.n	800aeda <__swbuf_r+0x2e>
 800af26:	e7d6      	b.n	800aed6 <__swbuf_r+0x2a>

0800af28 <__swsetup_r>:
 800af28:	b538      	push	{r3, r4, r5, lr}
 800af2a:	4b29      	ldr	r3, [pc, #164]	@ (800afd0 <__swsetup_r+0xa8>)
 800af2c:	4605      	mov	r5, r0
 800af2e:	6818      	ldr	r0, [r3, #0]
 800af30:	460c      	mov	r4, r1
 800af32:	b118      	cbz	r0, 800af3c <__swsetup_r+0x14>
 800af34:	6a03      	ldr	r3, [r0, #32]
 800af36:	b90b      	cbnz	r3, 800af3c <__swsetup_r+0x14>
 800af38:	f7fe f94e 	bl	80091d8 <__sinit>
 800af3c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800af40:	0719      	lsls	r1, r3, #28
 800af42:	d422      	bmi.n	800af8a <__swsetup_r+0x62>
 800af44:	06da      	lsls	r2, r3, #27
 800af46:	d407      	bmi.n	800af58 <__swsetup_r+0x30>
 800af48:	2209      	movs	r2, #9
 800af4a:	602a      	str	r2, [r5, #0]
 800af4c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800af50:	81a3      	strh	r3, [r4, #12]
 800af52:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800af56:	e033      	b.n	800afc0 <__swsetup_r+0x98>
 800af58:	0758      	lsls	r0, r3, #29
 800af5a:	d512      	bpl.n	800af82 <__swsetup_r+0x5a>
 800af5c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800af5e:	b141      	cbz	r1, 800af72 <__swsetup_r+0x4a>
 800af60:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800af64:	4299      	cmp	r1, r3
 800af66:	d002      	beq.n	800af6e <__swsetup_r+0x46>
 800af68:	4628      	mov	r0, r5
 800af6a:	f7ff f925 	bl	800a1b8 <_free_r>
 800af6e:	2300      	movs	r3, #0
 800af70:	6363      	str	r3, [r4, #52]	@ 0x34
 800af72:	89a3      	ldrh	r3, [r4, #12]
 800af74:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800af78:	81a3      	strh	r3, [r4, #12]
 800af7a:	2300      	movs	r3, #0
 800af7c:	6063      	str	r3, [r4, #4]
 800af7e:	6923      	ldr	r3, [r4, #16]
 800af80:	6023      	str	r3, [r4, #0]
 800af82:	89a3      	ldrh	r3, [r4, #12]
 800af84:	f043 0308 	orr.w	r3, r3, #8
 800af88:	81a3      	strh	r3, [r4, #12]
 800af8a:	6923      	ldr	r3, [r4, #16]
 800af8c:	b94b      	cbnz	r3, 800afa2 <__swsetup_r+0x7a>
 800af8e:	89a3      	ldrh	r3, [r4, #12]
 800af90:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800af94:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800af98:	d003      	beq.n	800afa2 <__swsetup_r+0x7a>
 800af9a:	4621      	mov	r1, r4
 800af9c:	4628      	mov	r0, r5
 800af9e:	f000 f889 	bl	800b0b4 <__smakebuf_r>
 800afa2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800afa6:	f013 0201 	ands.w	r2, r3, #1
 800afaa:	d00a      	beq.n	800afc2 <__swsetup_r+0x9a>
 800afac:	2200      	movs	r2, #0
 800afae:	60a2      	str	r2, [r4, #8]
 800afb0:	6962      	ldr	r2, [r4, #20]
 800afb2:	4252      	negs	r2, r2
 800afb4:	61a2      	str	r2, [r4, #24]
 800afb6:	6922      	ldr	r2, [r4, #16]
 800afb8:	b942      	cbnz	r2, 800afcc <__swsetup_r+0xa4>
 800afba:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800afbe:	d1c5      	bne.n	800af4c <__swsetup_r+0x24>
 800afc0:	bd38      	pop	{r3, r4, r5, pc}
 800afc2:	0799      	lsls	r1, r3, #30
 800afc4:	bf58      	it	pl
 800afc6:	6962      	ldrpl	r2, [r4, #20]
 800afc8:	60a2      	str	r2, [r4, #8]
 800afca:	e7f4      	b.n	800afb6 <__swsetup_r+0x8e>
 800afcc:	2000      	movs	r0, #0
 800afce:	e7f7      	b.n	800afc0 <__swsetup_r+0x98>
 800afd0:	2000001c 	.word	0x2000001c

0800afd4 <_sbrk_r>:
 800afd4:	b538      	push	{r3, r4, r5, lr}
 800afd6:	4d06      	ldr	r5, [pc, #24]	@ (800aff0 <_sbrk_r+0x1c>)
 800afd8:	2300      	movs	r3, #0
 800afda:	4604      	mov	r4, r0
 800afdc:	4608      	mov	r0, r1
 800afde:	602b      	str	r3, [r5, #0]
 800afe0:	f7f6 fb3e 	bl	8001660 <_sbrk>
 800afe4:	1c43      	adds	r3, r0, #1
 800afe6:	d102      	bne.n	800afee <_sbrk_r+0x1a>
 800afe8:	682b      	ldr	r3, [r5, #0]
 800afea:	b103      	cbz	r3, 800afee <_sbrk_r+0x1a>
 800afec:	6023      	str	r3, [r4, #0]
 800afee:	bd38      	pop	{r3, r4, r5, pc}
 800aff0:	2000546c 	.word	0x2000546c

0800aff4 <abort>:
 800aff4:	b508      	push	{r3, lr}
 800aff6:	2006      	movs	r0, #6
 800aff8:	f000 f8c0 	bl	800b17c <raise>
 800affc:	2001      	movs	r0, #1
 800affe:	f7f6 fad3 	bl	80015a8 <_exit>

0800b002 <_calloc_r>:
 800b002:	b570      	push	{r4, r5, r6, lr}
 800b004:	fba1 5402 	umull	r5, r4, r1, r2
 800b008:	b934      	cbnz	r4, 800b018 <_calloc_r+0x16>
 800b00a:	4629      	mov	r1, r5
 800b00c:	f7ff f948 	bl	800a2a0 <_malloc_r>
 800b010:	4606      	mov	r6, r0
 800b012:	b928      	cbnz	r0, 800b020 <_calloc_r+0x1e>
 800b014:	4630      	mov	r0, r6
 800b016:	bd70      	pop	{r4, r5, r6, pc}
 800b018:	220c      	movs	r2, #12
 800b01a:	6002      	str	r2, [r0, #0]
 800b01c:	2600      	movs	r6, #0
 800b01e:	e7f9      	b.n	800b014 <_calloc_r+0x12>
 800b020:	462a      	mov	r2, r5
 800b022:	4621      	mov	r1, r4
 800b024:	f7fe f963 	bl	80092ee <memset>
 800b028:	e7f4      	b.n	800b014 <_calloc_r+0x12>

0800b02a <__ascii_mbtowc>:
 800b02a:	b082      	sub	sp, #8
 800b02c:	b901      	cbnz	r1, 800b030 <__ascii_mbtowc+0x6>
 800b02e:	a901      	add	r1, sp, #4
 800b030:	b142      	cbz	r2, 800b044 <__ascii_mbtowc+0x1a>
 800b032:	b14b      	cbz	r3, 800b048 <__ascii_mbtowc+0x1e>
 800b034:	7813      	ldrb	r3, [r2, #0]
 800b036:	600b      	str	r3, [r1, #0]
 800b038:	7812      	ldrb	r2, [r2, #0]
 800b03a:	1e10      	subs	r0, r2, #0
 800b03c:	bf18      	it	ne
 800b03e:	2001      	movne	r0, #1
 800b040:	b002      	add	sp, #8
 800b042:	4770      	bx	lr
 800b044:	4610      	mov	r0, r2
 800b046:	e7fb      	b.n	800b040 <__ascii_mbtowc+0x16>
 800b048:	f06f 0001 	mvn.w	r0, #1
 800b04c:	e7f8      	b.n	800b040 <__ascii_mbtowc+0x16>

0800b04e <__ascii_wctomb>:
 800b04e:	4603      	mov	r3, r0
 800b050:	4608      	mov	r0, r1
 800b052:	b141      	cbz	r1, 800b066 <__ascii_wctomb+0x18>
 800b054:	2aff      	cmp	r2, #255	@ 0xff
 800b056:	d904      	bls.n	800b062 <__ascii_wctomb+0x14>
 800b058:	228a      	movs	r2, #138	@ 0x8a
 800b05a:	601a      	str	r2, [r3, #0]
 800b05c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b060:	4770      	bx	lr
 800b062:	700a      	strb	r2, [r1, #0]
 800b064:	2001      	movs	r0, #1
 800b066:	4770      	bx	lr

0800b068 <__swhatbuf_r>:
 800b068:	b570      	push	{r4, r5, r6, lr}
 800b06a:	460c      	mov	r4, r1
 800b06c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b070:	2900      	cmp	r1, #0
 800b072:	b096      	sub	sp, #88	@ 0x58
 800b074:	4615      	mov	r5, r2
 800b076:	461e      	mov	r6, r3
 800b078:	da0d      	bge.n	800b096 <__swhatbuf_r+0x2e>
 800b07a:	89a3      	ldrh	r3, [r4, #12]
 800b07c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b080:	f04f 0100 	mov.w	r1, #0
 800b084:	bf14      	ite	ne
 800b086:	2340      	movne	r3, #64	@ 0x40
 800b088:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b08c:	2000      	movs	r0, #0
 800b08e:	6031      	str	r1, [r6, #0]
 800b090:	602b      	str	r3, [r5, #0]
 800b092:	b016      	add	sp, #88	@ 0x58
 800b094:	bd70      	pop	{r4, r5, r6, pc}
 800b096:	466a      	mov	r2, sp
 800b098:	f000 f878 	bl	800b18c <_fstat_r>
 800b09c:	2800      	cmp	r0, #0
 800b09e:	dbec      	blt.n	800b07a <__swhatbuf_r+0x12>
 800b0a0:	9901      	ldr	r1, [sp, #4]
 800b0a2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b0a6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b0aa:	4259      	negs	r1, r3
 800b0ac:	4159      	adcs	r1, r3
 800b0ae:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b0b2:	e7eb      	b.n	800b08c <__swhatbuf_r+0x24>

0800b0b4 <__smakebuf_r>:
 800b0b4:	898b      	ldrh	r3, [r1, #12]
 800b0b6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b0b8:	079d      	lsls	r5, r3, #30
 800b0ba:	4606      	mov	r6, r0
 800b0bc:	460c      	mov	r4, r1
 800b0be:	d507      	bpl.n	800b0d0 <__smakebuf_r+0x1c>
 800b0c0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b0c4:	6023      	str	r3, [r4, #0]
 800b0c6:	6123      	str	r3, [r4, #16]
 800b0c8:	2301      	movs	r3, #1
 800b0ca:	6163      	str	r3, [r4, #20]
 800b0cc:	b003      	add	sp, #12
 800b0ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b0d0:	ab01      	add	r3, sp, #4
 800b0d2:	466a      	mov	r2, sp
 800b0d4:	f7ff ffc8 	bl	800b068 <__swhatbuf_r>
 800b0d8:	9f00      	ldr	r7, [sp, #0]
 800b0da:	4605      	mov	r5, r0
 800b0dc:	4639      	mov	r1, r7
 800b0de:	4630      	mov	r0, r6
 800b0e0:	f7ff f8de 	bl	800a2a0 <_malloc_r>
 800b0e4:	b948      	cbnz	r0, 800b0fa <__smakebuf_r+0x46>
 800b0e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b0ea:	059a      	lsls	r2, r3, #22
 800b0ec:	d4ee      	bmi.n	800b0cc <__smakebuf_r+0x18>
 800b0ee:	f023 0303 	bic.w	r3, r3, #3
 800b0f2:	f043 0302 	orr.w	r3, r3, #2
 800b0f6:	81a3      	strh	r3, [r4, #12]
 800b0f8:	e7e2      	b.n	800b0c0 <__smakebuf_r+0xc>
 800b0fa:	89a3      	ldrh	r3, [r4, #12]
 800b0fc:	6020      	str	r0, [r4, #0]
 800b0fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b102:	81a3      	strh	r3, [r4, #12]
 800b104:	9b01      	ldr	r3, [sp, #4]
 800b106:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b10a:	b15b      	cbz	r3, 800b124 <__smakebuf_r+0x70>
 800b10c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b110:	4630      	mov	r0, r6
 800b112:	f000 f84d 	bl	800b1b0 <_isatty_r>
 800b116:	b128      	cbz	r0, 800b124 <__smakebuf_r+0x70>
 800b118:	89a3      	ldrh	r3, [r4, #12]
 800b11a:	f023 0303 	bic.w	r3, r3, #3
 800b11e:	f043 0301 	orr.w	r3, r3, #1
 800b122:	81a3      	strh	r3, [r4, #12]
 800b124:	89a3      	ldrh	r3, [r4, #12]
 800b126:	431d      	orrs	r5, r3
 800b128:	81a5      	strh	r5, [r4, #12]
 800b12a:	e7cf      	b.n	800b0cc <__smakebuf_r+0x18>

0800b12c <_raise_r>:
 800b12c:	291f      	cmp	r1, #31
 800b12e:	b538      	push	{r3, r4, r5, lr}
 800b130:	4605      	mov	r5, r0
 800b132:	460c      	mov	r4, r1
 800b134:	d904      	bls.n	800b140 <_raise_r+0x14>
 800b136:	2316      	movs	r3, #22
 800b138:	6003      	str	r3, [r0, #0]
 800b13a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b13e:	bd38      	pop	{r3, r4, r5, pc}
 800b140:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b142:	b112      	cbz	r2, 800b14a <_raise_r+0x1e>
 800b144:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b148:	b94b      	cbnz	r3, 800b15e <_raise_r+0x32>
 800b14a:	4628      	mov	r0, r5
 800b14c:	f000 f852 	bl	800b1f4 <_getpid_r>
 800b150:	4622      	mov	r2, r4
 800b152:	4601      	mov	r1, r0
 800b154:	4628      	mov	r0, r5
 800b156:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b15a:	f000 b839 	b.w	800b1d0 <_kill_r>
 800b15e:	2b01      	cmp	r3, #1
 800b160:	d00a      	beq.n	800b178 <_raise_r+0x4c>
 800b162:	1c59      	adds	r1, r3, #1
 800b164:	d103      	bne.n	800b16e <_raise_r+0x42>
 800b166:	2316      	movs	r3, #22
 800b168:	6003      	str	r3, [r0, #0]
 800b16a:	2001      	movs	r0, #1
 800b16c:	e7e7      	b.n	800b13e <_raise_r+0x12>
 800b16e:	2100      	movs	r1, #0
 800b170:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b174:	4620      	mov	r0, r4
 800b176:	4798      	blx	r3
 800b178:	2000      	movs	r0, #0
 800b17a:	e7e0      	b.n	800b13e <_raise_r+0x12>

0800b17c <raise>:
 800b17c:	4b02      	ldr	r3, [pc, #8]	@ (800b188 <raise+0xc>)
 800b17e:	4601      	mov	r1, r0
 800b180:	6818      	ldr	r0, [r3, #0]
 800b182:	f7ff bfd3 	b.w	800b12c <_raise_r>
 800b186:	bf00      	nop
 800b188:	2000001c 	.word	0x2000001c

0800b18c <_fstat_r>:
 800b18c:	b538      	push	{r3, r4, r5, lr}
 800b18e:	4d07      	ldr	r5, [pc, #28]	@ (800b1ac <_fstat_r+0x20>)
 800b190:	2300      	movs	r3, #0
 800b192:	4604      	mov	r4, r0
 800b194:	4608      	mov	r0, r1
 800b196:	4611      	mov	r1, r2
 800b198:	602b      	str	r3, [r5, #0]
 800b19a:	f7f6 fa39 	bl	8001610 <_fstat>
 800b19e:	1c43      	adds	r3, r0, #1
 800b1a0:	d102      	bne.n	800b1a8 <_fstat_r+0x1c>
 800b1a2:	682b      	ldr	r3, [r5, #0]
 800b1a4:	b103      	cbz	r3, 800b1a8 <_fstat_r+0x1c>
 800b1a6:	6023      	str	r3, [r4, #0]
 800b1a8:	bd38      	pop	{r3, r4, r5, pc}
 800b1aa:	bf00      	nop
 800b1ac:	2000546c 	.word	0x2000546c

0800b1b0 <_isatty_r>:
 800b1b0:	b538      	push	{r3, r4, r5, lr}
 800b1b2:	4d06      	ldr	r5, [pc, #24]	@ (800b1cc <_isatty_r+0x1c>)
 800b1b4:	2300      	movs	r3, #0
 800b1b6:	4604      	mov	r4, r0
 800b1b8:	4608      	mov	r0, r1
 800b1ba:	602b      	str	r3, [r5, #0]
 800b1bc:	f7f6 fa38 	bl	8001630 <_isatty>
 800b1c0:	1c43      	adds	r3, r0, #1
 800b1c2:	d102      	bne.n	800b1ca <_isatty_r+0x1a>
 800b1c4:	682b      	ldr	r3, [r5, #0]
 800b1c6:	b103      	cbz	r3, 800b1ca <_isatty_r+0x1a>
 800b1c8:	6023      	str	r3, [r4, #0]
 800b1ca:	bd38      	pop	{r3, r4, r5, pc}
 800b1cc:	2000546c 	.word	0x2000546c

0800b1d0 <_kill_r>:
 800b1d0:	b538      	push	{r3, r4, r5, lr}
 800b1d2:	4d07      	ldr	r5, [pc, #28]	@ (800b1f0 <_kill_r+0x20>)
 800b1d4:	2300      	movs	r3, #0
 800b1d6:	4604      	mov	r4, r0
 800b1d8:	4608      	mov	r0, r1
 800b1da:	4611      	mov	r1, r2
 800b1dc:	602b      	str	r3, [r5, #0]
 800b1de:	f7f6 f9d3 	bl	8001588 <_kill>
 800b1e2:	1c43      	adds	r3, r0, #1
 800b1e4:	d102      	bne.n	800b1ec <_kill_r+0x1c>
 800b1e6:	682b      	ldr	r3, [r5, #0]
 800b1e8:	b103      	cbz	r3, 800b1ec <_kill_r+0x1c>
 800b1ea:	6023      	str	r3, [r4, #0]
 800b1ec:	bd38      	pop	{r3, r4, r5, pc}
 800b1ee:	bf00      	nop
 800b1f0:	2000546c 	.word	0x2000546c

0800b1f4 <_getpid_r>:
 800b1f4:	f7f6 b9c0 	b.w	8001578 <_getpid>

0800b1f8 <_init>:
 800b1f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1fa:	bf00      	nop
 800b1fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b1fe:	bc08      	pop	{r3}
 800b200:	469e      	mov	lr, r3
 800b202:	4770      	bx	lr

0800b204 <_fini>:
 800b204:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b206:	bf00      	nop
 800b208:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b20a:	bc08      	pop	{r3}
 800b20c:	469e      	mov	lr, r3
 800b20e:	4770      	bx	lr
