
GPS_Simulator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d3c8  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008fc  0800d598  0800d598  0000e598  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800de94  0800de94  0000f244  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800de94  0800de94  0000ee94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800de9c  0800de9c  0000f244  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800de9c  0800de9c  0000ee9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800dea0  0800dea0  0000eea0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000244  20000000  0800dea4  0000f000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005314  20000244  0800e0e8  0000f244  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20005558  0800e0e8  0000f558  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f244  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f2f2  00000000  00000000  0000f274  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000413f  00000000  00000000  0002e566  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001918  00000000  00000000  000326a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001397  00000000  00000000  00033fc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000053bb  00000000  00000000  00035357  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e667  00000000  00000000  0003a712  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ffc30  00000000  00000000  00058d79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001589a9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000819c  00000000  00000000  001589ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000085  00000000  00000000  00160b88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000244 	.word	0x20000244
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800d580 	.word	0x0800d580

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000248 	.word	0x20000248
 800020c:	0800d580 	.word	0x0800d580

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <strlen>:
 80002d0:	4603      	mov	r3, r0
 80002d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	d1fb      	bne.n	80002d2 <strlen+0x2>
 80002da:	1a18      	subs	r0, r3, r0
 80002dc:	3801      	subs	r0, #1
 80002de:	4770      	bx	lr

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	@ 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_dcmpun>:
 8000b8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x10>
 8000b96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b9a:	d10a      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000b9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x20>
 8000ba6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0001 	mov.w	r0, #1
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2iz>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d215      	bcs.n	8000bee <__aeabi_d2iz+0x36>
 8000bc2:	d511      	bpl.n	8000be8 <__aeabi_d2iz+0x30>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d912      	bls.n	8000bf4 <__aeabi_d2iz+0x3c>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	bf18      	it	ne
 8000be4:	4240      	negne	r0, r0
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bf2:	d105      	bne.n	8000c00 <__aeabi_d2iz+0x48>
 8000bf4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bf8:	bf08      	it	eq
 8000bfa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <__aeabi_ldivmod>:
 8000c08:	b97b      	cbnz	r3, 8000c2a <__aeabi_ldivmod+0x22>
 8000c0a:	b972      	cbnz	r2, 8000c2a <__aeabi_ldivmod+0x22>
 8000c0c:	2900      	cmp	r1, #0
 8000c0e:	bfbe      	ittt	lt
 8000c10:	2000      	movlt	r0, #0
 8000c12:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000c16:	e006      	blt.n	8000c26 <__aeabi_ldivmod+0x1e>
 8000c18:	bf08      	it	eq
 8000c1a:	2800      	cmpeq	r0, #0
 8000c1c:	bf1c      	itt	ne
 8000c1e:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000c22:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000c26:	f000 b9d3 	b.w	8000fd0 <__aeabi_idiv0>
 8000c2a:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c2e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c32:	2900      	cmp	r1, #0
 8000c34:	db09      	blt.n	8000c4a <__aeabi_ldivmod+0x42>
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	db1a      	blt.n	8000c70 <__aeabi_ldivmod+0x68>
 8000c3a:	f000 f84d 	bl	8000cd8 <__udivmoddi4>
 8000c3e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c42:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c46:	b004      	add	sp, #16
 8000c48:	4770      	bx	lr
 8000c4a:	4240      	negs	r0, r0
 8000c4c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	db1b      	blt.n	8000c8c <__aeabi_ldivmod+0x84>
 8000c54:	f000 f840 	bl	8000cd8 <__udivmoddi4>
 8000c58:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c5c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c60:	b004      	add	sp, #16
 8000c62:	4240      	negs	r0, r0
 8000c64:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c68:	4252      	negs	r2, r2
 8000c6a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c6e:	4770      	bx	lr
 8000c70:	4252      	negs	r2, r2
 8000c72:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c76:	f000 f82f 	bl	8000cd8 <__udivmoddi4>
 8000c7a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c7e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c82:	b004      	add	sp, #16
 8000c84:	4240      	negs	r0, r0
 8000c86:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c8a:	4770      	bx	lr
 8000c8c:	4252      	negs	r2, r2
 8000c8e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c92:	f000 f821 	bl	8000cd8 <__udivmoddi4>
 8000c96:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c9a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c9e:	b004      	add	sp, #16
 8000ca0:	4252      	negs	r2, r2
 8000ca2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000ca6:	4770      	bx	lr

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000cbc:	f000 b988 	b.w	8000fd0 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f806 	bl	8000cd8 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__udivmoddi4>:
 8000cd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cdc:	9d08      	ldr	r5, [sp, #32]
 8000cde:	468e      	mov	lr, r1
 8000ce0:	4604      	mov	r4, r0
 8000ce2:	4688      	mov	r8, r1
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d14a      	bne.n	8000d7e <__udivmoddi4+0xa6>
 8000ce8:	428a      	cmp	r2, r1
 8000cea:	4617      	mov	r7, r2
 8000cec:	d962      	bls.n	8000db4 <__udivmoddi4+0xdc>
 8000cee:	fab2 f682 	clz	r6, r2
 8000cf2:	b14e      	cbz	r6, 8000d08 <__udivmoddi4+0x30>
 8000cf4:	f1c6 0320 	rsb	r3, r6, #32
 8000cf8:	fa01 f806 	lsl.w	r8, r1, r6
 8000cfc:	fa20 f303 	lsr.w	r3, r0, r3
 8000d00:	40b7      	lsls	r7, r6
 8000d02:	ea43 0808 	orr.w	r8, r3, r8
 8000d06:	40b4      	lsls	r4, r6
 8000d08:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d0c:	fa1f fc87 	uxth.w	ip, r7
 8000d10:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d14:	0c23      	lsrs	r3, r4, #16
 8000d16:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d1a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d1e:	fb01 f20c 	mul.w	r2, r1, ip
 8000d22:	429a      	cmp	r2, r3
 8000d24:	d909      	bls.n	8000d3a <__udivmoddi4+0x62>
 8000d26:	18fb      	adds	r3, r7, r3
 8000d28:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000d2c:	f080 80ea 	bcs.w	8000f04 <__udivmoddi4+0x22c>
 8000d30:	429a      	cmp	r2, r3
 8000d32:	f240 80e7 	bls.w	8000f04 <__udivmoddi4+0x22c>
 8000d36:	3902      	subs	r1, #2
 8000d38:	443b      	add	r3, r7
 8000d3a:	1a9a      	subs	r2, r3, r2
 8000d3c:	b2a3      	uxth	r3, r4
 8000d3e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d42:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d46:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d4a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d4e:	459c      	cmp	ip, r3
 8000d50:	d909      	bls.n	8000d66 <__udivmoddi4+0x8e>
 8000d52:	18fb      	adds	r3, r7, r3
 8000d54:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000d58:	f080 80d6 	bcs.w	8000f08 <__udivmoddi4+0x230>
 8000d5c:	459c      	cmp	ip, r3
 8000d5e:	f240 80d3 	bls.w	8000f08 <__udivmoddi4+0x230>
 8000d62:	443b      	add	r3, r7
 8000d64:	3802      	subs	r0, #2
 8000d66:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d6a:	eba3 030c 	sub.w	r3, r3, ip
 8000d6e:	2100      	movs	r1, #0
 8000d70:	b11d      	cbz	r5, 8000d7a <__udivmoddi4+0xa2>
 8000d72:	40f3      	lsrs	r3, r6
 8000d74:	2200      	movs	r2, #0
 8000d76:	e9c5 3200 	strd	r3, r2, [r5]
 8000d7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d905      	bls.n	8000d8e <__udivmoddi4+0xb6>
 8000d82:	b10d      	cbz	r5, 8000d88 <__udivmoddi4+0xb0>
 8000d84:	e9c5 0100 	strd	r0, r1, [r5]
 8000d88:	2100      	movs	r1, #0
 8000d8a:	4608      	mov	r0, r1
 8000d8c:	e7f5      	b.n	8000d7a <__udivmoddi4+0xa2>
 8000d8e:	fab3 f183 	clz	r1, r3
 8000d92:	2900      	cmp	r1, #0
 8000d94:	d146      	bne.n	8000e24 <__udivmoddi4+0x14c>
 8000d96:	4573      	cmp	r3, lr
 8000d98:	d302      	bcc.n	8000da0 <__udivmoddi4+0xc8>
 8000d9a:	4282      	cmp	r2, r0
 8000d9c:	f200 8105 	bhi.w	8000faa <__udivmoddi4+0x2d2>
 8000da0:	1a84      	subs	r4, r0, r2
 8000da2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000da6:	2001      	movs	r0, #1
 8000da8:	4690      	mov	r8, r2
 8000daa:	2d00      	cmp	r5, #0
 8000dac:	d0e5      	beq.n	8000d7a <__udivmoddi4+0xa2>
 8000dae:	e9c5 4800 	strd	r4, r8, [r5]
 8000db2:	e7e2      	b.n	8000d7a <__udivmoddi4+0xa2>
 8000db4:	2a00      	cmp	r2, #0
 8000db6:	f000 8090 	beq.w	8000eda <__udivmoddi4+0x202>
 8000dba:	fab2 f682 	clz	r6, r2
 8000dbe:	2e00      	cmp	r6, #0
 8000dc0:	f040 80a4 	bne.w	8000f0c <__udivmoddi4+0x234>
 8000dc4:	1a8a      	subs	r2, r1, r2
 8000dc6:	0c03      	lsrs	r3, r0, #16
 8000dc8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dcc:	b280      	uxth	r0, r0
 8000dce:	b2bc      	uxth	r4, r7
 8000dd0:	2101      	movs	r1, #1
 8000dd2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000dd6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000dda:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000dde:	fb04 f20c 	mul.w	r2, r4, ip
 8000de2:	429a      	cmp	r2, r3
 8000de4:	d907      	bls.n	8000df6 <__udivmoddi4+0x11e>
 8000de6:	18fb      	adds	r3, r7, r3
 8000de8:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000dec:	d202      	bcs.n	8000df4 <__udivmoddi4+0x11c>
 8000dee:	429a      	cmp	r2, r3
 8000df0:	f200 80e0 	bhi.w	8000fb4 <__udivmoddi4+0x2dc>
 8000df4:	46c4      	mov	ip, r8
 8000df6:	1a9b      	subs	r3, r3, r2
 8000df8:	fbb3 f2fe 	udiv	r2, r3, lr
 8000dfc:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e00:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e04:	fb02 f404 	mul.w	r4, r2, r4
 8000e08:	429c      	cmp	r4, r3
 8000e0a:	d907      	bls.n	8000e1c <__udivmoddi4+0x144>
 8000e0c:	18fb      	adds	r3, r7, r3
 8000e0e:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000e12:	d202      	bcs.n	8000e1a <__udivmoddi4+0x142>
 8000e14:	429c      	cmp	r4, r3
 8000e16:	f200 80ca 	bhi.w	8000fae <__udivmoddi4+0x2d6>
 8000e1a:	4602      	mov	r2, r0
 8000e1c:	1b1b      	subs	r3, r3, r4
 8000e1e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e22:	e7a5      	b.n	8000d70 <__udivmoddi4+0x98>
 8000e24:	f1c1 0620 	rsb	r6, r1, #32
 8000e28:	408b      	lsls	r3, r1
 8000e2a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e2e:	431f      	orrs	r7, r3
 8000e30:	fa0e f401 	lsl.w	r4, lr, r1
 8000e34:	fa20 f306 	lsr.w	r3, r0, r6
 8000e38:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e3c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e40:	4323      	orrs	r3, r4
 8000e42:	fa00 f801 	lsl.w	r8, r0, r1
 8000e46:	fa1f fc87 	uxth.w	ip, r7
 8000e4a:	fbbe f0f9 	udiv	r0, lr, r9
 8000e4e:	0c1c      	lsrs	r4, r3, #16
 8000e50:	fb09 ee10 	mls	lr, r9, r0, lr
 8000e54:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000e58:	fb00 fe0c 	mul.w	lr, r0, ip
 8000e5c:	45a6      	cmp	lr, r4
 8000e5e:	fa02 f201 	lsl.w	r2, r2, r1
 8000e62:	d909      	bls.n	8000e78 <__udivmoddi4+0x1a0>
 8000e64:	193c      	adds	r4, r7, r4
 8000e66:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000e6a:	f080 809c 	bcs.w	8000fa6 <__udivmoddi4+0x2ce>
 8000e6e:	45a6      	cmp	lr, r4
 8000e70:	f240 8099 	bls.w	8000fa6 <__udivmoddi4+0x2ce>
 8000e74:	3802      	subs	r0, #2
 8000e76:	443c      	add	r4, r7
 8000e78:	eba4 040e 	sub.w	r4, r4, lr
 8000e7c:	fa1f fe83 	uxth.w	lr, r3
 8000e80:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e84:	fb09 4413 	mls	r4, r9, r3, r4
 8000e88:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000e8c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e90:	45a4      	cmp	ip, r4
 8000e92:	d908      	bls.n	8000ea6 <__udivmoddi4+0x1ce>
 8000e94:	193c      	adds	r4, r7, r4
 8000e96:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000e9a:	f080 8082 	bcs.w	8000fa2 <__udivmoddi4+0x2ca>
 8000e9e:	45a4      	cmp	ip, r4
 8000ea0:	d97f      	bls.n	8000fa2 <__udivmoddi4+0x2ca>
 8000ea2:	3b02      	subs	r3, #2
 8000ea4:	443c      	add	r4, r7
 8000ea6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000eaa:	eba4 040c 	sub.w	r4, r4, ip
 8000eae:	fba0 ec02 	umull	lr, ip, r0, r2
 8000eb2:	4564      	cmp	r4, ip
 8000eb4:	4673      	mov	r3, lr
 8000eb6:	46e1      	mov	r9, ip
 8000eb8:	d362      	bcc.n	8000f80 <__udivmoddi4+0x2a8>
 8000eba:	d05f      	beq.n	8000f7c <__udivmoddi4+0x2a4>
 8000ebc:	b15d      	cbz	r5, 8000ed6 <__udivmoddi4+0x1fe>
 8000ebe:	ebb8 0203 	subs.w	r2, r8, r3
 8000ec2:	eb64 0409 	sbc.w	r4, r4, r9
 8000ec6:	fa04 f606 	lsl.w	r6, r4, r6
 8000eca:	fa22 f301 	lsr.w	r3, r2, r1
 8000ece:	431e      	orrs	r6, r3
 8000ed0:	40cc      	lsrs	r4, r1
 8000ed2:	e9c5 6400 	strd	r6, r4, [r5]
 8000ed6:	2100      	movs	r1, #0
 8000ed8:	e74f      	b.n	8000d7a <__udivmoddi4+0xa2>
 8000eda:	fbb1 fcf2 	udiv	ip, r1, r2
 8000ede:	0c01      	lsrs	r1, r0, #16
 8000ee0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000ee4:	b280      	uxth	r0, r0
 8000ee6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000eea:	463b      	mov	r3, r7
 8000eec:	4638      	mov	r0, r7
 8000eee:	463c      	mov	r4, r7
 8000ef0:	46b8      	mov	r8, r7
 8000ef2:	46be      	mov	lr, r7
 8000ef4:	2620      	movs	r6, #32
 8000ef6:	fbb1 f1f7 	udiv	r1, r1, r7
 8000efa:	eba2 0208 	sub.w	r2, r2, r8
 8000efe:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f02:	e766      	b.n	8000dd2 <__udivmoddi4+0xfa>
 8000f04:	4601      	mov	r1, r0
 8000f06:	e718      	b.n	8000d3a <__udivmoddi4+0x62>
 8000f08:	4610      	mov	r0, r2
 8000f0a:	e72c      	b.n	8000d66 <__udivmoddi4+0x8e>
 8000f0c:	f1c6 0220 	rsb	r2, r6, #32
 8000f10:	fa2e f302 	lsr.w	r3, lr, r2
 8000f14:	40b7      	lsls	r7, r6
 8000f16:	40b1      	lsls	r1, r6
 8000f18:	fa20 f202 	lsr.w	r2, r0, r2
 8000f1c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f20:	430a      	orrs	r2, r1
 8000f22:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f26:	b2bc      	uxth	r4, r7
 8000f28:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f2c:	0c11      	lsrs	r1, r2, #16
 8000f2e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f32:	fb08 f904 	mul.w	r9, r8, r4
 8000f36:	40b0      	lsls	r0, r6
 8000f38:	4589      	cmp	r9, r1
 8000f3a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f3e:	b280      	uxth	r0, r0
 8000f40:	d93e      	bls.n	8000fc0 <__udivmoddi4+0x2e8>
 8000f42:	1879      	adds	r1, r7, r1
 8000f44:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000f48:	d201      	bcs.n	8000f4e <__udivmoddi4+0x276>
 8000f4a:	4589      	cmp	r9, r1
 8000f4c:	d81f      	bhi.n	8000f8e <__udivmoddi4+0x2b6>
 8000f4e:	eba1 0109 	sub.w	r1, r1, r9
 8000f52:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f56:	fb09 f804 	mul.w	r8, r9, r4
 8000f5a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f5e:	b292      	uxth	r2, r2
 8000f60:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f64:	4542      	cmp	r2, r8
 8000f66:	d229      	bcs.n	8000fbc <__udivmoddi4+0x2e4>
 8000f68:	18ba      	adds	r2, r7, r2
 8000f6a:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000f6e:	d2c4      	bcs.n	8000efa <__udivmoddi4+0x222>
 8000f70:	4542      	cmp	r2, r8
 8000f72:	d2c2      	bcs.n	8000efa <__udivmoddi4+0x222>
 8000f74:	f1a9 0102 	sub.w	r1, r9, #2
 8000f78:	443a      	add	r2, r7
 8000f7a:	e7be      	b.n	8000efa <__udivmoddi4+0x222>
 8000f7c:	45f0      	cmp	r8, lr
 8000f7e:	d29d      	bcs.n	8000ebc <__udivmoddi4+0x1e4>
 8000f80:	ebbe 0302 	subs.w	r3, lr, r2
 8000f84:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000f88:	3801      	subs	r0, #1
 8000f8a:	46e1      	mov	r9, ip
 8000f8c:	e796      	b.n	8000ebc <__udivmoddi4+0x1e4>
 8000f8e:	eba7 0909 	sub.w	r9, r7, r9
 8000f92:	4449      	add	r1, r9
 8000f94:	f1a8 0c02 	sub.w	ip, r8, #2
 8000f98:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f9c:	fb09 f804 	mul.w	r8, r9, r4
 8000fa0:	e7db      	b.n	8000f5a <__udivmoddi4+0x282>
 8000fa2:	4673      	mov	r3, lr
 8000fa4:	e77f      	b.n	8000ea6 <__udivmoddi4+0x1ce>
 8000fa6:	4650      	mov	r0, sl
 8000fa8:	e766      	b.n	8000e78 <__udivmoddi4+0x1a0>
 8000faa:	4608      	mov	r0, r1
 8000fac:	e6fd      	b.n	8000daa <__udivmoddi4+0xd2>
 8000fae:	443b      	add	r3, r7
 8000fb0:	3a02      	subs	r2, #2
 8000fb2:	e733      	b.n	8000e1c <__udivmoddi4+0x144>
 8000fb4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fb8:	443b      	add	r3, r7
 8000fba:	e71c      	b.n	8000df6 <__udivmoddi4+0x11e>
 8000fbc:	4649      	mov	r1, r9
 8000fbe:	e79c      	b.n	8000efa <__udivmoddi4+0x222>
 8000fc0:	eba1 0109 	sub.w	r1, r1, r9
 8000fc4:	46c4      	mov	ip, r8
 8000fc6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fca:	fb09 f804 	mul.w	r8, r9, r4
 8000fce:	e7c4      	b.n	8000f5a <__udivmoddi4+0x282>

08000fd0 <__aeabi_idiv0>:
 8000fd0:	4770      	bx	lr
 8000fd2:	bf00      	nop

08000fd4 <_write>:
int __io_putchar(int ch) {
	HAL_UART_Transmit(&huart3, (uint8_t*) &ch, 1, 0xFFFF);
	return ch;
}

int _write(int file, char *ptr, int len) {
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b086      	sub	sp, #24
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	60f8      	str	r0, [r7, #12]
 8000fdc:	60b9      	str	r1, [r7, #8]
 8000fde:	607a      	str	r2, [r7, #4]
	char *cr = "\r";
 8000fe0:	4b0b      	ldr	r3, [pc, #44]	@ (8001010 <_write+0x3c>)
 8000fe2:	617b      	str	r3, [r7, #20]
	HAL_UART_Transmit(&huart3, (uint8_t*) ptr, len, 0xFFFF);
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	b29a      	uxth	r2, r3
 8000fe8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000fec:	68b9      	ldr	r1, [r7, #8]
 8000fee:	4809      	ldr	r0, [pc, #36]	@ (8001014 <_write+0x40>)
 8000ff0:	f003 fe78 	bl	8004ce4 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart3, (uint8_t*) cr, 1, 0xFFFF);
 8000ff4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000ff8:	2201      	movs	r2, #1
 8000ffa:	6979      	ldr	r1, [r7, #20]
 8000ffc:	4805      	ldr	r0, [pc, #20]	@ (8001014 <_write+0x40>)
 8000ffe:	f003 fe71 	bl	8004ce4 <HAL_UART_Transmit>
	return len + 1;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	3301      	adds	r3, #1
}
 8001006:	4618      	mov	r0, r3
 8001008:	3718      	adds	r7, #24
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	0800d5c8 	.word	0x0800d5c8
 8001014:	20000300 	.word	0x20000300

08001018 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800101c:	f000 fc7f 	bl	800191e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001020:	f000 f84a 	bl	80010b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001024:	f000 f95c 	bl	80012e0 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001028:	f000 f8b2 	bl	8001190 <MX_I2C1_Init>
  MX_USART3_UART_Init();
 800102c:	f000 f928 	bl	8001280 <MX_USART3_UART_Init>
  MX_TIM7_Init();
 8001030:	f000 f8ee 	bl	8001210 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim7);
 8001034:	4814      	ldr	r0, [pc, #80]	@ (8001088 <main+0x70>)
 8001036:	f003 fb0d 	bl	8004654 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800103a:	f004 fcf7 	bl	8005a2c <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of gpsMsgQueue */
  gpsMsgQueueHandle = osMessageQueueNew (16, sizeof(gps_msg_t), &gpsMsgQueue_attributes);
 800103e:	4a13      	ldr	r2, [pc, #76]	@ (800108c <main+0x74>)
 8001040:	2111      	movs	r1, #17
 8001042:	2010      	movs	r0, #16
 8001044:	f004 fe30 	bl	8005ca8 <osMessageQueueNew>
 8001048:	4603      	mov	r3, r0
 800104a:	4a11      	ldr	r2, [pc, #68]	@ (8001090 <main+0x78>)
 800104c:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800104e:	4a11      	ldr	r2, [pc, #68]	@ (8001094 <main+0x7c>)
 8001050:	2100      	movs	r1, #0
 8001052:	4811      	ldr	r0, [pc, #68]	@ (8001098 <main+0x80>)
 8001054:	f004 fd54 	bl	8005b00 <osThreadNew>
 8001058:	4603      	mov	r3, r0
 800105a:	4a10      	ldr	r2, [pc, #64]	@ (800109c <main+0x84>)
 800105c:	6013      	str	r3, [r2, #0]

  /* creation of GPSTask */
  GPSTaskHandle = osThreadNew(StartGPSTask, NULL, &GPSTask_attributes);
 800105e:	4a10      	ldr	r2, [pc, #64]	@ (80010a0 <main+0x88>)
 8001060:	2100      	movs	r1, #0
 8001062:	4810      	ldr	r0, [pc, #64]	@ (80010a4 <main+0x8c>)
 8001064:	f004 fd4c 	bl	8005b00 <osThreadNew>
 8001068:	4603      	mov	r3, r0
 800106a:	4a0f      	ldr	r2, [pc, #60]	@ (80010a8 <main+0x90>)
 800106c:	6013      	str	r3, [r2, #0]

  /* creation of I2CSenderTask */
  I2CSenderTaskHandle = osThreadNew(StartI2CSenderTask, NULL, &I2CSenderTask_attributes);
 800106e:	4a0f      	ldr	r2, [pc, #60]	@ (80010ac <main+0x94>)
 8001070:	2100      	movs	r1, #0
 8001072:	480f      	ldr	r0, [pc, #60]	@ (80010b0 <main+0x98>)
 8001074:	f004 fd44 	bl	8005b00 <osThreadNew>
 8001078:	4603      	mov	r3, r0
 800107a:	4a0e      	ldr	r2, [pc, #56]	@ (80010b4 <main+0x9c>)
 800107c:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800107e:	f004 fd09 	bl	8005a94 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001082:	bf00      	nop
 8001084:	e7fd      	b.n	8001082 <main+0x6a>
 8001086:	bf00      	nop
 8001088:	200002b4 	.word	0x200002b4
 800108c:	0800d6ec 	.word	0x0800d6ec
 8001090:	20000394 	.word	0x20000394
 8001094:	0800d680 	.word	0x0800d680
 8001098:	08001341 	.word	0x08001341
 800109c:	20000388 	.word	0x20000388
 80010a0:	0800d6a4 	.word	0x0800d6a4
 80010a4:	08005655 	.word	0x08005655
 80010a8:	2000038c 	.word	0x2000038c
 80010ac:	0800d6c8 	.word	0x0800d6c8
 80010b0:	08005909 	.word	0x08005909
 80010b4:	20000390 	.word	0x20000390

080010b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b094      	sub	sp, #80	@ 0x50
 80010bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010be:	f107 0320 	add.w	r3, r7, #32
 80010c2:	2230      	movs	r2, #48	@ 0x30
 80010c4:	2100      	movs	r1, #0
 80010c6:	4618      	mov	r0, r3
 80010c8:	f008 faf3 	bl	80096b2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010cc:	f107 030c 	add.w	r3, r7, #12
 80010d0:	2200      	movs	r2, #0
 80010d2:	601a      	str	r2, [r3, #0]
 80010d4:	605a      	str	r2, [r3, #4]
 80010d6:	609a      	str	r2, [r3, #8]
 80010d8:	60da      	str	r2, [r3, #12]
 80010da:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010dc:	4b2a      	ldr	r3, [pc, #168]	@ (8001188 <SystemClock_Config+0xd0>)
 80010de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010e0:	4a29      	ldr	r2, [pc, #164]	@ (8001188 <SystemClock_Config+0xd0>)
 80010e2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010e6:	6413      	str	r3, [r2, #64]	@ 0x40
 80010e8:	4b27      	ldr	r3, [pc, #156]	@ (8001188 <SystemClock_Config+0xd0>)
 80010ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010f0:	60bb      	str	r3, [r7, #8]
 80010f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010f4:	4b25      	ldr	r3, [pc, #148]	@ (800118c <SystemClock_Config+0xd4>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	4a24      	ldr	r2, [pc, #144]	@ (800118c <SystemClock_Config+0xd4>)
 80010fa:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80010fe:	6013      	str	r3, [r2, #0]
 8001100:	4b22      	ldr	r3, [pc, #136]	@ (800118c <SystemClock_Config+0xd4>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001108:	607b      	str	r3, [r7, #4]
 800110a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800110c:	2302      	movs	r3, #2
 800110e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001110:	2301      	movs	r3, #1
 8001112:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001114:	2310      	movs	r3, #16
 8001116:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001118:	2302      	movs	r3, #2
 800111a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800111c:	2300      	movs	r3, #0
 800111e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001120:	2308      	movs	r3, #8
 8001122:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 8001124:	23d8      	movs	r3, #216	@ 0xd8
 8001126:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001128:	2302      	movs	r3, #2
 800112a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800112c:	2302      	movs	r3, #2
 800112e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001130:	f107 0320 	add.w	r3, r7, #32
 8001134:	4618      	mov	r0, r3
 8001136:	f002 f989 	bl	800344c <HAL_RCC_OscConfig>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d001      	beq.n	8001144 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8001140:	f000 f926 	bl	8001390 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001144:	f002 f932 	bl	80033ac <HAL_PWREx_EnableOverDrive>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	d001      	beq.n	8001152 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800114e:	f000 f91f 	bl	8001390 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001152:	230f      	movs	r3, #15
 8001154:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001156:	2302      	movs	r3, #2
 8001158:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800115a:	2300      	movs	r3, #0
 800115c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800115e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001162:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001164:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001168:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800116a:	f107 030c 	add.w	r3, r7, #12
 800116e:	2107      	movs	r1, #7
 8001170:	4618      	mov	r0, r3
 8001172:	f002 fc0f 	bl	8003994 <HAL_RCC_ClockConfig>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d001      	beq.n	8001180 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 800117c:	f000 f908 	bl	8001390 <Error_Handler>
  }
}
 8001180:	bf00      	nop
 8001182:	3750      	adds	r7, #80	@ 0x50
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}
 8001188:	40023800 	.word	0x40023800
 800118c:	40007000 	.word	0x40007000

08001190 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001194:	4b1b      	ldr	r3, [pc, #108]	@ (8001204 <MX_I2C1_Init+0x74>)
 8001196:	4a1c      	ldr	r2, [pc, #112]	@ (8001208 <MX_I2C1_Init+0x78>)
 8001198:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20404768;
 800119a:	4b1a      	ldr	r3, [pc, #104]	@ (8001204 <MX_I2C1_Init+0x74>)
 800119c:	4a1b      	ldr	r2, [pc, #108]	@ (800120c <MX_I2C1_Init+0x7c>)
 800119e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 32;
 80011a0:	4b18      	ldr	r3, [pc, #96]	@ (8001204 <MX_I2C1_Init+0x74>)
 80011a2:	2220      	movs	r2, #32
 80011a4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011a6:	4b17      	ldr	r3, [pc, #92]	@ (8001204 <MX_I2C1_Init+0x74>)
 80011a8:	2201      	movs	r2, #1
 80011aa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011ac:	4b15      	ldr	r3, [pc, #84]	@ (8001204 <MX_I2C1_Init+0x74>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80011b2:	4b14      	ldr	r3, [pc, #80]	@ (8001204 <MX_I2C1_Init+0x74>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80011b8:	4b12      	ldr	r3, [pc, #72]	@ (8001204 <MX_I2C1_Init+0x74>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011be:	4b11      	ldr	r3, [pc, #68]	@ (8001204 <MX_I2C1_Init+0x74>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011c4:	4b0f      	ldr	r3, [pc, #60]	@ (8001204 <MX_I2C1_Init+0x74>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80011ca:	480e      	ldr	r0, [pc, #56]	@ (8001204 <MX_I2C1_Init+0x74>)
 80011cc:	f000 fe92 	bl	8001ef4 <HAL_I2C_Init>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d001      	beq.n	80011da <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80011d6:	f000 f8db 	bl	8001390 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80011da:	2100      	movs	r1, #0
 80011dc:	4809      	ldr	r0, [pc, #36]	@ (8001204 <MX_I2C1_Init+0x74>)
 80011de:	f002 f84d 	bl	800327c <HAL_I2CEx_ConfigAnalogFilter>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d001      	beq.n	80011ec <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80011e8:	f000 f8d2 	bl	8001390 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80011ec:	2100      	movs	r1, #0
 80011ee:	4805      	ldr	r0, [pc, #20]	@ (8001204 <MX_I2C1_Init+0x74>)
 80011f0:	f002 f88f 	bl	8003312 <HAL_I2CEx_ConfigDigitalFilter>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d001      	beq.n	80011fe <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80011fa:	f000 f8c9 	bl	8001390 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80011fe:	bf00      	nop
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	20000260 	.word	0x20000260
 8001208:	40005400 	.word	0x40005400
 800120c:	20404768 	.word	0x20404768

08001210 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b084      	sub	sp, #16
 8001214:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001216:	1d3b      	adds	r3, r7, #4
 8001218:	2200      	movs	r2, #0
 800121a:	601a      	str	r2, [r3, #0]
 800121c:	605a      	str	r2, [r3, #4]
 800121e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001220:	4b15      	ldr	r3, [pc, #84]	@ (8001278 <MX_TIM7_Init+0x68>)
 8001222:	4a16      	ldr	r2, [pc, #88]	@ (800127c <MX_TIM7_Init+0x6c>)
 8001224:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 10800-1;
 8001226:	4b14      	ldr	r3, [pc, #80]	@ (8001278 <MX_TIM7_Init+0x68>)
 8001228:	f642 222f 	movw	r2, #10799	@ 0x2a2f
 800122c:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800122e:	4b12      	ldr	r3, [pc, #72]	@ (8001278 <MX_TIM7_Init+0x68>)
 8001230:	2200      	movs	r2, #0
 8001232:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 10000-1;
 8001234:	4b10      	ldr	r3, [pc, #64]	@ (8001278 <MX_TIM7_Init+0x68>)
 8001236:	f242 720f 	movw	r2, #9999	@ 0x270f
 800123a:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800123c:	4b0e      	ldr	r3, [pc, #56]	@ (8001278 <MX_TIM7_Init+0x68>)
 800123e:	2200      	movs	r2, #0
 8001240:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001242:	480d      	ldr	r0, [pc, #52]	@ (8001278 <MX_TIM7_Init+0x68>)
 8001244:	f003 f9ae 	bl	80045a4 <HAL_TIM_Base_Init>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d001      	beq.n	8001252 <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 800124e:	f000 f89f 	bl	8001390 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001252:	2320      	movs	r3, #32
 8001254:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001256:	2300      	movs	r3, #0
 8001258:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800125a:	1d3b      	adds	r3, r7, #4
 800125c:	4619      	mov	r1, r3
 800125e:	4806      	ldr	r0, [pc, #24]	@ (8001278 <MX_TIM7_Init+0x68>)
 8001260:	f003 fc46 	bl	8004af0 <HAL_TIMEx_MasterConfigSynchronization>
 8001264:	4603      	mov	r3, r0
 8001266:	2b00      	cmp	r3, #0
 8001268:	d001      	beq.n	800126e <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 800126a:	f000 f891 	bl	8001390 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800126e:	bf00      	nop
 8001270:	3710      	adds	r7, #16
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	200002b4 	.word	0x200002b4
 800127c:	40001400 	.word	0x40001400

08001280 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001284:	4b14      	ldr	r3, [pc, #80]	@ (80012d8 <MX_USART3_UART_Init+0x58>)
 8001286:	4a15      	ldr	r2, [pc, #84]	@ (80012dc <MX_USART3_UART_Init+0x5c>)
 8001288:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800128a:	4b13      	ldr	r3, [pc, #76]	@ (80012d8 <MX_USART3_UART_Init+0x58>)
 800128c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001290:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001292:	4b11      	ldr	r3, [pc, #68]	@ (80012d8 <MX_USART3_UART_Init+0x58>)
 8001294:	2200      	movs	r2, #0
 8001296:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001298:	4b0f      	ldr	r3, [pc, #60]	@ (80012d8 <MX_USART3_UART_Init+0x58>)
 800129a:	2200      	movs	r2, #0
 800129c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800129e:	4b0e      	ldr	r3, [pc, #56]	@ (80012d8 <MX_USART3_UART_Init+0x58>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80012a4:	4b0c      	ldr	r3, [pc, #48]	@ (80012d8 <MX_USART3_UART_Init+0x58>)
 80012a6:	220c      	movs	r2, #12
 80012a8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012aa:	4b0b      	ldr	r3, [pc, #44]	@ (80012d8 <MX_USART3_UART_Init+0x58>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80012b0:	4b09      	ldr	r3, [pc, #36]	@ (80012d8 <MX_USART3_UART_Init+0x58>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012b6:	4b08      	ldr	r3, [pc, #32]	@ (80012d8 <MX_USART3_UART_Init+0x58>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012bc:	4b06      	ldr	r3, [pc, #24]	@ (80012d8 <MX_USART3_UART_Init+0x58>)
 80012be:	2200      	movs	r2, #0
 80012c0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80012c2:	4805      	ldr	r0, [pc, #20]	@ (80012d8 <MX_USART3_UART_Init+0x58>)
 80012c4:	f003 fcc0 	bl	8004c48 <HAL_UART_Init>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d001      	beq.n	80012d2 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80012ce:	f000 f85f 	bl	8001390 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80012d2:	bf00      	nop
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	20000300 	.word	0x20000300
 80012dc:	40004800 	.word	0x40004800

080012e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012e0:	b480      	push	{r7}
 80012e2:	b085      	sub	sp, #20
 80012e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012e6:	4b15      	ldr	r3, [pc, #84]	@ (800133c <MX_GPIO_Init+0x5c>)
 80012e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ea:	4a14      	ldr	r2, [pc, #80]	@ (800133c <MX_GPIO_Init+0x5c>)
 80012ec:	f043 0308 	orr.w	r3, r3, #8
 80012f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80012f2:	4b12      	ldr	r3, [pc, #72]	@ (800133c <MX_GPIO_Init+0x5c>)
 80012f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012f6:	f003 0308 	and.w	r3, r3, #8
 80012fa:	60fb      	str	r3, [r7, #12]
 80012fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012fe:	4b0f      	ldr	r3, [pc, #60]	@ (800133c <MX_GPIO_Init+0x5c>)
 8001300:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001302:	4a0e      	ldr	r2, [pc, #56]	@ (800133c <MX_GPIO_Init+0x5c>)
 8001304:	f043 0301 	orr.w	r3, r3, #1
 8001308:	6313      	str	r3, [r2, #48]	@ 0x30
 800130a:	4b0c      	ldr	r3, [pc, #48]	@ (800133c <MX_GPIO_Init+0x5c>)
 800130c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800130e:	f003 0301 	and.w	r3, r3, #1
 8001312:	60bb      	str	r3, [r7, #8]
 8001314:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001316:	4b09      	ldr	r3, [pc, #36]	@ (800133c <MX_GPIO_Init+0x5c>)
 8001318:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800131a:	4a08      	ldr	r2, [pc, #32]	@ (800133c <MX_GPIO_Init+0x5c>)
 800131c:	f043 0302 	orr.w	r3, r3, #2
 8001320:	6313      	str	r3, [r2, #48]	@ 0x30
 8001322:	4b06      	ldr	r3, [pc, #24]	@ (800133c <MX_GPIO_Init+0x5c>)
 8001324:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001326:	f003 0302 	and.w	r3, r3, #2
 800132a:	607b      	str	r3, [r7, #4]
 800132c:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800132e:	bf00      	nop
 8001330:	3714      	adds	r7, #20
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr
 800133a:	bf00      	nop
 800133c:	40023800 	.word	0x40023800

08001340 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b082      	sub	sp, #8
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001348:	2001      	movs	r0, #1
 800134a:	f004 fc7f 	bl	8005c4c <osDelay>
 800134e:	e7fb      	b.n	8001348 <StartDefaultTask+0x8>

08001350 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b082      	sub	sp, #8
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	4a09      	ldr	r2, [pc, #36]	@ (8001384 <HAL_TIM_PeriodElapsedCallback+0x34>)
 800135e:	4293      	cmp	r3, r2
 8001360:	d101      	bne.n	8001366 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8001362:	f000 fae9 	bl	8001938 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  if (htim->Instance == TIM7)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	4a07      	ldr	r2, [pc, #28]	@ (8001388 <HAL_TIM_PeriodElapsedCallback+0x38>)
 800136c:	4293      	cmp	r3, r2
 800136e:	d104      	bne.n	800137a <HAL_TIM_PeriodElapsedCallback+0x2a>
  {
    utc_seconds++;
 8001370:	4b06      	ldr	r3, [pc, #24]	@ (800138c <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	3301      	adds	r3, #1
 8001376:	4a05      	ldr	r2, [pc, #20]	@ (800138c <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8001378:	6013      	str	r3, [r2, #0]
  }
  /* USER CODE END Callback 1 */
}
 800137a:	bf00      	nop
 800137c:	3708      	adds	r7, #8
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	40001000 	.word	0x40001000
 8001388:	40001400 	.word	0x40001400
 800138c:	20000010 	.word	0x20000010

08001390 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001390:	b480      	push	{r7}
 8001392:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001394:	b672      	cpsid	i
}
 8001396:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001398:	bf00      	nop
 800139a:	e7fd      	b.n	8001398 <Error_Handler+0x8>

0800139c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b082      	sub	sp, #8
 80013a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80013a2:	4b11      	ldr	r3, [pc, #68]	@ (80013e8 <HAL_MspInit+0x4c>)
 80013a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013a6:	4a10      	ldr	r2, [pc, #64]	@ (80013e8 <HAL_MspInit+0x4c>)
 80013a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80013ae:	4b0e      	ldr	r3, [pc, #56]	@ (80013e8 <HAL_MspInit+0x4c>)
 80013b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013b6:	607b      	str	r3, [r7, #4]
 80013b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013ba:	4b0b      	ldr	r3, [pc, #44]	@ (80013e8 <HAL_MspInit+0x4c>)
 80013bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013be:	4a0a      	ldr	r2, [pc, #40]	@ (80013e8 <HAL_MspInit+0x4c>)
 80013c0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80013c4:	6453      	str	r3, [r2, #68]	@ 0x44
 80013c6:	4b08      	ldr	r3, [pc, #32]	@ (80013e8 <HAL_MspInit+0x4c>)
 80013c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013ca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80013ce:	603b      	str	r3, [r7, #0]
 80013d0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80013d2:	2200      	movs	r2, #0
 80013d4:	210f      	movs	r1, #15
 80013d6:	f06f 0001 	mvn.w	r0, #1
 80013da:	f000 fb85 	bl	8001ae8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013de:	bf00      	nop
 80013e0:	3708      	adds	r7, #8
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	40023800 	.word	0x40023800

080013ec <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b0aa      	sub	sp, #168	@ 0xa8
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013f4:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80013f8:	2200      	movs	r2, #0
 80013fa:	601a      	str	r2, [r3, #0]
 80013fc:	605a      	str	r2, [r3, #4]
 80013fe:	609a      	str	r2, [r3, #8]
 8001400:	60da      	str	r2, [r3, #12]
 8001402:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001404:	f107 0310 	add.w	r3, r7, #16
 8001408:	2284      	movs	r2, #132	@ 0x84
 800140a:	2100      	movs	r1, #0
 800140c:	4618      	mov	r0, r3
 800140e:	f008 f950 	bl	80096b2 <memset>
  if(hi2c->Instance==I2C1)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	4a2a      	ldr	r2, [pc, #168]	@ (80014c0 <HAL_I2C_MspInit+0xd4>)
 8001418:	4293      	cmp	r3, r2
 800141a:	d14c      	bne.n	80014b6 <HAL_I2C_MspInit+0xca>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800141c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001420:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001422:	2300      	movs	r3, #0
 8001424:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001426:	f107 0310 	add.w	r3, r7, #16
 800142a:	4618      	mov	r0, r3
 800142c:	f002 fcca 	bl	8003dc4 <HAL_RCCEx_PeriphCLKConfig>
 8001430:	4603      	mov	r3, r0
 8001432:	2b00      	cmp	r3, #0
 8001434:	d001      	beq.n	800143a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001436:	f7ff ffab 	bl	8001390 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800143a:	4b22      	ldr	r3, [pc, #136]	@ (80014c4 <HAL_I2C_MspInit+0xd8>)
 800143c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800143e:	4a21      	ldr	r2, [pc, #132]	@ (80014c4 <HAL_I2C_MspInit+0xd8>)
 8001440:	f043 0302 	orr.w	r3, r3, #2
 8001444:	6313      	str	r3, [r2, #48]	@ 0x30
 8001446:	4b1f      	ldr	r3, [pc, #124]	@ (80014c4 <HAL_I2C_MspInit+0xd8>)
 8001448:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800144a:	f003 0302 	and.w	r3, r3, #2
 800144e:	60fb      	str	r3, [r7, #12]
 8001450:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8001452:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001456:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800145a:	2312      	movs	r3, #18
 800145c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001460:	2301      	movs	r3, #1
 8001462:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001466:	2303      	movs	r3, #3
 8001468:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800146c:	2304      	movs	r3, #4
 800146e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001472:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8001476:	4619      	mov	r1, r3
 8001478:	4813      	ldr	r0, [pc, #76]	@ (80014c8 <HAL_I2C_MspInit+0xdc>)
 800147a:	f000 fb8f 	bl	8001b9c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800147e:	4b11      	ldr	r3, [pc, #68]	@ (80014c4 <HAL_I2C_MspInit+0xd8>)
 8001480:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001482:	4a10      	ldr	r2, [pc, #64]	@ (80014c4 <HAL_I2C_MspInit+0xd8>)
 8001484:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001488:	6413      	str	r3, [r2, #64]	@ 0x40
 800148a:	4b0e      	ldr	r3, [pc, #56]	@ (80014c4 <HAL_I2C_MspInit+0xd8>)
 800148c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800148e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001492:	60bb      	str	r3, [r7, #8]
 8001494:	68bb      	ldr	r3, [r7, #8]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8001496:	2200      	movs	r2, #0
 8001498:	2105      	movs	r1, #5
 800149a:	201f      	movs	r0, #31
 800149c:	f000 fb24 	bl	8001ae8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80014a0:	201f      	movs	r0, #31
 80014a2:	f000 fb3d 	bl	8001b20 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 80014a6:	2200      	movs	r2, #0
 80014a8:	2105      	movs	r1, #5
 80014aa:	2020      	movs	r0, #32
 80014ac:	f000 fb1c 	bl	8001ae8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80014b0:	2020      	movs	r0, #32
 80014b2:	f000 fb35 	bl	8001b20 <HAL_NVIC_EnableIRQ>

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 80014b6:	bf00      	nop
 80014b8:	37a8      	adds	r7, #168	@ 0xa8
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	40005400 	.word	0x40005400
 80014c4:	40023800 	.word	0x40023800
 80014c8:	40020400 	.word	0x40020400

080014cc <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b084      	sub	sp, #16
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	4a0d      	ldr	r2, [pc, #52]	@ (8001510 <HAL_TIM_Base_MspInit+0x44>)
 80014da:	4293      	cmp	r3, r2
 80014dc:	d113      	bne.n	8001506 <HAL_TIM_Base_MspInit+0x3a>
  {
    /* USER CODE BEGIN TIM7_MspInit 0 */

    /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 80014de:	4b0d      	ldr	r3, [pc, #52]	@ (8001514 <HAL_TIM_Base_MspInit+0x48>)
 80014e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014e2:	4a0c      	ldr	r2, [pc, #48]	@ (8001514 <HAL_TIM_Base_MspInit+0x48>)
 80014e4:	f043 0320 	orr.w	r3, r3, #32
 80014e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80014ea:	4b0a      	ldr	r3, [pc, #40]	@ (8001514 <HAL_TIM_Base_MspInit+0x48>)
 80014ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014ee:	f003 0320 	and.w	r3, r3, #32
 80014f2:	60fb      	str	r3, [r7, #12]
 80014f4:	68fb      	ldr	r3, [r7, #12]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 80014f6:	2200      	movs	r2, #0
 80014f8:	2105      	movs	r1, #5
 80014fa:	2037      	movs	r0, #55	@ 0x37
 80014fc:	f000 faf4 	bl	8001ae8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001500:	2037      	movs	r0, #55	@ 0x37
 8001502:	f000 fb0d 	bl	8001b20 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM7_MspInit 1 */

  }

}
 8001506:	bf00      	nop
 8001508:	3710      	adds	r7, #16
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	40001400 	.word	0x40001400
 8001514:	40023800 	.word	0x40023800

08001518 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b0aa      	sub	sp, #168	@ 0xa8
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001520:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8001524:	2200      	movs	r2, #0
 8001526:	601a      	str	r2, [r3, #0]
 8001528:	605a      	str	r2, [r3, #4]
 800152a:	609a      	str	r2, [r3, #8]
 800152c:	60da      	str	r2, [r3, #12]
 800152e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001530:	f107 0310 	add.w	r3, r7, #16
 8001534:	2284      	movs	r2, #132	@ 0x84
 8001536:	2100      	movs	r1, #0
 8001538:	4618      	mov	r0, r3
 800153a:	f008 f8ba 	bl	80096b2 <memset>
  if(huart->Instance==USART3)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	4a22      	ldr	r2, [pc, #136]	@ (80015cc <HAL_UART_MspInit+0xb4>)
 8001544:	4293      	cmp	r3, r2
 8001546:	d13c      	bne.n	80015c2 <HAL_UART_MspInit+0xaa>

    /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001548:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800154c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800154e:	2300      	movs	r3, #0
 8001550:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001552:	f107 0310 	add.w	r3, r7, #16
 8001556:	4618      	mov	r0, r3
 8001558:	f002 fc34 	bl	8003dc4 <HAL_RCCEx_PeriphCLKConfig>
 800155c:	4603      	mov	r3, r0
 800155e:	2b00      	cmp	r3, #0
 8001560:	d001      	beq.n	8001566 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001562:	f7ff ff15 	bl	8001390 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001566:	4b1a      	ldr	r3, [pc, #104]	@ (80015d0 <HAL_UART_MspInit+0xb8>)
 8001568:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800156a:	4a19      	ldr	r2, [pc, #100]	@ (80015d0 <HAL_UART_MspInit+0xb8>)
 800156c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001570:	6413      	str	r3, [r2, #64]	@ 0x40
 8001572:	4b17      	ldr	r3, [pc, #92]	@ (80015d0 <HAL_UART_MspInit+0xb8>)
 8001574:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001576:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800157a:	60fb      	str	r3, [r7, #12]
 800157c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800157e:	4b14      	ldr	r3, [pc, #80]	@ (80015d0 <HAL_UART_MspInit+0xb8>)
 8001580:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001582:	4a13      	ldr	r2, [pc, #76]	@ (80015d0 <HAL_UART_MspInit+0xb8>)
 8001584:	f043 0308 	orr.w	r3, r3, #8
 8001588:	6313      	str	r3, [r2, #48]	@ 0x30
 800158a:	4b11      	ldr	r3, [pc, #68]	@ (80015d0 <HAL_UART_MspInit+0xb8>)
 800158c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800158e:	f003 0308 	and.w	r3, r3, #8
 8001592:	60bb      	str	r3, [r7, #8]
 8001594:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = DEBUG_UART_TX_Pin|DEBUG_UART_RX_Pin;
 8001596:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800159a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800159e:	2302      	movs	r3, #2
 80015a0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a4:	2300      	movs	r3, #0
 80015a6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015aa:	2303      	movs	r3, #3
 80015ac:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80015b0:	2307      	movs	r3, #7
 80015b2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015b6:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80015ba:	4619      	mov	r1, r3
 80015bc:	4805      	ldr	r0, [pc, #20]	@ (80015d4 <HAL_UART_MspInit+0xbc>)
 80015be:	f000 faed 	bl	8001b9c <HAL_GPIO_Init>

    /* USER CODE END USART3_MspInit 1 */

  }

}
 80015c2:	bf00      	nop
 80015c4:	37a8      	adds	r7, #168	@ 0xa8
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	40004800 	.word	0x40004800
 80015d0:	40023800 	.word	0x40023800
 80015d4:	40020c00 	.word	0x40020c00

080015d8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b08e      	sub	sp, #56	@ 0x38
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80015e0:	2300      	movs	r3, #0
 80015e2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80015e4:	2300      	movs	r3, #0
 80015e6:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80015e8:	4b33      	ldr	r3, [pc, #204]	@ (80016b8 <HAL_InitTick+0xe0>)
 80015ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015ec:	4a32      	ldr	r2, [pc, #200]	@ (80016b8 <HAL_InitTick+0xe0>)
 80015ee:	f043 0310 	orr.w	r3, r3, #16
 80015f2:	6413      	str	r3, [r2, #64]	@ 0x40
 80015f4:	4b30      	ldr	r3, [pc, #192]	@ (80016b8 <HAL_InitTick+0xe0>)
 80015f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015f8:	f003 0310 	and.w	r3, r3, #16
 80015fc:	60fb      	str	r3, [r7, #12]
 80015fe:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001600:	f107 0210 	add.w	r2, r7, #16
 8001604:	f107 0314 	add.w	r3, r7, #20
 8001608:	4611      	mov	r1, r2
 800160a:	4618      	mov	r0, r3
 800160c:	f002 fba8 	bl	8003d60 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001610:	6a3b      	ldr	r3, [r7, #32]
 8001612:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001614:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001616:	2b00      	cmp	r3, #0
 8001618:	d103      	bne.n	8001622 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800161a:	f002 fb79 	bl	8003d10 <HAL_RCC_GetPCLK1Freq>
 800161e:	6378      	str	r0, [r7, #52]	@ 0x34
 8001620:	e004      	b.n	800162c <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001622:	f002 fb75 	bl	8003d10 <HAL_RCC_GetPCLK1Freq>
 8001626:	4603      	mov	r3, r0
 8001628:	005b      	lsls	r3, r3, #1
 800162a:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800162c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800162e:	4a23      	ldr	r2, [pc, #140]	@ (80016bc <HAL_InitTick+0xe4>)
 8001630:	fba2 2303 	umull	r2, r3, r2, r3
 8001634:	0c9b      	lsrs	r3, r3, #18
 8001636:	3b01      	subs	r3, #1
 8001638:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800163a:	4b21      	ldr	r3, [pc, #132]	@ (80016c0 <HAL_InitTick+0xe8>)
 800163c:	4a21      	ldr	r2, [pc, #132]	@ (80016c4 <HAL_InitTick+0xec>)
 800163e:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001640:	4b1f      	ldr	r3, [pc, #124]	@ (80016c0 <HAL_InitTick+0xe8>)
 8001642:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001646:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001648:	4a1d      	ldr	r2, [pc, #116]	@ (80016c0 <HAL_InitTick+0xe8>)
 800164a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800164c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800164e:	4b1c      	ldr	r3, [pc, #112]	@ (80016c0 <HAL_InitTick+0xe8>)
 8001650:	2200      	movs	r2, #0
 8001652:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001654:	4b1a      	ldr	r3, [pc, #104]	@ (80016c0 <HAL_InitTick+0xe8>)
 8001656:	2200      	movs	r2, #0
 8001658:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800165a:	4b19      	ldr	r3, [pc, #100]	@ (80016c0 <HAL_InitTick+0xe8>)
 800165c:	2200      	movs	r2, #0
 800165e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001660:	4817      	ldr	r0, [pc, #92]	@ (80016c0 <HAL_InitTick+0xe8>)
 8001662:	f002 ff9f 	bl	80045a4 <HAL_TIM_Base_Init>
 8001666:	4603      	mov	r3, r0
 8001668:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 800166c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001670:	2b00      	cmp	r3, #0
 8001672:	d11b      	bne.n	80016ac <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001674:	4812      	ldr	r0, [pc, #72]	@ (80016c0 <HAL_InitTick+0xe8>)
 8001676:	f002 ffed 	bl	8004654 <HAL_TIM_Base_Start_IT>
 800167a:	4603      	mov	r3, r0
 800167c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001680:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001684:	2b00      	cmp	r3, #0
 8001686:	d111      	bne.n	80016ac <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001688:	2036      	movs	r0, #54	@ 0x36
 800168a:	f000 fa49 	bl	8001b20 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	2b0f      	cmp	r3, #15
 8001692:	d808      	bhi.n	80016a6 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001694:	2200      	movs	r2, #0
 8001696:	6879      	ldr	r1, [r7, #4]
 8001698:	2036      	movs	r0, #54	@ 0x36
 800169a:	f000 fa25 	bl	8001ae8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800169e:	4a0a      	ldr	r2, [pc, #40]	@ (80016c8 <HAL_InitTick+0xf0>)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6013      	str	r3, [r2, #0]
 80016a4:	e002      	b.n	80016ac <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 80016a6:	2301      	movs	r3, #1
 80016a8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80016ac:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80016b0:	4618      	mov	r0, r3
 80016b2:	3738      	adds	r7, #56	@ 0x38
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}
 80016b8:	40023800 	.word	0x40023800
 80016bc:	431bde83 	.word	0x431bde83
 80016c0:	20000398 	.word	0x20000398
 80016c4:	40001000 	.word	0x40001000
 80016c8:	20000008 	.word	0x20000008

080016cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016cc:	b480      	push	{r7}
 80016ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80016d0:	bf00      	nop
 80016d2:	e7fd      	b.n	80016d0 <NMI_Handler+0x4>

080016d4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016d4:	b480      	push	{r7}
 80016d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016d8:	bf00      	nop
 80016da:	e7fd      	b.n	80016d8 <HardFault_Handler+0x4>

080016dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016dc:	b480      	push	{r7}
 80016de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016e0:	bf00      	nop
 80016e2:	e7fd      	b.n	80016e0 <MemManage_Handler+0x4>

080016e4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016e4:	b480      	push	{r7}
 80016e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016e8:	bf00      	nop
 80016ea:	e7fd      	b.n	80016e8 <BusFault_Handler+0x4>

080016ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016ec:	b480      	push	{r7}
 80016ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016f0:	bf00      	nop
 80016f2:	e7fd      	b.n	80016f0 <UsageFault_Handler+0x4>

080016f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016f4:	b480      	push	{r7}
 80016f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016f8:	bf00      	nop
 80016fa:	46bd      	mov	sp, r7
 80016fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001700:	4770      	bx	lr
	...

08001704 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001708:	4802      	ldr	r0, [pc, #8]	@ (8001714 <I2C1_EV_IRQHandler+0x10>)
 800170a:	f000 fddc 	bl	80022c6 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800170e:	bf00      	nop
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	20000260 	.word	0x20000260

08001718 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 800171c:	4802      	ldr	r0, [pc, #8]	@ (8001728 <I2C1_ER_IRQHandler+0x10>)
 800171e:	f000 fdec 	bl	80022fa <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001722:	bf00      	nop
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	20000260 	.word	0x20000260

0800172c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001730:	4802      	ldr	r0, [pc, #8]	@ (800173c <TIM6_DAC_IRQHandler+0x10>)
 8001732:	f003 f807 	bl	8004744 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001736:	bf00      	nop
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	20000398 	.word	0x20000398

08001740 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001744:	4802      	ldr	r0, [pc, #8]	@ (8001750 <TIM7_IRQHandler+0x10>)
 8001746:	f002 fffd 	bl	8004744 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800174a:	bf00      	nop
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	200002b4 	.word	0x200002b4

08001754 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001754:	b480      	push	{r7}
 8001756:	af00      	add	r7, sp, #0
  return 1;
 8001758:	2301      	movs	r3, #1
}
 800175a:	4618      	mov	r0, r3
 800175c:	46bd      	mov	sp, r7
 800175e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001762:	4770      	bx	lr

08001764 <_kill>:

int _kill(int pid, int sig)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b082      	sub	sp, #8
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
 800176c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800176e:	f009 f86f 	bl	800a850 <__errno>
 8001772:	4603      	mov	r3, r0
 8001774:	2216      	movs	r2, #22
 8001776:	601a      	str	r2, [r3, #0]
  return -1;
 8001778:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800177c:	4618      	mov	r0, r3
 800177e:	3708      	adds	r7, #8
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}

08001784 <_exit>:

void _exit (int status)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b082      	sub	sp, #8
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800178c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001790:	6878      	ldr	r0, [r7, #4]
 8001792:	f7ff ffe7 	bl	8001764 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001796:	bf00      	nop
 8001798:	e7fd      	b.n	8001796 <_exit+0x12>

0800179a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800179a:	b580      	push	{r7, lr}
 800179c:	b086      	sub	sp, #24
 800179e:	af00      	add	r7, sp, #0
 80017a0:	60f8      	str	r0, [r7, #12]
 80017a2:	60b9      	str	r1, [r7, #8]
 80017a4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017a6:	2300      	movs	r3, #0
 80017a8:	617b      	str	r3, [r7, #20]
 80017aa:	e00a      	b.n	80017c2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80017ac:	f3af 8000 	nop.w
 80017b0:	4601      	mov	r1, r0
 80017b2:	68bb      	ldr	r3, [r7, #8]
 80017b4:	1c5a      	adds	r2, r3, #1
 80017b6:	60ba      	str	r2, [r7, #8]
 80017b8:	b2ca      	uxtb	r2, r1
 80017ba:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017bc:	697b      	ldr	r3, [r7, #20]
 80017be:	3301      	adds	r3, #1
 80017c0:	617b      	str	r3, [r7, #20]
 80017c2:	697a      	ldr	r2, [r7, #20]
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	429a      	cmp	r2, r3
 80017c8:	dbf0      	blt.n	80017ac <_read+0x12>
  }

  return len;
 80017ca:	687b      	ldr	r3, [r7, #4]
}
 80017cc:	4618      	mov	r0, r3
 80017ce:	3718      	adds	r7, #24
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd80      	pop	{r7, pc}

080017d4 <_close>:
  }
  return len;
}

int _close(int file)
{
 80017d4:	b480      	push	{r7}
 80017d6:	b083      	sub	sp, #12
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80017dc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80017e0:	4618      	mov	r0, r3
 80017e2:	370c      	adds	r7, #12
 80017e4:	46bd      	mov	sp, r7
 80017e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ea:	4770      	bx	lr

080017ec <_fstat>:


int _fstat(int file, struct stat *st)
{
 80017ec:	b480      	push	{r7}
 80017ee:	b083      	sub	sp, #12
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
 80017f4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80017fc:	605a      	str	r2, [r3, #4]
  return 0;
 80017fe:	2300      	movs	r3, #0
}
 8001800:	4618      	mov	r0, r3
 8001802:	370c      	adds	r7, #12
 8001804:	46bd      	mov	sp, r7
 8001806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180a:	4770      	bx	lr

0800180c <_isatty>:

int _isatty(int file)
{
 800180c:	b480      	push	{r7}
 800180e:	b083      	sub	sp, #12
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001814:	2301      	movs	r3, #1
}
 8001816:	4618      	mov	r0, r3
 8001818:	370c      	adds	r7, #12
 800181a:	46bd      	mov	sp, r7
 800181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001820:	4770      	bx	lr

08001822 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001822:	b480      	push	{r7}
 8001824:	b085      	sub	sp, #20
 8001826:	af00      	add	r7, sp, #0
 8001828:	60f8      	str	r0, [r7, #12]
 800182a:	60b9      	str	r1, [r7, #8]
 800182c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800182e:	2300      	movs	r3, #0
}
 8001830:	4618      	mov	r0, r3
 8001832:	3714      	adds	r7, #20
 8001834:	46bd      	mov	sp, r7
 8001836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183a:	4770      	bx	lr

0800183c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b086      	sub	sp, #24
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001844:	4a14      	ldr	r2, [pc, #80]	@ (8001898 <_sbrk+0x5c>)
 8001846:	4b15      	ldr	r3, [pc, #84]	@ (800189c <_sbrk+0x60>)
 8001848:	1ad3      	subs	r3, r2, r3
 800184a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800184c:	697b      	ldr	r3, [r7, #20]
 800184e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001850:	4b13      	ldr	r3, [pc, #76]	@ (80018a0 <_sbrk+0x64>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	2b00      	cmp	r3, #0
 8001856:	d102      	bne.n	800185e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001858:	4b11      	ldr	r3, [pc, #68]	@ (80018a0 <_sbrk+0x64>)
 800185a:	4a12      	ldr	r2, [pc, #72]	@ (80018a4 <_sbrk+0x68>)
 800185c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800185e:	4b10      	ldr	r3, [pc, #64]	@ (80018a0 <_sbrk+0x64>)
 8001860:	681a      	ldr	r2, [r3, #0]
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	4413      	add	r3, r2
 8001866:	693a      	ldr	r2, [r7, #16]
 8001868:	429a      	cmp	r2, r3
 800186a:	d207      	bcs.n	800187c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800186c:	f008 fff0 	bl	800a850 <__errno>
 8001870:	4603      	mov	r3, r0
 8001872:	220c      	movs	r2, #12
 8001874:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001876:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800187a:	e009      	b.n	8001890 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800187c:	4b08      	ldr	r3, [pc, #32]	@ (80018a0 <_sbrk+0x64>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001882:	4b07      	ldr	r3, [pc, #28]	@ (80018a0 <_sbrk+0x64>)
 8001884:	681a      	ldr	r2, [r3, #0]
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	4413      	add	r3, r2
 800188a:	4a05      	ldr	r2, [pc, #20]	@ (80018a0 <_sbrk+0x64>)
 800188c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800188e:	68fb      	ldr	r3, [r7, #12]
}
 8001890:	4618      	mov	r0, r3
 8001892:	3718      	adds	r7, #24
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}
 8001898:	20050000 	.word	0x20050000
 800189c:	00000400 	.word	0x00000400
 80018a0:	200003e8 	.word	0x200003e8
 80018a4:	20005558 	.word	0x20005558

080018a8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018a8:	b480      	push	{r7}
 80018aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018ac:	4b06      	ldr	r3, [pc, #24]	@ (80018c8 <SystemInit+0x20>)
 80018ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80018b2:	4a05      	ldr	r2, [pc, #20]	@ (80018c8 <SystemInit+0x20>)
 80018b4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80018b8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018bc:	bf00      	nop
 80018be:	46bd      	mov	sp, r7
 80018c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c4:	4770      	bx	lr
 80018c6:	bf00      	nop
 80018c8:	e000ed00 	.word	0xe000ed00

080018cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80018cc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001904 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80018d0:	f7ff ffea 	bl	80018a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80018d4:	480c      	ldr	r0, [pc, #48]	@ (8001908 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80018d6:	490d      	ldr	r1, [pc, #52]	@ (800190c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80018d8:	4a0d      	ldr	r2, [pc, #52]	@ (8001910 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80018da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018dc:	e002      	b.n	80018e4 <LoopCopyDataInit>

080018de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018e2:	3304      	adds	r3, #4

080018e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018e8:	d3f9      	bcc.n	80018de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018ea:	4a0a      	ldr	r2, [pc, #40]	@ (8001914 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80018ec:	4c0a      	ldr	r4, [pc, #40]	@ (8001918 <LoopFillZerobss+0x22>)
  movs r3, #0
 80018ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018f0:	e001      	b.n	80018f6 <LoopFillZerobss>

080018f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018f4:	3204      	adds	r2, #4

080018f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018f8:	d3fb      	bcc.n	80018f2 <FillZerobss>


/* Call static constructors */
    bl __libc_init_array
 80018fa:	f008 ffaf 	bl	800a85c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80018fe:	f7ff fb8b 	bl	8001018 <main>
  bx  lr    
 8001902:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001904:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001908:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800190c:	20000244 	.word	0x20000244
  ldr r2, =_sidata
 8001910:	0800dea4 	.word	0x0800dea4
  ldr r2, =_sbss
 8001914:	20000244 	.word	0x20000244
  ldr r4, =_ebss
 8001918:	20005558 	.word	0x20005558

0800191c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800191c:	e7fe      	b.n	800191c <ADC_IRQHandler>

0800191e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800191e:	b580      	push	{r7, lr}
 8001920:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001922:	2003      	movs	r0, #3
 8001924:	f000 f8d5 	bl	8001ad2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001928:	200f      	movs	r0, #15
 800192a:	f7ff fe55 	bl	80015d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800192e:	f7ff fd35 	bl	800139c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001932:	2300      	movs	r3, #0
}
 8001934:	4618      	mov	r0, r3
 8001936:	bd80      	pop	{r7, pc}

08001938 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001938:	b480      	push	{r7}
 800193a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800193c:	4b06      	ldr	r3, [pc, #24]	@ (8001958 <HAL_IncTick+0x20>)
 800193e:	781b      	ldrb	r3, [r3, #0]
 8001940:	461a      	mov	r2, r3
 8001942:	4b06      	ldr	r3, [pc, #24]	@ (800195c <HAL_IncTick+0x24>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4413      	add	r3, r2
 8001948:	4a04      	ldr	r2, [pc, #16]	@ (800195c <HAL_IncTick+0x24>)
 800194a:	6013      	str	r3, [r2, #0]
}
 800194c:	bf00      	nop
 800194e:	46bd      	mov	sp, r7
 8001950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001954:	4770      	bx	lr
 8001956:	bf00      	nop
 8001958:	2000000c 	.word	0x2000000c
 800195c:	200003ec 	.word	0x200003ec

08001960 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001960:	b480      	push	{r7}
 8001962:	af00      	add	r7, sp, #0
  return uwTick;
 8001964:	4b03      	ldr	r3, [pc, #12]	@ (8001974 <HAL_GetTick+0x14>)
 8001966:	681b      	ldr	r3, [r3, #0]
}
 8001968:	4618      	mov	r0, r3
 800196a:	46bd      	mov	sp, r7
 800196c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001970:	4770      	bx	lr
 8001972:	bf00      	nop
 8001974:	200003ec 	.word	0x200003ec

08001978 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001978:	b480      	push	{r7}
 800197a:	b085      	sub	sp, #20
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	f003 0307 	and.w	r3, r3, #7
 8001986:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001988:	4b0b      	ldr	r3, [pc, #44]	@ (80019b8 <__NVIC_SetPriorityGrouping+0x40>)
 800198a:	68db      	ldr	r3, [r3, #12]
 800198c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800198e:	68ba      	ldr	r2, [r7, #8]
 8001990:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001994:	4013      	ands	r3, r2
 8001996:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800199c:	68bb      	ldr	r3, [r7, #8]
 800199e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80019a0:	4b06      	ldr	r3, [pc, #24]	@ (80019bc <__NVIC_SetPriorityGrouping+0x44>)
 80019a2:	4313      	orrs	r3, r2
 80019a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019a6:	4a04      	ldr	r2, [pc, #16]	@ (80019b8 <__NVIC_SetPriorityGrouping+0x40>)
 80019a8:	68bb      	ldr	r3, [r7, #8]
 80019aa:	60d3      	str	r3, [r2, #12]
}
 80019ac:	bf00      	nop
 80019ae:	3714      	adds	r7, #20
 80019b0:	46bd      	mov	sp, r7
 80019b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b6:	4770      	bx	lr
 80019b8:	e000ed00 	.word	0xe000ed00
 80019bc:	05fa0000 	.word	0x05fa0000

080019c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019c0:	b480      	push	{r7}
 80019c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019c4:	4b04      	ldr	r3, [pc, #16]	@ (80019d8 <__NVIC_GetPriorityGrouping+0x18>)
 80019c6:	68db      	ldr	r3, [r3, #12]
 80019c8:	0a1b      	lsrs	r3, r3, #8
 80019ca:	f003 0307 	and.w	r3, r3, #7
}
 80019ce:	4618      	mov	r0, r3
 80019d0:	46bd      	mov	sp, r7
 80019d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d6:	4770      	bx	lr
 80019d8:	e000ed00 	.word	0xe000ed00

080019dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019dc:	b480      	push	{r7}
 80019de:	b083      	sub	sp, #12
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	4603      	mov	r3, r0
 80019e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	db0b      	blt.n	8001a06 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019ee:	79fb      	ldrb	r3, [r7, #7]
 80019f0:	f003 021f 	and.w	r2, r3, #31
 80019f4:	4907      	ldr	r1, [pc, #28]	@ (8001a14 <__NVIC_EnableIRQ+0x38>)
 80019f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019fa:	095b      	lsrs	r3, r3, #5
 80019fc:	2001      	movs	r0, #1
 80019fe:	fa00 f202 	lsl.w	r2, r0, r2
 8001a02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a06:	bf00      	nop
 8001a08:	370c      	adds	r7, #12
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a10:	4770      	bx	lr
 8001a12:	bf00      	nop
 8001a14:	e000e100 	.word	0xe000e100

08001a18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	b083      	sub	sp, #12
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	4603      	mov	r3, r0
 8001a20:	6039      	str	r1, [r7, #0]
 8001a22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	db0a      	blt.n	8001a42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	b2da      	uxtb	r2, r3
 8001a30:	490c      	ldr	r1, [pc, #48]	@ (8001a64 <__NVIC_SetPriority+0x4c>)
 8001a32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a36:	0112      	lsls	r2, r2, #4
 8001a38:	b2d2      	uxtb	r2, r2
 8001a3a:	440b      	add	r3, r1
 8001a3c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a40:	e00a      	b.n	8001a58 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	b2da      	uxtb	r2, r3
 8001a46:	4908      	ldr	r1, [pc, #32]	@ (8001a68 <__NVIC_SetPriority+0x50>)
 8001a48:	79fb      	ldrb	r3, [r7, #7]
 8001a4a:	f003 030f 	and.w	r3, r3, #15
 8001a4e:	3b04      	subs	r3, #4
 8001a50:	0112      	lsls	r2, r2, #4
 8001a52:	b2d2      	uxtb	r2, r2
 8001a54:	440b      	add	r3, r1
 8001a56:	761a      	strb	r2, [r3, #24]
}
 8001a58:	bf00      	nop
 8001a5a:	370c      	adds	r7, #12
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a62:	4770      	bx	lr
 8001a64:	e000e100 	.word	0xe000e100
 8001a68:	e000ed00 	.word	0xe000ed00

08001a6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	b089      	sub	sp, #36	@ 0x24
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	60f8      	str	r0, [r7, #12]
 8001a74:	60b9      	str	r1, [r7, #8]
 8001a76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	f003 0307 	and.w	r3, r3, #7
 8001a7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a80:	69fb      	ldr	r3, [r7, #28]
 8001a82:	f1c3 0307 	rsb	r3, r3, #7
 8001a86:	2b04      	cmp	r3, #4
 8001a88:	bf28      	it	cs
 8001a8a:	2304      	movcs	r3, #4
 8001a8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a8e:	69fb      	ldr	r3, [r7, #28]
 8001a90:	3304      	adds	r3, #4
 8001a92:	2b06      	cmp	r3, #6
 8001a94:	d902      	bls.n	8001a9c <NVIC_EncodePriority+0x30>
 8001a96:	69fb      	ldr	r3, [r7, #28]
 8001a98:	3b03      	subs	r3, #3
 8001a9a:	e000      	b.n	8001a9e <NVIC_EncodePriority+0x32>
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001aa0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001aa4:	69bb      	ldr	r3, [r7, #24]
 8001aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aaa:	43da      	mvns	r2, r3
 8001aac:	68bb      	ldr	r3, [r7, #8]
 8001aae:	401a      	ands	r2, r3
 8001ab0:	697b      	ldr	r3, [r7, #20]
 8001ab2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ab4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001ab8:	697b      	ldr	r3, [r7, #20]
 8001aba:	fa01 f303 	lsl.w	r3, r1, r3
 8001abe:	43d9      	mvns	r1, r3
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ac4:	4313      	orrs	r3, r2
         );
}
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	3724      	adds	r7, #36	@ 0x24
 8001aca:	46bd      	mov	sp, r7
 8001acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad0:	4770      	bx	lr

08001ad2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ad2:	b580      	push	{r7, lr}
 8001ad4:	b082      	sub	sp, #8
 8001ad6:	af00      	add	r7, sp, #0
 8001ad8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ada:	6878      	ldr	r0, [r7, #4]
 8001adc:	f7ff ff4c 	bl	8001978 <__NVIC_SetPriorityGrouping>
}
 8001ae0:	bf00      	nop
 8001ae2:	3708      	adds	r7, #8
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}

08001ae8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b086      	sub	sp, #24
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	4603      	mov	r3, r0
 8001af0:	60b9      	str	r1, [r7, #8]
 8001af2:	607a      	str	r2, [r7, #4]
 8001af4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001af6:	2300      	movs	r3, #0
 8001af8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001afa:	f7ff ff61 	bl	80019c0 <__NVIC_GetPriorityGrouping>
 8001afe:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b00:	687a      	ldr	r2, [r7, #4]
 8001b02:	68b9      	ldr	r1, [r7, #8]
 8001b04:	6978      	ldr	r0, [r7, #20]
 8001b06:	f7ff ffb1 	bl	8001a6c <NVIC_EncodePriority>
 8001b0a:	4602      	mov	r2, r0
 8001b0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b10:	4611      	mov	r1, r2
 8001b12:	4618      	mov	r0, r3
 8001b14:	f7ff ff80 	bl	8001a18 <__NVIC_SetPriority>
}
 8001b18:	bf00      	nop
 8001b1a:	3718      	adds	r7, #24
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bd80      	pop	{r7, pc}

08001b20 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b082      	sub	sp, #8
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	4603      	mov	r3, r0
 8001b28:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f7ff ff54 	bl	80019dc <__NVIC_EnableIRQ>
}
 8001b34:	bf00      	nop
 8001b36:	3708      	adds	r7, #8
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd80      	pop	{r7, pc}

08001b3c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	b083      	sub	sp, #12
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001b4a:	b2db      	uxtb	r3, r3
 8001b4c:	2b02      	cmp	r3, #2
 8001b4e:	d004      	beq.n	8001b5a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2280      	movs	r2, #128	@ 0x80
 8001b54:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001b56:	2301      	movs	r3, #1
 8001b58:	e00c      	b.n	8001b74 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	2205      	movs	r2, #5
 8001b5e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	681a      	ldr	r2, [r3, #0]
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f022 0201 	bic.w	r2, r2, #1
 8001b70:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001b72:	2300      	movs	r3, #0
}
 8001b74:	4618      	mov	r0, r3
 8001b76:	370c      	adds	r7, #12
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7e:	4770      	bx	lr

08001b80 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001b80:	b480      	push	{r7}
 8001b82:	b083      	sub	sp, #12
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001b8e:	b2db      	uxtb	r3, r3
}
 8001b90:	4618      	mov	r0, r3
 8001b92:	370c      	adds	r7, #12
 8001b94:	46bd      	mov	sp, r7
 8001b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9a:	4770      	bx	lr

08001b9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b089      	sub	sp, #36	@ 0x24
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
 8001ba4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001baa:	2300      	movs	r3, #0
 8001bac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	61fb      	str	r3, [r7, #28]
 8001bba:	e175      	b.n	8001ea8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001bbc:	2201      	movs	r2, #1
 8001bbe:	69fb      	ldr	r3, [r7, #28]
 8001bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	697a      	ldr	r2, [r7, #20]
 8001bcc:	4013      	ands	r3, r2
 8001bce:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8001bd0:	693a      	ldr	r2, [r7, #16]
 8001bd2:	697b      	ldr	r3, [r7, #20]
 8001bd4:	429a      	cmp	r2, r3
 8001bd6:	f040 8164 	bne.w	8001ea2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	f003 0303 	and.w	r3, r3, #3
 8001be2:	2b01      	cmp	r3, #1
 8001be4:	d005      	beq.n	8001bf2 <HAL_GPIO_Init+0x56>
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	f003 0303 	and.w	r3, r3, #3
 8001bee:	2b02      	cmp	r3, #2
 8001bf0:	d130      	bne.n	8001c54 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	689b      	ldr	r3, [r3, #8]
 8001bf6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001bf8:	69fb      	ldr	r3, [r7, #28]
 8001bfa:	005b      	lsls	r3, r3, #1
 8001bfc:	2203      	movs	r2, #3
 8001bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001c02:	43db      	mvns	r3, r3
 8001c04:	69ba      	ldr	r2, [r7, #24]
 8001c06:	4013      	ands	r3, r2
 8001c08:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	68da      	ldr	r2, [r3, #12]
 8001c0e:	69fb      	ldr	r3, [r7, #28]
 8001c10:	005b      	lsls	r3, r3, #1
 8001c12:	fa02 f303 	lsl.w	r3, r2, r3
 8001c16:	69ba      	ldr	r2, [r7, #24]
 8001c18:	4313      	orrs	r3, r2
 8001c1a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	69ba      	ldr	r2, [r7, #24]
 8001c20:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c28:	2201      	movs	r2, #1
 8001c2a:	69fb      	ldr	r3, [r7, #28]
 8001c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c30:	43db      	mvns	r3, r3
 8001c32:	69ba      	ldr	r2, [r7, #24]
 8001c34:	4013      	ands	r3, r2
 8001c36:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	091b      	lsrs	r3, r3, #4
 8001c3e:	f003 0201 	and.w	r2, r3, #1
 8001c42:	69fb      	ldr	r3, [r7, #28]
 8001c44:	fa02 f303 	lsl.w	r3, r2, r3
 8001c48:	69ba      	ldr	r2, [r7, #24]
 8001c4a:	4313      	orrs	r3, r2
 8001c4c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	69ba      	ldr	r2, [r7, #24]
 8001c52:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	f003 0303 	and.w	r3, r3, #3
 8001c5c:	2b03      	cmp	r3, #3
 8001c5e:	d017      	beq.n	8001c90 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	68db      	ldr	r3, [r3, #12]
 8001c64:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001c66:	69fb      	ldr	r3, [r7, #28]
 8001c68:	005b      	lsls	r3, r3, #1
 8001c6a:	2203      	movs	r2, #3
 8001c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c70:	43db      	mvns	r3, r3
 8001c72:	69ba      	ldr	r2, [r7, #24]
 8001c74:	4013      	ands	r3, r2
 8001c76:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	689a      	ldr	r2, [r3, #8]
 8001c7c:	69fb      	ldr	r3, [r7, #28]
 8001c7e:	005b      	lsls	r3, r3, #1
 8001c80:	fa02 f303 	lsl.w	r3, r2, r3
 8001c84:	69ba      	ldr	r2, [r7, #24]
 8001c86:	4313      	orrs	r3, r2
 8001c88:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	69ba      	ldr	r2, [r7, #24]
 8001c8e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	f003 0303 	and.w	r3, r3, #3
 8001c98:	2b02      	cmp	r3, #2
 8001c9a:	d123      	bne.n	8001ce4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001c9c:	69fb      	ldr	r3, [r7, #28]
 8001c9e:	08da      	lsrs	r2, r3, #3
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	3208      	adds	r2, #8
 8001ca4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ca8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001caa:	69fb      	ldr	r3, [r7, #28]
 8001cac:	f003 0307 	and.w	r3, r3, #7
 8001cb0:	009b      	lsls	r3, r3, #2
 8001cb2:	220f      	movs	r2, #15
 8001cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb8:	43db      	mvns	r3, r3
 8001cba:	69ba      	ldr	r2, [r7, #24]
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	691a      	ldr	r2, [r3, #16]
 8001cc4:	69fb      	ldr	r3, [r7, #28]
 8001cc6:	f003 0307 	and.w	r3, r3, #7
 8001cca:	009b      	lsls	r3, r3, #2
 8001ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd0:	69ba      	ldr	r2, [r7, #24]
 8001cd2:	4313      	orrs	r3, r2
 8001cd4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001cd6:	69fb      	ldr	r3, [r7, #28]
 8001cd8:	08da      	lsrs	r2, r3, #3
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	3208      	adds	r2, #8
 8001cde:	69b9      	ldr	r1, [r7, #24]
 8001ce0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001cea:	69fb      	ldr	r3, [r7, #28]
 8001cec:	005b      	lsls	r3, r3, #1
 8001cee:	2203      	movs	r2, #3
 8001cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf4:	43db      	mvns	r3, r3
 8001cf6:	69ba      	ldr	r2, [r7, #24]
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	f003 0203 	and.w	r2, r3, #3
 8001d04:	69fb      	ldr	r3, [r7, #28]
 8001d06:	005b      	lsls	r3, r3, #1
 8001d08:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0c:	69ba      	ldr	r2, [r7, #24]
 8001d0e:	4313      	orrs	r3, r2
 8001d10:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	69ba      	ldr	r2, [r7, #24]
 8001d16:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	f000 80be 	beq.w	8001ea2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d26:	4b66      	ldr	r3, [pc, #408]	@ (8001ec0 <HAL_GPIO_Init+0x324>)
 8001d28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d2a:	4a65      	ldr	r2, [pc, #404]	@ (8001ec0 <HAL_GPIO_Init+0x324>)
 8001d2c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d30:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d32:	4b63      	ldr	r3, [pc, #396]	@ (8001ec0 <HAL_GPIO_Init+0x324>)
 8001d34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d36:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d3a:	60fb      	str	r3, [r7, #12]
 8001d3c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001d3e:	4a61      	ldr	r2, [pc, #388]	@ (8001ec4 <HAL_GPIO_Init+0x328>)
 8001d40:	69fb      	ldr	r3, [r7, #28]
 8001d42:	089b      	lsrs	r3, r3, #2
 8001d44:	3302      	adds	r3, #2
 8001d46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001d4c:	69fb      	ldr	r3, [r7, #28]
 8001d4e:	f003 0303 	and.w	r3, r3, #3
 8001d52:	009b      	lsls	r3, r3, #2
 8001d54:	220f      	movs	r2, #15
 8001d56:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5a:	43db      	mvns	r3, r3
 8001d5c:	69ba      	ldr	r2, [r7, #24]
 8001d5e:	4013      	ands	r3, r2
 8001d60:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	4a58      	ldr	r2, [pc, #352]	@ (8001ec8 <HAL_GPIO_Init+0x32c>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d037      	beq.n	8001dda <HAL_GPIO_Init+0x23e>
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	4a57      	ldr	r2, [pc, #348]	@ (8001ecc <HAL_GPIO_Init+0x330>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d031      	beq.n	8001dd6 <HAL_GPIO_Init+0x23a>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	4a56      	ldr	r2, [pc, #344]	@ (8001ed0 <HAL_GPIO_Init+0x334>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d02b      	beq.n	8001dd2 <HAL_GPIO_Init+0x236>
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	4a55      	ldr	r2, [pc, #340]	@ (8001ed4 <HAL_GPIO_Init+0x338>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d025      	beq.n	8001dce <HAL_GPIO_Init+0x232>
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	4a54      	ldr	r2, [pc, #336]	@ (8001ed8 <HAL_GPIO_Init+0x33c>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d01f      	beq.n	8001dca <HAL_GPIO_Init+0x22e>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	4a53      	ldr	r2, [pc, #332]	@ (8001edc <HAL_GPIO_Init+0x340>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d019      	beq.n	8001dc6 <HAL_GPIO_Init+0x22a>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	4a52      	ldr	r2, [pc, #328]	@ (8001ee0 <HAL_GPIO_Init+0x344>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d013      	beq.n	8001dc2 <HAL_GPIO_Init+0x226>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	4a51      	ldr	r2, [pc, #324]	@ (8001ee4 <HAL_GPIO_Init+0x348>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d00d      	beq.n	8001dbe <HAL_GPIO_Init+0x222>
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	4a50      	ldr	r2, [pc, #320]	@ (8001ee8 <HAL_GPIO_Init+0x34c>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d007      	beq.n	8001dba <HAL_GPIO_Init+0x21e>
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	4a4f      	ldr	r2, [pc, #316]	@ (8001eec <HAL_GPIO_Init+0x350>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d101      	bne.n	8001db6 <HAL_GPIO_Init+0x21a>
 8001db2:	2309      	movs	r3, #9
 8001db4:	e012      	b.n	8001ddc <HAL_GPIO_Init+0x240>
 8001db6:	230a      	movs	r3, #10
 8001db8:	e010      	b.n	8001ddc <HAL_GPIO_Init+0x240>
 8001dba:	2308      	movs	r3, #8
 8001dbc:	e00e      	b.n	8001ddc <HAL_GPIO_Init+0x240>
 8001dbe:	2307      	movs	r3, #7
 8001dc0:	e00c      	b.n	8001ddc <HAL_GPIO_Init+0x240>
 8001dc2:	2306      	movs	r3, #6
 8001dc4:	e00a      	b.n	8001ddc <HAL_GPIO_Init+0x240>
 8001dc6:	2305      	movs	r3, #5
 8001dc8:	e008      	b.n	8001ddc <HAL_GPIO_Init+0x240>
 8001dca:	2304      	movs	r3, #4
 8001dcc:	e006      	b.n	8001ddc <HAL_GPIO_Init+0x240>
 8001dce:	2303      	movs	r3, #3
 8001dd0:	e004      	b.n	8001ddc <HAL_GPIO_Init+0x240>
 8001dd2:	2302      	movs	r3, #2
 8001dd4:	e002      	b.n	8001ddc <HAL_GPIO_Init+0x240>
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	e000      	b.n	8001ddc <HAL_GPIO_Init+0x240>
 8001dda:	2300      	movs	r3, #0
 8001ddc:	69fa      	ldr	r2, [r7, #28]
 8001dde:	f002 0203 	and.w	r2, r2, #3
 8001de2:	0092      	lsls	r2, r2, #2
 8001de4:	4093      	lsls	r3, r2
 8001de6:	69ba      	ldr	r2, [r7, #24]
 8001de8:	4313      	orrs	r3, r2
 8001dea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001dec:	4935      	ldr	r1, [pc, #212]	@ (8001ec4 <HAL_GPIO_Init+0x328>)
 8001dee:	69fb      	ldr	r3, [r7, #28]
 8001df0:	089b      	lsrs	r3, r3, #2
 8001df2:	3302      	adds	r3, #2
 8001df4:	69ba      	ldr	r2, [r7, #24]
 8001df6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001dfa:	4b3d      	ldr	r3, [pc, #244]	@ (8001ef0 <HAL_GPIO_Init+0x354>)
 8001dfc:	689b      	ldr	r3, [r3, #8]
 8001dfe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e00:	693b      	ldr	r3, [r7, #16]
 8001e02:	43db      	mvns	r3, r3
 8001e04:	69ba      	ldr	r2, [r7, #24]
 8001e06:	4013      	ands	r3, r2
 8001e08:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d003      	beq.n	8001e1e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001e16:	69ba      	ldr	r2, [r7, #24]
 8001e18:	693b      	ldr	r3, [r7, #16]
 8001e1a:	4313      	orrs	r3, r2
 8001e1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001e1e:	4a34      	ldr	r2, [pc, #208]	@ (8001ef0 <HAL_GPIO_Init+0x354>)
 8001e20:	69bb      	ldr	r3, [r7, #24]
 8001e22:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e24:	4b32      	ldr	r3, [pc, #200]	@ (8001ef0 <HAL_GPIO_Init+0x354>)
 8001e26:	68db      	ldr	r3, [r3, #12]
 8001e28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e2a:	693b      	ldr	r3, [r7, #16]
 8001e2c:	43db      	mvns	r3, r3
 8001e2e:	69ba      	ldr	r2, [r7, #24]
 8001e30:	4013      	ands	r3, r2
 8001e32:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d003      	beq.n	8001e48 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001e40:	69ba      	ldr	r2, [r7, #24]
 8001e42:	693b      	ldr	r3, [r7, #16]
 8001e44:	4313      	orrs	r3, r2
 8001e46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e48:	4a29      	ldr	r2, [pc, #164]	@ (8001ef0 <HAL_GPIO_Init+0x354>)
 8001e4a:	69bb      	ldr	r3, [r7, #24]
 8001e4c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001e4e:	4b28      	ldr	r3, [pc, #160]	@ (8001ef0 <HAL_GPIO_Init+0x354>)
 8001e50:	685b      	ldr	r3, [r3, #4]
 8001e52:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e54:	693b      	ldr	r3, [r7, #16]
 8001e56:	43db      	mvns	r3, r3
 8001e58:	69ba      	ldr	r2, [r7, #24]
 8001e5a:	4013      	ands	r3, r2
 8001e5c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d003      	beq.n	8001e72 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001e6a:	69ba      	ldr	r2, [r7, #24]
 8001e6c:	693b      	ldr	r3, [r7, #16]
 8001e6e:	4313      	orrs	r3, r2
 8001e70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001e72:	4a1f      	ldr	r2, [pc, #124]	@ (8001ef0 <HAL_GPIO_Init+0x354>)
 8001e74:	69bb      	ldr	r3, [r7, #24]
 8001e76:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e78:	4b1d      	ldr	r3, [pc, #116]	@ (8001ef0 <HAL_GPIO_Init+0x354>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e7e:	693b      	ldr	r3, [r7, #16]
 8001e80:	43db      	mvns	r3, r3
 8001e82:	69ba      	ldr	r2, [r7, #24]
 8001e84:	4013      	ands	r3, r2
 8001e86:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d003      	beq.n	8001e9c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001e94:	69ba      	ldr	r2, [r7, #24]
 8001e96:	693b      	ldr	r3, [r7, #16]
 8001e98:	4313      	orrs	r3, r2
 8001e9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e9c:	4a14      	ldr	r2, [pc, #80]	@ (8001ef0 <HAL_GPIO_Init+0x354>)
 8001e9e:	69bb      	ldr	r3, [r7, #24]
 8001ea0:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8001ea2:	69fb      	ldr	r3, [r7, #28]
 8001ea4:	3301      	adds	r3, #1
 8001ea6:	61fb      	str	r3, [r7, #28]
 8001ea8:	69fb      	ldr	r3, [r7, #28]
 8001eaa:	2b0f      	cmp	r3, #15
 8001eac:	f67f ae86 	bls.w	8001bbc <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001eb0:	bf00      	nop
 8001eb2:	bf00      	nop
 8001eb4:	3724      	adds	r7, #36	@ 0x24
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebc:	4770      	bx	lr
 8001ebe:	bf00      	nop
 8001ec0:	40023800 	.word	0x40023800
 8001ec4:	40013800 	.word	0x40013800
 8001ec8:	40020000 	.word	0x40020000
 8001ecc:	40020400 	.word	0x40020400
 8001ed0:	40020800 	.word	0x40020800
 8001ed4:	40020c00 	.word	0x40020c00
 8001ed8:	40021000 	.word	0x40021000
 8001edc:	40021400 	.word	0x40021400
 8001ee0:	40021800 	.word	0x40021800
 8001ee4:	40021c00 	.word	0x40021c00
 8001ee8:	40022000 	.word	0x40022000
 8001eec:	40022400 	.word	0x40022400
 8001ef0:	40013c00 	.word	0x40013c00

08001ef4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b082      	sub	sp, #8
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d101      	bne.n	8001f06 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001f02:	2301      	movs	r3, #1
 8001f04:	e08b      	b.n	800201e <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001f0c:	b2db      	uxtb	r3, r3
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d106      	bne.n	8001f20 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2200      	movs	r2, #0
 8001f16:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001f1a:	6878      	ldr	r0, [r7, #4]
 8001f1c:	f7ff fa66 	bl	80013ec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2224      	movs	r2, #36	@ 0x24
 8001f24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	681a      	ldr	r2, [r3, #0]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f022 0201 	bic.w	r2, r2, #1
 8001f36:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	685a      	ldr	r2, [r3, #4]
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001f44:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	689a      	ldr	r2, [r3, #8]
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001f54:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	68db      	ldr	r3, [r3, #12]
 8001f5a:	2b01      	cmp	r3, #1
 8001f5c:	d107      	bne.n	8001f6e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	689a      	ldr	r2, [r3, #8]
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001f6a:	609a      	str	r2, [r3, #8]
 8001f6c:	e006      	b.n	8001f7c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	689a      	ldr	r2, [r3, #8]
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001f7a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	68db      	ldr	r3, [r3, #12]
 8001f80:	2b02      	cmp	r3, #2
 8001f82:	d108      	bne.n	8001f96 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	685a      	ldr	r2, [r3, #4]
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001f92:	605a      	str	r2, [r3, #4]
 8001f94:	e007      	b.n	8001fa6 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	685a      	ldr	r2, [r3, #4]
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001fa4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	6859      	ldr	r1, [r3, #4]
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681a      	ldr	r2, [r3, #0]
 8001fb0:	4b1d      	ldr	r3, [pc, #116]	@ (8002028 <HAL_I2C_Init+0x134>)
 8001fb2:	430b      	orrs	r3, r1
 8001fb4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	68da      	ldr	r2, [r3, #12]
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001fc4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	691a      	ldr	r2, [r3, #16]
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	695b      	ldr	r3, [r3, #20]
 8001fce:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	699b      	ldr	r3, [r3, #24]
 8001fd6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	430a      	orrs	r2, r1
 8001fde:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	69d9      	ldr	r1, [r3, #28]
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6a1a      	ldr	r2, [r3, #32]
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	430a      	orrs	r2, r1
 8001fee:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	681a      	ldr	r2, [r3, #0]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f042 0201 	orr.w	r2, r2, #1
 8001ffe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2200      	movs	r2, #0
 8002004:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2220      	movs	r2, #32
 800200a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2200      	movs	r2, #0
 8002012:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2200      	movs	r2, #0
 8002018:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800201c:	2300      	movs	r3, #0
}
 800201e:	4618      	mov	r0, r3
 8002020:	3708      	adds	r7, #8
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}
 8002026:	bf00      	nop
 8002028:	02008000 	.word	0x02008000

0800202c <HAL_I2C_Slave_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Transmit(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size,
                                         uint32_t Timeout)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b088      	sub	sp, #32
 8002030:	af02      	add	r7, sp, #8
 8002032:	60f8      	str	r0, [r7, #12]
 8002034:	60b9      	str	r1, [r7, #8]
 8002036:	603b      	str	r3, [r7, #0]
 8002038:	4613      	mov	r3, r2
 800203a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint16_t tmpXferCount;
  HAL_StatusTypeDef error;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002042:	b2db      	uxtb	r3, r3
 8002044:	2b20      	cmp	r3, #32
 8002046:	f040 8139 	bne.w	80022bc <HAL_I2C_Slave_Transmit+0x290>
  {
    if ((pData == NULL) || (Size == 0U))
 800204a:	68bb      	ldr	r3, [r7, #8]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d002      	beq.n	8002056 <HAL_I2C_Slave_Transmit+0x2a>
 8002050:	88fb      	ldrh	r3, [r7, #6]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d105      	bne.n	8002062 <HAL_I2C_Slave_Transmit+0x36>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800205c:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800205e:	2301      	movs	r3, #1
 8002060:	e12d      	b.n	80022be <HAL_I2C_Slave_Transmit+0x292>
    }
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002068:	2b01      	cmp	r3, #1
 800206a:	d101      	bne.n	8002070 <HAL_I2C_Slave_Transmit+0x44>
 800206c:	2302      	movs	r3, #2
 800206e:	e126      	b.n	80022be <HAL_I2C_Slave_Transmit+0x292>
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	2201      	movs	r2, #1
 8002074:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002078:	f7ff fc72 	bl	8001960 <HAL_GetTick>
 800207c:	6178      	str	r0, [r7, #20]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	2221      	movs	r2, #33	@ 0x21
 8002082:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	2220      	movs	r2, #32
 800208a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	2200      	movs	r2, #0
 8002092:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	68ba      	ldr	r2, [r7, #8]
 8002098:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	88fa      	ldrh	r2, [r7, #6]
 800209e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	2200      	movs	r2, #0
 80020a4:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	685a      	ldr	r2, [r3, #4]
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80020b4:	605a      	str	r2, [r3, #4]

    /* Preload TX data if no stretch enable */
    if (hi2c->Init.NoStretchMode == I2C_NOSTRETCH_ENABLE)
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	6a1b      	ldr	r3, [r3, #32]
 80020ba:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80020be:	d111      	bne.n	80020e4 <HAL_I2C_Slave_Transmit+0xb8>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020c4:	781a      	ldrb	r2, [r3, #0]
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020d0:	1c5a      	adds	r2, r3, #1
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80020da:	b29b      	uxth	r3, r3
 80020dc:	3b01      	subs	r3, #1
 80020de:	b29a      	uxth	r2, r3
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, RESET, Timeout, tickstart) != HAL_OK)
 80020e4:	697b      	ldr	r3, [r7, #20]
 80020e6:	9300      	str	r3, [sp, #0]
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	2200      	movs	r2, #0
 80020ec:	2108      	movs	r1, #8
 80020ee:	68f8      	ldr	r0, [r7, #12]
 80020f0:	f000 fea3 	bl	8002e3a <I2C_WaitOnFlagUntilTimeout>
 80020f4:	4603      	mov	r3, r0
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d00c      	beq.n	8002114 <HAL_I2C_Slave_Transmit+0xe8>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	685a      	ldr	r2, [r3, #4]
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002108:	605a      	str	r2, [r3, #4]

      /* Flush TX register */
      I2C_Flush_TXDR(hi2c);
 800210a:	68f8      	ldr	r0, [r7, #12]
 800210c:	f000 fe53 	bl	8002db6 <I2C_Flush_TXDR>

      return HAL_ERROR;
 8002110:	2301      	movs	r3, #1
 8002112:	e0d4      	b.n	80022be <HAL_I2C_Slave_Transmit+0x292>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	2208      	movs	r2, #8
 800211a:	61da      	str	r2, [r3, #28]

    /* If 10bit addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	68db      	ldr	r3, [r3, #12]
 8002120:	2b02      	cmp	r3, #2
 8002122:	d11b      	bne.n	800215c <HAL_I2C_Slave_Transmit+0x130>
    {
      /* Wait until ADDR flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, RESET, Timeout, tickstart) != HAL_OK)
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	9300      	str	r3, [sp, #0]
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	2200      	movs	r2, #0
 800212c:	2108      	movs	r1, #8
 800212e:	68f8      	ldr	r0, [r7, #12]
 8002130:	f000 fe83 	bl	8002e3a <I2C_WaitOnFlagUntilTimeout>
 8002134:	4603      	mov	r3, r0
 8002136:	2b00      	cmp	r3, #0
 8002138:	d00c      	beq.n	8002154 <HAL_I2C_Slave_Transmit+0x128>
      {
        /* Disable Address Acknowledge */
        hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	685a      	ldr	r2, [r3, #4]
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002148:	605a      	str	r2, [r3, #4]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800214a:	68f8      	ldr	r0, [r7, #12]
 800214c:	f000 fe33 	bl	8002db6 <I2C_Flush_TXDR>

        return HAL_ERROR;
 8002150:	2301      	movs	r3, #1
 8002152:	e0b4      	b.n	80022be <HAL_I2C_Slave_Transmit+0x292>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	2208      	movs	r2, #8
 800215a:	61da      	str	r2, [r3, #28]
    }

    /* Wait until DIR flag is set Transmitter mode */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_DIR, RESET, Timeout, tickstart) != HAL_OK)
 800215c:	697b      	ldr	r3, [r7, #20]
 800215e:	9300      	str	r3, [sp, #0]
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	2200      	movs	r2, #0
 8002164:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
 8002168:	68f8      	ldr	r0, [r7, #12]
 800216a:	f000 fe66 	bl	8002e3a <I2C_WaitOnFlagUntilTimeout>
 800216e:	4603      	mov	r3, r0
 8002170:	2b00      	cmp	r3, #0
 8002172:	d030      	beq.n	80021d6 <HAL_I2C_Slave_Transmit+0x1aa>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	685a      	ldr	r2, [r3, #4]
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002182:	605a      	str	r2, [r3, #4]

      /* Flush TX register */
      I2C_Flush_TXDR(hi2c);
 8002184:	68f8      	ldr	r0, [r7, #12]
 8002186:	f000 fe16 	bl	8002db6 <I2C_Flush_TXDR>

      return HAL_ERROR;
 800218a:	2301      	movs	r3, #1
 800218c:	e097      	b.n	80022be <HAL_I2C_Slave_Transmit+0x292>
    }

    while (hi2c->XferCount > 0U)
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800218e:	697a      	ldr	r2, [r7, #20]
 8002190:	6839      	ldr	r1, [r7, #0]
 8002192:	68f8      	ldr	r0, [r7, #12]
 8002194:	f000 feaa 	bl	8002eec <I2C_WaitOnTXISFlagUntilTimeout>
 8002198:	4603      	mov	r3, r0
 800219a:	2b00      	cmp	r3, #0
 800219c:	d009      	beq.n	80021b2 <HAL_I2C_Slave_Transmit+0x186>
      {
        /* Disable Address Acknowledge */
        hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	685a      	ldr	r2, [r3, #4]
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80021ac:	605a      	str	r2, [r3, #4]
        return HAL_ERROR;
 80021ae:	2301      	movs	r3, #1
 80021b0:	e085      	b.n	80022be <HAL_I2C_Slave_Transmit+0x292>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021b6:	781a      	ldrb	r2, [r3, #0]
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021c2:	1c5a      	adds	r2, r3, #1
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80021cc:	b29b      	uxth	r3, r3
 80021ce:	3b01      	subs	r3, #1
 80021d0:	b29a      	uxth	r2, r3
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferCount > 0U)
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80021da:	b29b      	uxth	r3, r3
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d1d6      	bne.n	800218e <HAL_I2C_Slave_Transmit+0x162>
    }

    /* Wait until AF flag is set */
    error = I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_AF, RESET, Timeout, tickstart);
 80021e0:	697b      	ldr	r3, [r7, #20]
 80021e2:	9300      	str	r3, [sp, #0]
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	2200      	movs	r2, #0
 80021e8:	2110      	movs	r1, #16
 80021ea:	68f8      	ldr	r0, [r7, #12]
 80021ec:	f000 fe25 	bl	8002e3a <I2C_WaitOnFlagUntilTimeout>
 80021f0:	4603      	mov	r3, r0
 80021f2:	74fb      	strb	r3, [r7, #19]

    if (error != HAL_OK)
 80021f4:	7cfb      	ldrb	r3, [r7, #19]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d017      	beq.n	800222a <HAL_I2C_Slave_Transmit+0x1fe>
    {
      /* Check that I2C transfer finished */
      /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
      /* Mean XferCount == 0 */

      tmpXferCount = hi2c->XferCount;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80021fe:	823b      	strh	r3, [r7, #16]
      if ((hi2c->ErrorCode == HAL_I2C_ERROR_AF) && (tmpXferCount == 0U))
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002204:	2b04      	cmp	r3, #4
 8002206:	d106      	bne.n	8002216 <HAL_I2C_Slave_Transmit+0x1ea>
 8002208:	8a3b      	ldrh	r3, [r7, #16]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d103      	bne.n	8002216 <HAL_I2C_Slave_Transmit+0x1ea>
      {
        /* Reset ErrorCode to NONE */
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	2200      	movs	r2, #0
 8002212:	645a      	str	r2, [r3, #68]	@ 0x44
 8002214:	e026      	b.n	8002264 <HAL_I2C_Slave_Transmit+0x238>
      }
      else
      {
        /* Disable Address Acknowledge */
        hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	685a      	ldr	r2, [r3, #4]
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002224:	605a      	str	r2, [r3, #4]
        return HAL_ERROR;
 8002226:	2301      	movs	r3, #1
 8002228:	e049      	b.n	80022be <HAL_I2C_Slave_Transmit+0x292>
      }
    }
    else
    {
      /* Flush TX register */
      I2C_Flush_TXDR(hi2c);
 800222a:	68f8      	ldr	r0, [r7, #12]
 800222c:	f000 fdc3 	bl	8002db6 <I2C_Flush_TXDR>

      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	2210      	movs	r2, #16
 8002236:	61da      	str	r2, [r3, #28]

      /* Wait until STOP flag is set */
      if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002238:	697a      	ldr	r2, [r7, #20]
 800223a:	6839      	ldr	r1, [r7, #0]
 800223c:	68f8      	ldr	r0, [r7, #12]
 800223e:	f000 fe9c 	bl	8002f7a <I2C_WaitOnSTOPFlagUntilTimeout>
 8002242:	4603      	mov	r3, r0
 8002244:	2b00      	cmp	r3, #0
 8002246:	d009      	beq.n	800225c <HAL_I2C_Slave_Transmit+0x230>
      {
        /* Disable Address Acknowledge */
        hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	685a      	ldr	r2, [r3, #4]
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002256:	605a      	str	r2, [r3, #4]

        return HAL_ERROR;
 8002258:	2301      	movs	r3, #1
 800225a:	e030      	b.n	80022be <HAL_I2C_Slave_Transmit+0x292>
      }

      /* Clear STOP flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	2220      	movs	r2, #32
 8002262:	61da      	str	r2, [r3, #28]
    }

    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, Timeout, tickstart) != HAL_OK)
 8002264:	697b      	ldr	r3, [r7, #20]
 8002266:	9300      	str	r3, [sp, #0]
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	2201      	movs	r2, #1
 800226c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002270:	68f8      	ldr	r0, [r7, #12]
 8002272:	f000 fde2 	bl	8002e3a <I2C_WaitOnFlagUntilTimeout>
 8002276:	4603      	mov	r3, r0
 8002278:	2b00      	cmp	r3, #0
 800227a:	d009      	beq.n	8002290 <HAL_I2C_Slave_Transmit+0x264>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	685a      	ldr	r2, [r3, #4]
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800228a:	605a      	str	r2, [r3, #4]
      return HAL_ERROR;
 800228c:	2301      	movs	r3, #1
 800228e:	e016      	b.n	80022be <HAL_I2C_Slave_Transmit+0x292>
    }

    /* Disable Address Acknowledge */
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	685a      	ldr	r2, [r3, #4]
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800229e:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	2220      	movs	r2, #32
 80022a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	2200      	movs	r2, #0
 80022ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	2200      	movs	r2, #0
 80022b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80022b8:	2300      	movs	r3, #0
 80022ba:	e000      	b.n	80022be <HAL_I2C_Slave_Transmit+0x292>
  }
  else
  {
    return HAL_BUSY;
 80022bc:	2302      	movs	r3, #2
  }
}
 80022be:	4618      	mov	r0, r3
 80022c0:	3718      	adds	r7, #24
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}

080022c6 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 80022c6:	b580      	push	{r7, lr}
 80022c8:	b084      	sub	sp, #16
 80022ca:	af00      	add	r7, sp, #0
 80022cc:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	699b      	ldr	r3, [r3, #24]
 80022d4:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d005      	beq.n	80022f2 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80022ea:	68ba      	ldr	r2, [r7, #8]
 80022ec:	68f9      	ldr	r1, [r7, #12]
 80022ee:	6878      	ldr	r0, [r7, #4]
 80022f0:	4798      	blx	r3
  }
}
 80022f2:	bf00      	nop
 80022f4:	3710      	adds	r7, #16
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}

080022fa <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80022fa:	b580      	push	{r7, lr}
 80022fc:	b086      	sub	sp, #24
 80022fe:	af00      	add	r7, sp, #0
 8002300:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	699b      	ldr	r3, [r3, #24]
 8002308:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8002312:	697b      	ldr	r3, [r7, #20]
 8002314:	0a1b      	lsrs	r3, r3, #8
 8002316:	f003 0301 	and.w	r3, r3, #1
 800231a:	2b00      	cmp	r3, #0
 800231c:	d010      	beq.n	8002340 <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800231e:	693b      	ldr	r3, [r7, #16]
 8002320:	09db      	lsrs	r3, r3, #7
 8002322:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8002326:	2b00      	cmp	r3, #0
 8002328:	d00a      	beq.n	8002340 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800232e:	f043 0201 	orr.w	r2, r3, #1
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800233e:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8002340:	697b      	ldr	r3, [r7, #20]
 8002342:	0a9b      	lsrs	r3, r3, #10
 8002344:	f003 0301 	and.w	r3, r3, #1
 8002348:	2b00      	cmp	r3, #0
 800234a:	d010      	beq.n	800236e <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800234c:	693b      	ldr	r3, [r7, #16]
 800234e:	09db      	lsrs	r3, r3, #7
 8002350:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8002354:	2b00      	cmp	r3, #0
 8002356:	d00a      	beq.n	800236e <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800235c:	f043 0208 	orr.w	r2, r3, #8
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800236c:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800236e:	697b      	ldr	r3, [r7, #20]
 8002370:	0a5b      	lsrs	r3, r3, #9
 8002372:	f003 0301 	and.w	r3, r3, #1
 8002376:	2b00      	cmp	r3, #0
 8002378:	d010      	beq.n	800239c <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800237a:	693b      	ldr	r3, [r7, #16]
 800237c:	09db      	lsrs	r3, r3, #7
 800237e:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8002382:	2b00      	cmp	r3, #0
 8002384:	d00a      	beq.n	800239c <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800238a:	f043 0202 	orr.w	r2, r3, #2
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800239a:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023a0:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	f003 030b 	and.w	r3, r3, #11
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d003      	beq.n	80023b4 <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 80023ac:	68f9      	ldr	r1, [r7, #12]
 80023ae:	6878      	ldr	r0, [r7, #4]
 80023b0:	f000 fbea 	bl	8002b88 <I2C_ITError>
  }
}
 80023b4:	bf00      	nop
 80023b6:	3718      	adds	r7, #24
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bd80      	pop	{r7, pc}

080023bc <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80023bc:	b480      	push	{r7}
 80023be:	b083      	sub	sp, #12
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80023c4:	bf00      	nop
 80023c6:	370c      	adds	r7, #12
 80023c8:	46bd      	mov	sp, r7
 80023ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ce:	4770      	bx	lr

080023d0 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80023d0:	b480      	push	{r7}
 80023d2:	b083      	sub	sp, #12
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80023d8:	bf00      	nop
 80023da:	370c      	adds	r7, #12
 80023dc:	46bd      	mov	sp, r7
 80023de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e2:	4770      	bx	lr

080023e4 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80023e4:	b480      	push	{r7}
 80023e6:	b083      	sub	sp, #12
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
 80023ec:	460b      	mov	r3, r1
 80023ee:	70fb      	strb	r3, [r7, #3]
 80023f0:	4613      	mov	r3, r2
 80023f2:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80023f4:	bf00      	nop
 80023f6:	370c      	adds	r7, #12
 80023f8:	46bd      	mov	sp, r7
 80023fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fe:	4770      	bx	lr

08002400 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002400:	b480      	push	{r7}
 8002402:	b083      	sub	sp, #12
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8002408:	bf00      	nop
 800240a:	370c      	adds	r7, #12
 800240c:	46bd      	mov	sp, r7
 800240e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002412:	4770      	bx	lr

08002414 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002414:	b480      	push	{r7}
 8002416:	b083      	sub	sp, #12
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800241c:	bf00      	nop
 800241e:	370c      	adds	r7, #12
 8002420:	46bd      	mov	sp, r7
 8002422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002426:	4770      	bx	lr

08002428 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002428:	b480      	push	{r7}
 800242a:	b083      	sub	sp, #12
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002430:	bf00      	nop
 8002432:	370c      	adds	r7, #12
 8002434:	46bd      	mov	sp, r7
 8002436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243a:	4770      	bx	lr

0800243c <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b086      	sub	sp, #24
 8002440:	af00      	add	r7, sp, #0
 8002442:	60f8      	str	r0, [r7, #12]
 8002444:	60b9      	str	r1, [r7, #8]
 8002446:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800244c:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800244e:	68bb      	ldr	r3, [r7, #8]
 8002450:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002458:	2b01      	cmp	r3, #1
 800245a:	d101      	bne.n	8002460 <I2C_Slave_ISR_IT+0x24>
 800245c:	2302      	movs	r3, #2
 800245e:	e0ed      	b.n	800263c <I2C_Slave_ISR_IT+0x200>
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	2201      	movs	r2, #1
 8002464:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002468:	693b      	ldr	r3, [r7, #16]
 800246a:	095b      	lsrs	r3, r3, #5
 800246c:	f003 0301 	and.w	r3, r3, #1
 8002470:	2b00      	cmp	r3, #0
 8002472:	d00a      	beq.n	800248a <I2C_Slave_ISR_IT+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	095b      	lsrs	r3, r3, #5
 8002478:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800247c:	2b00      	cmp	r3, #0
 800247e:	d004      	beq.n	800248a <I2C_Slave_ISR_IT+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8002480:	6939      	ldr	r1, [r7, #16]
 8002482:	68f8      	ldr	r0, [r7, #12]
 8002484:	f000 f9c0 	bl	8002808 <I2C_ITSlaveCplt>
 8002488:	e0d3      	b.n	8002632 <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800248a:	693b      	ldr	r3, [r7, #16]
 800248c:	091b      	lsrs	r3, r3, #4
 800248e:	f003 0301 	and.w	r3, r3, #1
 8002492:	2b00      	cmp	r3, #0
 8002494:	d04d      	beq.n	8002532 <I2C_Slave_ISR_IT+0xf6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	091b      	lsrs	r3, r3, #4
 800249a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d047      	beq.n	8002532 <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024a6:	b29b      	uxth	r3, r3
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d128      	bne.n	80024fe <I2C_Slave_ISR_IT+0xc2>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80024b2:	b2db      	uxtb	r3, r3
 80024b4:	2b28      	cmp	r3, #40	@ 0x28
 80024b6:	d108      	bne.n	80024ca <I2C_Slave_ISR_IT+0x8e>
 80024b8:	697b      	ldr	r3, [r7, #20]
 80024ba:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80024be:	d104      	bne.n	80024ca <I2C_Slave_ISR_IT+0x8e>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80024c0:	6939      	ldr	r1, [r7, #16]
 80024c2:	68f8      	ldr	r0, [r7, #12]
 80024c4:	f000 fb0a 	bl	8002adc <I2C_ITListenCplt>
 80024c8:	e032      	b.n	8002530 <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80024d0:	b2db      	uxtb	r3, r3
 80024d2:	2b29      	cmp	r3, #41	@ 0x29
 80024d4:	d10e      	bne.n	80024f4 <I2C_Slave_ISR_IT+0xb8>
 80024d6:	697b      	ldr	r3, [r7, #20]
 80024d8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80024dc:	d00a      	beq.n	80024f4 <I2C_Slave_ISR_IT+0xb8>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	2210      	movs	r2, #16
 80024e4:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80024e6:	68f8      	ldr	r0, [r7, #12]
 80024e8:	f000 fc65 	bl	8002db6 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80024ec:	68f8      	ldr	r0, [r7, #12]
 80024ee:	f000 f92d 	bl	800274c <I2C_ITSlaveSeqCplt>
 80024f2:	e01d      	b.n	8002530 <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	2210      	movs	r2, #16
 80024fa:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80024fc:	e096      	b.n	800262c <I2C_Slave_ISR_IT+0x1f0>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	2210      	movs	r2, #16
 8002504:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800250a:	f043 0204 	orr.w	r2, r3, #4
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002512:	697b      	ldr	r3, [r7, #20]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d004      	beq.n	8002522 <I2C_Slave_ISR_IT+0xe6>
 8002518:	697b      	ldr	r3, [r7, #20]
 800251a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800251e:	f040 8085 	bne.w	800262c <I2C_Slave_ISR_IT+0x1f0>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002526:	4619      	mov	r1, r3
 8002528:	68f8      	ldr	r0, [r7, #12]
 800252a:	f000 fb2d 	bl	8002b88 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800252e:	e07d      	b.n	800262c <I2C_Slave_ISR_IT+0x1f0>
 8002530:	e07c      	b.n	800262c <I2C_Slave_ISR_IT+0x1f0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002532:	693b      	ldr	r3, [r7, #16]
 8002534:	089b      	lsrs	r3, r3, #2
 8002536:	f003 0301 	and.w	r3, r3, #1
 800253a:	2b00      	cmp	r3, #0
 800253c:	d030      	beq.n	80025a0 <I2C_Slave_ISR_IT+0x164>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	089b      	lsrs	r3, r3, #2
 8002542:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002546:	2b00      	cmp	r3, #0
 8002548:	d02a      	beq.n	80025a0 <I2C_Slave_ISR_IT+0x164>
  {
    if (hi2c->XferCount > 0U)
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800254e:	b29b      	uxth	r3, r3
 8002550:	2b00      	cmp	r3, #0
 8002552:	d018      	beq.n	8002586 <I2C_Slave_ISR_IT+0x14a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800255e:	b2d2      	uxtb	r2, r2
 8002560:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002566:	1c5a      	adds	r2, r3, #1
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002570:	3b01      	subs	r3, #1
 8002572:	b29a      	uxth	r2, r3
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800257c:	b29b      	uxth	r3, r3
 800257e:	3b01      	subs	r3, #1
 8002580:	b29a      	uxth	r2, r3
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800258a:	b29b      	uxth	r3, r3
 800258c:	2b00      	cmp	r3, #0
 800258e:	d14f      	bne.n	8002630 <I2C_Slave_ISR_IT+0x1f4>
 8002590:	697b      	ldr	r3, [r7, #20]
 8002592:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002596:	d04b      	beq.n	8002630 <I2C_Slave_ISR_IT+0x1f4>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8002598:	68f8      	ldr	r0, [r7, #12]
 800259a:	f000 f8d7 	bl	800274c <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800259e:	e047      	b.n	8002630 <I2C_Slave_ISR_IT+0x1f4>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80025a0:	693b      	ldr	r3, [r7, #16]
 80025a2:	08db      	lsrs	r3, r3, #3
 80025a4:	f003 0301 	and.w	r3, r3, #1
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d00a      	beq.n	80025c2 <I2C_Slave_ISR_IT+0x186>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	08db      	lsrs	r3, r3, #3
 80025b0:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d004      	beq.n	80025c2 <I2C_Slave_ISR_IT+0x186>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80025b8:	6939      	ldr	r1, [r7, #16]
 80025ba:	68f8      	ldr	r0, [r7, #12]
 80025bc:	f000 f842 	bl	8002644 <I2C_ITAddrCplt>
 80025c0:	e037      	b.n	8002632 <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80025c2:	693b      	ldr	r3, [r7, #16]
 80025c4:	085b      	lsrs	r3, r3, #1
 80025c6:	f003 0301 	and.w	r3, r3, #1
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d031      	beq.n	8002632 <I2C_Slave_ISR_IT+0x1f6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	085b      	lsrs	r3, r3, #1
 80025d2:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d02b      	beq.n	8002632 <I2C_Slave_ISR_IT+0x1f6>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025de:	b29b      	uxth	r3, r3
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d018      	beq.n	8002616 <I2C_Slave_ISR_IT+0x1da>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025e8:	781a      	ldrb	r2, [r3, #0]
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025f4:	1c5a      	adds	r2, r3, #1
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025fe:	b29b      	uxth	r3, r3
 8002600:	3b01      	subs	r3, #1
 8002602:	b29a      	uxth	r2, r3
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800260c:	3b01      	subs	r3, #1
 800260e:	b29a      	uxth	r2, r3
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	851a      	strh	r2, [r3, #40]	@ 0x28
 8002614:	e00d      	b.n	8002632 <I2C_Slave_ISR_IT+0x1f6>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8002616:	697b      	ldr	r3, [r7, #20]
 8002618:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800261c:	d002      	beq.n	8002624 <I2C_Slave_ISR_IT+0x1e8>
 800261e:	697b      	ldr	r3, [r7, #20]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d106      	bne.n	8002632 <I2C_Slave_ISR_IT+0x1f6>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002624:	68f8      	ldr	r0, [r7, #12]
 8002626:	f000 f891 	bl	800274c <I2C_ITSlaveSeqCplt>
 800262a:	e002      	b.n	8002632 <I2C_Slave_ISR_IT+0x1f6>
    if (hi2c->XferCount == 0U)
 800262c:	bf00      	nop
 800262e:	e000      	b.n	8002632 <I2C_Slave_ISR_IT+0x1f6>
    if ((hi2c->XferCount == 0U) && \
 8002630:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	2200      	movs	r2, #0
 8002636:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800263a:	2300      	movs	r3, #0
}
 800263c:	4618      	mov	r0, r3
 800263e:	3718      	adds	r7, #24
 8002640:	46bd      	mov	sp, r7
 8002642:	bd80      	pop	{r7, pc}

08002644 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b084      	sub	sp, #16
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
 800264c:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002654:	b2db      	uxtb	r3, r3
 8002656:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800265a:	2b28      	cmp	r3, #40	@ 0x28
 800265c:	d16a      	bne.n	8002734 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	699b      	ldr	r3, [r3, #24]
 8002664:	0c1b      	lsrs	r3, r3, #16
 8002666:	b2db      	uxtb	r3, r3
 8002668:	f003 0301 	and.w	r3, r3, #1
 800266c:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	699b      	ldr	r3, [r3, #24]
 8002674:	0c1b      	lsrs	r3, r3, #16
 8002676:	b29b      	uxth	r3, r3
 8002678:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 800267c:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	689b      	ldr	r3, [r3, #8]
 8002684:	b29b      	uxth	r3, r3
 8002686:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800268a:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	68db      	ldr	r3, [r3, #12]
 8002692:	b29b      	uxth	r3, r3
 8002694:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8002698:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	68db      	ldr	r3, [r3, #12]
 800269e:	2b02      	cmp	r3, #2
 80026a0:	d138      	bne.n	8002714 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 80026a2:	897b      	ldrh	r3, [r7, #10]
 80026a4:	09db      	lsrs	r3, r3, #7
 80026a6:	b29a      	uxth	r2, r3
 80026a8:	89bb      	ldrh	r3, [r7, #12]
 80026aa:	4053      	eors	r3, r2
 80026ac:	b29b      	uxth	r3, r3
 80026ae:	f003 0306 	and.w	r3, r3, #6
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d11c      	bne.n	80026f0 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 80026b6:	897b      	ldrh	r3, [r7, #10]
 80026b8:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80026be:	1c5a      	adds	r2, r3, #1
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80026c8:	2b02      	cmp	r3, #2
 80026ca:	d13b      	bne.n	8002744 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2200      	movs	r2, #0
 80026d0:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	2208      	movs	r2, #8
 80026d8:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2200      	movs	r2, #0
 80026de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80026e2:	89ba      	ldrh	r2, [r7, #12]
 80026e4:	7bfb      	ldrb	r3, [r7, #15]
 80026e6:	4619      	mov	r1, r3
 80026e8:	6878      	ldr	r0, [r7, #4]
 80026ea:	f7ff fe7b 	bl	80023e4 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80026ee:	e029      	b.n	8002744 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 80026f0:	893b      	ldrh	r3, [r7, #8]
 80026f2:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80026f4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80026f8:	6878      	ldr	r0, [r7, #4]
 80026fa:	f000 fd61 	bl	80031c0 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2200      	movs	r2, #0
 8002702:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002706:	89ba      	ldrh	r2, [r7, #12]
 8002708:	7bfb      	ldrb	r3, [r7, #15]
 800270a:	4619      	mov	r1, r3
 800270c:	6878      	ldr	r0, [r7, #4]
 800270e:	f7ff fe69 	bl	80023e4 <HAL_I2C_AddrCallback>
}
 8002712:	e017      	b.n	8002744 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002714:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002718:	6878      	ldr	r0, [r7, #4]
 800271a:	f000 fd51 	bl	80031c0 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2200      	movs	r2, #0
 8002722:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002726:	89ba      	ldrh	r2, [r7, #12]
 8002728:	7bfb      	ldrb	r3, [r7, #15]
 800272a:	4619      	mov	r1, r3
 800272c:	6878      	ldr	r0, [r7, #4]
 800272e:	f7ff fe59 	bl	80023e4 <HAL_I2C_AddrCallback>
}
 8002732:	e007      	b.n	8002744 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	2208      	movs	r2, #8
 800273a:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2200      	movs	r2, #0
 8002740:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 8002744:	bf00      	nop
 8002746:	3710      	adds	r7, #16
 8002748:	46bd      	mov	sp, r7
 800274a:	bd80      	pop	{r7, pc}

0800274c <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b084      	sub	sp, #16
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2200      	movs	r2, #0
 8002760:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	0b9b      	lsrs	r3, r3, #14
 8002768:	f003 0301 	and.w	r3, r3, #1
 800276c:	2b00      	cmp	r3, #0
 800276e:	d008      	beq.n	8002782 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	681a      	ldr	r2, [r3, #0]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800277e:	601a      	str	r2, [r3, #0]
 8002780:	e00d      	b.n	800279e <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	0bdb      	lsrs	r3, r3, #15
 8002786:	f003 0301 	and.w	r3, r3, #1
 800278a:	2b00      	cmp	r3, #0
 800278c:	d007      	beq.n	800279e <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	681a      	ldr	r2, [r3, #0]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800279c:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80027a4:	b2db      	uxtb	r3, r3
 80027a6:	2b29      	cmp	r3, #41	@ 0x29
 80027a8:	d112      	bne.n	80027d0 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2228      	movs	r2, #40	@ 0x28
 80027ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2221      	movs	r2, #33	@ 0x21
 80027b6:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80027b8:	2101      	movs	r1, #1
 80027ba:	6878      	ldr	r0, [r7, #4]
 80027bc:	f000 fd00 	bl	80031c0 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2200      	movs	r2, #0
 80027c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80027c8:	6878      	ldr	r0, [r7, #4]
 80027ca:	f7ff fdf7 	bl	80023bc <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80027ce:	e017      	b.n	8002800 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80027d6:	b2db      	uxtb	r3, r3
 80027d8:	2b2a      	cmp	r3, #42	@ 0x2a
 80027da:	d111      	bne.n	8002800 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2228      	movs	r2, #40	@ 0x28
 80027e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2222      	movs	r2, #34	@ 0x22
 80027e8:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80027ea:	2102      	movs	r1, #2
 80027ec:	6878      	ldr	r0, [r7, #4]
 80027ee:	f000 fce7 	bl	80031c0 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2200      	movs	r2, #0
 80027f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80027fa:	6878      	ldr	r0, [r7, #4]
 80027fc:	f7ff fde8 	bl	80023d0 <HAL_I2C_SlaveRxCpltCallback>
}
 8002800:	bf00      	nop
 8002802:	3710      	adds	r7, #16
 8002804:	46bd      	mov	sp, r7
 8002806:	bd80      	pop	{r7, pc}

08002808 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b086      	sub	sp, #24
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
 8002810:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002822:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800282a:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	2220      	movs	r2, #32
 8002832:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002834:	7afb      	ldrb	r3, [r7, #11]
 8002836:	2b21      	cmp	r3, #33	@ 0x21
 8002838:	d002      	beq.n	8002840 <I2C_ITSlaveCplt+0x38>
 800283a:	7afb      	ldrb	r3, [r7, #11]
 800283c:	2b29      	cmp	r3, #41	@ 0x29
 800283e:	d108      	bne.n	8002852 <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8002840:	f248 0101 	movw	r1, #32769	@ 0x8001
 8002844:	6878      	ldr	r0, [r7, #4]
 8002846:	f000 fcbb 	bl	80031c0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2221      	movs	r2, #33	@ 0x21
 800284e:	631a      	str	r2, [r3, #48]	@ 0x30
 8002850:	e019      	b.n	8002886 <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002852:	7afb      	ldrb	r3, [r7, #11]
 8002854:	2b22      	cmp	r3, #34	@ 0x22
 8002856:	d002      	beq.n	800285e <I2C_ITSlaveCplt+0x56>
 8002858:	7afb      	ldrb	r3, [r7, #11]
 800285a:	2b2a      	cmp	r3, #42	@ 0x2a
 800285c:	d108      	bne.n	8002870 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800285e:	f248 0102 	movw	r1, #32770	@ 0x8002
 8002862:	6878      	ldr	r0, [r7, #4]
 8002864:	f000 fcac 	bl	80031c0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2222      	movs	r2, #34	@ 0x22
 800286c:	631a      	str	r2, [r3, #48]	@ 0x30
 800286e:	e00a      	b.n	8002886 <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8002870:	7afb      	ldrb	r3, [r7, #11]
 8002872:	2b28      	cmp	r3, #40	@ 0x28
 8002874:	d107      	bne.n	8002886 <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8002876:	f248 0103 	movw	r1, #32771	@ 0x8003
 800287a:	6878      	ldr	r0, [r7, #4]
 800287c:	f000 fca0 	bl	80031c0 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2200      	movs	r2, #0
 8002884:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	685a      	ldr	r2, [r3, #4]
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002894:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	6859      	ldr	r1, [r3, #4]
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681a      	ldr	r2, [r3, #0]
 80028a0:	4b8c      	ldr	r3, [pc, #560]	@ (8002ad4 <I2C_ITSlaveCplt+0x2cc>)
 80028a2:	400b      	ands	r3, r1
 80028a4:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80028a6:	6878      	ldr	r0, [r7, #4]
 80028a8:	f000 fa85 	bl	8002db6 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80028ac:	693b      	ldr	r3, [r7, #16]
 80028ae:	0b9b      	lsrs	r3, r3, #14
 80028b0:	f003 0301 	and.w	r3, r3, #1
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d013      	beq.n	80028e0 <I2C_ITSlaveCplt+0xd8>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	681a      	ldr	r2, [r3, #0]
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80028c6:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d020      	beq.n	8002912 <I2C_ITSlaveCplt+0x10a>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	b29a      	uxth	r2, r3
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80028de:	e018      	b.n	8002912 <I2C_ITSlaveCplt+0x10a>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80028e0:	693b      	ldr	r3, [r7, #16]
 80028e2:	0bdb      	lsrs	r3, r3, #15
 80028e4:	f003 0301 	and.w	r3, r3, #1
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d012      	beq.n	8002912 <I2C_ITSlaveCplt+0x10a>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	681a      	ldr	r2, [r3, #0]
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80028fa:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002900:	2b00      	cmp	r3, #0
 8002902:	d006      	beq.n	8002912 <I2C_ITSlaveCplt+0x10a>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	b29a      	uxth	r2, r3
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8002912:	697b      	ldr	r3, [r7, #20]
 8002914:	089b      	lsrs	r3, r3, #2
 8002916:	f003 0301 	and.w	r3, r3, #1
 800291a:	2b00      	cmp	r3, #0
 800291c:	d020      	beq.n	8002960 <I2C_ITSlaveCplt+0x158>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800291e:	697b      	ldr	r3, [r7, #20]
 8002920:	f023 0304 	bic.w	r3, r3, #4
 8002924:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002930:	b2d2      	uxtb	r2, r2
 8002932:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002938:	1c5a      	adds	r2, r3, #1
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	625a      	str	r2, [r3, #36]	@ 0x24

    if (hi2c->XferSize > 0U)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002942:	2b00      	cmp	r3, #0
 8002944:	d00c      	beq.n	8002960 <I2C_ITSlaveCplt+0x158>
    {
      hi2c->XferSize--;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800294a:	3b01      	subs	r3, #1
 800294c:	b29a      	uxth	r2, r3
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002956:	b29b      	uxth	r3, r3
 8002958:	3b01      	subs	r3, #1
 800295a:	b29a      	uxth	r2, r3
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002964:	b29b      	uxth	r3, r3
 8002966:	2b00      	cmp	r3, #0
 8002968:	d005      	beq.n	8002976 <I2C_ITSlaveCplt+0x16e>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800296e:	f043 0204 	orr.w	r2, r3, #4
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002976:	697b      	ldr	r3, [r7, #20]
 8002978:	091b      	lsrs	r3, r3, #4
 800297a:	f003 0301 	and.w	r3, r3, #1
 800297e:	2b00      	cmp	r3, #0
 8002980:	d04a      	beq.n	8002a18 <I2C_ITSlaveCplt+0x210>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8002982:	693b      	ldr	r3, [r7, #16]
 8002984:	091b      	lsrs	r3, r3, #4
 8002986:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800298a:	2b00      	cmp	r3, #0
 800298c:	d044      	beq.n	8002a18 <I2C_ITSlaveCplt+0x210>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002992:	b29b      	uxth	r3, r3
 8002994:	2b00      	cmp	r3, #0
 8002996:	d128      	bne.n	80029ea <I2C_ITSlaveCplt+0x1e2>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800299e:	b2db      	uxtb	r3, r3
 80029a0:	2b28      	cmp	r3, #40	@ 0x28
 80029a2:	d108      	bne.n	80029b6 <I2C_ITSlaveCplt+0x1ae>
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80029aa:	d104      	bne.n	80029b6 <I2C_ITSlaveCplt+0x1ae>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80029ac:	6979      	ldr	r1, [r7, #20]
 80029ae:	6878      	ldr	r0, [r7, #4]
 80029b0:	f000 f894 	bl	8002adc <I2C_ITListenCplt>
 80029b4:	e030      	b.n	8002a18 <I2C_ITSlaveCplt+0x210>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80029bc:	b2db      	uxtb	r3, r3
 80029be:	2b29      	cmp	r3, #41	@ 0x29
 80029c0:	d10e      	bne.n	80029e0 <I2C_ITSlaveCplt+0x1d8>
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80029c8:	d00a      	beq.n	80029e0 <I2C_ITSlaveCplt+0x1d8>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	2210      	movs	r2, #16
 80029d0:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80029d2:	6878      	ldr	r0, [r7, #4]
 80029d4:	f000 f9ef 	bl	8002db6 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80029d8:	6878      	ldr	r0, [r7, #4]
 80029da:	f7ff feb7 	bl	800274c <I2C_ITSlaveSeqCplt>
 80029de:	e01b      	b.n	8002a18 <I2C_ITSlaveCplt+0x210>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	2210      	movs	r2, #16
 80029e6:	61da      	str	r2, [r3, #28]
 80029e8:	e016      	b.n	8002a18 <I2C_ITSlaveCplt+0x210>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	2210      	movs	r2, #16
 80029f0:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029f6:	f043 0204 	orr.w	r2, r3, #4
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d003      	beq.n	8002a0c <I2C_ITSlaveCplt+0x204>
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002a0a:	d105      	bne.n	8002a18 <I2C_ITSlaveCplt+0x210>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a10:	4619      	mov	r1, r3
 8002a12:	6878      	ldr	r0, [r7, #4]
 8002a14:	f000 f8b8 	bl	8002b88 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2200      	movs	r2, #0
 8002a24:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d010      	beq.n	8002a50 <I2C_ITSlaveCplt+0x248>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a32:	4619      	mov	r1, r3
 8002a34:	6878      	ldr	r0, [r7, #4]
 8002a36:	f000 f8a7 	bl	8002b88 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a40:	b2db      	uxtb	r3, r3
 8002a42:	2b28      	cmp	r3, #40	@ 0x28
 8002a44:	d141      	bne.n	8002aca <I2C_ITSlaveCplt+0x2c2>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8002a46:	6979      	ldr	r1, [r7, #20]
 8002a48:	6878      	ldr	r0, [r7, #4]
 8002a4a:	f000 f847 	bl	8002adc <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002a4e:	e03c      	b.n	8002aca <I2C_ITSlaveCplt+0x2c2>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a54:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002a58:	d014      	beq.n	8002a84 <I2C_ITSlaveCplt+0x27c>
    I2C_ITSlaveSeqCplt(hi2c);
 8002a5a:	6878      	ldr	r0, [r7, #4]
 8002a5c:	f7ff fe76 	bl	800274c <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	4a1d      	ldr	r2, [pc, #116]	@ (8002ad8 <I2C_ITSlaveCplt+0x2d0>)
 8002a64:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2220      	movs	r2, #32
 8002a6a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2200      	movs	r2, #0
 8002a72:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2200      	movs	r2, #0
 8002a78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8002a7c:	6878      	ldr	r0, [r7, #4]
 8002a7e:	f7ff fcbf 	bl	8002400 <HAL_I2C_ListenCpltCallback>
}
 8002a82:	e022      	b.n	8002aca <I2C_ITSlaveCplt+0x2c2>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a8a:	b2db      	uxtb	r3, r3
 8002a8c:	2b22      	cmp	r3, #34	@ 0x22
 8002a8e:	d10e      	bne.n	8002aae <I2C_ITSlaveCplt+0x2a6>
    hi2c->State = HAL_I2C_STATE_READY;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2220      	movs	r2, #32
 8002a94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002aa6:	6878      	ldr	r0, [r7, #4]
 8002aa8:	f7ff fc92 	bl	80023d0 <HAL_I2C_SlaveRxCpltCallback>
}
 8002aac:	e00d      	b.n	8002aca <I2C_ITSlaveCplt+0x2c2>
    hi2c->State = HAL_I2C_STATE_READY;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2220      	movs	r2, #32
 8002ab2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2200      	movs	r2, #0
 8002aba:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2200      	movs	r2, #0
 8002ac0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002ac4:	6878      	ldr	r0, [r7, #4]
 8002ac6:	f7ff fc79 	bl	80023bc <HAL_I2C_SlaveTxCpltCallback>
}
 8002aca:	bf00      	nop
 8002acc:	3718      	adds	r7, #24
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}
 8002ad2:	bf00      	nop
 8002ad4:	fe00e800 	.word	0xfe00e800
 8002ad8:	ffff0000 	.word	0xffff0000

08002adc <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b082      	sub	sp, #8
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
 8002ae4:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	4a26      	ldr	r2, [pc, #152]	@ (8002b84 <I2C_ITListenCplt+0xa8>)
 8002aea:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2200      	movs	r2, #0
 8002af0:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2220      	movs	r2, #32
 8002af6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2200      	movs	r2, #0
 8002afe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2200      	movs	r2, #0
 8002b06:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	089b      	lsrs	r3, r3, #2
 8002b0c:	f003 0301 	and.w	r3, r3, #1
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d022      	beq.n	8002b5a <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b1e:	b2d2      	uxtb	r2, r2
 8002b20:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b26:	1c5a      	adds	r2, r3, #1
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	625a      	str	r2, [r3, #36]	@ 0x24

    if (hi2c->XferSize > 0U)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d012      	beq.n	8002b5a <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b38:	3b01      	subs	r3, #1
 8002b3a:	b29a      	uxth	r2, r3
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b44:	b29b      	uxth	r3, r3
 8002b46:	3b01      	subs	r3, #1
 8002b48:	b29a      	uxth	r2, r3
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b52:	f043 0204 	orr.w	r2, r3, #4
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002b5a:	f248 0103 	movw	r1, #32771	@ 0x8003
 8002b5e:	6878      	ldr	r0, [r7, #4]
 8002b60:	f000 fb2e 	bl	80031c0 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	2210      	movs	r2, #16
 8002b6a:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2200      	movs	r2, #0
 8002b70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8002b74:	6878      	ldr	r0, [r7, #4]
 8002b76:	f7ff fc43 	bl	8002400 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8002b7a:	bf00      	nop
 8002b7c:	3708      	adds	r7, #8
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd80      	pop	{r7, pc}
 8002b82:	bf00      	nop
 8002b84:	ffff0000 	.word	0xffff0000

08002b88 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b084      	sub	sp, #16
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
 8002b90:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b98:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	4a6d      	ldr	r2, [pc, #436]	@ (8002d5c <I2C_ITError+0x1d4>)
 8002ba6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2200      	movs	r2, #0
 8002bac:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	431a      	orrs	r2, r3
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8002bba:	7bfb      	ldrb	r3, [r7, #15]
 8002bbc:	2b28      	cmp	r3, #40	@ 0x28
 8002bbe:	d005      	beq.n	8002bcc <I2C_ITError+0x44>
 8002bc0:	7bfb      	ldrb	r3, [r7, #15]
 8002bc2:	2b29      	cmp	r3, #41	@ 0x29
 8002bc4:	d002      	beq.n	8002bcc <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8002bc6:	7bfb      	ldrb	r3, [r7, #15]
 8002bc8:	2b2a      	cmp	r3, #42	@ 0x2a
 8002bca:	d10b      	bne.n	8002be4 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002bcc:	2103      	movs	r1, #3
 8002bce:	6878      	ldr	r0, [r7, #4]
 8002bd0:	f000 faf6 	bl	80031c0 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2228      	movs	r2, #40	@ 0x28
 8002bd8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	4a60      	ldr	r2, [pc, #384]	@ (8002d60 <I2C_ITError+0x1d8>)
 8002be0:	635a      	str	r2, [r3, #52]	@ 0x34
 8002be2:	e030      	b.n	8002c46 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002be4:	f248 0103 	movw	r1, #32771	@ 0x8003
 8002be8:	6878      	ldr	r0, [r7, #4]
 8002bea:	f000 fae9 	bl	80031c0 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002bee:	6878      	ldr	r0, [r7, #4]
 8002bf0:	f000 f8e1 	bl	8002db6 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002bfa:	b2db      	uxtb	r3, r3
 8002bfc:	2b60      	cmp	r3, #96	@ 0x60
 8002bfe:	d01f      	beq.n	8002c40 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2220      	movs	r2, #32
 8002c04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	699b      	ldr	r3, [r3, #24]
 8002c0e:	f003 0320 	and.w	r3, r3, #32
 8002c12:	2b20      	cmp	r3, #32
 8002c14:	d114      	bne.n	8002c40 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	699b      	ldr	r3, [r3, #24]
 8002c1c:	f003 0310 	and.w	r3, r3, #16
 8002c20:	2b10      	cmp	r3, #16
 8002c22:	d109      	bne.n	8002c38 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	2210      	movs	r2, #16
 8002c2a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c30:	f043 0204 	orr.w	r2, r3, #4
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	2220      	movs	r2, #32
 8002c3e:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2200      	movs	r2, #0
 8002c44:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c4a:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d039      	beq.n	8002cc8 <I2C_ITError+0x140>
 8002c54:	68bb      	ldr	r3, [r7, #8]
 8002c56:	2b11      	cmp	r3, #17
 8002c58:	d002      	beq.n	8002c60 <I2C_ITError+0xd8>
 8002c5a:	68bb      	ldr	r3, [r7, #8]
 8002c5c:	2b21      	cmp	r3, #33	@ 0x21
 8002c5e:	d133      	bne.n	8002cc8 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002c6a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002c6e:	d107      	bne.n	8002c80 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	681a      	ldr	r2, [r3, #0]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002c7e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c84:	4618      	mov	r0, r3
 8002c86:	f7fe ff7b 	bl	8001b80 <HAL_DMA_GetState>
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	2b01      	cmp	r3, #1
 8002c8e:	d017      	beq.n	8002cc0 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c94:	4a33      	ldr	r2, [pc, #204]	@ (8002d64 <I2C_ITError+0x1dc>)
 8002c96:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	f7fe ff49 	bl	8001b3c <HAL_DMA_Abort_IT>
 8002caa:	4603      	mov	r3, r0
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d04d      	beq.n	8002d4c <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cb4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002cb6:	687a      	ldr	r2, [r7, #4]
 8002cb8:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002cba:	4610      	mov	r0, r2
 8002cbc:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002cbe:	e045      	b.n	8002d4c <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8002cc0:	6878      	ldr	r0, [r7, #4]
 8002cc2:	f000 f851 	bl	8002d68 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002cc6:	e041      	b.n	8002d4c <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d039      	beq.n	8002d44 <I2C_ITError+0x1bc>
 8002cd0:	68bb      	ldr	r3, [r7, #8]
 8002cd2:	2b12      	cmp	r3, #18
 8002cd4:	d002      	beq.n	8002cdc <I2C_ITError+0x154>
 8002cd6:	68bb      	ldr	r3, [r7, #8]
 8002cd8:	2b22      	cmp	r3, #34	@ 0x22
 8002cda:	d133      	bne.n	8002d44 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002ce6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002cea:	d107      	bne.n	8002cfc <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	681a      	ldr	r2, [r3, #0]
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002cfa:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d00:	4618      	mov	r0, r3
 8002d02:	f7fe ff3d 	bl	8001b80 <HAL_DMA_GetState>
 8002d06:	4603      	mov	r3, r0
 8002d08:	2b01      	cmp	r3, #1
 8002d0a:	d017      	beq.n	8002d3c <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d10:	4a14      	ldr	r2, [pc, #80]	@ (8002d64 <I2C_ITError+0x1dc>)
 8002d12:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2200      	movs	r2, #0
 8002d18:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d20:	4618      	mov	r0, r3
 8002d22:	f7fe ff0b 	bl	8001b3c <HAL_DMA_Abort_IT>
 8002d26:	4603      	mov	r3, r0
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d011      	beq.n	8002d50 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d30:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d32:	687a      	ldr	r2, [r7, #4]
 8002d34:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002d36:	4610      	mov	r0, r2
 8002d38:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002d3a:	e009      	b.n	8002d50 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8002d3c:	6878      	ldr	r0, [r7, #4]
 8002d3e:	f000 f813 	bl	8002d68 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002d42:	e005      	b.n	8002d50 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8002d44:	6878      	ldr	r0, [r7, #4]
 8002d46:	f000 f80f 	bl	8002d68 <I2C_TreatErrorCallback>
  }
}
 8002d4a:	e002      	b.n	8002d52 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002d4c:	bf00      	nop
 8002d4e:	e000      	b.n	8002d52 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002d50:	bf00      	nop
}
 8002d52:	bf00      	nop
 8002d54:	3710      	adds	r7, #16
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bd80      	pop	{r7, pc}
 8002d5a:	bf00      	nop
 8002d5c:	ffff0000 	.word	0xffff0000
 8002d60:	0800243d 	.word	0x0800243d
 8002d64:	08002dff 	.word	0x08002dff

08002d68 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b082      	sub	sp, #8
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002d76:	b2db      	uxtb	r3, r3
 8002d78:	2b60      	cmp	r3, #96	@ 0x60
 8002d7a:	d10e      	bne.n	8002d9a <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2220      	movs	r2, #32
 8002d80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2200      	movs	r2, #0
 8002d88:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8002d92:	6878      	ldr	r0, [r7, #4]
 8002d94:	f7ff fb48 	bl	8002428 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002d98:	e009      	b.n	8002dae <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2200      	movs	r2, #0
 8002da4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8002da8:	6878      	ldr	r0, [r7, #4]
 8002daa:	f7ff fb33 	bl	8002414 <HAL_I2C_ErrorCallback>
}
 8002dae:	bf00      	nop
 8002db0:	3708      	adds	r7, #8
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bd80      	pop	{r7, pc}

08002db6 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002db6:	b480      	push	{r7}
 8002db8:	b083      	sub	sp, #12
 8002dba:	af00      	add	r7, sp, #0
 8002dbc:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	699b      	ldr	r3, [r3, #24]
 8002dc4:	f003 0302 	and.w	r3, r3, #2
 8002dc8:	2b02      	cmp	r3, #2
 8002dca:	d103      	bne.n	8002dd4 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	699b      	ldr	r3, [r3, #24]
 8002dda:	f003 0301 	and.w	r3, r3, #1
 8002dde:	2b01      	cmp	r3, #1
 8002de0:	d007      	beq.n	8002df2 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	699a      	ldr	r2, [r3, #24]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f042 0201 	orr.w	r2, r2, #1
 8002df0:	619a      	str	r2, [r3, #24]
  }
}
 8002df2:	bf00      	nop
 8002df4:	370c      	adds	r7, #12
 8002df6:	46bd      	mov	sp, r7
 8002df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfc:	4770      	bx	lr

08002dfe <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8002dfe:	b580      	push	{r7, lr}
 8002e00:	b084      	sub	sp, #16
 8002e02:	af00      	add	r7, sp, #0
 8002e04:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e0a:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d003      	beq.n	8002e1c <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e18:	2200      	movs	r2, #0
 8002e1a:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d003      	beq.n	8002e2c <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e28:	2200      	movs	r2, #0
 8002e2a:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 8002e2c:	68f8      	ldr	r0, [r7, #12]
 8002e2e:	f7ff ff9b 	bl	8002d68 <I2C_TreatErrorCallback>
}
 8002e32:	bf00      	nop
 8002e34:	3710      	adds	r7, #16
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bd80      	pop	{r7, pc}

08002e3a <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002e3a:	b580      	push	{r7, lr}
 8002e3c:	b084      	sub	sp, #16
 8002e3e:	af00      	add	r7, sp, #0
 8002e40:	60f8      	str	r0, [r7, #12]
 8002e42:	60b9      	str	r1, [r7, #8]
 8002e44:	603b      	str	r3, [r7, #0]
 8002e46:	4613      	mov	r3, r2
 8002e48:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e4a:	e03b      	b.n	8002ec4 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e4c:	69ba      	ldr	r2, [r7, #24]
 8002e4e:	6839      	ldr	r1, [r7, #0]
 8002e50:	68f8      	ldr	r0, [r7, #12]
 8002e52:	f000 f8d5 	bl	8003000 <I2C_IsErrorOccurred>
 8002e56:	4603      	mov	r3, r0
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d001      	beq.n	8002e60 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	e041      	b.n	8002ee4 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002e66:	d02d      	beq.n	8002ec4 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e68:	f7fe fd7a 	bl	8001960 <HAL_GetTick>
 8002e6c:	4602      	mov	r2, r0
 8002e6e:	69bb      	ldr	r3, [r7, #24]
 8002e70:	1ad3      	subs	r3, r2, r3
 8002e72:	683a      	ldr	r2, [r7, #0]
 8002e74:	429a      	cmp	r2, r3
 8002e76:	d302      	bcc.n	8002e7e <I2C_WaitOnFlagUntilTimeout+0x44>
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d122      	bne.n	8002ec4 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	699a      	ldr	r2, [r3, #24]
 8002e84:	68bb      	ldr	r3, [r7, #8]
 8002e86:	4013      	ands	r3, r2
 8002e88:	68ba      	ldr	r2, [r7, #8]
 8002e8a:	429a      	cmp	r2, r3
 8002e8c:	bf0c      	ite	eq
 8002e8e:	2301      	moveq	r3, #1
 8002e90:	2300      	movne	r3, #0
 8002e92:	b2db      	uxtb	r3, r3
 8002e94:	461a      	mov	r2, r3
 8002e96:	79fb      	ldrb	r3, [r7, #7]
 8002e98:	429a      	cmp	r2, r3
 8002e9a:	d113      	bne.n	8002ec4 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ea0:	f043 0220 	orr.w	r2, r3, #32
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	2220      	movs	r2, #32
 8002eac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	2200      	movs	r2, #0
 8002ebc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	e00f      	b.n	8002ee4 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	699a      	ldr	r2, [r3, #24]
 8002eca:	68bb      	ldr	r3, [r7, #8]
 8002ecc:	4013      	ands	r3, r2
 8002ece:	68ba      	ldr	r2, [r7, #8]
 8002ed0:	429a      	cmp	r2, r3
 8002ed2:	bf0c      	ite	eq
 8002ed4:	2301      	moveq	r3, #1
 8002ed6:	2300      	movne	r3, #0
 8002ed8:	b2db      	uxtb	r3, r3
 8002eda:	461a      	mov	r2, r3
 8002edc:	79fb      	ldrb	r3, [r7, #7]
 8002ede:	429a      	cmp	r2, r3
 8002ee0:	d0b4      	beq.n	8002e4c <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002ee2:	2300      	movs	r3, #0
}
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	3710      	adds	r7, #16
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bd80      	pop	{r7, pc}

08002eec <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b084      	sub	sp, #16
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	60f8      	str	r0, [r7, #12]
 8002ef4:	60b9      	str	r1, [r7, #8]
 8002ef6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002ef8:	e033      	b.n	8002f62 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002efa:	687a      	ldr	r2, [r7, #4]
 8002efc:	68b9      	ldr	r1, [r7, #8]
 8002efe:	68f8      	ldr	r0, [r7, #12]
 8002f00:	f000 f87e 	bl	8003000 <I2C_IsErrorOccurred>
 8002f04:	4603      	mov	r3, r0
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d001      	beq.n	8002f0e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	e031      	b.n	8002f72 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f0e:	68bb      	ldr	r3, [r7, #8]
 8002f10:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002f14:	d025      	beq.n	8002f62 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f16:	f7fe fd23 	bl	8001960 <HAL_GetTick>
 8002f1a:	4602      	mov	r2, r0
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	1ad3      	subs	r3, r2, r3
 8002f20:	68ba      	ldr	r2, [r7, #8]
 8002f22:	429a      	cmp	r2, r3
 8002f24:	d302      	bcc.n	8002f2c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002f26:	68bb      	ldr	r3, [r7, #8]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d11a      	bne.n	8002f62 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	699b      	ldr	r3, [r3, #24]
 8002f32:	f003 0302 	and.w	r3, r3, #2
 8002f36:	2b02      	cmp	r3, #2
 8002f38:	d013      	beq.n	8002f62 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f3e:	f043 0220 	orr.w	r2, r3, #32
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	2220      	movs	r2, #32
 8002f4a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	2200      	movs	r2, #0
 8002f52:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	2200      	movs	r2, #0
 8002f5a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	e007      	b.n	8002f72 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	699b      	ldr	r3, [r3, #24]
 8002f68:	f003 0302 	and.w	r3, r3, #2
 8002f6c:	2b02      	cmp	r3, #2
 8002f6e:	d1c4      	bne.n	8002efa <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002f70:	2300      	movs	r3, #0
}
 8002f72:	4618      	mov	r0, r3
 8002f74:	3710      	adds	r7, #16
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}

08002f7a <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002f7a:	b580      	push	{r7, lr}
 8002f7c:	b084      	sub	sp, #16
 8002f7e:	af00      	add	r7, sp, #0
 8002f80:	60f8      	str	r0, [r7, #12]
 8002f82:	60b9      	str	r1, [r7, #8]
 8002f84:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002f86:	e02f      	b.n	8002fe8 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f88:	687a      	ldr	r2, [r7, #4]
 8002f8a:	68b9      	ldr	r1, [r7, #8]
 8002f8c:	68f8      	ldr	r0, [r7, #12]
 8002f8e:	f000 f837 	bl	8003000 <I2C_IsErrorOccurred>
 8002f92:	4603      	mov	r3, r0
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d001      	beq.n	8002f9c <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002f98:	2301      	movs	r3, #1
 8002f9a:	e02d      	b.n	8002ff8 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f9c:	f7fe fce0 	bl	8001960 <HAL_GetTick>
 8002fa0:	4602      	mov	r2, r0
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	1ad3      	subs	r3, r2, r3
 8002fa6:	68ba      	ldr	r2, [r7, #8]
 8002fa8:	429a      	cmp	r2, r3
 8002faa:	d302      	bcc.n	8002fb2 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002fac:	68bb      	ldr	r3, [r7, #8]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d11a      	bne.n	8002fe8 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	699b      	ldr	r3, [r3, #24]
 8002fb8:	f003 0320 	and.w	r3, r3, #32
 8002fbc:	2b20      	cmp	r3, #32
 8002fbe:	d013      	beq.n	8002fe8 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fc4:	f043 0220 	orr.w	r2, r3, #32
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	2220      	movs	r2, #32
 8002fd0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	2200      	movs	r2, #0
 8002fe0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	e007      	b.n	8002ff8 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	699b      	ldr	r3, [r3, #24]
 8002fee:	f003 0320 	and.w	r3, r3, #32
 8002ff2:	2b20      	cmp	r3, #32
 8002ff4:	d1c8      	bne.n	8002f88 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002ff6:	2300      	movs	r3, #0
}
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	3710      	adds	r7, #16
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	bd80      	pop	{r7, pc}

08003000 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b08a      	sub	sp, #40	@ 0x28
 8003004:	af00      	add	r7, sp, #0
 8003006:	60f8      	str	r0, [r7, #12]
 8003008:	60b9      	str	r1, [r7, #8]
 800300a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800300c:	2300      	movs	r3, #0
 800300e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	699b      	ldr	r3, [r3, #24]
 8003018:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800301a:	2300      	movs	r3, #0
 800301c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003022:	69bb      	ldr	r3, [r7, #24]
 8003024:	f003 0310 	and.w	r3, r3, #16
 8003028:	2b00      	cmp	r3, #0
 800302a:	d068      	beq.n	80030fe <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	2210      	movs	r2, #16
 8003032:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003034:	e049      	b.n	80030ca <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003036:	68bb      	ldr	r3, [r7, #8]
 8003038:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800303c:	d045      	beq.n	80030ca <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800303e:	f7fe fc8f 	bl	8001960 <HAL_GetTick>
 8003042:	4602      	mov	r2, r0
 8003044:	69fb      	ldr	r3, [r7, #28]
 8003046:	1ad3      	subs	r3, r2, r3
 8003048:	68ba      	ldr	r2, [r7, #8]
 800304a:	429a      	cmp	r2, r3
 800304c:	d302      	bcc.n	8003054 <I2C_IsErrorOccurred+0x54>
 800304e:	68bb      	ldr	r3, [r7, #8]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d13a      	bne.n	80030ca <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800305e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003066:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	699b      	ldr	r3, [r3, #24]
 800306e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003072:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003076:	d121      	bne.n	80030bc <I2C_IsErrorOccurred+0xbc>
 8003078:	697b      	ldr	r3, [r7, #20]
 800307a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800307e:	d01d      	beq.n	80030bc <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003080:	7cfb      	ldrb	r3, [r7, #19]
 8003082:	2b20      	cmp	r3, #32
 8003084:	d01a      	beq.n	80030bc <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	685a      	ldr	r2, [r3, #4]
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003094:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003096:	f7fe fc63 	bl	8001960 <HAL_GetTick>
 800309a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800309c:	e00e      	b.n	80030bc <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800309e:	f7fe fc5f 	bl	8001960 <HAL_GetTick>
 80030a2:	4602      	mov	r2, r0
 80030a4:	69fb      	ldr	r3, [r7, #28]
 80030a6:	1ad3      	subs	r3, r2, r3
 80030a8:	2b19      	cmp	r3, #25
 80030aa:	d907      	bls.n	80030bc <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80030ac:	6a3b      	ldr	r3, [r7, #32]
 80030ae:	f043 0320 	orr.w	r3, r3, #32
 80030b2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80030b4:	2301      	movs	r3, #1
 80030b6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80030ba:	e006      	b.n	80030ca <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	699b      	ldr	r3, [r3, #24]
 80030c2:	f003 0320 	and.w	r3, r3, #32
 80030c6:	2b20      	cmp	r3, #32
 80030c8:	d1e9      	bne.n	800309e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	699b      	ldr	r3, [r3, #24]
 80030d0:	f003 0320 	and.w	r3, r3, #32
 80030d4:	2b20      	cmp	r3, #32
 80030d6:	d003      	beq.n	80030e0 <I2C_IsErrorOccurred+0xe0>
 80030d8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d0aa      	beq.n	8003036 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80030e0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d103      	bne.n	80030f0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	2220      	movs	r2, #32
 80030ee:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80030f0:	6a3b      	ldr	r3, [r7, #32]
 80030f2:	f043 0304 	orr.w	r3, r3, #4
 80030f6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80030f8:	2301      	movs	r3, #1
 80030fa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	699b      	ldr	r3, [r3, #24]
 8003104:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003106:	69bb      	ldr	r3, [r7, #24]
 8003108:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800310c:	2b00      	cmp	r3, #0
 800310e:	d00b      	beq.n	8003128 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003110:	6a3b      	ldr	r3, [r7, #32]
 8003112:	f043 0301 	orr.w	r3, r3, #1
 8003116:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003120:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003122:	2301      	movs	r3, #1
 8003124:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003128:	69bb      	ldr	r3, [r7, #24]
 800312a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800312e:	2b00      	cmp	r3, #0
 8003130:	d00b      	beq.n	800314a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003132:	6a3b      	ldr	r3, [r7, #32]
 8003134:	f043 0308 	orr.w	r3, r3, #8
 8003138:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003142:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003144:	2301      	movs	r3, #1
 8003146:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800314a:	69bb      	ldr	r3, [r7, #24]
 800314c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003150:	2b00      	cmp	r3, #0
 8003152:	d00b      	beq.n	800316c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003154:	6a3b      	ldr	r3, [r7, #32]
 8003156:	f043 0302 	orr.w	r3, r3, #2
 800315a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003164:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003166:	2301      	movs	r3, #1
 8003168:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 800316c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003170:	2b00      	cmp	r3, #0
 8003172:	d01c      	beq.n	80031ae <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003174:	68f8      	ldr	r0, [r7, #12]
 8003176:	f7ff fe1e 	bl	8002db6 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	6859      	ldr	r1, [r3, #4]
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681a      	ldr	r2, [r3, #0]
 8003184:	4b0d      	ldr	r3, [pc, #52]	@ (80031bc <I2C_IsErrorOccurred+0x1bc>)
 8003186:	400b      	ands	r3, r1
 8003188:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800318e:	6a3b      	ldr	r3, [r7, #32]
 8003190:	431a      	orrs	r2, r3
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	2220      	movs	r2, #32
 800319a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	2200      	movs	r2, #0
 80031a2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	2200      	movs	r2, #0
 80031aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80031ae:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80031b2:	4618      	mov	r0, r3
 80031b4:	3728      	adds	r7, #40	@ 0x28
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bd80      	pop	{r7, pc}
 80031ba:	bf00      	nop
 80031bc:	fe00e800 	.word	0xfe00e800

080031c0 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80031c0:	b480      	push	{r7}
 80031c2:	b085      	sub	sp, #20
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
 80031c8:	460b      	mov	r3, r1
 80031ca:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80031cc:	2300      	movs	r3, #0
 80031ce:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80031d0:	887b      	ldrh	r3, [r7, #2]
 80031d2:	f003 0301 	and.w	r3, r3, #1
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d00f      	beq.n	80031fa <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 80031e0:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80031e8:	b2db      	uxtb	r3, r3
 80031ea:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80031ee:	2b28      	cmp	r3, #40	@ 0x28
 80031f0:	d003      	beq.n	80031fa <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 80031f8:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80031fa:	887b      	ldrh	r3, [r7, #2]
 80031fc:	f003 0302 	and.w	r3, r3, #2
 8003200:	2b00      	cmp	r3, #0
 8003202:	d00f      	beq.n	8003224 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 800320a:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003212:	b2db      	uxtb	r3, r3
 8003214:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003218:	2b28      	cmp	r3, #40	@ 0x28
 800321a:	d003      	beq.n	8003224 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8003222:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003224:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003228:	2b00      	cmp	r3, #0
 800322a:	da03      	bge.n	8003234 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8003232:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003234:	887b      	ldrh	r3, [r7, #2]
 8003236:	2b10      	cmp	r3, #16
 8003238:	d103      	bne.n	8003242 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8003240:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003242:	887b      	ldrh	r3, [r7, #2]
 8003244:	2b20      	cmp	r3, #32
 8003246:	d103      	bne.n	8003250 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	f043 0320 	orr.w	r3, r3, #32
 800324e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8003250:	887b      	ldrh	r3, [r7, #2]
 8003252:	2b40      	cmp	r3, #64	@ 0x40
 8003254:	d103      	bne.n	800325e <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800325c:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	6819      	ldr	r1, [r3, #0]
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	43da      	mvns	r2, r3
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	400a      	ands	r2, r1
 800326e:	601a      	str	r2, [r3, #0]
}
 8003270:	bf00      	nop
 8003272:	3714      	adds	r7, #20
 8003274:	46bd      	mov	sp, r7
 8003276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327a:	4770      	bx	lr

0800327c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800327c:	b480      	push	{r7}
 800327e:	b083      	sub	sp, #12
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
 8003284:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800328c:	b2db      	uxtb	r3, r3
 800328e:	2b20      	cmp	r3, #32
 8003290:	d138      	bne.n	8003304 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003298:	2b01      	cmp	r3, #1
 800329a:	d101      	bne.n	80032a0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800329c:	2302      	movs	r3, #2
 800329e:	e032      	b.n	8003306 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2201      	movs	r2, #1
 80032a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2224      	movs	r2, #36	@ 0x24
 80032ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	681a      	ldr	r2, [r3, #0]
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f022 0201 	bic.w	r2, r2, #1
 80032be:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	681a      	ldr	r2, [r3, #0]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80032ce:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	6819      	ldr	r1, [r3, #0]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	683a      	ldr	r2, [r7, #0]
 80032dc:	430a      	orrs	r2, r1
 80032de:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	681a      	ldr	r2, [r3, #0]
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f042 0201 	orr.w	r2, r2, #1
 80032ee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2220      	movs	r2, #32
 80032f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2200      	movs	r2, #0
 80032fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003300:	2300      	movs	r3, #0
 8003302:	e000      	b.n	8003306 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003304:	2302      	movs	r3, #2
  }
}
 8003306:	4618      	mov	r0, r3
 8003308:	370c      	adds	r7, #12
 800330a:	46bd      	mov	sp, r7
 800330c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003310:	4770      	bx	lr

08003312 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003312:	b480      	push	{r7}
 8003314:	b085      	sub	sp, #20
 8003316:	af00      	add	r7, sp, #0
 8003318:	6078      	str	r0, [r7, #4]
 800331a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003322:	b2db      	uxtb	r3, r3
 8003324:	2b20      	cmp	r3, #32
 8003326:	d139      	bne.n	800339c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800332e:	2b01      	cmp	r3, #1
 8003330:	d101      	bne.n	8003336 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003332:	2302      	movs	r3, #2
 8003334:	e033      	b.n	800339e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2201      	movs	r2, #1
 800333a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2224      	movs	r2, #36	@ 0x24
 8003342:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	681a      	ldr	r2, [r3, #0]
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f022 0201 	bic.w	r2, r2, #1
 8003354:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003364:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	021b      	lsls	r3, r3, #8
 800336a:	68fa      	ldr	r2, [r7, #12]
 800336c:	4313      	orrs	r3, r2
 800336e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	68fa      	ldr	r2, [r7, #12]
 8003376:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	681a      	ldr	r2, [r3, #0]
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f042 0201 	orr.w	r2, r2, #1
 8003386:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2220      	movs	r2, #32
 800338c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2200      	movs	r2, #0
 8003394:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003398:	2300      	movs	r3, #0
 800339a:	e000      	b.n	800339e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800339c:	2302      	movs	r3, #2
  }
}
 800339e:	4618      	mov	r0, r3
 80033a0:	3714      	adds	r7, #20
 80033a2:	46bd      	mov	sp, r7
 80033a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a8:	4770      	bx	lr
	...

080033ac <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b082      	sub	sp, #8
 80033b0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80033b2:	2300      	movs	r3, #0
 80033b4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80033b6:	4b23      	ldr	r3, [pc, #140]	@ (8003444 <HAL_PWREx_EnableOverDrive+0x98>)
 80033b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033ba:	4a22      	ldr	r2, [pc, #136]	@ (8003444 <HAL_PWREx_EnableOverDrive+0x98>)
 80033bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80033c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80033c2:	4b20      	ldr	r3, [pc, #128]	@ (8003444 <HAL_PWREx_EnableOverDrive+0x98>)
 80033c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033ca:	603b      	str	r3, [r7, #0]
 80033cc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80033ce:	4b1e      	ldr	r3, [pc, #120]	@ (8003448 <HAL_PWREx_EnableOverDrive+0x9c>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4a1d      	ldr	r2, [pc, #116]	@ (8003448 <HAL_PWREx_EnableOverDrive+0x9c>)
 80033d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033d8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80033da:	f7fe fac1 	bl	8001960 <HAL_GetTick>
 80033de:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80033e0:	e009      	b.n	80033f6 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80033e2:	f7fe fabd 	bl	8001960 <HAL_GetTick>
 80033e6:	4602      	mov	r2, r0
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	1ad3      	subs	r3, r2, r3
 80033ec:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80033f0:	d901      	bls.n	80033f6 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80033f2:	2303      	movs	r3, #3
 80033f4:	e022      	b.n	800343c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80033f6:	4b14      	ldr	r3, [pc, #80]	@ (8003448 <HAL_PWREx_EnableOverDrive+0x9c>)
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80033fe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003402:	d1ee      	bne.n	80033e2 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003404:	4b10      	ldr	r3, [pc, #64]	@ (8003448 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4a0f      	ldr	r2, [pc, #60]	@ (8003448 <HAL_PWREx_EnableOverDrive+0x9c>)
 800340a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800340e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003410:	f7fe faa6 	bl	8001960 <HAL_GetTick>
 8003414:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003416:	e009      	b.n	800342c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003418:	f7fe faa2 	bl	8001960 <HAL_GetTick>
 800341c:	4602      	mov	r2, r0
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	1ad3      	subs	r3, r2, r3
 8003422:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003426:	d901      	bls.n	800342c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003428:	2303      	movs	r3, #3
 800342a:	e007      	b.n	800343c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800342c:	4b06      	ldr	r3, [pc, #24]	@ (8003448 <HAL_PWREx_EnableOverDrive+0x9c>)
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003434:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003438:	d1ee      	bne.n	8003418 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800343a:	2300      	movs	r3, #0
}
 800343c:	4618      	mov	r0, r3
 800343e:	3708      	adds	r7, #8
 8003440:	46bd      	mov	sp, r7
 8003442:	bd80      	pop	{r7, pc}
 8003444:	40023800 	.word	0x40023800
 8003448:	40007000 	.word	0x40007000

0800344c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b086      	sub	sp, #24
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003454:	2300      	movs	r3, #0
 8003456:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d101      	bne.n	8003462 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800345e:	2301      	movs	r3, #1
 8003460:	e291      	b.n	8003986 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f003 0301 	and.w	r3, r3, #1
 800346a:	2b00      	cmp	r3, #0
 800346c:	f000 8087 	beq.w	800357e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003470:	4b96      	ldr	r3, [pc, #600]	@ (80036cc <HAL_RCC_OscConfig+0x280>)
 8003472:	689b      	ldr	r3, [r3, #8]
 8003474:	f003 030c 	and.w	r3, r3, #12
 8003478:	2b04      	cmp	r3, #4
 800347a:	d00c      	beq.n	8003496 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800347c:	4b93      	ldr	r3, [pc, #588]	@ (80036cc <HAL_RCC_OscConfig+0x280>)
 800347e:	689b      	ldr	r3, [r3, #8]
 8003480:	f003 030c 	and.w	r3, r3, #12
 8003484:	2b08      	cmp	r3, #8
 8003486:	d112      	bne.n	80034ae <HAL_RCC_OscConfig+0x62>
 8003488:	4b90      	ldr	r3, [pc, #576]	@ (80036cc <HAL_RCC_OscConfig+0x280>)
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003490:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003494:	d10b      	bne.n	80034ae <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003496:	4b8d      	ldr	r3, [pc, #564]	@ (80036cc <HAL_RCC_OscConfig+0x280>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d06c      	beq.n	800357c <HAL_RCC_OscConfig+0x130>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d168      	bne.n	800357c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80034aa:	2301      	movs	r3, #1
 80034ac:	e26b      	b.n	8003986 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80034b6:	d106      	bne.n	80034c6 <HAL_RCC_OscConfig+0x7a>
 80034b8:	4b84      	ldr	r3, [pc, #528]	@ (80036cc <HAL_RCC_OscConfig+0x280>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4a83      	ldr	r2, [pc, #524]	@ (80036cc <HAL_RCC_OscConfig+0x280>)
 80034be:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80034c2:	6013      	str	r3, [r2, #0]
 80034c4:	e02e      	b.n	8003524 <HAL_RCC_OscConfig+0xd8>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d10c      	bne.n	80034e8 <HAL_RCC_OscConfig+0x9c>
 80034ce:	4b7f      	ldr	r3, [pc, #508]	@ (80036cc <HAL_RCC_OscConfig+0x280>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4a7e      	ldr	r2, [pc, #504]	@ (80036cc <HAL_RCC_OscConfig+0x280>)
 80034d4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80034d8:	6013      	str	r3, [r2, #0]
 80034da:	4b7c      	ldr	r3, [pc, #496]	@ (80036cc <HAL_RCC_OscConfig+0x280>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4a7b      	ldr	r2, [pc, #492]	@ (80036cc <HAL_RCC_OscConfig+0x280>)
 80034e0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80034e4:	6013      	str	r3, [r2, #0]
 80034e6:	e01d      	b.n	8003524 <HAL_RCC_OscConfig+0xd8>
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80034f0:	d10c      	bne.n	800350c <HAL_RCC_OscConfig+0xc0>
 80034f2:	4b76      	ldr	r3, [pc, #472]	@ (80036cc <HAL_RCC_OscConfig+0x280>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4a75      	ldr	r2, [pc, #468]	@ (80036cc <HAL_RCC_OscConfig+0x280>)
 80034f8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80034fc:	6013      	str	r3, [r2, #0]
 80034fe:	4b73      	ldr	r3, [pc, #460]	@ (80036cc <HAL_RCC_OscConfig+0x280>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4a72      	ldr	r2, [pc, #456]	@ (80036cc <HAL_RCC_OscConfig+0x280>)
 8003504:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003508:	6013      	str	r3, [r2, #0]
 800350a:	e00b      	b.n	8003524 <HAL_RCC_OscConfig+0xd8>
 800350c:	4b6f      	ldr	r3, [pc, #444]	@ (80036cc <HAL_RCC_OscConfig+0x280>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4a6e      	ldr	r2, [pc, #440]	@ (80036cc <HAL_RCC_OscConfig+0x280>)
 8003512:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003516:	6013      	str	r3, [r2, #0]
 8003518:	4b6c      	ldr	r3, [pc, #432]	@ (80036cc <HAL_RCC_OscConfig+0x280>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a6b      	ldr	r2, [pc, #428]	@ (80036cc <HAL_RCC_OscConfig+0x280>)
 800351e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003522:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d013      	beq.n	8003554 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800352c:	f7fe fa18 	bl	8001960 <HAL_GetTick>
 8003530:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003532:	e008      	b.n	8003546 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003534:	f7fe fa14 	bl	8001960 <HAL_GetTick>
 8003538:	4602      	mov	r2, r0
 800353a:	693b      	ldr	r3, [r7, #16]
 800353c:	1ad3      	subs	r3, r2, r3
 800353e:	2b64      	cmp	r3, #100	@ 0x64
 8003540:	d901      	bls.n	8003546 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003542:	2303      	movs	r3, #3
 8003544:	e21f      	b.n	8003986 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003546:	4b61      	ldr	r3, [pc, #388]	@ (80036cc <HAL_RCC_OscConfig+0x280>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800354e:	2b00      	cmp	r3, #0
 8003550:	d0f0      	beq.n	8003534 <HAL_RCC_OscConfig+0xe8>
 8003552:	e014      	b.n	800357e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003554:	f7fe fa04 	bl	8001960 <HAL_GetTick>
 8003558:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800355a:	e008      	b.n	800356e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800355c:	f7fe fa00 	bl	8001960 <HAL_GetTick>
 8003560:	4602      	mov	r2, r0
 8003562:	693b      	ldr	r3, [r7, #16]
 8003564:	1ad3      	subs	r3, r2, r3
 8003566:	2b64      	cmp	r3, #100	@ 0x64
 8003568:	d901      	bls.n	800356e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800356a:	2303      	movs	r3, #3
 800356c:	e20b      	b.n	8003986 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800356e:	4b57      	ldr	r3, [pc, #348]	@ (80036cc <HAL_RCC_OscConfig+0x280>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003576:	2b00      	cmp	r3, #0
 8003578:	d1f0      	bne.n	800355c <HAL_RCC_OscConfig+0x110>
 800357a:	e000      	b.n	800357e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800357c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f003 0302 	and.w	r3, r3, #2
 8003586:	2b00      	cmp	r3, #0
 8003588:	d069      	beq.n	800365e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800358a:	4b50      	ldr	r3, [pc, #320]	@ (80036cc <HAL_RCC_OscConfig+0x280>)
 800358c:	689b      	ldr	r3, [r3, #8]
 800358e:	f003 030c 	and.w	r3, r3, #12
 8003592:	2b00      	cmp	r3, #0
 8003594:	d00b      	beq.n	80035ae <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003596:	4b4d      	ldr	r3, [pc, #308]	@ (80036cc <HAL_RCC_OscConfig+0x280>)
 8003598:	689b      	ldr	r3, [r3, #8]
 800359a:	f003 030c 	and.w	r3, r3, #12
 800359e:	2b08      	cmp	r3, #8
 80035a0:	d11c      	bne.n	80035dc <HAL_RCC_OscConfig+0x190>
 80035a2:	4b4a      	ldr	r3, [pc, #296]	@ (80036cc <HAL_RCC_OscConfig+0x280>)
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d116      	bne.n	80035dc <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035ae:	4b47      	ldr	r3, [pc, #284]	@ (80036cc <HAL_RCC_OscConfig+0x280>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f003 0302 	and.w	r3, r3, #2
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d005      	beq.n	80035c6 <HAL_RCC_OscConfig+0x17a>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	68db      	ldr	r3, [r3, #12]
 80035be:	2b01      	cmp	r3, #1
 80035c0:	d001      	beq.n	80035c6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80035c2:	2301      	movs	r3, #1
 80035c4:	e1df      	b.n	8003986 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035c6:	4b41      	ldr	r3, [pc, #260]	@ (80036cc <HAL_RCC_OscConfig+0x280>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	691b      	ldr	r3, [r3, #16]
 80035d2:	00db      	lsls	r3, r3, #3
 80035d4:	493d      	ldr	r1, [pc, #244]	@ (80036cc <HAL_RCC_OscConfig+0x280>)
 80035d6:	4313      	orrs	r3, r2
 80035d8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035da:	e040      	b.n	800365e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	68db      	ldr	r3, [r3, #12]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d023      	beq.n	800362c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80035e4:	4b39      	ldr	r3, [pc, #228]	@ (80036cc <HAL_RCC_OscConfig+0x280>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4a38      	ldr	r2, [pc, #224]	@ (80036cc <HAL_RCC_OscConfig+0x280>)
 80035ea:	f043 0301 	orr.w	r3, r3, #1
 80035ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035f0:	f7fe f9b6 	bl	8001960 <HAL_GetTick>
 80035f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035f6:	e008      	b.n	800360a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035f8:	f7fe f9b2 	bl	8001960 <HAL_GetTick>
 80035fc:	4602      	mov	r2, r0
 80035fe:	693b      	ldr	r3, [r7, #16]
 8003600:	1ad3      	subs	r3, r2, r3
 8003602:	2b02      	cmp	r3, #2
 8003604:	d901      	bls.n	800360a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003606:	2303      	movs	r3, #3
 8003608:	e1bd      	b.n	8003986 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800360a:	4b30      	ldr	r3, [pc, #192]	@ (80036cc <HAL_RCC_OscConfig+0x280>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f003 0302 	and.w	r3, r3, #2
 8003612:	2b00      	cmp	r3, #0
 8003614:	d0f0      	beq.n	80035f8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003616:	4b2d      	ldr	r3, [pc, #180]	@ (80036cc <HAL_RCC_OscConfig+0x280>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	691b      	ldr	r3, [r3, #16]
 8003622:	00db      	lsls	r3, r3, #3
 8003624:	4929      	ldr	r1, [pc, #164]	@ (80036cc <HAL_RCC_OscConfig+0x280>)
 8003626:	4313      	orrs	r3, r2
 8003628:	600b      	str	r3, [r1, #0]
 800362a:	e018      	b.n	800365e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800362c:	4b27      	ldr	r3, [pc, #156]	@ (80036cc <HAL_RCC_OscConfig+0x280>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a26      	ldr	r2, [pc, #152]	@ (80036cc <HAL_RCC_OscConfig+0x280>)
 8003632:	f023 0301 	bic.w	r3, r3, #1
 8003636:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003638:	f7fe f992 	bl	8001960 <HAL_GetTick>
 800363c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800363e:	e008      	b.n	8003652 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003640:	f7fe f98e 	bl	8001960 <HAL_GetTick>
 8003644:	4602      	mov	r2, r0
 8003646:	693b      	ldr	r3, [r7, #16]
 8003648:	1ad3      	subs	r3, r2, r3
 800364a:	2b02      	cmp	r3, #2
 800364c:	d901      	bls.n	8003652 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800364e:	2303      	movs	r3, #3
 8003650:	e199      	b.n	8003986 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003652:	4b1e      	ldr	r3, [pc, #120]	@ (80036cc <HAL_RCC_OscConfig+0x280>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f003 0302 	and.w	r3, r3, #2
 800365a:	2b00      	cmp	r3, #0
 800365c:	d1f0      	bne.n	8003640 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f003 0308 	and.w	r3, r3, #8
 8003666:	2b00      	cmp	r3, #0
 8003668:	d038      	beq.n	80036dc <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	695b      	ldr	r3, [r3, #20]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d019      	beq.n	80036a6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003672:	4b16      	ldr	r3, [pc, #88]	@ (80036cc <HAL_RCC_OscConfig+0x280>)
 8003674:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003676:	4a15      	ldr	r2, [pc, #84]	@ (80036cc <HAL_RCC_OscConfig+0x280>)
 8003678:	f043 0301 	orr.w	r3, r3, #1
 800367c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800367e:	f7fe f96f 	bl	8001960 <HAL_GetTick>
 8003682:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003684:	e008      	b.n	8003698 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003686:	f7fe f96b 	bl	8001960 <HAL_GetTick>
 800368a:	4602      	mov	r2, r0
 800368c:	693b      	ldr	r3, [r7, #16]
 800368e:	1ad3      	subs	r3, r2, r3
 8003690:	2b02      	cmp	r3, #2
 8003692:	d901      	bls.n	8003698 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003694:	2303      	movs	r3, #3
 8003696:	e176      	b.n	8003986 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003698:	4b0c      	ldr	r3, [pc, #48]	@ (80036cc <HAL_RCC_OscConfig+0x280>)
 800369a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800369c:	f003 0302 	and.w	r3, r3, #2
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d0f0      	beq.n	8003686 <HAL_RCC_OscConfig+0x23a>
 80036a4:	e01a      	b.n	80036dc <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80036a6:	4b09      	ldr	r3, [pc, #36]	@ (80036cc <HAL_RCC_OscConfig+0x280>)
 80036a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80036aa:	4a08      	ldr	r2, [pc, #32]	@ (80036cc <HAL_RCC_OscConfig+0x280>)
 80036ac:	f023 0301 	bic.w	r3, r3, #1
 80036b0:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036b2:	f7fe f955 	bl	8001960 <HAL_GetTick>
 80036b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036b8:	e00a      	b.n	80036d0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036ba:	f7fe f951 	bl	8001960 <HAL_GetTick>
 80036be:	4602      	mov	r2, r0
 80036c0:	693b      	ldr	r3, [r7, #16]
 80036c2:	1ad3      	subs	r3, r2, r3
 80036c4:	2b02      	cmp	r3, #2
 80036c6:	d903      	bls.n	80036d0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80036c8:	2303      	movs	r3, #3
 80036ca:	e15c      	b.n	8003986 <HAL_RCC_OscConfig+0x53a>
 80036cc:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036d0:	4b91      	ldr	r3, [pc, #580]	@ (8003918 <HAL_RCC_OscConfig+0x4cc>)
 80036d2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80036d4:	f003 0302 	and.w	r3, r3, #2
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d1ee      	bne.n	80036ba <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f003 0304 	and.w	r3, r3, #4
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	f000 80a4 	beq.w	8003832 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80036ea:	4b8b      	ldr	r3, [pc, #556]	@ (8003918 <HAL_RCC_OscConfig+0x4cc>)
 80036ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d10d      	bne.n	8003712 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80036f6:	4b88      	ldr	r3, [pc, #544]	@ (8003918 <HAL_RCC_OscConfig+0x4cc>)
 80036f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036fa:	4a87      	ldr	r2, [pc, #540]	@ (8003918 <HAL_RCC_OscConfig+0x4cc>)
 80036fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003700:	6413      	str	r3, [r2, #64]	@ 0x40
 8003702:	4b85      	ldr	r3, [pc, #532]	@ (8003918 <HAL_RCC_OscConfig+0x4cc>)
 8003704:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003706:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800370a:	60bb      	str	r3, [r7, #8]
 800370c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800370e:	2301      	movs	r3, #1
 8003710:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003712:	4b82      	ldr	r3, [pc, #520]	@ (800391c <HAL_RCC_OscConfig+0x4d0>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800371a:	2b00      	cmp	r3, #0
 800371c:	d118      	bne.n	8003750 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800371e:	4b7f      	ldr	r3, [pc, #508]	@ (800391c <HAL_RCC_OscConfig+0x4d0>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	4a7e      	ldr	r2, [pc, #504]	@ (800391c <HAL_RCC_OscConfig+0x4d0>)
 8003724:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003728:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800372a:	f7fe f919 	bl	8001960 <HAL_GetTick>
 800372e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003730:	e008      	b.n	8003744 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003732:	f7fe f915 	bl	8001960 <HAL_GetTick>
 8003736:	4602      	mov	r2, r0
 8003738:	693b      	ldr	r3, [r7, #16]
 800373a:	1ad3      	subs	r3, r2, r3
 800373c:	2b64      	cmp	r3, #100	@ 0x64
 800373e:	d901      	bls.n	8003744 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003740:	2303      	movs	r3, #3
 8003742:	e120      	b.n	8003986 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003744:	4b75      	ldr	r3, [pc, #468]	@ (800391c <HAL_RCC_OscConfig+0x4d0>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800374c:	2b00      	cmp	r3, #0
 800374e:	d0f0      	beq.n	8003732 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	689b      	ldr	r3, [r3, #8]
 8003754:	2b01      	cmp	r3, #1
 8003756:	d106      	bne.n	8003766 <HAL_RCC_OscConfig+0x31a>
 8003758:	4b6f      	ldr	r3, [pc, #444]	@ (8003918 <HAL_RCC_OscConfig+0x4cc>)
 800375a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800375c:	4a6e      	ldr	r2, [pc, #440]	@ (8003918 <HAL_RCC_OscConfig+0x4cc>)
 800375e:	f043 0301 	orr.w	r3, r3, #1
 8003762:	6713      	str	r3, [r2, #112]	@ 0x70
 8003764:	e02d      	b.n	80037c2 <HAL_RCC_OscConfig+0x376>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	689b      	ldr	r3, [r3, #8]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d10c      	bne.n	8003788 <HAL_RCC_OscConfig+0x33c>
 800376e:	4b6a      	ldr	r3, [pc, #424]	@ (8003918 <HAL_RCC_OscConfig+0x4cc>)
 8003770:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003772:	4a69      	ldr	r2, [pc, #420]	@ (8003918 <HAL_RCC_OscConfig+0x4cc>)
 8003774:	f023 0301 	bic.w	r3, r3, #1
 8003778:	6713      	str	r3, [r2, #112]	@ 0x70
 800377a:	4b67      	ldr	r3, [pc, #412]	@ (8003918 <HAL_RCC_OscConfig+0x4cc>)
 800377c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800377e:	4a66      	ldr	r2, [pc, #408]	@ (8003918 <HAL_RCC_OscConfig+0x4cc>)
 8003780:	f023 0304 	bic.w	r3, r3, #4
 8003784:	6713      	str	r3, [r2, #112]	@ 0x70
 8003786:	e01c      	b.n	80037c2 <HAL_RCC_OscConfig+0x376>
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	689b      	ldr	r3, [r3, #8]
 800378c:	2b05      	cmp	r3, #5
 800378e:	d10c      	bne.n	80037aa <HAL_RCC_OscConfig+0x35e>
 8003790:	4b61      	ldr	r3, [pc, #388]	@ (8003918 <HAL_RCC_OscConfig+0x4cc>)
 8003792:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003794:	4a60      	ldr	r2, [pc, #384]	@ (8003918 <HAL_RCC_OscConfig+0x4cc>)
 8003796:	f043 0304 	orr.w	r3, r3, #4
 800379a:	6713      	str	r3, [r2, #112]	@ 0x70
 800379c:	4b5e      	ldr	r3, [pc, #376]	@ (8003918 <HAL_RCC_OscConfig+0x4cc>)
 800379e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037a0:	4a5d      	ldr	r2, [pc, #372]	@ (8003918 <HAL_RCC_OscConfig+0x4cc>)
 80037a2:	f043 0301 	orr.w	r3, r3, #1
 80037a6:	6713      	str	r3, [r2, #112]	@ 0x70
 80037a8:	e00b      	b.n	80037c2 <HAL_RCC_OscConfig+0x376>
 80037aa:	4b5b      	ldr	r3, [pc, #364]	@ (8003918 <HAL_RCC_OscConfig+0x4cc>)
 80037ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037ae:	4a5a      	ldr	r2, [pc, #360]	@ (8003918 <HAL_RCC_OscConfig+0x4cc>)
 80037b0:	f023 0301 	bic.w	r3, r3, #1
 80037b4:	6713      	str	r3, [r2, #112]	@ 0x70
 80037b6:	4b58      	ldr	r3, [pc, #352]	@ (8003918 <HAL_RCC_OscConfig+0x4cc>)
 80037b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037ba:	4a57      	ldr	r2, [pc, #348]	@ (8003918 <HAL_RCC_OscConfig+0x4cc>)
 80037bc:	f023 0304 	bic.w	r3, r3, #4
 80037c0:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	689b      	ldr	r3, [r3, #8]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d015      	beq.n	80037f6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037ca:	f7fe f8c9 	bl	8001960 <HAL_GetTick>
 80037ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037d0:	e00a      	b.n	80037e8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037d2:	f7fe f8c5 	bl	8001960 <HAL_GetTick>
 80037d6:	4602      	mov	r2, r0
 80037d8:	693b      	ldr	r3, [r7, #16]
 80037da:	1ad3      	subs	r3, r2, r3
 80037dc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d901      	bls.n	80037e8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80037e4:	2303      	movs	r3, #3
 80037e6:	e0ce      	b.n	8003986 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037e8:	4b4b      	ldr	r3, [pc, #300]	@ (8003918 <HAL_RCC_OscConfig+0x4cc>)
 80037ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037ec:	f003 0302 	and.w	r3, r3, #2
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d0ee      	beq.n	80037d2 <HAL_RCC_OscConfig+0x386>
 80037f4:	e014      	b.n	8003820 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037f6:	f7fe f8b3 	bl	8001960 <HAL_GetTick>
 80037fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037fc:	e00a      	b.n	8003814 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037fe:	f7fe f8af 	bl	8001960 <HAL_GetTick>
 8003802:	4602      	mov	r2, r0
 8003804:	693b      	ldr	r3, [r7, #16]
 8003806:	1ad3      	subs	r3, r2, r3
 8003808:	f241 3288 	movw	r2, #5000	@ 0x1388
 800380c:	4293      	cmp	r3, r2
 800380e:	d901      	bls.n	8003814 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003810:	2303      	movs	r3, #3
 8003812:	e0b8      	b.n	8003986 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003814:	4b40      	ldr	r3, [pc, #256]	@ (8003918 <HAL_RCC_OscConfig+0x4cc>)
 8003816:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003818:	f003 0302 	and.w	r3, r3, #2
 800381c:	2b00      	cmp	r3, #0
 800381e:	d1ee      	bne.n	80037fe <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003820:	7dfb      	ldrb	r3, [r7, #23]
 8003822:	2b01      	cmp	r3, #1
 8003824:	d105      	bne.n	8003832 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003826:	4b3c      	ldr	r3, [pc, #240]	@ (8003918 <HAL_RCC_OscConfig+0x4cc>)
 8003828:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800382a:	4a3b      	ldr	r2, [pc, #236]	@ (8003918 <HAL_RCC_OscConfig+0x4cc>)
 800382c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003830:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	699b      	ldr	r3, [r3, #24]
 8003836:	2b00      	cmp	r3, #0
 8003838:	f000 80a4 	beq.w	8003984 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800383c:	4b36      	ldr	r3, [pc, #216]	@ (8003918 <HAL_RCC_OscConfig+0x4cc>)
 800383e:	689b      	ldr	r3, [r3, #8]
 8003840:	f003 030c 	and.w	r3, r3, #12
 8003844:	2b08      	cmp	r3, #8
 8003846:	d06b      	beq.n	8003920 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	699b      	ldr	r3, [r3, #24]
 800384c:	2b02      	cmp	r3, #2
 800384e:	d149      	bne.n	80038e4 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003850:	4b31      	ldr	r3, [pc, #196]	@ (8003918 <HAL_RCC_OscConfig+0x4cc>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4a30      	ldr	r2, [pc, #192]	@ (8003918 <HAL_RCC_OscConfig+0x4cc>)
 8003856:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800385a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800385c:	f7fe f880 	bl	8001960 <HAL_GetTick>
 8003860:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003862:	e008      	b.n	8003876 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003864:	f7fe f87c 	bl	8001960 <HAL_GetTick>
 8003868:	4602      	mov	r2, r0
 800386a:	693b      	ldr	r3, [r7, #16]
 800386c:	1ad3      	subs	r3, r2, r3
 800386e:	2b02      	cmp	r3, #2
 8003870:	d901      	bls.n	8003876 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003872:	2303      	movs	r3, #3
 8003874:	e087      	b.n	8003986 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003876:	4b28      	ldr	r3, [pc, #160]	@ (8003918 <HAL_RCC_OscConfig+0x4cc>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800387e:	2b00      	cmp	r3, #0
 8003880:	d1f0      	bne.n	8003864 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	69da      	ldr	r2, [r3, #28]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6a1b      	ldr	r3, [r3, #32]
 800388a:	431a      	orrs	r2, r3
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003890:	019b      	lsls	r3, r3, #6
 8003892:	431a      	orrs	r2, r3
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003898:	085b      	lsrs	r3, r3, #1
 800389a:	3b01      	subs	r3, #1
 800389c:	041b      	lsls	r3, r3, #16
 800389e:	431a      	orrs	r2, r3
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038a4:	061b      	lsls	r3, r3, #24
 80038a6:	4313      	orrs	r3, r2
 80038a8:	4a1b      	ldr	r2, [pc, #108]	@ (8003918 <HAL_RCC_OscConfig+0x4cc>)
 80038aa:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80038ae:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80038b0:	4b19      	ldr	r3, [pc, #100]	@ (8003918 <HAL_RCC_OscConfig+0x4cc>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4a18      	ldr	r2, [pc, #96]	@ (8003918 <HAL_RCC_OscConfig+0x4cc>)
 80038b6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80038ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038bc:	f7fe f850 	bl	8001960 <HAL_GetTick>
 80038c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038c2:	e008      	b.n	80038d6 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038c4:	f7fe f84c 	bl	8001960 <HAL_GetTick>
 80038c8:	4602      	mov	r2, r0
 80038ca:	693b      	ldr	r3, [r7, #16]
 80038cc:	1ad3      	subs	r3, r2, r3
 80038ce:	2b02      	cmp	r3, #2
 80038d0:	d901      	bls.n	80038d6 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80038d2:	2303      	movs	r3, #3
 80038d4:	e057      	b.n	8003986 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038d6:	4b10      	ldr	r3, [pc, #64]	@ (8003918 <HAL_RCC_OscConfig+0x4cc>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d0f0      	beq.n	80038c4 <HAL_RCC_OscConfig+0x478>
 80038e2:	e04f      	b.n	8003984 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038e4:	4b0c      	ldr	r3, [pc, #48]	@ (8003918 <HAL_RCC_OscConfig+0x4cc>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4a0b      	ldr	r2, [pc, #44]	@ (8003918 <HAL_RCC_OscConfig+0x4cc>)
 80038ea:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80038ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038f0:	f7fe f836 	bl	8001960 <HAL_GetTick>
 80038f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038f6:	e008      	b.n	800390a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038f8:	f7fe f832 	bl	8001960 <HAL_GetTick>
 80038fc:	4602      	mov	r2, r0
 80038fe:	693b      	ldr	r3, [r7, #16]
 8003900:	1ad3      	subs	r3, r2, r3
 8003902:	2b02      	cmp	r3, #2
 8003904:	d901      	bls.n	800390a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8003906:	2303      	movs	r3, #3
 8003908:	e03d      	b.n	8003986 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800390a:	4b03      	ldr	r3, [pc, #12]	@ (8003918 <HAL_RCC_OscConfig+0x4cc>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003912:	2b00      	cmp	r3, #0
 8003914:	d1f0      	bne.n	80038f8 <HAL_RCC_OscConfig+0x4ac>
 8003916:	e035      	b.n	8003984 <HAL_RCC_OscConfig+0x538>
 8003918:	40023800 	.word	0x40023800
 800391c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003920:	4b1b      	ldr	r3, [pc, #108]	@ (8003990 <HAL_RCC_OscConfig+0x544>)
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	699b      	ldr	r3, [r3, #24]
 800392a:	2b01      	cmp	r3, #1
 800392c:	d028      	beq.n	8003980 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003938:	429a      	cmp	r2, r3
 800393a:	d121      	bne.n	8003980 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003946:	429a      	cmp	r2, r3
 8003948:	d11a      	bne.n	8003980 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800394a:	68fa      	ldr	r2, [r7, #12]
 800394c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003950:	4013      	ands	r3, r2
 8003952:	687a      	ldr	r2, [r7, #4]
 8003954:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003956:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003958:	4293      	cmp	r3, r2
 800395a:	d111      	bne.n	8003980 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003966:	085b      	lsrs	r3, r3, #1
 8003968:	3b01      	subs	r3, #1
 800396a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800396c:	429a      	cmp	r2, r3
 800396e:	d107      	bne.n	8003980 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800397a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800397c:	429a      	cmp	r2, r3
 800397e:	d001      	beq.n	8003984 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8003980:	2301      	movs	r3, #1
 8003982:	e000      	b.n	8003986 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8003984:	2300      	movs	r3, #0
}
 8003986:	4618      	mov	r0, r3
 8003988:	3718      	adds	r7, #24
 800398a:	46bd      	mov	sp, r7
 800398c:	bd80      	pop	{r7, pc}
 800398e:	bf00      	nop
 8003990:	40023800 	.word	0x40023800

08003994 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b084      	sub	sp, #16
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
 800399c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800399e:	2300      	movs	r3, #0
 80039a0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d101      	bne.n	80039ac <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80039a8:	2301      	movs	r3, #1
 80039aa:	e0d0      	b.n	8003b4e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80039ac:	4b6a      	ldr	r3, [pc, #424]	@ (8003b58 <HAL_RCC_ClockConfig+0x1c4>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f003 030f 	and.w	r3, r3, #15
 80039b4:	683a      	ldr	r2, [r7, #0]
 80039b6:	429a      	cmp	r2, r3
 80039b8:	d910      	bls.n	80039dc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039ba:	4b67      	ldr	r3, [pc, #412]	@ (8003b58 <HAL_RCC_ClockConfig+0x1c4>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f023 020f 	bic.w	r2, r3, #15
 80039c2:	4965      	ldr	r1, [pc, #404]	@ (8003b58 <HAL_RCC_ClockConfig+0x1c4>)
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	4313      	orrs	r3, r2
 80039c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039ca:	4b63      	ldr	r3, [pc, #396]	@ (8003b58 <HAL_RCC_ClockConfig+0x1c4>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f003 030f 	and.w	r3, r3, #15
 80039d2:	683a      	ldr	r2, [r7, #0]
 80039d4:	429a      	cmp	r2, r3
 80039d6:	d001      	beq.n	80039dc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80039d8:	2301      	movs	r3, #1
 80039da:	e0b8      	b.n	8003b4e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f003 0302 	and.w	r3, r3, #2
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d020      	beq.n	8003a2a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f003 0304 	and.w	r3, r3, #4
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d005      	beq.n	8003a00 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80039f4:	4b59      	ldr	r3, [pc, #356]	@ (8003b5c <HAL_RCC_ClockConfig+0x1c8>)
 80039f6:	689b      	ldr	r3, [r3, #8]
 80039f8:	4a58      	ldr	r2, [pc, #352]	@ (8003b5c <HAL_RCC_ClockConfig+0x1c8>)
 80039fa:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80039fe:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f003 0308 	and.w	r3, r3, #8
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d005      	beq.n	8003a18 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a0c:	4b53      	ldr	r3, [pc, #332]	@ (8003b5c <HAL_RCC_ClockConfig+0x1c8>)
 8003a0e:	689b      	ldr	r3, [r3, #8]
 8003a10:	4a52      	ldr	r2, [pc, #328]	@ (8003b5c <HAL_RCC_ClockConfig+0x1c8>)
 8003a12:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003a16:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a18:	4b50      	ldr	r3, [pc, #320]	@ (8003b5c <HAL_RCC_ClockConfig+0x1c8>)
 8003a1a:	689b      	ldr	r3, [r3, #8]
 8003a1c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	689b      	ldr	r3, [r3, #8]
 8003a24:	494d      	ldr	r1, [pc, #308]	@ (8003b5c <HAL_RCC_ClockConfig+0x1c8>)
 8003a26:	4313      	orrs	r3, r2
 8003a28:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f003 0301 	and.w	r3, r3, #1
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d040      	beq.n	8003ab8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	685b      	ldr	r3, [r3, #4]
 8003a3a:	2b01      	cmp	r3, #1
 8003a3c:	d107      	bne.n	8003a4e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a3e:	4b47      	ldr	r3, [pc, #284]	@ (8003b5c <HAL_RCC_ClockConfig+0x1c8>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d115      	bne.n	8003a76 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	e07f      	b.n	8003b4e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	685b      	ldr	r3, [r3, #4]
 8003a52:	2b02      	cmp	r3, #2
 8003a54:	d107      	bne.n	8003a66 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a56:	4b41      	ldr	r3, [pc, #260]	@ (8003b5c <HAL_RCC_ClockConfig+0x1c8>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d109      	bne.n	8003a76 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003a62:	2301      	movs	r3, #1
 8003a64:	e073      	b.n	8003b4e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a66:	4b3d      	ldr	r3, [pc, #244]	@ (8003b5c <HAL_RCC_ClockConfig+0x1c8>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f003 0302 	and.w	r3, r3, #2
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d101      	bne.n	8003a76 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003a72:	2301      	movs	r3, #1
 8003a74:	e06b      	b.n	8003b4e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a76:	4b39      	ldr	r3, [pc, #228]	@ (8003b5c <HAL_RCC_ClockConfig+0x1c8>)
 8003a78:	689b      	ldr	r3, [r3, #8]
 8003a7a:	f023 0203 	bic.w	r2, r3, #3
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	685b      	ldr	r3, [r3, #4]
 8003a82:	4936      	ldr	r1, [pc, #216]	@ (8003b5c <HAL_RCC_ClockConfig+0x1c8>)
 8003a84:	4313      	orrs	r3, r2
 8003a86:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a88:	f7fd ff6a 	bl	8001960 <HAL_GetTick>
 8003a8c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a8e:	e00a      	b.n	8003aa6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a90:	f7fd ff66 	bl	8001960 <HAL_GetTick>
 8003a94:	4602      	mov	r2, r0
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	1ad3      	subs	r3, r2, r3
 8003a9a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d901      	bls.n	8003aa6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003aa2:	2303      	movs	r3, #3
 8003aa4:	e053      	b.n	8003b4e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003aa6:	4b2d      	ldr	r3, [pc, #180]	@ (8003b5c <HAL_RCC_ClockConfig+0x1c8>)
 8003aa8:	689b      	ldr	r3, [r3, #8]
 8003aaa:	f003 020c 	and.w	r2, r3, #12
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	685b      	ldr	r3, [r3, #4]
 8003ab2:	009b      	lsls	r3, r3, #2
 8003ab4:	429a      	cmp	r2, r3
 8003ab6:	d1eb      	bne.n	8003a90 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003ab8:	4b27      	ldr	r3, [pc, #156]	@ (8003b58 <HAL_RCC_ClockConfig+0x1c4>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f003 030f 	and.w	r3, r3, #15
 8003ac0:	683a      	ldr	r2, [r7, #0]
 8003ac2:	429a      	cmp	r2, r3
 8003ac4:	d210      	bcs.n	8003ae8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ac6:	4b24      	ldr	r3, [pc, #144]	@ (8003b58 <HAL_RCC_ClockConfig+0x1c4>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f023 020f 	bic.w	r2, r3, #15
 8003ace:	4922      	ldr	r1, [pc, #136]	@ (8003b58 <HAL_RCC_ClockConfig+0x1c4>)
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	4313      	orrs	r3, r2
 8003ad4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ad6:	4b20      	ldr	r3, [pc, #128]	@ (8003b58 <HAL_RCC_ClockConfig+0x1c4>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f003 030f 	and.w	r3, r3, #15
 8003ade:	683a      	ldr	r2, [r7, #0]
 8003ae0:	429a      	cmp	r2, r3
 8003ae2:	d001      	beq.n	8003ae8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003ae4:	2301      	movs	r3, #1
 8003ae6:	e032      	b.n	8003b4e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f003 0304 	and.w	r3, r3, #4
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d008      	beq.n	8003b06 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003af4:	4b19      	ldr	r3, [pc, #100]	@ (8003b5c <HAL_RCC_ClockConfig+0x1c8>)
 8003af6:	689b      	ldr	r3, [r3, #8]
 8003af8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	68db      	ldr	r3, [r3, #12]
 8003b00:	4916      	ldr	r1, [pc, #88]	@ (8003b5c <HAL_RCC_ClockConfig+0x1c8>)
 8003b02:	4313      	orrs	r3, r2
 8003b04:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f003 0308 	and.w	r3, r3, #8
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d009      	beq.n	8003b26 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003b12:	4b12      	ldr	r3, [pc, #72]	@ (8003b5c <HAL_RCC_ClockConfig+0x1c8>)
 8003b14:	689b      	ldr	r3, [r3, #8]
 8003b16:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	691b      	ldr	r3, [r3, #16]
 8003b1e:	00db      	lsls	r3, r3, #3
 8003b20:	490e      	ldr	r1, [pc, #56]	@ (8003b5c <HAL_RCC_ClockConfig+0x1c8>)
 8003b22:	4313      	orrs	r3, r2
 8003b24:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003b26:	f000 f821 	bl	8003b6c <HAL_RCC_GetSysClockFreq>
 8003b2a:	4602      	mov	r2, r0
 8003b2c:	4b0b      	ldr	r3, [pc, #44]	@ (8003b5c <HAL_RCC_ClockConfig+0x1c8>)
 8003b2e:	689b      	ldr	r3, [r3, #8]
 8003b30:	091b      	lsrs	r3, r3, #4
 8003b32:	f003 030f 	and.w	r3, r3, #15
 8003b36:	490a      	ldr	r1, [pc, #40]	@ (8003b60 <HAL_RCC_ClockConfig+0x1cc>)
 8003b38:	5ccb      	ldrb	r3, [r1, r3]
 8003b3a:	fa22 f303 	lsr.w	r3, r2, r3
 8003b3e:	4a09      	ldr	r2, [pc, #36]	@ (8003b64 <HAL_RCC_ClockConfig+0x1d0>)
 8003b40:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003b42:	4b09      	ldr	r3, [pc, #36]	@ (8003b68 <HAL_RCC_ClockConfig+0x1d4>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4618      	mov	r0, r3
 8003b48:	f7fd fd46 	bl	80015d8 <HAL_InitTick>

  return HAL_OK;
 8003b4c:	2300      	movs	r3, #0
}
 8003b4e:	4618      	mov	r0, r3
 8003b50:	3710      	adds	r7, #16
 8003b52:	46bd      	mov	sp, r7
 8003b54:	bd80      	pop	{r7, pc}
 8003b56:	bf00      	nop
 8003b58:	40023c00 	.word	0x40023c00
 8003b5c:	40023800 	.word	0x40023800
 8003b60:	0800d704 	.word	0x0800d704
 8003b64:	20000004 	.word	0x20000004
 8003b68:	20000008 	.word	0x20000008

08003b6c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b70:	b090      	sub	sp, #64	@ 0x40
 8003b72:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003b74:	2300      	movs	r3, #0
 8003b76:	637b      	str	r3, [r7, #52]	@ 0x34
 8003b78:	2300      	movs	r3, #0
 8003b7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8003b80:	2300      	movs	r3, #0
 8003b82:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003b84:	4b59      	ldr	r3, [pc, #356]	@ (8003cec <HAL_RCC_GetSysClockFreq+0x180>)
 8003b86:	689b      	ldr	r3, [r3, #8]
 8003b88:	f003 030c 	and.w	r3, r3, #12
 8003b8c:	2b08      	cmp	r3, #8
 8003b8e:	d00d      	beq.n	8003bac <HAL_RCC_GetSysClockFreq+0x40>
 8003b90:	2b08      	cmp	r3, #8
 8003b92:	f200 80a1 	bhi.w	8003cd8 <HAL_RCC_GetSysClockFreq+0x16c>
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d002      	beq.n	8003ba0 <HAL_RCC_GetSysClockFreq+0x34>
 8003b9a:	2b04      	cmp	r3, #4
 8003b9c:	d003      	beq.n	8003ba6 <HAL_RCC_GetSysClockFreq+0x3a>
 8003b9e:	e09b      	b.n	8003cd8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003ba0:	4b53      	ldr	r3, [pc, #332]	@ (8003cf0 <HAL_RCC_GetSysClockFreq+0x184>)
 8003ba2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003ba4:	e09b      	b.n	8003cde <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003ba6:	4b53      	ldr	r3, [pc, #332]	@ (8003cf4 <HAL_RCC_GetSysClockFreq+0x188>)
 8003ba8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003baa:	e098      	b.n	8003cde <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003bac:	4b4f      	ldr	r3, [pc, #316]	@ (8003cec <HAL_RCC_GetSysClockFreq+0x180>)
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003bb4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003bb6:	4b4d      	ldr	r3, [pc, #308]	@ (8003cec <HAL_RCC_GetSysClockFreq+0x180>)
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d028      	beq.n	8003c14 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003bc2:	4b4a      	ldr	r3, [pc, #296]	@ (8003cec <HAL_RCC_GetSysClockFreq+0x180>)
 8003bc4:	685b      	ldr	r3, [r3, #4]
 8003bc6:	099b      	lsrs	r3, r3, #6
 8003bc8:	2200      	movs	r2, #0
 8003bca:	623b      	str	r3, [r7, #32]
 8003bcc:	627a      	str	r2, [r7, #36]	@ 0x24
 8003bce:	6a3b      	ldr	r3, [r7, #32]
 8003bd0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003bd4:	2100      	movs	r1, #0
 8003bd6:	4b47      	ldr	r3, [pc, #284]	@ (8003cf4 <HAL_RCC_GetSysClockFreq+0x188>)
 8003bd8:	fb03 f201 	mul.w	r2, r3, r1
 8003bdc:	2300      	movs	r3, #0
 8003bde:	fb00 f303 	mul.w	r3, r0, r3
 8003be2:	4413      	add	r3, r2
 8003be4:	4a43      	ldr	r2, [pc, #268]	@ (8003cf4 <HAL_RCC_GetSysClockFreq+0x188>)
 8003be6:	fba0 1202 	umull	r1, r2, r0, r2
 8003bea:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003bec:	460a      	mov	r2, r1
 8003bee:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003bf0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003bf2:	4413      	add	r3, r2
 8003bf4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003bf6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	61bb      	str	r3, [r7, #24]
 8003bfc:	61fa      	str	r2, [r7, #28]
 8003bfe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003c02:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003c06:	f7fd f84f 	bl	8000ca8 <__aeabi_uldivmod>
 8003c0a:	4602      	mov	r2, r0
 8003c0c:	460b      	mov	r3, r1
 8003c0e:	4613      	mov	r3, r2
 8003c10:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003c12:	e053      	b.n	8003cbc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c14:	4b35      	ldr	r3, [pc, #212]	@ (8003cec <HAL_RCC_GetSysClockFreq+0x180>)
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	099b      	lsrs	r3, r3, #6
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	613b      	str	r3, [r7, #16]
 8003c1e:	617a      	str	r2, [r7, #20]
 8003c20:	693b      	ldr	r3, [r7, #16]
 8003c22:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003c26:	f04f 0b00 	mov.w	fp, #0
 8003c2a:	4652      	mov	r2, sl
 8003c2c:	465b      	mov	r3, fp
 8003c2e:	f04f 0000 	mov.w	r0, #0
 8003c32:	f04f 0100 	mov.w	r1, #0
 8003c36:	0159      	lsls	r1, r3, #5
 8003c38:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c3c:	0150      	lsls	r0, r2, #5
 8003c3e:	4602      	mov	r2, r0
 8003c40:	460b      	mov	r3, r1
 8003c42:	ebb2 080a 	subs.w	r8, r2, sl
 8003c46:	eb63 090b 	sbc.w	r9, r3, fp
 8003c4a:	f04f 0200 	mov.w	r2, #0
 8003c4e:	f04f 0300 	mov.w	r3, #0
 8003c52:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003c56:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003c5a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003c5e:	ebb2 0408 	subs.w	r4, r2, r8
 8003c62:	eb63 0509 	sbc.w	r5, r3, r9
 8003c66:	f04f 0200 	mov.w	r2, #0
 8003c6a:	f04f 0300 	mov.w	r3, #0
 8003c6e:	00eb      	lsls	r3, r5, #3
 8003c70:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003c74:	00e2      	lsls	r2, r4, #3
 8003c76:	4614      	mov	r4, r2
 8003c78:	461d      	mov	r5, r3
 8003c7a:	eb14 030a 	adds.w	r3, r4, sl
 8003c7e:	603b      	str	r3, [r7, #0]
 8003c80:	eb45 030b 	adc.w	r3, r5, fp
 8003c84:	607b      	str	r3, [r7, #4]
 8003c86:	f04f 0200 	mov.w	r2, #0
 8003c8a:	f04f 0300 	mov.w	r3, #0
 8003c8e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003c92:	4629      	mov	r1, r5
 8003c94:	028b      	lsls	r3, r1, #10
 8003c96:	4621      	mov	r1, r4
 8003c98:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003c9c:	4621      	mov	r1, r4
 8003c9e:	028a      	lsls	r2, r1, #10
 8003ca0:	4610      	mov	r0, r2
 8003ca2:	4619      	mov	r1, r3
 8003ca4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	60bb      	str	r3, [r7, #8]
 8003caa:	60fa      	str	r2, [r7, #12]
 8003cac:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003cb0:	f7fc fffa 	bl	8000ca8 <__aeabi_uldivmod>
 8003cb4:	4602      	mov	r2, r0
 8003cb6:	460b      	mov	r3, r1
 8003cb8:	4613      	mov	r3, r2
 8003cba:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003cbc:	4b0b      	ldr	r3, [pc, #44]	@ (8003cec <HAL_RCC_GetSysClockFreq+0x180>)
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	0c1b      	lsrs	r3, r3, #16
 8003cc2:	f003 0303 	and.w	r3, r3, #3
 8003cc6:	3301      	adds	r3, #1
 8003cc8:	005b      	lsls	r3, r3, #1
 8003cca:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8003ccc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003cce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cd4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003cd6:	e002      	b.n	8003cde <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003cd8:	4b05      	ldr	r3, [pc, #20]	@ (8003cf0 <HAL_RCC_GetSysClockFreq+0x184>)
 8003cda:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003cdc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003cde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	3740      	adds	r7, #64	@ 0x40
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003cea:	bf00      	nop
 8003cec:	40023800 	.word	0x40023800
 8003cf0:	00f42400 	.word	0x00f42400
 8003cf4:	017d7840 	.word	0x017d7840

08003cf8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003cfc:	4b03      	ldr	r3, [pc, #12]	@ (8003d0c <HAL_RCC_GetHCLKFreq+0x14>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
}
 8003d00:	4618      	mov	r0, r3
 8003d02:	46bd      	mov	sp, r7
 8003d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d08:	4770      	bx	lr
 8003d0a:	bf00      	nop
 8003d0c:	20000004 	.word	0x20000004

08003d10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003d14:	f7ff fff0 	bl	8003cf8 <HAL_RCC_GetHCLKFreq>
 8003d18:	4602      	mov	r2, r0
 8003d1a:	4b05      	ldr	r3, [pc, #20]	@ (8003d30 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003d1c:	689b      	ldr	r3, [r3, #8]
 8003d1e:	0a9b      	lsrs	r3, r3, #10
 8003d20:	f003 0307 	and.w	r3, r3, #7
 8003d24:	4903      	ldr	r1, [pc, #12]	@ (8003d34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d26:	5ccb      	ldrb	r3, [r1, r3]
 8003d28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	bd80      	pop	{r7, pc}
 8003d30:	40023800 	.word	0x40023800
 8003d34:	0800d714 	.word	0x0800d714

08003d38 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003d3c:	f7ff ffdc 	bl	8003cf8 <HAL_RCC_GetHCLKFreq>
 8003d40:	4602      	mov	r2, r0
 8003d42:	4b05      	ldr	r3, [pc, #20]	@ (8003d58 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003d44:	689b      	ldr	r3, [r3, #8]
 8003d46:	0b5b      	lsrs	r3, r3, #13
 8003d48:	f003 0307 	and.w	r3, r3, #7
 8003d4c:	4903      	ldr	r1, [pc, #12]	@ (8003d5c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d4e:	5ccb      	ldrb	r3, [r1, r3]
 8003d50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d54:	4618      	mov	r0, r3
 8003d56:	bd80      	pop	{r7, pc}
 8003d58:	40023800 	.word	0x40023800
 8003d5c:	0800d714 	.word	0x0800d714

08003d60 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003d60:	b480      	push	{r7}
 8003d62:	b083      	sub	sp, #12
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
 8003d68:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	220f      	movs	r2, #15
 8003d6e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003d70:	4b12      	ldr	r3, [pc, #72]	@ (8003dbc <HAL_RCC_GetClockConfig+0x5c>)
 8003d72:	689b      	ldr	r3, [r3, #8]
 8003d74:	f003 0203 	and.w	r2, r3, #3
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003d7c:	4b0f      	ldr	r3, [pc, #60]	@ (8003dbc <HAL_RCC_GetClockConfig+0x5c>)
 8003d7e:	689b      	ldr	r3, [r3, #8]
 8003d80:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003d88:	4b0c      	ldr	r3, [pc, #48]	@ (8003dbc <HAL_RCC_GetClockConfig+0x5c>)
 8003d8a:	689b      	ldr	r3, [r3, #8]
 8003d8c:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003d94:	4b09      	ldr	r3, [pc, #36]	@ (8003dbc <HAL_RCC_GetClockConfig+0x5c>)
 8003d96:	689b      	ldr	r3, [r3, #8]
 8003d98:	08db      	lsrs	r3, r3, #3
 8003d9a:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003da2:	4b07      	ldr	r3, [pc, #28]	@ (8003dc0 <HAL_RCC_GetClockConfig+0x60>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f003 020f 	and.w	r2, r3, #15
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	601a      	str	r2, [r3, #0]
}
 8003dae:	bf00      	nop
 8003db0:	370c      	adds	r7, #12
 8003db2:	46bd      	mov	sp, r7
 8003db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db8:	4770      	bx	lr
 8003dba:	bf00      	nop
 8003dbc:	40023800 	.word	0x40023800
 8003dc0:	40023c00 	.word	0x40023c00

08003dc4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b088      	sub	sp, #32
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003dcc:	2300      	movs	r3, #0
 8003dce:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003dd8:	2300      	movs	r3, #0
 8003dda:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003ddc:	2300      	movs	r3, #0
 8003dde:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f003 0301 	and.w	r3, r3, #1
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d012      	beq.n	8003e12 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003dec:	4b69      	ldr	r3, [pc, #420]	@ (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003dee:	689b      	ldr	r3, [r3, #8]
 8003df0:	4a68      	ldr	r2, [pc, #416]	@ (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003df2:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8003df6:	6093      	str	r3, [r2, #8]
 8003df8:	4b66      	ldr	r3, [pc, #408]	@ (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003dfa:	689a      	ldr	r2, [r3, #8]
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e00:	4964      	ldr	r1, [pc, #400]	@ (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e02:	4313      	orrs	r3, r2
 8003e04:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d101      	bne.n	8003e12 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003e0e:	2301      	movs	r3, #1
 8003e10:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d017      	beq.n	8003e4e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003e1e:	4b5d      	ldr	r3, [pc, #372]	@ (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e20:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003e24:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e2c:	4959      	ldr	r1, [pc, #356]	@ (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e2e:	4313      	orrs	r3, r2
 8003e30:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e38:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003e3c:	d101      	bne.n	8003e42 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d101      	bne.n	8003e4e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d017      	beq.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003e5a:	4b4e      	ldr	r3, [pc, #312]	@ (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003e60:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e68:	494a      	ldr	r1, [pc, #296]	@ (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e74:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003e78:	d101      	bne.n	8003e7e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d101      	bne.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003e86:	2301      	movs	r3, #1
 8003e88:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d001      	beq.n	8003e9a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003e96:	2301      	movs	r3, #1
 8003e98:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f003 0320 	and.w	r3, r3, #32
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	f000 808b 	beq.w	8003fbe <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003ea8:	4b3a      	ldr	r3, [pc, #232]	@ (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003eaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eac:	4a39      	ldr	r2, [pc, #228]	@ (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003eae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003eb2:	6413      	str	r3, [r2, #64]	@ 0x40
 8003eb4:	4b37      	ldr	r3, [pc, #220]	@ (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003eb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eb8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ebc:	60bb      	str	r3, [r7, #8]
 8003ebe:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003ec0:	4b35      	ldr	r3, [pc, #212]	@ (8003f98 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4a34      	ldr	r2, [pc, #208]	@ (8003f98 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003ec6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003eca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ecc:	f7fd fd48 	bl	8001960 <HAL_GetTick>
 8003ed0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003ed2:	e008      	b.n	8003ee6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ed4:	f7fd fd44 	bl	8001960 <HAL_GetTick>
 8003ed8:	4602      	mov	r2, r0
 8003eda:	697b      	ldr	r3, [r7, #20]
 8003edc:	1ad3      	subs	r3, r2, r3
 8003ede:	2b64      	cmp	r3, #100	@ 0x64
 8003ee0:	d901      	bls.n	8003ee6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003ee2:	2303      	movs	r3, #3
 8003ee4:	e357      	b.n	8004596 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003ee6:	4b2c      	ldr	r3, [pc, #176]	@ (8003f98 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d0f0      	beq.n	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003ef2:	4b28      	ldr	r3, [pc, #160]	@ (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ef4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ef6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003efa:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003efc:	693b      	ldr	r3, [r7, #16]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d035      	beq.n	8003f6e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f06:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003f0a:	693a      	ldr	r2, [r7, #16]
 8003f0c:	429a      	cmp	r2, r3
 8003f0e:	d02e      	beq.n	8003f6e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003f10:	4b20      	ldr	r3, [pc, #128]	@ (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f14:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003f18:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003f1a:	4b1e      	ldr	r3, [pc, #120]	@ (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f1e:	4a1d      	ldr	r2, [pc, #116]	@ (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f20:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f24:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003f26:	4b1b      	ldr	r3, [pc, #108]	@ (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f2a:	4a1a      	ldr	r2, [pc, #104]	@ (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f2c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003f30:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003f32:	4a18      	ldr	r2, [pc, #96]	@ (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f34:	693b      	ldr	r3, [r7, #16]
 8003f36:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003f38:	4b16      	ldr	r3, [pc, #88]	@ (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f3c:	f003 0301 	and.w	r3, r3, #1
 8003f40:	2b01      	cmp	r3, #1
 8003f42:	d114      	bne.n	8003f6e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f44:	f7fd fd0c 	bl	8001960 <HAL_GetTick>
 8003f48:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f4a:	e00a      	b.n	8003f62 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f4c:	f7fd fd08 	bl	8001960 <HAL_GetTick>
 8003f50:	4602      	mov	r2, r0
 8003f52:	697b      	ldr	r3, [r7, #20]
 8003f54:	1ad3      	subs	r3, r2, r3
 8003f56:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d901      	bls.n	8003f62 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003f5e:	2303      	movs	r3, #3
 8003f60:	e319      	b.n	8004596 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f62:	4b0c      	ldr	r3, [pc, #48]	@ (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f66:	f003 0302 	and.w	r3, r3, #2
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d0ee      	beq.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f72:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003f76:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003f7a:	d111      	bne.n	8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003f7c:	4b05      	ldr	r3, [pc, #20]	@ (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f7e:	689b      	ldr	r3, [r3, #8]
 8003f80:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003f88:	4b04      	ldr	r3, [pc, #16]	@ (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003f8a:	400b      	ands	r3, r1
 8003f8c:	4901      	ldr	r1, [pc, #4]	@ (8003f94 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f8e:	4313      	orrs	r3, r2
 8003f90:	608b      	str	r3, [r1, #8]
 8003f92:	e00b      	b.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003f94:	40023800 	.word	0x40023800
 8003f98:	40007000 	.word	0x40007000
 8003f9c:	0ffffcff 	.word	0x0ffffcff
 8003fa0:	4baa      	ldr	r3, [pc, #680]	@ (800424c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003fa2:	689b      	ldr	r3, [r3, #8]
 8003fa4:	4aa9      	ldr	r2, [pc, #676]	@ (800424c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003fa6:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8003faa:	6093      	str	r3, [r2, #8]
 8003fac:	4ba7      	ldr	r3, [pc, #668]	@ (800424c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003fae:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fb4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003fb8:	49a4      	ldr	r1, [pc, #656]	@ (800424c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003fba:	4313      	orrs	r3, r2
 8003fbc:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f003 0310 	and.w	r3, r3, #16
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d010      	beq.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003fca:	4ba0      	ldr	r3, [pc, #640]	@ (800424c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003fcc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003fd0:	4a9e      	ldr	r2, [pc, #632]	@ (800424c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003fd2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003fd6:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8003fda:	4b9c      	ldr	r3, [pc, #624]	@ (800424c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003fdc:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fe4:	4999      	ldr	r1, [pc, #612]	@ (800424c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d00a      	beq.n	800400e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003ff8:	4b94      	ldr	r3, [pc, #592]	@ (800424c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ffa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ffe:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004006:	4991      	ldr	r1, [pc, #580]	@ (800424c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004008:	4313      	orrs	r3, r2
 800400a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004016:	2b00      	cmp	r3, #0
 8004018:	d00a      	beq.n	8004030 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800401a:	4b8c      	ldr	r3, [pc, #560]	@ (800424c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800401c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004020:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004028:	4988      	ldr	r1, [pc, #544]	@ (800424c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800402a:	4313      	orrs	r3, r2
 800402c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004038:	2b00      	cmp	r3, #0
 800403a:	d00a      	beq.n	8004052 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800403c:	4b83      	ldr	r3, [pc, #524]	@ (800424c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800403e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004042:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800404a:	4980      	ldr	r1, [pc, #512]	@ (800424c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800404c:	4313      	orrs	r3, r2
 800404e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800405a:	2b00      	cmp	r3, #0
 800405c:	d00a      	beq.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800405e:	4b7b      	ldr	r3, [pc, #492]	@ (800424c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004060:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004064:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800406c:	4977      	ldr	r1, [pc, #476]	@ (800424c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800406e:	4313      	orrs	r3, r2
 8004070:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800407c:	2b00      	cmp	r3, #0
 800407e:	d00a      	beq.n	8004096 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004080:	4b72      	ldr	r3, [pc, #456]	@ (800424c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004082:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004086:	f023 0203 	bic.w	r2, r3, #3
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800408e:	496f      	ldr	r1, [pc, #444]	@ (800424c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004090:	4313      	orrs	r3, r2
 8004092:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d00a      	beq.n	80040b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80040a2:	4b6a      	ldr	r3, [pc, #424]	@ (800424c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80040a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040a8:	f023 020c 	bic.w	r2, r3, #12
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80040b0:	4966      	ldr	r1, [pc, #408]	@ (800424c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80040b2:	4313      	orrs	r3, r2
 80040b4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d00a      	beq.n	80040da <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80040c4:	4b61      	ldr	r3, [pc, #388]	@ (800424c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80040c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040ca:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80040d2:	495e      	ldr	r1, [pc, #376]	@ (800424c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80040d4:	4313      	orrs	r3, r2
 80040d6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d00a      	beq.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80040e6:	4b59      	ldr	r3, [pc, #356]	@ (800424c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80040e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040ec:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80040f4:	4955      	ldr	r1, [pc, #340]	@ (800424c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80040f6:	4313      	orrs	r3, r2
 80040f8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004104:	2b00      	cmp	r3, #0
 8004106:	d00a      	beq.n	800411e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004108:	4b50      	ldr	r3, [pc, #320]	@ (800424c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800410a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800410e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004116:	494d      	ldr	r1, [pc, #308]	@ (800424c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004118:	4313      	orrs	r3, r2
 800411a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004126:	2b00      	cmp	r3, #0
 8004128:	d00a      	beq.n	8004140 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800412a:	4b48      	ldr	r3, [pc, #288]	@ (800424c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800412c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004130:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004138:	4944      	ldr	r1, [pc, #272]	@ (800424c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800413a:	4313      	orrs	r3, r2
 800413c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004148:	2b00      	cmp	r3, #0
 800414a:	d00a      	beq.n	8004162 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800414c:	4b3f      	ldr	r3, [pc, #252]	@ (800424c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800414e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004152:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800415a:	493c      	ldr	r1, [pc, #240]	@ (800424c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800415c:	4313      	orrs	r3, r2
 800415e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800416a:	2b00      	cmp	r3, #0
 800416c:	d00a      	beq.n	8004184 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800416e:	4b37      	ldr	r3, [pc, #220]	@ (800424c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004170:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004174:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800417c:	4933      	ldr	r1, [pc, #204]	@ (800424c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800417e:	4313      	orrs	r3, r2
 8004180:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800418c:	2b00      	cmp	r3, #0
 800418e:	d00a      	beq.n	80041a6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004190:	4b2e      	ldr	r3, [pc, #184]	@ (800424c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004192:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004196:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800419e:	492b      	ldr	r1, [pc, #172]	@ (800424c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80041a0:	4313      	orrs	r3, r2
 80041a2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d011      	beq.n	80041d6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80041b2:	4b26      	ldr	r3, [pc, #152]	@ (800424c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80041b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041b8:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80041c0:	4922      	ldr	r1, [pc, #136]	@ (800424c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80041c2:	4313      	orrs	r3, r2
 80041c4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80041cc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80041d0:	d101      	bne.n	80041d6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80041d2:	2301      	movs	r3, #1
 80041d4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f003 0308 	and.w	r3, r3, #8
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d001      	beq.n	80041e6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80041e2:	2301      	movs	r3, #1
 80041e4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d00a      	beq.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80041f2:	4b16      	ldr	r3, [pc, #88]	@ (800424c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80041f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041f8:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004200:	4912      	ldr	r1, [pc, #72]	@ (800424c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004202:	4313      	orrs	r3, r2
 8004204:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004210:	2b00      	cmp	r3, #0
 8004212:	d00b      	beq.n	800422c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004214:	4b0d      	ldr	r3, [pc, #52]	@ (800424c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004216:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800421a:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004224:	4909      	ldr	r1, [pc, #36]	@ (800424c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004226:	4313      	orrs	r3, r2
 8004228:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800422c:	69fb      	ldr	r3, [r7, #28]
 800422e:	2b01      	cmp	r3, #1
 8004230:	d006      	beq.n	8004240 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800423a:	2b00      	cmp	r3, #0
 800423c:	f000 80d9 	beq.w	80043f2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004240:	4b02      	ldr	r3, [pc, #8]	@ (800424c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4a01      	ldr	r2, [pc, #4]	@ (800424c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004246:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800424a:	e001      	b.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 800424c:	40023800 	.word	0x40023800
 8004250:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004252:	f7fd fb85 	bl	8001960 <HAL_GetTick>
 8004256:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004258:	e008      	b.n	800426c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800425a:	f7fd fb81 	bl	8001960 <HAL_GetTick>
 800425e:	4602      	mov	r2, r0
 8004260:	697b      	ldr	r3, [r7, #20]
 8004262:	1ad3      	subs	r3, r2, r3
 8004264:	2b64      	cmp	r3, #100	@ 0x64
 8004266:	d901      	bls.n	800426c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004268:	2303      	movs	r3, #3
 800426a:	e194      	b.n	8004596 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800426c:	4b6c      	ldr	r3, [pc, #432]	@ (8004420 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004274:	2b00      	cmp	r3, #0
 8004276:	d1f0      	bne.n	800425a <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f003 0301 	and.w	r3, r3, #1
 8004280:	2b00      	cmp	r3, #0
 8004282:	d021      	beq.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004288:	2b00      	cmp	r3, #0
 800428a:	d11d      	bne.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800428c:	4b64      	ldr	r3, [pc, #400]	@ (8004420 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800428e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004292:	0c1b      	lsrs	r3, r3, #16
 8004294:	f003 0303 	and.w	r3, r3, #3
 8004298:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800429a:	4b61      	ldr	r3, [pc, #388]	@ (8004420 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800429c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80042a0:	0e1b      	lsrs	r3, r3, #24
 80042a2:	f003 030f 	and.w	r3, r3, #15
 80042a6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	685b      	ldr	r3, [r3, #4]
 80042ac:	019a      	lsls	r2, r3, #6
 80042ae:	693b      	ldr	r3, [r7, #16]
 80042b0:	041b      	lsls	r3, r3, #16
 80042b2:	431a      	orrs	r2, r3
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	061b      	lsls	r3, r3, #24
 80042b8:	431a      	orrs	r2, r3
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	689b      	ldr	r3, [r3, #8]
 80042be:	071b      	lsls	r3, r3, #28
 80042c0:	4957      	ldr	r1, [pc, #348]	@ (8004420 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80042c2:	4313      	orrs	r3, r2
 80042c4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d004      	beq.n	80042de <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042d8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80042dc:	d00a      	beq.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d02e      	beq.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042ee:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80042f2:	d129      	bne.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80042f4:	4b4a      	ldr	r3, [pc, #296]	@ (8004420 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80042f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80042fa:	0c1b      	lsrs	r3, r3, #16
 80042fc:	f003 0303 	and.w	r3, r3, #3
 8004300:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004302:	4b47      	ldr	r3, [pc, #284]	@ (8004420 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004304:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004308:	0f1b      	lsrs	r3, r3, #28
 800430a:	f003 0307 	and.w	r3, r3, #7
 800430e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	685b      	ldr	r3, [r3, #4]
 8004314:	019a      	lsls	r2, r3, #6
 8004316:	693b      	ldr	r3, [r7, #16]
 8004318:	041b      	lsls	r3, r3, #16
 800431a:	431a      	orrs	r2, r3
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	68db      	ldr	r3, [r3, #12]
 8004320:	061b      	lsls	r3, r3, #24
 8004322:	431a      	orrs	r2, r3
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	071b      	lsls	r3, r3, #28
 8004328:	493d      	ldr	r1, [pc, #244]	@ (8004420 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800432a:	4313      	orrs	r3, r2
 800432c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004330:	4b3b      	ldr	r3, [pc, #236]	@ (8004420 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004332:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004336:	f023 021f 	bic.w	r2, r3, #31
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800433e:	3b01      	subs	r3, #1
 8004340:	4937      	ldr	r1, [pc, #220]	@ (8004420 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004342:	4313      	orrs	r3, r2
 8004344:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004350:	2b00      	cmp	r3, #0
 8004352:	d01d      	beq.n	8004390 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004354:	4b32      	ldr	r3, [pc, #200]	@ (8004420 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004356:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800435a:	0e1b      	lsrs	r3, r3, #24
 800435c:	f003 030f 	and.w	r3, r3, #15
 8004360:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004362:	4b2f      	ldr	r3, [pc, #188]	@ (8004420 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004364:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004368:	0f1b      	lsrs	r3, r3, #28
 800436a:	f003 0307 	and.w	r3, r3, #7
 800436e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	685b      	ldr	r3, [r3, #4]
 8004374:	019a      	lsls	r2, r3, #6
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	691b      	ldr	r3, [r3, #16]
 800437a:	041b      	lsls	r3, r3, #16
 800437c:	431a      	orrs	r2, r3
 800437e:	693b      	ldr	r3, [r7, #16]
 8004380:	061b      	lsls	r3, r3, #24
 8004382:	431a      	orrs	r2, r3
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	071b      	lsls	r3, r3, #28
 8004388:	4925      	ldr	r1, [pc, #148]	@ (8004420 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800438a:	4313      	orrs	r3, r2
 800438c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004398:	2b00      	cmp	r3, #0
 800439a:	d011      	beq.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	685b      	ldr	r3, [r3, #4]
 80043a0:	019a      	lsls	r2, r3, #6
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	691b      	ldr	r3, [r3, #16]
 80043a6:	041b      	lsls	r3, r3, #16
 80043a8:	431a      	orrs	r2, r3
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	68db      	ldr	r3, [r3, #12]
 80043ae:	061b      	lsls	r3, r3, #24
 80043b0:	431a      	orrs	r2, r3
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	689b      	ldr	r3, [r3, #8]
 80043b6:	071b      	lsls	r3, r3, #28
 80043b8:	4919      	ldr	r1, [pc, #100]	@ (8004420 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80043ba:	4313      	orrs	r3, r2
 80043bc:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80043c0:	4b17      	ldr	r3, [pc, #92]	@ (8004420 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4a16      	ldr	r2, [pc, #88]	@ (8004420 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80043c6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80043ca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043cc:	f7fd fac8 	bl	8001960 <HAL_GetTick>
 80043d0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80043d2:	e008      	b.n	80043e6 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80043d4:	f7fd fac4 	bl	8001960 <HAL_GetTick>
 80043d8:	4602      	mov	r2, r0
 80043da:	697b      	ldr	r3, [r7, #20]
 80043dc:	1ad3      	subs	r3, r2, r3
 80043de:	2b64      	cmp	r3, #100	@ 0x64
 80043e0:	d901      	bls.n	80043e6 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80043e2:	2303      	movs	r3, #3
 80043e4:	e0d7      	b.n	8004596 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80043e6:	4b0e      	ldr	r3, [pc, #56]	@ (8004420 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d0f0      	beq.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80043f2:	69bb      	ldr	r3, [r7, #24]
 80043f4:	2b01      	cmp	r3, #1
 80043f6:	f040 80cd 	bne.w	8004594 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80043fa:	4b09      	ldr	r3, [pc, #36]	@ (8004420 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4a08      	ldr	r2, [pc, #32]	@ (8004420 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004400:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004404:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004406:	f7fd faab 	bl	8001960 <HAL_GetTick>
 800440a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800440c:	e00a      	b.n	8004424 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800440e:	f7fd faa7 	bl	8001960 <HAL_GetTick>
 8004412:	4602      	mov	r2, r0
 8004414:	697b      	ldr	r3, [r7, #20]
 8004416:	1ad3      	subs	r3, r2, r3
 8004418:	2b64      	cmp	r3, #100	@ 0x64
 800441a:	d903      	bls.n	8004424 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800441c:	2303      	movs	r3, #3
 800441e:	e0ba      	b.n	8004596 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8004420:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004424:	4b5e      	ldr	r3, [pc, #376]	@ (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800442c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004430:	d0ed      	beq.n	800440e <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800443a:	2b00      	cmp	r3, #0
 800443c:	d003      	beq.n	8004446 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004442:	2b00      	cmp	r3, #0
 8004444:	d009      	beq.n	800445a <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800444e:	2b00      	cmp	r3, #0
 8004450:	d02e      	beq.n	80044b0 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004456:	2b00      	cmp	r3, #0
 8004458:	d12a      	bne.n	80044b0 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800445a:	4b51      	ldr	r3, [pc, #324]	@ (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800445c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004460:	0c1b      	lsrs	r3, r3, #16
 8004462:	f003 0303 	and.w	r3, r3, #3
 8004466:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004468:	4b4d      	ldr	r3, [pc, #308]	@ (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800446a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800446e:	0f1b      	lsrs	r3, r3, #28
 8004470:	f003 0307 	and.w	r3, r3, #7
 8004474:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	695b      	ldr	r3, [r3, #20]
 800447a:	019a      	lsls	r2, r3, #6
 800447c:	693b      	ldr	r3, [r7, #16]
 800447e:	041b      	lsls	r3, r3, #16
 8004480:	431a      	orrs	r2, r3
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	699b      	ldr	r3, [r3, #24]
 8004486:	061b      	lsls	r3, r3, #24
 8004488:	431a      	orrs	r2, r3
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	071b      	lsls	r3, r3, #28
 800448e:	4944      	ldr	r1, [pc, #272]	@ (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004490:	4313      	orrs	r3, r2
 8004492:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004496:	4b42      	ldr	r3, [pc, #264]	@ (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004498:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800449c:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044a4:	3b01      	subs	r3, #1
 80044a6:	021b      	lsls	r3, r3, #8
 80044a8:	493d      	ldr	r1, [pc, #244]	@ (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80044aa:	4313      	orrs	r3, r2
 80044ac:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d022      	beq.n	8004502 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80044c0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80044c4:	d11d      	bne.n	8004502 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80044c6:	4b36      	ldr	r3, [pc, #216]	@ (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80044c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044cc:	0e1b      	lsrs	r3, r3, #24
 80044ce:	f003 030f 	and.w	r3, r3, #15
 80044d2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80044d4:	4b32      	ldr	r3, [pc, #200]	@ (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80044d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044da:	0f1b      	lsrs	r3, r3, #28
 80044dc:	f003 0307 	and.w	r3, r3, #7
 80044e0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	695b      	ldr	r3, [r3, #20]
 80044e6:	019a      	lsls	r2, r3, #6
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6a1b      	ldr	r3, [r3, #32]
 80044ec:	041b      	lsls	r3, r3, #16
 80044ee:	431a      	orrs	r2, r3
 80044f0:	693b      	ldr	r3, [r7, #16]
 80044f2:	061b      	lsls	r3, r3, #24
 80044f4:	431a      	orrs	r2, r3
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	071b      	lsls	r3, r3, #28
 80044fa:	4929      	ldr	r1, [pc, #164]	@ (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80044fc:	4313      	orrs	r3, r2
 80044fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f003 0308 	and.w	r3, r3, #8
 800450a:	2b00      	cmp	r3, #0
 800450c:	d028      	beq.n	8004560 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800450e:	4b24      	ldr	r3, [pc, #144]	@ (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004510:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004514:	0e1b      	lsrs	r3, r3, #24
 8004516:	f003 030f 	and.w	r3, r3, #15
 800451a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800451c:	4b20      	ldr	r3, [pc, #128]	@ (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800451e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004522:	0c1b      	lsrs	r3, r3, #16
 8004524:	f003 0303 	and.w	r3, r3, #3
 8004528:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	695b      	ldr	r3, [r3, #20]
 800452e:	019a      	lsls	r2, r3, #6
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	041b      	lsls	r3, r3, #16
 8004534:	431a      	orrs	r2, r3
 8004536:	693b      	ldr	r3, [r7, #16]
 8004538:	061b      	lsls	r3, r3, #24
 800453a:	431a      	orrs	r2, r3
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	69db      	ldr	r3, [r3, #28]
 8004540:	071b      	lsls	r3, r3, #28
 8004542:	4917      	ldr	r1, [pc, #92]	@ (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004544:	4313      	orrs	r3, r2
 8004546:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800454a:	4b15      	ldr	r3, [pc, #84]	@ (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800454c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004550:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004558:	4911      	ldr	r1, [pc, #68]	@ (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800455a:	4313      	orrs	r3, r2
 800455c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004560:	4b0f      	ldr	r3, [pc, #60]	@ (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	4a0e      	ldr	r2, [pc, #56]	@ (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004566:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800456a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800456c:	f7fd f9f8 	bl	8001960 <HAL_GetTick>
 8004570:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004572:	e008      	b.n	8004586 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004574:	f7fd f9f4 	bl	8001960 <HAL_GetTick>
 8004578:	4602      	mov	r2, r0
 800457a:	697b      	ldr	r3, [r7, #20]
 800457c:	1ad3      	subs	r3, r2, r3
 800457e:	2b64      	cmp	r3, #100	@ 0x64
 8004580:	d901      	bls.n	8004586 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004582:	2303      	movs	r3, #3
 8004584:	e007      	b.n	8004596 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004586:	4b06      	ldr	r3, [pc, #24]	@ (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800458e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004592:	d1ef      	bne.n	8004574 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8004594:	2300      	movs	r3, #0
}
 8004596:	4618      	mov	r0, r3
 8004598:	3720      	adds	r7, #32
 800459a:	46bd      	mov	sp, r7
 800459c:	bd80      	pop	{r7, pc}
 800459e:	bf00      	nop
 80045a0:	40023800 	.word	0x40023800

080045a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b082      	sub	sp, #8
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d101      	bne.n	80045b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80045b2:	2301      	movs	r3, #1
 80045b4:	e049      	b.n	800464a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80045bc:	b2db      	uxtb	r3, r3
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d106      	bne.n	80045d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2200      	movs	r2, #0
 80045c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80045ca:	6878      	ldr	r0, [r7, #4]
 80045cc:	f7fc ff7e 	bl	80014cc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2202      	movs	r2, #2
 80045d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681a      	ldr	r2, [r3, #0]
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	3304      	adds	r3, #4
 80045e0:	4619      	mov	r1, r3
 80045e2:	4610      	mov	r0, r2
 80045e4:	f000 f9de 	bl	80049a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2201      	movs	r2, #1
 80045ec:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2201      	movs	r2, #1
 80045f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2201      	movs	r2, #1
 80045fc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2201      	movs	r2, #1
 8004604:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2201      	movs	r2, #1
 800460c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2201      	movs	r2, #1
 8004614:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2201      	movs	r2, #1
 800461c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2201      	movs	r2, #1
 8004624:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2201      	movs	r2, #1
 800462c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2201      	movs	r2, #1
 8004634:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2201      	movs	r2, #1
 800463c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2201      	movs	r2, #1
 8004644:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004648:	2300      	movs	r3, #0
}
 800464a:	4618      	mov	r0, r3
 800464c:	3708      	adds	r7, #8
 800464e:	46bd      	mov	sp, r7
 8004650:	bd80      	pop	{r7, pc}
	...

08004654 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004654:	b480      	push	{r7}
 8004656:	b085      	sub	sp, #20
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004662:	b2db      	uxtb	r3, r3
 8004664:	2b01      	cmp	r3, #1
 8004666:	d001      	beq.n	800466c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004668:	2301      	movs	r3, #1
 800466a:	e054      	b.n	8004716 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2202      	movs	r2, #2
 8004670:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	68da      	ldr	r2, [r3, #12]
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f042 0201 	orr.w	r2, r2, #1
 8004682:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	4a26      	ldr	r2, [pc, #152]	@ (8004724 <HAL_TIM_Base_Start_IT+0xd0>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d022      	beq.n	80046d4 <HAL_TIM_Base_Start_IT+0x80>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004696:	d01d      	beq.n	80046d4 <HAL_TIM_Base_Start_IT+0x80>
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	4a22      	ldr	r2, [pc, #136]	@ (8004728 <HAL_TIM_Base_Start_IT+0xd4>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	d018      	beq.n	80046d4 <HAL_TIM_Base_Start_IT+0x80>
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	4a21      	ldr	r2, [pc, #132]	@ (800472c <HAL_TIM_Base_Start_IT+0xd8>)
 80046a8:	4293      	cmp	r3, r2
 80046aa:	d013      	beq.n	80046d4 <HAL_TIM_Base_Start_IT+0x80>
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	4a1f      	ldr	r2, [pc, #124]	@ (8004730 <HAL_TIM_Base_Start_IT+0xdc>)
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d00e      	beq.n	80046d4 <HAL_TIM_Base_Start_IT+0x80>
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	4a1e      	ldr	r2, [pc, #120]	@ (8004734 <HAL_TIM_Base_Start_IT+0xe0>)
 80046bc:	4293      	cmp	r3, r2
 80046be:	d009      	beq.n	80046d4 <HAL_TIM_Base_Start_IT+0x80>
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	4a1c      	ldr	r2, [pc, #112]	@ (8004738 <HAL_TIM_Base_Start_IT+0xe4>)
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d004      	beq.n	80046d4 <HAL_TIM_Base_Start_IT+0x80>
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4a1b      	ldr	r2, [pc, #108]	@ (800473c <HAL_TIM_Base_Start_IT+0xe8>)
 80046d0:	4293      	cmp	r3, r2
 80046d2:	d115      	bne.n	8004700 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	689a      	ldr	r2, [r3, #8]
 80046da:	4b19      	ldr	r3, [pc, #100]	@ (8004740 <HAL_TIM_Base_Start_IT+0xec>)
 80046dc:	4013      	ands	r3, r2
 80046de:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	2b06      	cmp	r3, #6
 80046e4:	d015      	beq.n	8004712 <HAL_TIM_Base_Start_IT+0xbe>
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80046ec:	d011      	beq.n	8004712 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	681a      	ldr	r2, [r3, #0]
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f042 0201 	orr.w	r2, r2, #1
 80046fc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046fe:	e008      	b.n	8004712 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	681a      	ldr	r2, [r3, #0]
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f042 0201 	orr.w	r2, r2, #1
 800470e:	601a      	str	r2, [r3, #0]
 8004710:	e000      	b.n	8004714 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004712:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004714:	2300      	movs	r3, #0
}
 8004716:	4618      	mov	r0, r3
 8004718:	3714      	adds	r7, #20
 800471a:	46bd      	mov	sp, r7
 800471c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004720:	4770      	bx	lr
 8004722:	bf00      	nop
 8004724:	40010000 	.word	0x40010000
 8004728:	40000400 	.word	0x40000400
 800472c:	40000800 	.word	0x40000800
 8004730:	40000c00 	.word	0x40000c00
 8004734:	40010400 	.word	0x40010400
 8004738:	40014000 	.word	0x40014000
 800473c:	40001800 	.word	0x40001800
 8004740:	00010007 	.word	0x00010007

08004744 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004744:	b580      	push	{r7, lr}
 8004746:	b084      	sub	sp, #16
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	68db      	ldr	r3, [r3, #12]
 8004752:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	691b      	ldr	r3, [r3, #16]
 800475a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800475c:	68bb      	ldr	r3, [r7, #8]
 800475e:	f003 0302 	and.w	r3, r3, #2
 8004762:	2b00      	cmp	r3, #0
 8004764:	d020      	beq.n	80047a8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	f003 0302 	and.w	r3, r3, #2
 800476c:	2b00      	cmp	r3, #0
 800476e:	d01b      	beq.n	80047a8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f06f 0202 	mvn.w	r2, #2
 8004778:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2201      	movs	r2, #1
 800477e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	699b      	ldr	r3, [r3, #24]
 8004786:	f003 0303 	and.w	r3, r3, #3
 800478a:	2b00      	cmp	r3, #0
 800478c:	d003      	beq.n	8004796 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800478e:	6878      	ldr	r0, [r7, #4]
 8004790:	f000 f8e9 	bl	8004966 <HAL_TIM_IC_CaptureCallback>
 8004794:	e005      	b.n	80047a2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004796:	6878      	ldr	r0, [r7, #4]
 8004798:	f000 f8db 	bl	8004952 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800479c:	6878      	ldr	r0, [r7, #4]
 800479e:	f000 f8ec 	bl	800497a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2200      	movs	r2, #0
 80047a6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80047a8:	68bb      	ldr	r3, [r7, #8]
 80047aa:	f003 0304 	and.w	r3, r3, #4
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d020      	beq.n	80047f4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	f003 0304 	and.w	r3, r3, #4
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d01b      	beq.n	80047f4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f06f 0204 	mvn.w	r2, #4
 80047c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2202      	movs	r2, #2
 80047ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	699b      	ldr	r3, [r3, #24]
 80047d2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d003      	beq.n	80047e2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80047da:	6878      	ldr	r0, [r7, #4]
 80047dc:	f000 f8c3 	bl	8004966 <HAL_TIM_IC_CaptureCallback>
 80047e0:	e005      	b.n	80047ee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80047e2:	6878      	ldr	r0, [r7, #4]
 80047e4:	f000 f8b5 	bl	8004952 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047e8:	6878      	ldr	r0, [r7, #4]
 80047ea:	f000 f8c6 	bl	800497a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2200      	movs	r2, #0
 80047f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80047f4:	68bb      	ldr	r3, [r7, #8]
 80047f6:	f003 0308 	and.w	r3, r3, #8
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d020      	beq.n	8004840 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	f003 0308 	and.w	r3, r3, #8
 8004804:	2b00      	cmp	r3, #0
 8004806:	d01b      	beq.n	8004840 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f06f 0208 	mvn.w	r2, #8
 8004810:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2204      	movs	r2, #4
 8004816:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	69db      	ldr	r3, [r3, #28]
 800481e:	f003 0303 	and.w	r3, r3, #3
 8004822:	2b00      	cmp	r3, #0
 8004824:	d003      	beq.n	800482e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004826:	6878      	ldr	r0, [r7, #4]
 8004828:	f000 f89d 	bl	8004966 <HAL_TIM_IC_CaptureCallback>
 800482c:	e005      	b.n	800483a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800482e:	6878      	ldr	r0, [r7, #4]
 8004830:	f000 f88f 	bl	8004952 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004834:	6878      	ldr	r0, [r7, #4]
 8004836:	f000 f8a0 	bl	800497a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2200      	movs	r2, #0
 800483e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004840:	68bb      	ldr	r3, [r7, #8]
 8004842:	f003 0310 	and.w	r3, r3, #16
 8004846:	2b00      	cmp	r3, #0
 8004848:	d020      	beq.n	800488c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	f003 0310 	and.w	r3, r3, #16
 8004850:	2b00      	cmp	r3, #0
 8004852:	d01b      	beq.n	800488c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f06f 0210 	mvn.w	r2, #16
 800485c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	2208      	movs	r2, #8
 8004862:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	69db      	ldr	r3, [r3, #28]
 800486a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800486e:	2b00      	cmp	r3, #0
 8004870:	d003      	beq.n	800487a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004872:	6878      	ldr	r0, [r7, #4]
 8004874:	f000 f877 	bl	8004966 <HAL_TIM_IC_CaptureCallback>
 8004878:	e005      	b.n	8004886 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800487a:	6878      	ldr	r0, [r7, #4]
 800487c:	f000 f869 	bl	8004952 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004880:	6878      	ldr	r0, [r7, #4]
 8004882:	f000 f87a 	bl	800497a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2200      	movs	r2, #0
 800488a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800488c:	68bb      	ldr	r3, [r7, #8]
 800488e:	f003 0301 	and.w	r3, r3, #1
 8004892:	2b00      	cmp	r3, #0
 8004894:	d00c      	beq.n	80048b0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	f003 0301 	and.w	r3, r3, #1
 800489c:	2b00      	cmp	r3, #0
 800489e:	d007      	beq.n	80048b0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f06f 0201 	mvn.w	r2, #1
 80048a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80048aa:	6878      	ldr	r0, [r7, #4]
 80048ac:	f7fc fd50 	bl	8001350 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80048b0:	68bb      	ldr	r3, [r7, #8]
 80048b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d104      	bne.n	80048c4 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80048ba:	68bb      	ldr	r3, [r7, #8]
 80048bc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d00c      	beq.n	80048de <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d007      	beq.n	80048de <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80048d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80048d8:	6878      	ldr	r0, [r7, #4]
 80048da:	f000 f9a1 	bl	8004c20 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80048de:	68bb      	ldr	r3, [r7, #8]
 80048e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d00c      	beq.n	8004902 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d007      	beq.n	8004902 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80048fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80048fc:	6878      	ldr	r0, [r7, #4]
 80048fe:	f000 f999 	bl	8004c34 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004902:	68bb      	ldr	r3, [r7, #8]
 8004904:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004908:	2b00      	cmp	r3, #0
 800490a:	d00c      	beq.n	8004926 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004912:	2b00      	cmp	r3, #0
 8004914:	d007      	beq.n	8004926 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800491e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004920:	6878      	ldr	r0, [r7, #4]
 8004922:	f000 f834 	bl	800498e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004926:	68bb      	ldr	r3, [r7, #8]
 8004928:	f003 0320 	and.w	r3, r3, #32
 800492c:	2b00      	cmp	r3, #0
 800492e:	d00c      	beq.n	800494a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	f003 0320 	and.w	r3, r3, #32
 8004936:	2b00      	cmp	r3, #0
 8004938:	d007      	beq.n	800494a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f06f 0220 	mvn.w	r2, #32
 8004942:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004944:	6878      	ldr	r0, [r7, #4]
 8004946:	f000 f961 	bl	8004c0c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800494a:	bf00      	nop
 800494c:	3710      	adds	r7, #16
 800494e:	46bd      	mov	sp, r7
 8004950:	bd80      	pop	{r7, pc}

08004952 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004952:	b480      	push	{r7}
 8004954:	b083      	sub	sp, #12
 8004956:	af00      	add	r7, sp, #0
 8004958:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800495a:	bf00      	nop
 800495c:	370c      	adds	r7, #12
 800495e:	46bd      	mov	sp, r7
 8004960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004964:	4770      	bx	lr

08004966 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004966:	b480      	push	{r7}
 8004968:	b083      	sub	sp, #12
 800496a:	af00      	add	r7, sp, #0
 800496c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800496e:	bf00      	nop
 8004970:	370c      	adds	r7, #12
 8004972:	46bd      	mov	sp, r7
 8004974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004978:	4770      	bx	lr

0800497a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800497a:	b480      	push	{r7}
 800497c:	b083      	sub	sp, #12
 800497e:	af00      	add	r7, sp, #0
 8004980:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004982:	bf00      	nop
 8004984:	370c      	adds	r7, #12
 8004986:	46bd      	mov	sp, r7
 8004988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498c:	4770      	bx	lr

0800498e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800498e:	b480      	push	{r7}
 8004990:	b083      	sub	sp, #12
 8004992:	af00      	add	r7, sp, #0
 8004994:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004996:	bf00      	nop
 8004998:	370c      	adds	r7, #12
 800499a:	46bd      	mov	sp, r7
 800499c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a0:	4770      	bx	lr
	...

080049a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80049a4:	b480      	push	{r7}
 80049a6:	b085      	sub	sp, #20
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
 80049ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	4a43      	ldr	r2, [pc, #268]	@ (8004ac4 <TIM_Base_SetConfig+0x120>)
 80049b8:	4293      	cmp	r3, r2
 80049ba:	d013      	beq.n	80049e4 <TIM_Base_SetConfig+0x40>
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80049c2:	d00f      	beq.n	80049e4 <TIM_Base_SetConfig+0x40>
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	4a40      	ldr	r2, [pc, #256]	@ (8004ac8 <TIM_Base_SetConfig+0x124>)
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d00b      	beq.n	80049e4 <TIM_Base_SetConfig+0x40>
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	4a3f      	ldr	r2, [pc, #252]	@ (8004acc <TIM_Base_SetConfig+0x128>)
 80049d0:	4293      	cmp	r3, r2
 80049d2:	d007      	beq.n	80049e4 <TIM_Base_SetConfig+0x40>
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	4a3e      	ldr	r2, [pc, #248]	@ (8004ad0 <TIM_Base_SetConfig+0x12c>)
 80049d8:	4293      	cmp	r3, r2
 80049da:	d003      	beq.n	80049e4 <TIM_Base_SetConfig+0x40>
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	4a3d      	ldr	r2, [pc, #244]	@ (8004ad4 <TIM_Base_SetConfig+0x130>)
 80049e0:	4293      	cmp	r3, r2
 80049e2:	d108      	bne.n	80049f6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80049ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	685b      	ldr	r3, [r3, #4]
 80049f0:	68fa      	ldr	r2, [r7, #12]
 80049f2:	4313      	orrs	r3, r2
 80049f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	4a32      	ldr	r2, [pc, #200]	@ (8004ac4 <TIM_Base_SetConfig+0x120>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d02b      	beq.n	8004a56 <TIM_Base_SetConfig+0xb2>
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a04:	d027      	beq.n	8004a56 <TIM_Base_SetConfig+0xb2>
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	4a2f      	ldr	r2, [pc, #188]	@ (8004ac8 <TIM_Base_SetConfig+0x124>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d023      	beq.n	8004a56 <TIM_Base_SetConfig+0xb2>
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	4a2e      	ldr	r2, [pc, #184]	@ (8004acc <TIM_Base_SetConfig+0x128>)
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d01f      	beq.n	8004a56 <TIM_Base_SetConfig+0xb2>
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	4a2d      	ldr	r2, [pc, #180]	@ (8004ad0 <TIM_Base_SetConfig+0x12c>)
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d01b      	beq.n	8004a56 <TIM_Base_SetConfig+0xb2>
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	4a2c      	ldr	r2, [pc, #176]	@ (8004ad4 <TIM_Base_SetConfig+0x130>)
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d017      	beq.n	8004a56 <TIM_Base_SetConfig+0xb2>
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	4a2b      	ldr	r2, [pc, #172]	@ (8004ad8 <TIM_Base_SetConfig+0x134>)
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d013      	beq.n	8004a56 <TIM_Base_SetConfig+0xb2>
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	4a2a      	ldr	r2, [pc, #168]	@ (8004adc <TIM_Base_SetConfig+0x138>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d00f      	beq.n	8004a56 <TIM_Base_SetConfig+0xb2>
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	4a29      	ldr	r2, [pc, #164]	@ (8004ae0 <TIM_Base_SetConfig+0x13c>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d00b      	beq.n	8004a56 <TIM_Base_SetConfig+0xb2>
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	4a28      	ldr	r2, [pc, #160]	@ (8004ae4 <TIM_Base_SetConfig+0x140>)
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d007      	beq.n	8004a56 <TIM_Base_SetConfig+0xb2>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	4a27      	ldr	r2, [pc, #156]	@ (8004ae8 <TIM_Base_SetConfig+0x144>)
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d003      	beq.n	8004a56 <TIM_Base_SetConfig+0xb2>
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	4a26      	ldr	r2, [pc, #152]	@ (8004aec <TIM_Base_SetConfig+0x148>)
 8004a52:	4293      	cmp	r3, r2
 8004a54:	d108      	bne.n	8004a68 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004a5c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	68db      	ldr	r3, [r3, #12]
 8004a62:	68fa      	ldr	r2, [r7, #12]
 8004a64:	4313      	orrs	r3, r2
 8004a66:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	695b      	ldr	r3, [r3, #20]
 8004a72:	4313      	orrs	r3, r2
 8004a74:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	689a      	ldr	r2, [r3, #8]
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	681a      	ldr	r2, [r3, #0]
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	4a0e      	ldr	r2, [pc, #56]	@ (8004ac4 <TIM_Base_SetConfig+0x120>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d003      	beq.n	8004a96 <TIM_Base_SetConfig+0xf2>
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	4a10      	ldr	r2, [pc, #64]	@ (8004ad4 <TIM_Base_SetConfig+0x130>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d103      	bne.n	8004a9e <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	691a      	ldr	r2, [r3, #16]
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f043 0204 	orr.w	r2, r3, #4
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2201      	movs	r2, #1
 8004aae:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	68fa      	ldr	r2, [r7, #12]
 8004ab4:	601a      	str	r2, [r3, #0]
}
 8004ab6:	bf00      	nop
 8004ab8:	3714      	adds	r7, #20
 8004aba:	46bd      	mov	sp, r7
 8004abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac0:	4770      	bx	lr
 8004ac2:	bf00      	nop
 8004ac4:	40010000 	.word	0x40010000
 8004ac8:	40000400 	.word	0x40000400
 8004acc:	40000800 	.word	0x40000800
 8004ad0:	40000c00 	.word	0x40000c00
 8004ad4:	40010400 	.word	0x40010400
 8004ad8:	40014000 	.word	0x40014000
 8004adc:	40014400 	.word	0x40014400
 8004ae0:	40014800 	.word	0x40014800
 8004ae4:	40001800 	.word	0x40001800
 8004ae8:	40001c00 	.word	0x40001c00
 8004aec:	40002000 	.word	0x40002000

08004af0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004af0:	b480      	push	{r7}
 8004af2:	b085      	sub	sp, #20
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
 8004af8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004b00:	2b01      	cmp	r3, #1
 8004b02:	d101      	bne.n	8004b08 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004b04:	2302      	movs	r3, #2
 8004b06:	e06d      	b.n	8004be4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2201      	movs	r2, #1
 8004b0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2202      	movs	r2, #2
 8004b14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	685b      	ldr	r3, [r3, #4]
 8004b1e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	689b      	ldr	r3, [r3, #8]
 8004b26:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	4a30      	ldr	r2, [pc, #192]	@ (8004bf0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	d004      	beq.n	8004b3c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	4a2f      	ldr	r2, [pc, #188]	@ (8004bf4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004b38:	4293      	cmp	r3, r2
 8004b3a:	d108      	bne.n	8004b4e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8004b42:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	685b      	ldr	r3, [r3, #4]
 8004b48:	68fa      	ldr	r2, [r7, #12]
 8004b4a:	4313      	orrs	r3, r2
 8004b4c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b54:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	68fa      	ldr	r2, [r7, #12]
 8004b5c:	4313      	orrs	r3, r2
 8004b5e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	68fa      	ldr	r2, [r7, #12]
 8004b66:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	4a20      	ldr	r2, [pc, #128]	@ (8004bf0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d022      	beq.n	8004bb8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b7a:	d01d      	beq.n	8004bb8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	4a1d      	ldr	r2, [pc, #116]	@ (8004bf8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004b82:	4293      	cmp	r3, r2
 8004b84:	d018      	beq.n	8004bb8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	4a1c      	ldr	r2, [pc, #112]	@ (8004bfc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d013      	beq.n	8004bb8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	4a1a      	ldr	r2, [pc, #104]	@ (8004c00 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d00e      	beq.n	8004bb8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	4a15      	ldr	r2, [pc, #84]	@ (8004bf4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004ba0:	4293      	cmp	r3, r2
 8004ba2:	d009      	beq.n	8004bb8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	4a16      	ldr	r2, [pc, #88]	@ (8004c04 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d004      	beq.n	8004bb8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	4a15      	ldr	r2, [pc, #84]	@ (8004c08 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004bb4:	4293      	cmp	r3, r2
 8004bb6:	d10c      	bne.n	8004bd2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004bb8:	68bb      	ldr	r3, [r7, #8]
 8004bba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004bbe:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	689b      	ldr	r3, [r3, #8]
 8004bc4:	68ba      	ldr	r2, [r7, #8]
 8004bc6:	4313      	orrs	r3, r2
 8004bc8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	68ba      	ldr	r2, [r7, #8]
 8004bd0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2201      	movs	r2, #1
 8004bd6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2200      	movs	r2, #0
 8004bde:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004be2:	2300      	movs	r3, #0
}
 8004be4:	4618      	mov	r0, r3
 8004be6:	3714      	adds	r7, #20
 8004be8:	46bd      	mov	sp, r7
 8004bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bee:	4770      	bx	lr
 8004bf0:	40010000 	.word	0x40010000
 8004bf4:	40010400 	.word	0x40010400
 8004bf8:	40000400 	.word	0x40000400
 8004bfc:	40000800 	.word	0x40000800
 8004c00:	40000c00 	.word	0x40000c00
 8004c04:	40014000 	.word	0x40014000
 8004c08:	40001800 	.word	0x40001800

08004c0c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004c0c:	b480      	push	{r7}
 8004c0e:	b083      	sub	sp, #12
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004c14:	bf00      	nop
 8004c16:	370c      	adds	r7, #12
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1e:	4770      	bx	lr

08004c20 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004c20:	b480      	push	{r7}
 8004c22:	b083      	sub	sp, #12
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004c28:	bf00      	nop
 8004c2a:	370c      	adds	r7, #12
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c32:	4770      	bx	lr

08004c34 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004c34:	b480      	push	{r7}
 8004c36:	b083      	sub	sp, #12
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004c3c:	bf00      	nop
 8004c3e:	370c      	adds	r7, #12
 8004c40:	46bd      	mov	sp, r7
 8004c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c46:	4770      	bx	lr

08004c48 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b082      	sub	sp, #8
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d101      	bne.n	8004c5a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c56:	2301      	movs	r3, #1
 8004c58:	e040      	b.n	8004cdc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d106      	bne.n	8004c70 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2200      	movs	r2, #0
 8004c66:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c6a:	6878      	ldr	r0, [r7, #4]
 8004c6c:	f7fc fc54 	bl	8001518 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2224      	movs	r2, #36	@ 0x24
 8004c74:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	681a      	ldr	r2, [r3, #0]
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f022 0201 	bic.w	r2, r2, #1
 8004c84:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d002      	beq.n	8004c94 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004c8e:	6878      	ldr	r0, [r7, #4]
 8004c90:	f000 fb16 	bl	80052c0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004c94:	6878      	ldr	r0, [r7, #4]
 8004c96:	f000 f8af 	bl	8004df8 <UART_SetConfig>
 8004c9a:	4603      	mov	r3, r0
 8004c9c:	2b01      	cmp	r3, #1
 8004c9e:	d101      	bne.n	8004ca4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004ca0:	2301      	movs	r3, #1
 8004ca2:	e01b      	b.n	8004cdc <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	685a      	ldr	r2, [r3, #4]
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004cb2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	689a      	ldr	r2, [r3, #8]
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004cc2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	681a      	ldr	r2, [r3, #0]
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f042 0201 	orr.w	r2, r2, #1
 8004cd2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004cd4:	6878      	ldr	r0, [r7, #4]
 8004cd6:	f000 fb95 	bl	8005404 <UART_CheckIdleState>
 8004cda:	4603      	mov	r3, r0
}
 8004cdc:	4618      	mov	r0, r3
 8004cde:	3708      	adds	r7, #8
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	bd80      	pop	{r7, pc}

08004ce4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b08a      	sub	sp, #40	@ 0x28
 8004ce8:	af02      	add	r7, sp, #8
 8004cea:	60f8      	str	r0, [r7, #12]
 8004cec:	60b9      	str	r1, [r7, #8]
 8004cee:	603b      	str	r3, [r7, #0]
 8004cf0:	4613      	mov	r3, r2
 8004cf2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004cf8:	2b20      	cmp	r3, #32
 8004cfa:	d177      	bne.n	8004dec <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8004cfc:	68bb      	ldr	r3, [r7, #8]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d002      	beq.n	8004d08 <HAL_UART_Transmit+0x24>
 8004d02:	88fb      	ldrh	r3, [r7, #6]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d101      	bne.n	8004d0c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004d08:	2301      	movs	r3, #1
 8004d0a:	e070      	b.n	8004dee <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	2200      	movs	r2, #0
 8004d10:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	2221      	movs	r2, #33	@ 0x21
 8004d18:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004d1a:	f7fc fe21 	bl	8001960 <HAL_GetTick>
 8004d1e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	88fa      	ldrh	r2, [r7, #6]
 8004d24:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	88fa      	ldrh	r2, [r7, #6]
 8004d2c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	689b      	ldr	r3, [r3, #8]
 8004d34:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d38:	d108      	bne.n	8004d4c <HAL_UART_Transmit+0x68>
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	691b      	ldr	r3, [r3, #16]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d104      	bne.n	8004d4c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004d42:	2300      	movs	r3, #0
 8004d44:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004d46:	68bb      	ldr	r3, [r7, #8]
 8004d48:	61bb      	str	r3, [r7, #24]
 8004d4a:	e003      	b.n	8004d54 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004d4c:	68bb      	ldr	r3, [r7, #8]
 8004d4e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004d50:	2300      	movs	r3, #0
 8004d52:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004d54:	e02f      	b.n	8004db6 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	9300      	str	r3, [sp, #0]
 8004d5a:	697b      	ldr	r3, [r7, #20]
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	2180      	movs	r1, #128	@ 0x80
 8004d60:	68f8      	ldr	r0, [r7, #12]
 8004d62:	f000 fba6 	bl	80054b2 <UART_WaitOnFlagUntilTimeout>
 8004d66:	4603      	mov	r3, r0
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d004      	beq.n	8004d76 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	2220      	movs	r2, #32
 8004d70:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8004d72:	2303      	movs	r3, #3
 8004d74:	e03b      	b.n	8004dee <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8004d76:	69fb      	ldr	r3, [r7, #28]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d10b      	bne.n	8004d94 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004d7c:	69bb      	ldr	r3, [r7, #24]
 8004d7e:	881b      	ldrh	r3, [r3, #0]
 8004d80:	461a      	mov	r2, r3
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004d8a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004d8c:	69bb      	ldr	r3, [r7, #24]
 8004d8e:	3302      	adds	r3, #2
 8004d90:	61bb      	str	r3, [r7, #24]
 8004d92:	e007      	b.n	8004da4 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004d94:	69fb      	ldr	r3, [r7, #28]
 8004d96:	781a      	ldrb	r2, [r3, #0]
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004d9e:	69fb      	ldr	r3, [r7, #28]
 8004da0:	3301      	adds	r3, #1
 8004da2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004daa:	b29b      	uxth	r3, r3
 8004dac:	3b01      	subs	r3, #1
 8004dae:	b29a      	uxth	r2, r3
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004dbc:	b29b      	uxth	r3, r3
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d1c9      	bne.n	8004d56 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	9300      	str	r3, [sp, #0]
 8004dc6:	697b      	ldr	r3, [r7, #20]
 8004dc8:	2200      	movs	r2, #0
 8004dca:	2140      	movs	r1, #64	@ 0x40
 8004dcc:	68f8      	ldr	r0, [r7, #12]
 8004dce:	f000 fb70 	bl	80054b2 <UART_WaitOnFlagUntilTimeout>
 8004dd2:	4603      	mov	r3, r0
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d004      	beq.n	8004de2 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	2220      	movs	r2, #32
 8004ddc:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8004dde:	2303      	movs	r3, #3
 8004de0:	e005      	b.n	8004dee <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	2220      	movs	r2, #32
 8004de6:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8004de8:	2300      	movs	r3, #0
 8004dea:	e000      	b.n	8004dee <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8004dec:	2302      	movs	r3, #2
  }
}
 8004dee:	4618      	mov	r0, r3
 8004df0:	3720      	adds	r7, #32
 8004df2:	46bd      	mov	sp, r7
 8004df4:	bd80      	pop	{r7, pc}
	...

08004df8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b088      	sub	sp, #32
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004e00:	2300      	movs	r3, #0
 8004e02:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	689a      	ldr	r2, [r3, #8]
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	691b      	ldr	r3, [r3, #16]
 8004e0c:	431a      	orrs	r2, r3
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	695b      	ldr	r3, [r3, #20]
 8004e12:	431a      	orrs	r2, r3
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	69db      	ldr	r3, [r3, #28]
 8004e18:	4313      	orrs	r3, r2
 8004e1a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	681a      	ldr	r2, [r3, #0]
 8004e22:	4ba6      	ldr	r3, [pc, #664]	@ (80050bc <UART_SetConfig+0x2c4>)
 8004e24:	4013      	ands	r3, r2
 8004e26:	687a      	ldr	r2, [r7, #4]
 8004e28:	6812      	ldr	r2, [r2, #0]
 8004e2a:	6979      	ldr	r1, [r7, #20]
 8004e2c:	430b      	orrs	r3, r1
 8004e2e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	685b      	ldr	r3, [r3, #4]
 8004e36:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	68da      	ldr	r2, [r3, #12]
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	430a      	orrs	r2, r1
 8004e44:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	699b      	ldr	r3, [r3, #24]
 8004e4a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6a1b      	ldr	r3, [r3, #32]
 8004e50:	697a      	ldr	r2, [r7, #20]
 8004e52:	4313      	orrs	r3, r2
 8004e54:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	689b      	ldr	r3, [r3, #8]
 8004e5c:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	697a      	ldr	r2, [r7, #20]
 8004e66:	430a      	orrs	r2, r1
 8004e68:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	4a94      	ldr	r2, [pc, #592]	@ (80050c0 <UART_SetConfig+0x2c8>)
 8004e70:	4293      	cmp	r3, r2
 8004e72:	d120      	bne.n	8004eb6 <UART_SetConfig+0xbe>
 8004e74:	4b93      	ldr	r3, [pc, #588]	@ (80050c4 <UART_SetConfig+0x2cc>)
 8004e76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e7a:	f003 0303 	and.w	r3, r3, #3
 8004e7e:	2b03      	cmp	r3, #3
 8004e80:	d816      	bhi.n	8004eb0 <UART_SetConfig+0xb8>
 8004e82:	a201      	add	r2, pc, #4	@ (adr r2, 8004e88 <UART_SetConfig+0x90>)
 8004e84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e88:	08004e99 	.word	0x08004e99
 8004e8c:	08004ea5 	.word	0x08004ea5
 8004e90:	08004e9f 	.word	0x08004e9f
 8004e94:	08004eab 	.word	0x08004eab
 8004e98:	2301      	movs	r3, #1
 8004e9a:	77fb      	strb	r3, [r7, #31]
 8004e9c:	e150      	b.n	8005140 <UART_SetConfig+0x348>
 8004e9e:	2302      	movs	r3, #2
 8004ea0:	77fb      	strb	r3, [r7, #31]
 8004ea2:	e14d      	b.n	8005140 <UART_SetConfig+0x348>
 8004ea4:	2304      	movs	r3, #4
 8004ea6:	77fb      	strb	r3, [r7, #31]
 8004ea8:	e14a      	b.n	8005140 <UART_SetConfig+0x348>
 8004eaa:	2308      	movs	r3, #8
 8004eac:	77fb      	strb	r3, [r7, #31]
 8004eae:	e147      	b.n	8005140 <UART_SetConfig+0x348>
 8004eb0:	2310      	movs	r3, #16
 8004eb2:	77fb      	strb	r3, [r7, #31]
 8004eb4:	e144      	b.n	8005140 <UART_SetConfig+0x348>
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	4a83      	ldr	r2, [pc, #524]	@ (80050c8 <UART_SetConfig+0x2d0>)
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d132      	bne.n	8004f26 <UART_SetConfig+0x12e>
 8004ec0:	4b80      	ldr	r3, [pc, #512]	@ (80050c4 <UART_SetConfig+0x2cc>)
 8004ec2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ec6:	f003 030c 	and.w	r3, r3, #12
 8004eca:	2b0c      	cmp	r3, #12
 8004ecc:	d828      	bhi.n	8004f20 <UART_SetConfig+0x128>
 8004ece:	a201      	add	r2, pc, #4	@ (adr r2, 8004ed4 <UART_SetConfig+0xdc>)
 8004ed0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ed4:	08004f09 	.word	0x08004f09
 8004ed8:	08004f21 	.word	0x08004f21
 8004edc:	08004f21 	.word	0x08004f21
 8004ee0:	08004f21 	.word	0x08004f21
 8004ee4:	08004f15 	.word	0x08004f15
 8004ee8:	08004f21 	.word	0x08004f21
 8004eec:	08004f21 	.word	0x08004f21
 8004ef0:	08004f21 	.word	0x08004f21
 8004ef4:	08004f0f 	.word	0x08004f0f
 8004ef8:	08004f21 	.word	0x08004f21
 8004efc:	08004f21 	.word	0x08004f21
 8004f00:	08004f21 	.word	0x08004f21
 8004f04:	08004f1b 	.word	0x08004f1b
 8004f08:	2300      	movs	r3, #0
 8004f0a:	77fb      	strb	r3, [r7, #31]
 8004f0c:	e118      	b.n	8005140 <UART_SetConfig+0x348>
 8004f0e:	2302      	movs	r3, #2
 8004f10:	77fb      	strb	r3, [r7, #31]
 8004f12:	e115      	b.n	8005140 <UART_SetConfig+0x348>
 8004f14:	2304      	movs	r3, #4
 8004f16:	77fb      	strb	r3, [r7, #31]
 8004f18:	e112      	b.n	8005140 <UART_SetConfig+0x348>
 8004f1a:	2308      	movs	r3, #8
 8004f1c:	77fb      	strb	r3, [r7, #31]
 8004f1e:	e10f      	b.n	8005140 <UART_SetConfig+0x348>
 8004f20:	2310      	movs	r3, #16
 8004f22:	77fb      	strb	r3, [r7, #31]
 8004f24:	e10c      	b.n	8005140 <UART_SetConfig+0x348>
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	4a68      	ldr	r2, [pc, #416]	@ (80050cc <UART_SetConfig+0x2d4>)
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d120      	bne.n	8004f72 <UART_SetConfig+0x17a>
 8004f30:	4b64      	ldr	r3, [pc, #400]	@ (80050c4 <UART_SetConfig+0x2cc>)
 8004f32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f36:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004f3a:	2b30      	cmp	r3, #48	@ 0x30
 8004f3c:	d013      	beq.n	8004f66 <UART_SetConfig+0x16e>
 8004f3e:	2b30      	cmp	r3, #48	@ 0x30
 8004f40:	d814      	bhi.n	8004f6c <UART_SetConfig+0x174>
 8004f42:	2b20      	cmp	r3, #32
 8004f44:	d009      	beq.n	8004f5a <UART_SetConfig+0x162>
 8004f46:	2b20      	cmp	r3, #32
 8004f48:	d810      	bhi.n	8004f6c <UART_SetConfig+0x174>
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d002      	beq.n	8004f54 <UART_SetConfig+0x15c>
 8004f4e:	2b10      	cmp	r3, #16
 8004f50:	d006      	beq.n	8004f60 <UART_SetConfig+0x168>
 8004f52:	e00b      	b.n	8004f6c <UART_SetConfig+0x174>
 8004f54:	2300      	movs	r3, #0
 8004f56:	77fb      	strb	r3, [r7, #31]
 8004f58:	e0f2      	b.n	8005140 <UART_SetConfig+0x348>
 8004f5a:	2302      	movs	r3, #2
 8004f5c:	77fb      	strb	r3, [r7, #31]
 8004f5e:	e0ef      	b.n	8005140 <UART_SetConfig+0x348>
 8004f60:	2304      	movs	r3, #4
 8004f62:	77fb      	strb	r3, [r7, #31]
 8004f64:	e0ec      	b.n	8005140 <UART_SetConfig+0x348>
 8004f66:	2308      	movs	r3, #8
 8004f68:	77fb      	strb	r3, [r7, #31]
 8004f6a:	e0e9      	b.n	8005140 <UART_SetConfig+0x348>
 8004f6c:	2310      	movs	r3, #16
 8004f6e:	77fb      	strb	r3, [r7, #31]
 8004f70:	e0e6      	b.n	8005140 <UART_SetConfig+0x348>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	4a56      	ldr	r2, [pc, #344]	@ (80050d0 <UART_SetConfig+0x2d8>)
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	d120      	bne.n	8004fbe <UART_SetConfig+0x1c6>
 8004f7c:	4b51      	ldr	r3, [pc, #324]	@ (80050c4 <UART_SetConfig+0x2cc>)
 8004f7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f82:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004f86:	2bc0      	cmp	r3, #192	@ 0xc0
 8004f88:	d013      	beq.n	8004fb2 <UART_SetConfig+0x1ba>
 8004f8a:	2bc0      	cmp	r3, #192	@ 0xc0
 8004f8c:	d814      	bhi.n	8004fb8 <UART_SetConfig+0x1c0>
 8004f8e:	2b80      	cmp	r3, #128	@ 0x80
 8004f90:	d009      	beq.n	8004fa6 <UART_SetConfig+0x1ae>
 8004f92:	2b80      	cmp	r3, #128	@ 0x80
 8004f94:	d810      	bhi.n	8004fb8 <UART_SetConfig+0x1c0>
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d002      	beq.n	8004fa0 <UART_SetConfig+0x1a8>
 8004f9a:	2b40      	cmp	r3, #64	@ 0x40
 8004f9c:	d006      	beq.n	8004fac <UART_SetConfig+0x1b4>
 8004f9e:	e00b      	b.n	8004fb8 <UART_SetConfig+0x1c0>
 8004fa0:	2300      	movs	r3, #0
 8004fa2:	77fb      	strb	r3, [r7, #31]
 8004fa4:	e0cc      	b.n	8005140 <UART_SetConfig+0x348>
 8004fa6:	2302      	movs	r3, #2
 8004fa8:	77fb      	strb	r3, [r7, #31]
 8004faa:	e0c9      	b.n	8005140 <UART_SetConfig+0x348>
 8004fac:	2304      	movs	r3, #4
 8004fae:	77fb      	strb	r3, [r7, #31]
 8004fb0:	e0c6      	b.n	8005140 <UART_SetConfig+0x348>
 8004fb2:	2308      	movs	r3, #8
 8004fb4:	77fb      	strb	r3, [r7, #31]
 8004fb6:	e0c3      	b.n	8005140 <UART_SetConfig+0x348>
 8004fb8:	2310      	movs	r3, #16
 8004fba:	77fb      	strb	r3, [r7, #31]
 8004fbc:	e0c0      	b.n	8005140 <UART_SetConfig+0x348>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	4a44      	ldr	r2, [pc, #272]	@ (80050d4 <UART_SetConfig+0x2dc>)
 8004fc4:	4293      	cmp	r3, r2
 8004fc6:	d125      	bne.n	8005014 <UART_SetConfig+0x21c>
 8004fc8:	4b3e      	ldr	r3, [pc, #248]	@ (80050c4 <UART_SetConfig+0x2cc>)
 8004fca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004fce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004fd2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004fd6:	d017      	beq.n	8005008 <UART_SetConfig+0x210>
 8004fd8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004fdc:	d817      	bhi.n	800500e <UART_SetConfig+0x216>
 8004fde:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004fe2:	d00b      	beq.n	8004ffc <UART_SetConfig+0x204>
 8004fe4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004fe8:	d811      	bhi.n	800500e <UART_SetConfig+0x216>
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d003      	beq.n	8004ff6 <UART_SetConfig+0x1fe>
 8004fee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004ff2:	d006      	beq.n	8005002 <UART_SetConfig+0x20a>
 8004ff4:	e00b      	b.n	800500e <UART_SetConfig+0x216>
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	77fb      	strb	r3, [r7, #31]
 8004ffa:	e0a1      	b.n	8005140 <UART_SetConfig+0x348>
 8004ffc:	2302      	movs	r3, #2
 8004ffe:	77fb      	strb	r3, [r7, #31]
 8005000:	e09e      	b.n	8005140 <UART_SetConfig+0x348>
 8005002:	2304      	movs	r3, #4
 8005004:	77fb      	strb	r3, [r7, #31]
 8005006:	e09b      	b.n	8005140 <UART_SetConfig+0x348>
 8005008:	2308      	movs	r3, #8
 800500a:	77fb      	strb	r3, [r7, #31]
 800500c:	e098      	b.n	8005140 <UART_SetConfig+0x348>
 800500e:	2310      	movs	r3, #16
 8005010:	77fb      	strb	r3, [r7, #31]
 8005012:	e095      	b.n	8005140 <UART_SetConfig+0x348>
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	4a2f      	ldr	r2, [pc, #188]	@ (80050d8 <UART_SetConfig+0x2e0>)
 800501a:	4293      	cmp	r3, r2
 800501c:	d125      	bne.n	800506a <UART_SetConfig+0x272>
 800501e:	4b29      	ldr	r3, [pc, #164]	@ (80050c4 <UART_SetConfig+0x2cc>)
 8005020:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005024:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005028:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800502c:	d017      	beq.n	800505e <UART_SetConfig+0x266>
 800502e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005032:	d817      	bhi.n	8005064 <UART_SetConfig+0x26c>
 8005034:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005038:	d00b      	beq.n	8005052 <UART_SetConfig+0x25a>
 800503a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800503e:	d811      	bhi.n	8005064 <UART_SetConfig+0x26c>
 8005040:	2b00      	cmp	r3, #0
 8005042:	d003      	beq.n	800504c <UART_SetConfig+0x254>
 8005044:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005048:	d006      	beq.n	8005058 <UART_SetConfig+0x260>
 800504a:	e00b      	b.n	8005064 <UART_SetConfig+0x26c>
 800504c:	2301      	movs	r3, #1
 800504e:	77fb      	strb	r3, [r7, #31]
 8005050:	e076      	b.n	8005140 <UART_SetConfig+0x348>
 8005052:	2302      	movs	r3, #2
 8005054:	77fb      	strb	r3, [r7, #31]
 8005056:	e073      	b.n	8005140 <UART_SetConfig+0x348>
 8005058:	2304      	movs	r3, #4
 800505a:	77fb      	strb	r3, [r7, #31]
 800505c:	e070      	b.n	8005140 <UART_SetConfig+0x348>
 800505e:	2308      	movs	r3, #8
 8005060:	77fb      	strb	r3, [r7, #31]
 8005062:	e06d      	b.n	8005140 <UART_SetConfig+0x348>
 8005064:	2310      	movs	r3, #16
 8005066:	77fb      	strb	r3, [r7, #31]
 8005068:	e06a      	b.n	8005140 <UART_SetConfig+0x348>
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	4a1b      	ldr	r2, [pc, #108]	@ (80050dc <UART_SetConfig+0x2e4>)
 8005070:	4293      	cmp	r3, r2
 8005072:	d138      	bne.n	80050e6 <UART_SetConfig+0x2ee>
 8005074:	4b13      	ldr	r3, [pc, #76]	@ (80050c4 <UART_SetConfig+0x2cc>)
 8005076:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800507a:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800507e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005082:	d017      	beq.n	80050b4 <UART_SetConfig+0x2bc>
 8005084:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005088:	d82a      	bhi.n	80050e0 <UART_SetConfig+0x2e8>
 800508a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800508e:	d00b      	beq.n	80050a8 <UART_SetConfig+0x2b0>
 8005090:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005094:	d824      	bhi.n	80050e0 <UART_SetConfig+0x2e8>
 8005096:	2b00      	cmp	r3, #0
 8005098:	d003      	beq.n	80050a2 <UART_SetConfig+0x2aa>
 800509a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800509e:	d006      	beq.n	80050ae <UART_SetConfig+0x2b6>
 80050a0:	e01e      	b.n	80050e0 <UART_SetConfig+0x2e8>
 80050a2:	2300      	movs	r3, #0
 80050a4:	77fb      	strb	r3, [r7, #31]
 80050a6:	e04b      	b.n	8005140 <UART_SetConfig+0x348>
 80050a8:	2302      	movs	r3, #2
 80050aa:	77fb      	strb	r3, [r7, #31]
 80050ac:	e048      	b.n	8005140 <UART_SetConfig+0x348>
 80050ae:	2304      	movs	r3, #4
 80050b0:	77fb      	strb	r3, [r7, #31]
 80050b2:	e045      	b.n	8005140 <UART_SetConfig+0x348>
 80050b4:	2308      	movs	r3, #8
 80050b6:	77fb      	strb	r3, [r7, #31]
 80050b8:	e042      	b.n	8005140 <UART_SetConfig+0x348>
 80050ba:	bf00      	nop
 80050bc:	efff69f3 	.word	0xefff69f3
 80050c0:	40011000 	.word	0x40011000
 80050c4:	40023800 	.word	0x40023800
 80050c8:	40004400 	.word	0x40004400
 80050cc:	40004800 	.word	0x40004800
 80050d0:	40004c00 	.word	0x40004c00
 80050d4:	40005000 	.word	0x40005000
 80050d8:	40011400 	.word	0x40011400
 80050dc:	40007800 	.word	0x40007800
 80050e0:	2310      	movs	r3, #16
 80050e2:	77fb      	strb	r3, [r7, #31]
 80050e4:	e02c      	b.n	8005140 <UART_SetConfig+0x348>
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	4a72      	ldr	r2, [pc, #456]	@ (80052b4 <UART_SetConfig+0x4bc>)
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d125      	bne.n	800513c <UART_SetConfig+0x344>
 80050f0:	4b71      	ldr	r3, [pc, #452]	@ (80052b8 <UART_SetConfig+0x4c0>)
 80050f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050f6:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80050fa:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80050fe:	d017      	beq.n	8005130 <UART_SetConfig+0x338>
 8005100:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8005104:	d817      	bhi.n	8005136 <UART_SetConfig+0x33e>
 8005106:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800510a:	d00b      	beq.n	8005124 <UART_SetConfig+0x32c>
 800510c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005110:	d811      	bhi.n	8005136 <UART_SetConfig+0x33e>
 8005112:	2b00      	cmp	r3, #0
 8005114:	d003      	beq.n	800511e <UART_SetConfig+0x326>
 8005116:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800511a:	d006      	beq.n	800512a <UART_SetConfig+0x332>
 800511c:	e00b      	b.n	8005136 <UART_SetConfig+0x33e>
 800511e:	2300      	movs	r3, #0
 8005120:	77fb      	strb	r3, [r7, #31]
 8005122:	e00d      	b.n	8005140 <UART_SetConfig+0x348>
 8005124:	2302      	movs	r3, #2
 8005126:	77fb      	strb	r3, [r7, #31]
 8005128:	e00a      	b.n	8005140 <UART_SetConfig+0x348>
 800512a:	2304      	movs	r3, #4
 800512c:	77fb      	strb	r3, [r7, #31]
 800512e:	e007      	b.n	8005140 <UART_SetConfig+0x348>
 8005130:	2308      	movs	r3, #8
 8005132:	77fb      	strb	r3, [r7, #31]
 8005134:	e004      	b.n	8005140 <UART_SetConfig+0x348>
 8005136:	2310      	movs	r3, #16
 8005138:	77fb      	strb	r3, [r7, #31]
 800513a:	e001      	b.n	8005140 <UART_SetConfig+0x348>
 800513c:	2310      	movs	r3, #16
 800513e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	69db      	ldr	r3, [r3, #28]
 8005144:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005148:	d15b      	bne.n	8005202 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800514a:	7ffb      	ldrb	r3, [r7, #31]
 800514c:	2b08      	cmp	r3, #8
 800514e:	d828      	bhi.n	80051a2 <UART_SetConfig+0x3aa>
 8005150:	a201      	add	r2, pc, #4	@ (adr r2, 8005158 <UART_SetConfig+0x360>)
 8005152:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005156:	bf00      	nop
 8005158:	0800517d 	.word	0x0800517d
 800515c:	08005185 	.word	0x08005185
 8005160:	0800518d 	.word	0x0800518d
 8005164:	080051a3 	.word	0x080051a3
 8005168:	08005193 	.word	0x08005193
 800516c:	080051a3 	.word	0x080051a3
 8005170:	080051a3 	.word	0x080051a3
 8005174:	080051a3 	.word	0x080051a3
 8005178:	0800519b 	.word	0x0800519b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800517c:	f7fe fdc8 	bl	8003d10 <HAL_RCC_GetPCLK1Freq>
 8005180:	61b8      	str	r0, [r7, #24]
        break;
 8005182:	e013      	b.n	80051ac <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005184:	f7fe fdd8 	bl	8003d38 <HAL_RCC_GetPCLK2Freq>
 8005188:	61b8      	str	r0, [r7, #24]
        break;
 800518a:	e00f      	b.n	80051ac <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800518c:	4b4b      	ldr	r3, [pc, #300]	@ (80052bc <UART_SetConfig+0x4c4>)
 800518e:	61bb      	str	r3, [r7, #24]
        break;
 8005190:	e00c      	b.n	80051ac <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005192:	f7fe fceb 	bl	8003b6c <HAL_RCC_GetSysClockFreq>
 8005196:	61b8      	str	r0, [r7, #24]
        break;
 8005198:	e008      	b.n	80051ac <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800519a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800519e:	61bb      	str	r3, [r7, #24]
        break;
 80051a0:	e004      	b.n	80051ac <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80051a2:	2300      	movs	r3, #0
 80051a4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80051a6:	2301      	movs	r3, #1
 80051a8:	77bb      	strb	r3, [r7, #30]
        break;
 80051aa:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80051ac:	69bb      	ldr	r3, [r7, #24]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d074      	beq.n	800529c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80051b2:	69bb      	ldr	r3, [r7, #24]
 80051b4:	005a      	lsls	r2, r3, #1
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	685b      	ldr	r3, [r3, #4]
 80051ba:	085b      	lsrs	r3, r3, #1
 80051bc:	441a      	add	r2, r3
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	685b      	ldr	r3, [r3, #4]
 80051c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80051c6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80051c8:	693b      	ldr	r3, [r7, #16]
 80051ca:	2b0f      	cmp	r3, #15
 80051cc:	d916      	bls.n	80051fc <UART_SetConfig+0x404>
 80051ce:	693b      	ldr	r3, [r7, #16]
 80051d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80051d4:	d212      	bcs.n	80051fc <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80051d6:	693b      	ldr	r3, [r7, #16]
 80051d8:	b29b      	uxth	r3, r3
 80051da:	f023 030f 	bic.w	r3, r3, #15
 80051de:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80051e0:	693b      	ldr	r3, [r7, #16]
 80051e2:	085b      	lsrs	r3, r3, #1
 80051e4:	b29b      	uxth	r3, r3
 80051e6:	f003 0307 	and.w	r3, r3, #7
 80051ea:	b29a      	uxth	r2, r3
 80051ec:	89fb      	ldrh	r3, [r7, #14]
 80051ee:	4313      	orrs	r3, r2
 80051f0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	89fa      	ldrh	r2, [r7, #14]
 80051f8:	60da      	str	r2, [r3, #12]
 80051fa:	e04f      	b.n	800529c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80051fc:	2301      	movs	r3, #1
 80051fe:	77bb      	strb	r3, [r7, #30]
 8005200:	e04c      	b.n	800529c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005202:	7ffb      	ldrb	r3, [r7, #31]
 8005204:	2b08      	cmp	r3, #8
 8005206:	d828      	bhi.n	800525a <UART_SetConfig+0x462>
 8005208:	a201      	add	r2, pc, #4	@ (adr r2, 8005210 <UART_SetConfig+0x418>)
 800520a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800520e:	bf00      	nop
 8005210:	08005235 	.word	0x08005235
 8005214:	0800523d 	.word	0x0800523d
 8005218:	08005245 	.word	0x08005245
 800521c:	0800525b 	.word	0x0800525b
 8005220:	0800524b 	.word	0x0800524b
 8005224:	0800525b 	.word	0x0800525b
 8005228:	0800525b 	.word	0x0800525b
 800522c:	0800525b 	.word	0x0800525b
 8005230:	08005253 	.word	0x08005253
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005234:	f7fe fd6c 	bl	8003d10 <HAL_RCC_GetPCLK1Freq>
 8005238:	61b8      	str	r0, [r7, #24]
        break;
 800523a:	e013      	b.n	8005264 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800523c:	f7fe fd7c 	bl	8003d38 <HAL_RCC_GetPCLK2Freq>
 8005240:	61b8      	str	r0, [r7, #24]
        break;
 8005242:	e00f      	b.n	8005264 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005244:	4b1d      	ldr	r3, [pc, #116]	@ (80052bc <UART_SetConfig+0x4c4>)
 8005246:	61bb      	str	r3, [r7, #24]
        break;
 8005248:	e00c      	b.n	8005264 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800524a:	f7fe fc8f 	bl	8003b6c <HAL_RCC_GetSysClockFreq>
 800524e:	61b8      	str	r0, [r7, #24]
        break;
 8005250:	e008      	b.n	8005264 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005252:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005256:	61bb      	str	r3, [r7, #24]
        break;
 8005258:	e004      	b.n	8005264 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800525a:	2300      	movs	r3, #0
 800525c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800525e:	2301      	movs	r3, #1
 8005260:	77bb      	strb	r3, [r7, #30]
        break;
 8005262:	bf00      	nop
    }

    if (pclk != 0U)
 8005264:	69bb      	ldr	r3, [r7, #24]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d018      	beq.n	800529c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	685b      	ldr	r3, [r3, #4]
 800526e:	085a      	lsrs	r2, r3, #1
 8005270:	69bb      	ldr	r3, [r7, #24]
 8005272:	441a      	add	r2, r3
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	685b      	ldr	r3, [r3, #4]
 8005278:	fbb2 f3f3 	udiv	r3, r2, r3
 800527c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800527e:	693b      	ldr	r3, [r7, #16]
 8005280:	2b0f      	cmp	r3, #15
 8005282:	d909      	bls.n	8005298 <UART_SetConfig+0x4a0>
 8005284:	693b      	ldr	r3, [r7, #16]
 8005286:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800528a:	d205      	bcs.n	8005298 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800528c:	693b      	ldr	r3, [r7, #16]
 800528e:	b29a      	uxth	r2, r3
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	60da      	str	r2, [r3, #12]
 8005296:	e001      	b.n	800529c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005298:	2301      	movs	r3, #1
 800529a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2200      	movs	r2, #0
 80052a0:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	2200      	movs	r2, #0
 80052a6:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80052a8:	7fbb      	ldrb	r3, [r7, #30]
}
 80052aa:	4618      	mov	r0, r3
 80052ac:	3720      	adds	r7, #32
 80052ae:	46bd      	mov	sp, r7
 80052b0:	bd80      	pop	{r7, pc}
 80052b2:	bf00      	nop
 80052b4:	40007c00 	.word	0x40007c00
 80052b8:	40023800 	.word	0x40023800
 80052bc:	00f42400 	.word	0x00f42400

080052c0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80052c0:	b480      	push	{r7}
 80052c2:	b083      	sub	sp, #12
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052cc:	f003 0308 	and.w	r3, r3, #8
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d00a      	beq.n	80052ea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	685b      	ldr	r3, [r3, #4]
 80052da:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	430a      	orrs	r2, r1
 80052e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052ee:	f003 0301 	and.w	r3, r3, #1
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d00a      	beq.n	800530c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	685b      	ldr	r3, [r3, #4]
 80052fc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	430a      	orrs	r2, r1
 800530a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005310:	f003 0302 	and.w	r3, r3, #2
 8005314:	2b00      	cmp	r3, #0
 8005316:	d00a      	beq.n	800532e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	685b      	ldr	r3, [r3, #4]
 800531e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	430a      	orrs	r2, r1
 800532c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005332:	f003 0304 	and.w	r3, r3, #4
 8005336:	2b00      	cmp	r3, #0
 8005338:	d00a      	beq.n	8005350 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	685b      	ldr	r3, [r3, #4]
 8005340:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	430a      	orrs	r2, r1
 800534e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005354:	f003 0310 	and.w	r3, r3, #16
 8005358:	2b00      	cmp	r3, #0
 800535a:	d00a      	beq.n	8005372 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	689b      	ldr	r3, [r3, #8]
 8005362:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	430a      	orrs	r2, r1
 8005370:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005376:	f003 0320 	and.w	r3, r3, #32
 800537a:	2b00      	cmp	r3, #0
 800537c:	d00a      	beq.n	8005394 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	689b      	ldr	r3, [r3, #8]
 8005384:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	430a      	orrs	r2, r1
 8005392:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005398:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800539c:	2b00      	cmp	r3, #0
 800539e:	d01a      	beq.n	80053d6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	685b      	ldr	r3, [r3, #4]
 80053a6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	430a      	orrs	r2, r1
 80053b4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053ba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80053be:	d10a      	bne.n	80053d6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	685b      	ldr	r3, [r3, #4]
 80053c6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	430a      	orrs	r2, r1
 80053d4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d00a      	beq.n	80053f8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	685b      	ldr	r3, [r3, #4]
 80053e8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	430a      	orrs	r2, r1
 80053f6:	605a      	str	r2, [r3, #4]
  }
}
 80053f8:	bf00      	nop
 80053fa:	370c      	adds	r7, #12
 80053fc:	46bd      	mov	sp, r7
 80053fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005402:	4770      	bx	lr

08005404 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005404:	b580      	push	{r7, lr}
 8005406:	b08c      	sub	sp, #48	@ 0x30
 8005408:	af02      	add	r7, sp, #8
 800540a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2200      	movs	r2, #0
 8005410:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005414:	f7fc faa4 	bl	8001960 <HAL_GetTick>
 8005418:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f003 0308 	and.w	r3, r3, #8
 8005424:	2b08      	cmp	r3, #8
 8005426:	d12e      	bne.n	8005486 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005428:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800542c:	9300      	str	r3, [sp, #0]
 800542e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005430:	2200      	movs	r2, #0
 8005432:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005436:	6878      	ldr	r0, [r7, #4]
 8005438:	f000 f83b 	bl	80054b2 <UART_WaitOnFlagUntilTimeout>
 800543c:	4603      	mov	r3, r0
 800543e:	2b00      	cmp	r3, #0
 8005440:	d021      	beq.n	8005486 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	613b      	str	r3, [r7, #16]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005448:	693b      	ldr	r3, [r7, #16]
 800544a:	e853 3f00 	ldrex	r3, [r3]
 800544e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005456:	623b      	str	r3, [r7, #32]
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	461a      	mov	r2, r3
 800545e:	6a3b      	ldr	r3, [r7, #32]
 8005460:	61fb      	str	r3, [r7, #28]
 8005462:	61ba      	str	r2, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005464:	69b9      	ldr	r1, [r7, #24]
 8005466:	69fa      	ldr	r2, [r7, #28]
 8005468:	e841 2300 	strex	r3, r2, [r1]
 800546c:	617b      	str	r3, [r7, #20]
   return(result);
 800546e:	697b      	ldr	r3, [r7, #20]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d1e6      	bne.n	8005442 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2220      	movs	r2, #32
 8005478:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2200      	movs	r2, #0
 800547e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005482:	2303      	movs	r3, #3
 8005484:	e011      	b.n	80054aa <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	2220      	movs	r2, #32
 800548a:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2220      	movs	r2, #32
 8005490:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2200      	movs	r2, #0
 8005498:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	2200      	movs	r2, #0
 800549e:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2200      	movs	r2, #0
 80054a4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80054a8:	2300      	movs	r3, #0
}
 80054aa:	4618      	mov	r0, r3
 80054ac:	3728      	adds	r7, #40	@ 0x28
 80054ae:	46bd      	mov	sp, r7
 80054b0:	bd80      	pop	{r7, pc}

080054b2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80054b2:	b580      	push	{r7, lr}
 80054b4:	b084      	sub	sp, #16
 80054b6:	af00      	add	r7, sp, #0
 80054b8:	60f8      	str	r0, [r7, #12]
 80054ba:	60b9      	str	r1, [r7, #8]
 80054bc:	603b      	str	r3, [r7, #0]
 80054be:	4613      	mov	r3, r2
 80054c0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80054c2:	e04f      	b.n	8005564 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80054c4:	69bb      	ldr	r3, [r7, #24]
 80054c6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80054ca:	d04b      	beq.n	8005564 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80054cc:	f7fc fa48 	bl	8001960 <HAL_GetTick>
 80054d0:	4602      	mov	r2, r0
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	1ad3      	subs	r3, r2, r3
 80054d6:	69ba      	ldr	r2, [r7, #24]
 80054d8:	429a      	cmp	r2, r3
 80054da:	d302      	bcc.n	80054e2 <UART_WaitOnFlagUntilTimeout+0x30>
 80054dc:	69bb      	ldr	r3, [r7, #24]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d101      	bne.n	80054e6 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80054e2:	2303      	movs	r3, #3
 80054e4:	e04e      	b.n	8005584 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f003 0304 	and.w	r3, r3, #4
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d037      	beq.n	8005564 <UART_WaitOnFlagUntilTimeout+0xb2>
 80054f4:	68bb      	ldr	r3, [r7, #8]
 80054f6:	2b80      	cmp	r3, #128	@ 0x80
 80054f8:	d034      	beq.n	8005564 <UART_WaitOnFlagUntilTimeout+0xb2>
 80054fa:	68bb      	ldr	r3, [r7, #8]
 80054fc:	2b40      	cmp	r3, #64	@ 0x40
 80054fe:	d031      	beq.n	8005564 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	69db      	ldr	r3, [r3, #28]
 8005506:	f003 0308 	and.w	r3, r3, #8
 800550a:	2b08      	cmp	r3, #8
 800550c:	d110      	bne.n	8005530 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	2208      	movs	r2, #8
 8005514:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005516:	68f8      	ldr	r0, [r7, #12]
 8005518:	f000 f838 	bl	800558c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	2208      	movs	r2, #8
 8005520:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	2200      	movs	r2, #0
 8005528:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800552c:	2301      	movs	r3, #1
 800552e:	e029      	b.n	8005584 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	69db      	ldr	r3, [r3, #28]
 8005536:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800553a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800553e:	d111      	bne.n	8005564 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005548:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800554a:	68f8      	ldr	r0, [r7, #12]
 800554c:	f000 f81e 	bl	800558c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	2220      	movs	r2, #32
 8005554:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	2200      	movs	r2, #0
 800555c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8005560:	2303      	movs	r3, #3
 8005562:	e00f      	b.n	8005584 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	69da      	ldr	r2, [r3, #28]
 800556a:	68bb      	ldr	r3, [r7, #8]
 800556c:	4013      	ands	r3, r2
 800556e:	68ba      	ldr	r2, [r7, #8]
 8005570:	429a      	cmp	r2, r3
 8005572:	bf0c      	ite	eq
 8005574:	2301      	moveq	r3, #1
 8005576:	2300      	movne	r3, #0
 8005578:	b2db      	uxtb	r3, r3
 800557a:	461a      	mov	r2, r3
 800557c:	79fb      	ldrb	r3, [r7, #7]
 800557e:	429a      	cmp	r2, r3
 8005580:	d0a0      	beq.n	80054c4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005582:	2300      	movs	r3, #0
}
 8005584:	4618      	mov	r0, r3
 8005586:	3710      	adds	r7, #16
 8005588:	46bd      	mov	sp, r7
 800558a:	bd80      	pop	{r7, pc}

0800558c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800558c:	b480      	push	{r7}
 800558e:	b095      	sub	sp, #84	@ 0x54
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800559a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800559c:	e853 3f00 	ldrex	r3, [r3]
 80055a0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80055a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055a4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80055a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	461a      	mov	r2, r3
 80055b0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80055b2:	643b      	str	r3, [r7, #64]	@ 0x40
 80055b4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055b6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80055b8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80055ba:	e841 2300 	strex	r3, r2, [r1]
 80055be:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80055c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d1e6      	bne.n	8005594 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	3308      	adds	r3, #8
 80055cc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055ce:	6a3b      	ldr	r3, [r7, #32]
 80055d0:	e853 3f00 	ldrex	r3, [r3]
 80055d4:	61fb      	str	r3, [r7, #28]
   return(result);
 80055d6:	69fb      	ldr	r3, [r7, #28]
 80055d8:	f023 0301 	bic.w	r3, r3, #1
 80055dc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	3308      	adds	r3, #8
 80055e4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80055e6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80055e8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055ea:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80055ec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80055ee:	e841 2300 	strex	r3, r2, [r1]
 80055f2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80055f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d1e5      	bne.n	80055c6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80055fe:	2b01      	cmp	r3, #1
 8005600:	d118      	bne.n	8005634 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	e853 3f00 	ldrex	r3, [r3]
 800560e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005610:	68bb      	ldr	r3, [r7, #8]
 8005612:	f023 0310 	bic.w	r3, r3, #16
 8005616:	647b      	str	r3, [r7, #68]	@ 0x44
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	461a      	mov	r2, r3
 800561e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005620:	61bb      	str	r3, [r7, #24]
 8005622:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005624:	6979      	ldr	r1, [r7, #20]
 8005626:	69ba      	ldr	r2, [r7, #24]
 8005628:	e841 2300 	strex	r3, r2, [r1]
 800562c:	613b      	str	r3, [r7, #16]
   return(result);
 800562e:	693b      	ldr	r3, [r7, #16]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d1e6      	bne.n	8005602 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2220      	movs	r2, #32
 8005638:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2200      	movs	r2, #0
 8005640:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	2200      	movs	r2, #0
 8005646:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005648:	bf00      	nop
 800564a:	3754      	adds	r7, #84	@ 0x54
 800564c:	46bd      	mov	sp, r7
 800564e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005652:	4770      	bx	lr

08005654 <StartGPSTask>:
static uint32_t until_next_park = 0;

extern osMessageQueueId_t gpsMsgQueueHandle;

void StartGPSTask(void *argument)
{
 8005654:	b580      	push	{r7, lr}
 8005656:	b082      	sub	sp, #8
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
	srand(0);
 800565c:	2000      	movs	r0, #0
 800565e:	f003 fa4d 	bl	8008afc <srand>
	lat = START_LAT;
 8005662:	4b2c      	ldr	r3, [pc, #176]	@ (8005714 <StartGPSTask+0xc0>)
 8005664:	4a2c      	ldr	r2, [pc, #176]	@ (8005718 <StartGPSTask+0xc4>)
 8005666:	601a      	str	r2, [r3, #0]
	lon = START_LON;
 8005668:	4b2c      	ldr	r3, [pc, #176]	@ (800571c <StartGPSTask+0xc8>)
 800566a:	4a2d      	ldr	r2, [pc, #180]	@ (8005720 <StartGPSTask+0xcc>)
 800566c:	601a      	str	r2, [r3, #0]

	until_next_park = rand_uint_range(PARK_INTERVAL_MIN, PARK_INTERVAL_MAX);
 800566e:	210f      	movs	r1, #15
 8005670:	2005      	movs	r0, #5
 8005672:	f000 f883 	bl	800577c <rand_uint_range>
 8005676:	4603      	mov	r3, r0
 8005678:	4a2a      	ldr	r2, [pc, #168]	@ (8005724 <StartGPSTask+0xd0>)
 800567a:	6013      	str	r3, [r2, #0]

	while (1)
	{
		if (is_parking)
 800567c:	4b2a      	ldr	r3, [pc, #168]	@ (8005728 <StartGPSTask+0xd4>)
 800567e:	781b      	ldrb	r3, [r3, #0]
 8005680:	2b00      	cmp	r3, #0
 8005682:	d027      	beq.n	80056d4 <StartGPSTask+0x80>
		{
			if (park_counter == 0)
 8005684:	4b29      	ldr	r3, [pc, #164]	@ (800572c <StartGPSTask+0xd8>)
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	2b00      	cmp	r3, #0
 800568a:	d103      	bne.n	8005694 <StartGPSTask+0x40>
			{
				send_gps_msg(MSG_START);
 800568c:	2001      	movs	r0, #1
 800568e:	f000 f905 	bl	800589c <send_gps_msg>
 8005692:	e019      	b.n	80056c8 <StartGPSTask+0x74>
			}
			else if (park_counter >= park_duration)
 8005694:	4b25      	ldr	r3, [pc, #148]	@ (800572c <StartGPSTask+0xd8>)
 8005696:	681a      	ldr	r2, [r3, #0]
 8005698:	4b25      	ldr	r3, [pc, #148]	@ (8005730 <StartGPSTask+0xdc>)
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	429a      	cmp	r2, r3
 800569e:	d310      	bcc.n	80056c2 <StartGPSTask+0x6e>
			{
				send_gps_msg(MSG_STOP);
 80056a0:	2002      	movs	r0, #2
 80056a2:	f000 f8fb 	bl	800589c <send_gps_msg>
				is_parking = 0;
 80056a6:	4b20      	ldr	r3, [pc, #128]	@ (8005728 <StartGPSTask+0xd4>)
 80056a8:	2200      	movs	r2, #0
 80056aa:	701a      	strb	r2, [r3, #0]
				until_next_park = rand_uint_range(PARK_INTERVAL_MIN, PARK_INTERVAL_MAX);
 80056ac:	210f      	movs	r1, #15
 80056ae:	2005      	movs	r0, #5
 80056b0:	f000 f864 	bl	800577c <rand_uint_range>
 80056b4:	4603      	mov	r3, r0
 80056b6:	4a1b      	ldr	r2, [pc, #108]	@ (8005724 <StartGPSTask+0xd0>)
 80056b8:	6013      	str	r3, [r2, #0]
				park_counter = 0;
 80056ba:	4b1c      	ldr	r3, [pc, #112]	@ (800572c <StartGPSTask+0xd8>)
 80056bc:	2200      	movs	r2, #0
 80056be:	601a      	str	r2, [r3, #0]
 80056c0:	e002      	b.n	80056c8 <StartGPSTask+0x74>
			}
			else
			{
				send_gps_msg(MSG_IDLE);
 80056c2:	2000      	movs	r0, #0
 80056c4:	f000 f8ea 	bl	800589c <send_gps_msg>
			}
			park_counter++;
 80056c8:	4b18      	ldr	r3, [pc, #96]	@ (800572c <StartGPSTask+0xd8>)
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	3301      	adds	r3, #1
 80056ce:	4a17      	ldr	r2, [pc, #92]	@ (800572c <StartGPSTask+0xd8>)
 80056d0:	6013      	str	r3, [r2, #0]
 80056d2:	e01a      	b.n	800570a <StartGPSTask+0xb6>
		}
		else
		{
			update_position_randomly();
 80056d4:	f000 f86a 	bl	80057ac <update_position_randomly>
			send_gps_msg(MSG_IDLE);
 80056d8:	2000      	movs	r0, #0
 80056da:	f000 f8df 	bl	800589c <send_gps_msg>
			if (--until_next_park == 0)
 80056de:	4b11      	ldr	r3, [pc, #68]	@ (8005724 <StartGPSTask+0xd0>)
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	3b01      	subs	r3, #1
 80056e4:	4a0f      	ldr	r2, [pc, #60]	@ (8005724 <StartGPSTask+0xd0>)
 80056e6:	6013      	str	r3, [r2, #0]
 80056e8:	4b0e      	ldr	r3, [pc, #56]	@ (8005724 <StartGPSTask+0xd0>)
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d10c      	bne.n	800570a <StartGPSTask+0xb6>
			{
				is_parking = 1;
 80056f0:	4b0d      	ldr	r3, [pc, #52]	@ (8005728 <StartGPSTask+0xd4>)
 80056f2:	2201      	movs	r2, #1
 80056f4:	701a      	strb	r2, [r3, #0]
				park_duration = rand_uint_range(PARK_DURATION_MIN, PARK_DURATION_MAX);
 80056f6:	210a      	movs	r1, #10
 80056f8:	2001      	movs	r0, #1
 80056fa:	f000 f83f 	bl	800577c <rand_uint_range>
 80056fe:	4603      	mov	r3, r0
 8005700:	4a0b      	ldr	r2, [pc, #44]	@ (8005730 <StartGPSTask+0xdc>)
 8005702:	6013      	str	r3, [r2, #0]
				park_counter = 0;
 8005704:	4b09      	ldr	r3, [pc, #36]	@ (800572c <StartGPSTask+0xd8>)
 8005706:	2200      	movs	r2, #0
 8005708:	601a      	str	r2, [r3, #0]
			}
		}

		osDelay(1000);
 800570a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800570e:	f000 fa9d 	bl	8005c4c <osDelay>
		if (is_parking)
 8005712:	e7b3      	b.n	800567c <StartGPSTask+0x28>
 8005714:	200003f0 	.word	0x200003f0
 8005718:	42001aee 	.word	0x42001aee
 800571c:	200003f4 	.word	0x200003f4
 8005720:	420b4d84 	.word	0x420b4d84
 8005724:	20000404 	.word	0x20000404
 8005728:	200003f8 	.word	0x200003f8
 800572c:	200003fc 	.word	0x200003fc
 8005730:	20000400 	.word	0x20000400

08005734 <rand_float_range>:
	}
}

static float rand_float_range(float min, float max)
{
 8005734:	b580      	push	{r7, lr}
 8005736:	b082      	sub	sp, #8
 8005738:	af00      	add	r7, sp, #0
 800573a:	ed87 0a01 	vstr	s0, [r7, #4]
 800573e:	edc7 0a00 	vstr	s1, [r7]
    return min + ((float)rand() / RAND_MAX) * (max - min);
 8005742:	f003 fa09 	bl	8008b58 <rand>
 8005746:	ee07 0a90 	vmov	s15, r0
 800574a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800574e:	eddf 6a0a 	vldr	s13, [pc, #40]	@ 8005778 <rand_float_range+0x44>
 8005752:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8005756:	edd7 6a00 	vldr	s13, [r7]
 800575a:	edd7 7a01 	vldr	s15, [r7, #4]
 800575e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8005762:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005766:	edd7 7a01 	vldr	s15, [r7, #4]
 800576a:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 800576e:	eeb0 0a67 	vmov.f32	s0, s15
 8005772:	3708      	adds	r7, #8
 8005774:	46bd      	mov	sp, r7
 8005776:	bd80      	pop	{r7, pc}
 8005778:	4f000000 	.word	0x4f000000

0800577c <rand_uint_range>:

static uint32_t rand_uint_range(uint32_t min, uint32_t max)
{
 800577c:	b580      	push	{r7, lr}
 800577e:	b082      	sub	sp, #8
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
 8005784:	6039      	str	r1, [r7, #0]
    return min + (rand() % (max - min + 1));
 8005786:	f003 f9e7 	bl	8008b58 <rand>
 800578a:	4603      	mov	r3, r0
 800578c:	461a      	mov	r2, r3
 800578e:	6839      	ldr	r1, [r7, #0]
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	1acb      	subs	r3, r1, r3
 8005794:	3301      	adds	r3, #1
 8005796:	fbb2 f1f3 	udiv	r1, r2, r3
 800579a:	fb01 f303 	mul.w	r3, r1, r3
 800579e:	1ad2      	subs	r2, r2, r3
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	4413      	add	r3, r2
}
 80057a4:	4618      	mov	r0, r3
 80057a6:	3708      	adds	r7, #8
 80057a8:	46bd      	mov	sp, r7
 80057aa:	bd80      	pop	{r7, pc}

080057ac <update_position_randomly>:

static void update_position_randomly(void)
{
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b082      	sub	sp, #8
 80057b0:	af00      	add	r7, sp, #0
    float d_lat = rand_float_range(MOVE_STEP_MIN, MOVE_STEP_MAX);
 80057b2:	eddf 0a2e 	vldr	s1, [pc, #184]	@ 800586c <update_position_randomly+0xc0>
 80057b6:	ed9f 0a2e 	vldr	s0, [pc, #184]	@ 8005870 <update_position_randomly+0xc4>
 80057ba:	f7ff ffbb 	bl	8005734 <rand_float_range>
 80057be:	ed87 0a01 	vstr	s0, [r7, #4]
    float d_lon = rand_float_range(MOVE_STEP_MIN, MOVE_STEP_MAX);
 80057c2:	eddf 0a2a 	vldr	s1, [pc, #168]	@ 800586c <update_position_randomly+0xc0>
 80057c6:	ed9f 0a2a 	vldr	s0, [pc, #168]	@ 8005870 <update_position_randomly+0xc4>
 80057ca:	f7ff ffb3 	bl	8005734 <rand_float_range>
 80057ce:	ed87 0a00 	vstr	s0, [r7]

    lat += d_lat;
 80057d2:	4b28      	ldr	r3, [pc, #160]	@ (8005874 <update_position_randomly+0xc8>)
 80057d4:	ed93 7a00 	vldr	s14, [r3]
 80057d8:	edd7 7a01 	vldr	s15, [r7, #4]
 80057dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80057e0:	4b24      	ldr	r3, [pc, #144]	@ (8005874 <update_position_randomly+0xc8>)
 80057e2:	edc3 7a00 	vstr	s15, [r3]
    lon += d_lon;
 80057e6:	4b24      	ldr	r3, [pc, #144]	@ (8005878 <update_position_randomly+0xcc>)
 80057e8:	ed93 7a00 	vldr	s14, [r3]
 80057ec:	edd7 7a00 	vldr	s15, [r7]
 80057f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80057f4:	4b20      	ldr	r3, [pc, #128]	@ (8005878 <update_position_randomly+0xcc>)
 80057f6:	edc3 7a00 	vstr	s15, [r3]

    if (lat < LAT_MIN) lat = LAT_MIN;
 80057fa:	4b1e      	ldr	r3, [pc, #120]	@ (8005874 <update_position_randomly+0xc8>)
 80057fc:	edd3 7a00 	vldr	s15, [r3]
 8005800:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 800587c <update_position_randomly+0xd0>
 8005804:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005808:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800580c:	d502      	bpl.n	8005814 <update_position_randomly+0x68>
 800580e:	4b19      	ldr	r3, [pc, #100]	@ (8005874 <update_position_randomly+0xc8>)
 8005810:	4a1b      	ldr	r2, [pc, #108]	@ (8005880 <update_position_randomly+0xd4>)
 8005812:	601a      	str	r2, [r3, #0]
    if (lat > LAT_MAX) lat = LAT_MAX;
 8005814:	4b17      	ldr	r3, [pc, #92]	@ (8005874 <update_position_randomly+0xc8>)
 8005816:	edd3 7a00 	vldr	s15, [r3]
 800581a:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 8005884 <update_position_randomly+0xd8>
 800581e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005822:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005826:	dd02      	ble.n	800582e <update_position_randomly+0x82>
 8005828:	4b12      	ldr	r3, [pc, #72]	@ (8005874 <update_position_randomly+0xc8>)
 800582a:	4a17      	ldr	r2, [pc, #92]	@ (8005888 <update_position_randomly+0xdc>)
 800582c:	601a      	str	r2, [r3, #0]
    if (lon < LON_MIN) lon = LON_MIN;
 800582e:	4b12      	ldr	r3, [pc, #72]	@ (8005878 <update_position_randomly+0xcc>)
 8005830:	edd3 7a00 	vldr	s15, [r3]
 8005834:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 800588c <update_position_randomly+0xe0>
 8005838:	eef4 7ac7 	vcmpe.f32	s15, s14
 800583c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005840:	d502      	bpl.n	8005848 <update_position_randomly+0x9c>
 8005842:	4b0d      	ldr	r3, [pc, #52]	@ (8005878 <update_position_randomly+0xcc>)
 8005844:	4a12      	ldr	r2, [pc, #72]	@ (8005890 <update_position_randomly+0xe4>)
 8005846:	601a      	str	r2, [r3, #0]
    if (lon > LON_MAX) lon = LON_MAX;
 8005848:	4b0b      	ldr	r3, [pc, #44]	@ (8005878 <update_position_randomly+0xcc>)
 800584a:	edd3 7a00 	vldr	s15, [r3]
 800584e:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 8005894 <update_position_randomly+0xe8>
 8005852:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005856:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800585a:	dc00      	bgt.n	800585e <update_position_randomly+0xb2>
}
 800585c:	e002      	b.n	8005864 <update_position_randomly+0xb8>
    if (lon > LON_MAX) lon = LON_MAX;
 800585e:	4b06      	ldr	r3, [pc, #24]	@ (8005878 <update_position_randomly+0xcc>)
 8005860:	4a0d      	ldr	r2, [pc, #52]	@ (8005898 <update_position_randomly+0xec>)
 8005862:	601a      	str	r2, [r3, #0]
}
 8005864:	bf00      	nop
 8005866:	3708      	adds	r7, #8
 8005868:	46bd      	mov	sp, r7
 800586a:	bd80      	pop	{r7, pc}
 800586c:	3a03126f 	.word	0x3a03126f
 8005870:	ba03126f 	.word	0xba03126f
 8005874:	200003f0 	.word	0x200003f0
 8005878:	200003f4 	.word	0x200003f4
 800587c:	41ec0000 	.word	0x41ec0000
 8005880:	41ec0000 	.word	0x41ec0000
 8005884:	42053333 	.word	0x42053333
 8005888:	42053333 	.word	0x42053333
 800588c:	4208cccd 	.word	0x4208cccd
 8005890:	4208cccd 	.word	0x4208cccd
 8005894:	420f999a 	.word	0x420f999a
 8005898:	420f999a 	.word	0x420f999a

0800589c <send_gps_msg>:

void send_gps_msg(msg_type_t type)
{
 800589c:	b580      	push	{r7, lr}
 800589e:	b088      	sub	sp, #32
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	4603      	mov	r3, r0
 80058a4:	71fb      	strb	r3, [r7, #7]
	gps_msg_t msg;
	msg.msg_type = type;
 80058a6:	79fb      	ldrb	r3, [r7, #7]
 80058a8:	733b      	strb	r3, [r7, #12]
	msg.license_id = LICENSE_ID;
 80058aa:	2300      	movs	r3, #0
 80058ac:	f043 034e 	orr.w	r3, r3, #78	@ 0x4e
 80058b0:	737b      	strb	r3, [r7, #13]
 80058b2:	2300      	movs	r3, #0
 80058b4:	f043 0361 	orr.w	r3, r3, #97	@ 0x61
 80058b8:	73bb      	strb	r3, [r7, #14]
 80058ba:	2300      	movs	r3, #0
 80058bc:	f063 0343 	orn	r3, r3, #67	@ 0x43
 80058c0:	73fb      	strb	r3, [r7, #15]
 80058c2:	2300      	movs	r3, #0
 80058c4:	743b      	strb	r3, [r7, #16]
	msg.utc_seconds = utc_seconds;
 80058c6:	4b0c      	ldr	r3, [pc, #48]	@ (80058f8 <send_gps_msg+0x5c>)
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f8c7 3011 	str.w	r3, [r7, #17]
	msg.latitude = lat;
 80058ce:	4b0b      	ldr	r3, [pc, #44]	@ (80058fc <send_gps_msg+0x60>)
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f8c7 3015 	str.w	r3, [r7, #21]
	msg.longitude = lon;
 80058d6:	4b0a      	ldr	r3, [pc, #40]	@ (8005900 <send_gps_msg+0x64>)
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f8c7 3019 	str.w	r3, [r7, #25]

	osMessageQueuePut(gpsMsgQueueHandle, &msg, 0, osWaitForever);
 80058de:	4b09      	ldr	r3, [pc, #36]	@ (8005904 <send_gps_msg+0x68>)
 80058e0:	6818      	ldr	r0, [r3, #0]
 80058e2:	f107 010c 	add.w	r1, r7, #12
 80058e6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80058ea:	2200      	movs	r2, #0
 80058ec:	f000 fa62 	bl	8005db4 <osMessageQueuePut>
}
 80058f0:	bf00      	nop
 80058f2:	3720      	adds	r7, #32
 80058f4:	46bd      	mov	sp, r7
 80058f6:	bd80      	pop	{r7, pc}
 80058f8:	20000010 	.word	0x20000010
 80058fc:	200003f0 	.word	0x200003f0
 8005900:	200003f4 	.word	0x200003f4
 8005904:	20000394 	.word	0x20000394

08005908 <StartI2CSenderTask>:
extern osMessageQueueId_t gpsMsgQueueHandle;

static void utc_to_str(uint32_t utc_sec, char *buf);

void StartI2CSenderTask(void *argument)
{
 8005908:	b5f0      	push	{r4, r5, r6, r7, lr}
 800590a:	b09d      	sub	sp, #116	@ 0x74
 800590c:	af04      	add	r7, sp, #16
 800590e:	6078      	str	r0, [r7, #4]
	gps_msg_t msg;
	while (1)
	{
		if (osMessageQueueGet(gpsMsgQueueHandle, &msg, 0, osWaitForever) == osOK)
 8005910:	4b2c      	ldr	r3, [pc, #176]	@ (80059c4 <StartI2CSenderTask+0xbc>)
 8005912:	6818      	ldr	r0, [r3, #0]
 8005914:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 8005918:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800591c:	2200      	movs	r2, #0
 800591e:	f000 fabd 	bl	8005e9c <osMessageQueueGet>
 8005922:	4603      	mov	r3, r0
 8005924:	2b00      	cmp	r3, #0
 8005926:	d1f3      	bne.n	8005910 <StartI2CSenderTask+0x8>
		{
			char *type_str;
			if(msg.msg_type == MSG_IDLE) type_str = "IDLE";
 8005928:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 800592c:	2b00      	cmp	r3, #0
 800592e:	d102      	bne.n	8005936 <StartI2CSenderTask+0x2e>
 8005930:	4b25      	ldr	r3, [pc, #148]	@ (80059c8 <StartI2CSenderTask+0xc0>)
 8005932:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005934:	e00c      	b.n	8005950 <StartI2CSenderTask+0x48>
			else if(msg.msg_type == MSG_START) type_str = "START";
 8005936:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 800593a:	2b01      	cmp	r3, #1
 800593c:	d102      	bne.n	8005944 <StartI2CSenderTask+0x3c>
 800593e:	4b23      	ldr	r3, [pc, #140]	@ (80059cc <StartI2CSenderTask+0xc4>)
 8005940:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005942:	e005      	b.n	8005950 <StartI2CSenderTask+0x48>
			else if(msg.msg_type == MSG_STOP) type_str = "STOP";
 8005944:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8005948:	2b02      	cmp	r3, #2
 800594a:	d101      	bne.n	8005950 <StartI2CSenderTask+0x48>
 800594c:	4b20      	ldr	r3, [pc, #128]	@ (80059d0 <StartI2CSenderTask+0xc8>)
 800594e:	65fb      	str	r3, [r7, #92]	@ 0x5c

			char buf[64];
			utc_to_str(msg.utc_seconds, buf);
 8005950:	f8d7 304d 	ldr.w	r3, [r7, #77]	@ 0x4d
 8005954:	f107 0208 	add.w	r2, r7, #8
 8005958:	4611      	mov	r1, r2
 800595a:	4618      	mov	r0, r3
 800595c:	f000 f840 	bl	80059e0 <utc_to_str>

			printf("Sending %s message: license=%08lu, %s, lat=%.6f, lon=%.6f\n",
		           type_str, (unsigned long)msg.license_id, buf,
 8005960:	f8d7 6049 	ldr.w	r6, [r7, #73]	@ 0x49
		           msg.latitude, msg.longitude);
 8005964:	f8d7 3051 	ldr.w	r3, [r7, #81]	@ 0x51
			printf("Sending %s message: license=%08lu, %s, lat=%.6f, lon=%.6f\n",
 8005968:	4618      	mov	r0, r3
 800596a:	f7fa fe1d 	bl	80005a8 <__aeabi_f2d>
 800596e:	4604      	mov	r4, r0
 8005970:	460d      	mov	r5, r1
		           msg.latitude, msg.longitude);
 8005972:	f8d7 3055 	ldr.w	r3, [r7, #85]	@ 0x55
			printf("Sending %s message: license=%08lu, %s, lat=%.6f, lon=%.6f\n",
 8005976:	4618      	mov	r0, r3
 8005978:	f7fa fe16 	bl	80005a8 <__aeabi_f2d>
 800597c:	4602      	mov	r2, r0
 800597e:	460b      	mov	r3, r1
 8005980:	f107 0108 	add.w	r1, r7, #8
 8005984:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005988:	e9cd 4500 	strd	r4, r5, [sp]
 800598c:	460b      	mov	r3, r1
 800598e:	4632      	mov	r2, r6
 8005990:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 8005992:	4810      	ldr	r0, [pc, #64]	@ (80059d4 <StartI2CSenderTask+0xcc>)
 8005994:	f003 fe36 	bl	8009604 <iprintf>

			HAL_StatusTypeDef ret = HAL_I2C_Slave_Transmit(&hi2c1, (uint8_t*)&msg, sizeof(msg), I2C_TIMO);
 8005998:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 800599c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80059a0:	2211      	movs	r2, #17
 80059a2:	480d      	ldr	r0, [pc, #52]	@ (80059d8 <StartI2CSenderTask+0xd0>)
 80059a4:	f7fc fb42 	bl	800202c <HAL_I2C_Slave_Transmit>
 80059a8:	4603      	mov	r3, r0
 80059aa:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b

			if (ret != HAL_OK)
 80059ae:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d0ac      	beq.n	8005910 <StartI2CSenderTask+0x8>
			{
				printf("I2C Transmit failed with code: %d\n", ret);
 80059b6:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 80059ba:	4619      	mov	r1, r3
 80059bc:	4807      	ldr	r0, [pc, #28]	@ (80059dc <StartI2CSenderTask+0xd4>)
 80059be:	f003 fe21 	bl	8009604 <iprintf>
		if (osMessageQueueGet(gpsMsgQueueHandle, &msg, 0, osWaitForever) == osOK)
 80059c2:	e7a5      	b.n	8005910 <StartI2CSenderTask+0x8>
 80059c4:	20000394 	.word	0x20000394
 80059c8:	0800d5cc 	.word	0x0800d5cc
 80059cc:	0800d5d4 	.word	0x0800d5d4
 80059d0:	0800d5dc 	.word	0x0800d5dc
 80059d4:	0800d5e4 	.word	0x0800d5e4
 80059d8:	20000260 	.word	0x20000260
 80059dc:	0800d620 	.word	0x0800d620

080059e0 <utc_to_str>:

	}
}

static void utc_to_str(uint32_t utc_sec, char *buf)
{
 80059e0:	b580      	push	{r7, lr}
 80059e2:	b086      	sub	sp, #24
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]
 80059e8:	6039      	str	r1, [r7, #0]
	time_t utc_tim = utc_sec;
 80059ea:	6879      	ldr	r1, [r7, #4]
 80059ec:	2000      	movs	r0, #0
 80059ee:	460a      	mov	r2, r1
 80059f0:	4603      	mov	r3, r0
 80059f2:	e9c7 2302 	strd	r2, r3, [r7, #8]
	struct tm *ts;

	ts = gmtime(&utc_tim);
 80059f6:	f107 0308 	add.w	r3, r7, #8
 80059fa:	4618      	mov	r0, r3
 80059fc:	f003 fe62 	bl	80096c4 <gmtime>
 8005a00:	6178      	str	r0, [r7, #20]

	strftime(buf, 64, "%Y-%m-%d %H:%M:%S UTC", ts);
 8005a02:	697b      	ldr	r3, [r7, #20]
 8005a04:	4a04      	ldr	r2, [pc, #16]	@ (8005a18 <utc_to_str+0x38>)
 8005a06:	2140      	movs	r1, #64	@ 0x40
 8005a08:	6838      	ldr	r0, [r7, #0]
 8005a0a:	f004 fc43 	bl	800a294 <strftime>
}
 8005a0e:	bf00      	nop
 8005a10:	3718      	adds	r7, #24
 8005a12:	46bd      	mov	sp, r7
 8005a14:	bd80      	pop	{r7, pc}
 8005a16:	bf00      	nop
 8005a18:	0800d644 	.word	0x0800d644

08005a1c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005a1c:	b480      	push	{r7}
 8005a1e:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8005a20:	bf00      	nop
 8005a22:	46bd      	mov	sp, r7
 8005a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a28:	4770      	bx	lr
	...

08005a2c <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005a2c:	b480      	push	{r7}
 8005a2e:	b085      	sub	sp, #20
 8005a30:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005a32:	f3ef 8305 	mrs	r3, IPSR
 8005a36:	60bb      	str	r3, [r7, #8]
  return(result);
 8005a38:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d10f      	bne.n	8005a5e <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a3e:	f3ef 8310 	mrs	r3, PRIMASK
 8005a42:	607b      	str	r3, [r7, #4]
  return(result);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d105      	bne.n	8005a56 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005a4a:	f3ef 8311 	mrs	r3, BASEPRI
 8005a4e:	603b      	str	r3, [r7, #0]
  return(result);
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d007      	beq.n	8005a66 <osKernelInitialize+0x3a>
 8005a56:	4b0e      	ldr	r3, [pc, #56]	@ (8005a90 <osKernelInitialize+0x64>)
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	2b02      	cmp	r3, #2
 8005a5c:	d103      	bne.n	8005a66 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8005a5e:	f06f 0305 	mvn.w	r3, #5
 8005a62:	60fb      	str	r3, [r7, #12]
 8005a64:	e00c      	b.n	8005a80 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005a66:	4b0a      	ldr	r3, [pc, #40]	@ (8005a90 <osKernelInitialize+0x64>)
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d105      	bne.n	8005a7a <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005a6e:	4b08      	ldr	r3, [pc, #32]	@ (8005a90 <osKernelInitialize+0x64>)
 8005a70:	2201      	movs	r2, #1
 8005a72:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005a74:	2300      	movs	r3, #0
 8005a76:	60fb      	str	r3, [r7, #12]
 8005a78:	e002      	b.n	8005a80 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8005a7a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005a7e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8005a80:	68fb      	ldr	r3, [r7, #12]
}
 8005a82:	4618      	mov	r0, r3
 8005a84:	3714      	adds	r7, #20
 8005a86:	46bd      	mov	sp, r7
 8005a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8c:	4770      	bx	lr
 8005a8e:	bf00      	nop
 8005a90:	20000408 	.word	0x20000408

08005a94 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b084      	sub	sp, #16
 8005a98:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005a9a:	f3ef 8305 	mrs	r3, IPSR
 8005a9e:	60bb      	str	r3, [r7, #8]
  return(result);
 8005aa0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d10f      	bne.n	8005ac6 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005aa6:	f3ef 8310 	mrs	r3, PRIMASK
 8005aaa:	607b      	str	r3, [r7, #4]
  return(result);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d105      	bne.n	8005abe <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005ab2:	f3ef 8311 	mrs	r3, BASEPRI
 8005ab6:	603b      	str	r3, [r7, #0]
  return(result);
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d007      	beq.n	8005ace <osKernelStart+0x3a>
 8005abe:	4b0f      	ldr	r3, [pc, #60]	@ (8005afc <osKernelStart+0x68>)
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	2b02      	cmp	r3, #2
 8005ac4:	d103      	bne.n	8005ace <osKernelStart+0x3a>
    stat = osErrorISR;
 8005ac6:	f06f 0305 	mvn.w	r3, #5
 8005aca:	60fb      	str	r3, [r7, #12]
 8005acc:	e010      	b.n	8005af0 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005ace:	4b0b      	ldr	r3, [pc, #44]	@ (8005afc <osKernelStart+0x68>)
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	2b01      	cmp	r3, #1
 8005ad4:	d109      	bne.n	8005aea <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005ad6:	f7ff ffa1 	bl	8005a1c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005ada:	4b08      	ldr	r3, [pc, #32]	@ (8005afc <osKernelStart+0x68>)
 8005adc:	2202      	movs	r2, #2
 8005ade:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005ae0:	f001 fb1a 	bl	8007118 <vTaskStartScheduler>
      stat = osOK;
 8005ae4:	2300      	movs	r3, #0
 8005ae6:	60fb      	str	r3, [r7, #12]
 8005ae8:	e002      	b.n	8005af0 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8005aea:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005aee:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8005af0:	68fb      	ldr	r3, [r7, #12]
}
 8005af2:	4618      	mov	r0, r3
 8005af4:	3710      	adds	r7, #16
 8005af6:	46bd      	mov	sp, r7
 8005af8:	bd80      	pop	{r7, pc}
 8005afa:	bf00      	nop
 8005afc:	20000408 	.word	0x20000408

08005b00 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005b00:	b580      	push	{r7, lr}
 8005b02:	b090      	sub	sp, #64	@ 0x40
 8005b04:	af04      	add	r7, sp, #16
 8005b06:	60f8      	str	r0, [r7, #12]
 8005b08:	60b9      	str	r1, [r7, #8]
 8005b0a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005b0c:	2300      	movs	r3, #0
 8005b0e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005b10:	f3ef 8305 	mrs	r3, IPSR
 8005b14:	61fb      	str	r3, [r7, #28]
  return(result);
 8005b16:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	f040 8090 	bne.w	8005c3e <osThreadNew+0x13e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b1e:	f3ef 8310 	mrs	r3, PRIMASK
 8005b22:	61bb      	str	r3, [r7, #24]
  return(result);
 8005b24:	69bb      	ldr	r3, [r7, #24]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d105      	bne.n	8005b36 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005b2a:	f3ef 8311 	mrs	r3, BASEPRI
 8005b2e:	617b      	str	r3, [r7, #20]
  return(result);
 8005b30:	697b      	ldr	r3, [r7, #20]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d003      	beq.n	8005b3e <osThreadNew+0x3e>
 8005b36:	4b44      	ldr	r3, [pc, #272]	@ (8005c48 <osThreadNew+0x148>)
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	2b02      	cmp	r3, #2
 8005b3c:	d07f      	beq.n	8005c3e <osThreadNew+0x13e>
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d07c      	beq.n	8005c3e <osThreadNew+0x13e>
    stack = configMINIMAL_STACK_SIZE;
 8005b44:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005b48:	62bb      	str	r3, [r7, #40]	@ 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8005b4a:	2318      	movs	r3, #24
 8005b4c:	627b      	str	r3, [r7, #36]	@ 0x24

    name = NULL;
 8005b4e:	2300      	movs	r3, #0
 8005b50:	62fb      	str	r3, [r7, #44]	@ 0x2c
    mem  = -1;
 8005b52:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005b56:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d045      	beq.n	8005bea <osThreadNew+0xea>
      if (attr->name != NULL) {
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d002      	beq.n	8005b6c <osThreadNew+0x6c>
        name = attr->name;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	699b      	ldr	r3, [r3, #24]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d002      	beq.n	8005b7a <osThreadNew+0x7a>
        prio = (UBaseType_t)attr->priority;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	699b      	ldr	r3, [r3, #24]
 8005b78:	627b      	str	r3, [r7, #36]	@ 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005b7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d008      	beq.n	8005b92 <osThreadNew+0x92>
 8005b80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b82:	2b38      	cmp	r3, #56	@ 0x38
 8005b84:	d805      	bhi.n	8005b92 <osThreadNew+0x92>
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	685b      	ldr	r3, [r3, #4]
 8005b8a:	f003 0301 	and.w	r3, r3, #1
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d001      	beq.n	8005b96 <osThreadNew+0x96>
        return (NULL);
 8005b92:	2300      	movs	r3, #0
 8005b94:	e054      	b.n	8005c40 <osThreadNew+0x140>
      }

      if (attr->stack_size > 0U) {
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	695b      	ldr	r3, [r3, #20]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d003      	beq.n	8005ba6 <osThreadNew+0xa6>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	695b      	ldr	r3, [r3, #20]
 8005ba2:	089b      	lsrs	r3, r3, #2
 8005ba4:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	689b      	ldr	r3, [r3, #8]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d00e      	beq.n	8005bcc <osThreadNew+0xcc>
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	68db      	ldr	r3, [r3, #12]
 8005bb2:	2ba7      	cmp	r3, #167	@ 0xa7
 8005bb4:	d90a      	bls.n	8005bcc <osThreadNew+0xcc>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d006      	beq.n	8005bcc <osThreadNew+0xcc>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	695b      	ldr	r3, [r3, #20]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d002      	beq.n	8005bcc <osThreadNew+0xcc>
        mem = 1;
 8005bc6:	2301      	movs	r3, #1
 8005bc8:	623b      	str	r3, [r7, #32]
 8005bca:	e010      	b.n	8005bee <osThreadNew+0xee>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	689b      	ldr	r3, [r3, #8]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d10c      	bne.n	8005bee <osThreadNew+0xee>
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	68db      	ldr	r3, [r3, #12]
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d108      	bne.n	8005bee <osThreadNew+0xee>
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	691b      	ldr	r3, [r3, #16]
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d104      	bne.n	8005bee <osThreadNew+0xee>
          mem = 0;
 8005be4:	2300      	movs	r3, #0
 8005be6:	623b      	str	r3, [r7, #32]
 8005be8:	e001      	b.n	8005bee <osThreadNew+0xee>
        }
      }
    }
    else {
      mem = 0;
 8005bea:	2300      	movs	r3, #0
 8005bec:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8005bee:	6a3b      	ldr	r3, [r7, #32]
 8005bf0:	2b01      	cmp	r3, #1
 8005bf2:	d110      	bne.n	8005c16 <osThreadNew+0x116>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8005bf8:	687a      	ldr	r2, [r7, #4]
 8005bfa:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005bfc:	9202      	str	r2, [sp, #8]
 8005bfe:	9301      	str	r3, [sp, #4]
 8005c00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c02:	9300      	str	r3, [sp, #0]
 8005c04:	68bb      	ldr	r3, [r7, #8]
 8005c06:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005c08:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005c0a:	68f8      	ldr	r0, [r7, #12]
 8005c0c:	f001 f886 	bl	8006d1c <xTaskCreateStatic>
 8005c10:	4603      	mov	r3, r0
 8005c12:	613b      	str	r3, [r7, #16]
 8005c14:	e013      	b.n	8005c3e <osThreadNew+0x13e>
    }
    else {
      if (mem == 0) {
 8005c16:	6a3b      	ldr	r3, [r7, #32]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d110      	bne.n	8005c3e <osThreadNew+0x13e>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005c1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c1e:	b29a      	uxth	r2, r3
 8005c20:	f107 0310 	add.w	r3, r7, #16
 8005c24:	9301      	str	r3, [sp, #4]
 8005c26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c28:	9300      	str	r3, [sp, #0]
 8005c2a:	68bb      	ldr	r3, [r7, #8]
 8005c2c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005c2e:	68f8      	ldr	r0, [r7, #12]
 8005c30:	f001 f8da 	bl	8006de8 <xTaskCreate>
 8005c34:	4603      	mov	r3, r0
 8005c36:	2b01      	cmp	r3, #1
 8005c38:	d001      	beq.n	8005c3e <osThreadNew+0x13e>
          hTask = NULL;
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005c3e:	693b      	ldr	r3, [r7, #16]
}
 8005c40:	4618      	mov	r0, r3
 8005c42:	3730      	adds	r7, #48	@ 0x30
 8005c44:	46bd      	mov	sp, r7
 8005c46:	bd80      	pop	{r7, pc}
 8005c48:	20000408 	.word	0x20000408

08005c4c <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8005c4c:	b580      	push	{r7, lr}
 8005c4e:	b086      	sub	sp, #24
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005c54:	f3ef 8305 	mrs	r3, IPSR
 8005c58:	613b      	str	r3, [r7, #16]
  return(result);
 8005c5a:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d10f      	bne.n	8005c80 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c60:	f3ef 8310 	mrs	r3, PRIMASK
 8005c64:	60fb      	str	r3, [r7, #12]
  return(result);
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d105      	bne.n	8005c78 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005c6c:	f3ef 8311 	mrs	r3, BASEPRI
 8005c70:	60bb      	str	r3, [r7, #8]
  return(result);
 8005c72:	68bb      	ldr	r3, [r7, #8]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d007      	beq.n	8005c88 <osDelay+0x3c>
 8005c78:	4b0a      	ldr	r3, [pc, #40]	@ (8005ca4 <osDelay+0x58>)
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	2b02      	cmp	r3, #2
 8005c7e:	d103      	bne.n	8005c88 <osDelay+0x3c>
    stat = osErrorISR;
 8005c80:	f06f 0305 	mvn.w	r3, #5
 8005c84:	617b      	str	r3, [r7, #20]
 8005c86:	e007      	b.n	8005c98 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8005c88:	2300      	movs	r3, #0
 8005c8a:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d002      	beq.n	8005c98 <osDelay+0x4c>
      vTaskDelay(ticks);
 8005c92:	6878      	ldr	r0, [r7, #4]
 8005c94:	f001 fa08 	bl	80070a8 <vTaskDelay>
    }
  }

  return (stat);
 8005c98:	697b      	ldr	r3, [r7, #20]
}
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	3718      	adds	r7, #24
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	bd80      	pop	{r7, pc}
 8005ca2:	bf00      	nop
 8005ca4:	20000408 	.word	0x20000408

08005ca8 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8005ca8:	b580      	push	{r7, lr}
 8005caa:	b08c      	sub	sp, #48	@ 0x30
 8005cac:	af02      	add	r7, sp, #8
 8005cae:	60f8      	str	r0, [r7, #12]
 8005cb0:	60b9      	str	r1, [r7, #8]
 8005cb2:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005cb8:	f3ef 8305 	mrs	r3, IPSR
 8005cbc:	61bb      	str	r3, [r7, #24]
  return(result);
 8005cbe:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d16f      	bne.n	8005da4 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005cc4:	f3ef 8310 	mrs	r3, PRIMASK
 8005cc8:	617b      	str	r3, [r7, #20]
  return(result);
 8005cca:	697b      	ldr	r3, [r7, #20]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d105      	bne.n	8005cdc <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005cd0:	f3ef 8311 	mrs	r3, BASEPRI
 8005cd4:	613b      	str	r3, [r7, #16]
  return(result);
 8005cd6:	693b      	ldr	r3, [r7, #16]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d003      	beq.n	8005ce4 <osMessageQueueNew+0x3c>
 8005cdc:	4b34      	ldr	r3, [pc, #208]	@ (8005db0 <osMessageQueueNew+0x108>)
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	2b02      	cmp	r3, #2
 8005ce2:	d05f      	beq.n	8005da4 <osMessageQueueNew+0xfc>
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d05c      	beq.n	8005da4 <osMessageQueueNew+0xfc>
 8005cea:	68bb      	ldr	r3, [r7, #8]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d059      	beq.n	8005da4 <osMessageQueueNew+0xfc>
    mem = -1;
 8005cf0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005cf4:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d029      	beq.n	8005d50 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	689b      	ldr	r3, [r3, #8]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d012      	beq.n	8005d2a <osMessageQueueNew+0x82>
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	68db      	ldr	r3, [r3, #12]
 8005d08:	2b4f      	cmp	r3, #79	@ 0x4f
 8005d0a:	d90e      	bls.n	8005d2a <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d00a      	beq.n	8005d2a <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	695a      	ldr	r2, [r3, #20]
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	68b9      	ldr	r1, [r7, #8]
 8005d1c:	fb01 f303 	mul.w	r3, r1, r3
 8005d20:	429a      	cmp	r2, r3
 8005d22:	d302      	bcc.n	8005d2a <osMessageQueueNew+0x82>
        mem = 1;
 8005d24:	2301      	movs	r3, #1
 8005d26:	623b      	str	r3, [r7, #32]
 8005d28:	e014      	b.n	8005d54 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	689b      	ldr	r3, [r3, #8]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d110      	bne.n	8005d54 <osMessageQueueNew+0xac>
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	68db      	ldr	r3, [r3, #12]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d10c      	bne.n	8005d54 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d108      	bne.n	8005d54 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	695b      	ldr	r3, [r3, #20]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d104      	bne.n	8005d54 <osMessageQueueNew+0xac>
          mem = 0;
 8005d4a:	2300      	movs	r3, #0
 8005d4c:	623b      	str	r3, [r7, #32]
 8005d4e:	e001      	b.n	8005d54 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8005d50:	2300      	movs	r3, #0
 8005d52:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8005d54:	6a3b      	ldr	r3, [r7, #32]
 8005d56:	2b01      	cmp	r3, #1
 8005d58:	d10b      	bne.n	8005d72 <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	691a      	ldr	r2, [r3, #16]
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	689b      	ldr	r3, [r3, #8]
 8005d62:	2100      	movs	r1, #0
 8005d64:	9100      	str	r1, [sp, #0]
 8005d66:	68b9      	ldr	r1, [r7, #8]
 8005d68:	68f8      	ldr	r0, [r7, #12]
 8005d6a:	f000 fa5d 	bl	8006228 <xQueueGenericCreateStatic>
 8005d6e:	6278      	str	r0, [r7, #36]	@ 0x24
 8005d70:	e008      	b.n	8005d84 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 8005d72:	6a3b      	ldr	r3, [r7, #32]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d105      	bne.n	8005d84 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 8005d78:	2200      	movs	r2, #0
 8005d7a:	68b9      	ldr	r1, [r7, #8]
 8005d7c:	68f8      	ldr	r0, [r7, #12]
 8005d7e:	f000 fada 	bl	8006336 <xQueueGenericCreate>
 8005d82:	6278      	str	r0, [r7, #36]	@ 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8005d84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d00c      	beq.n	8005da4 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d003      	beq.n	8005d98 <osMessageQueueNew+0xf0>
        name = attr->name;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	61fb      	str	r3, [r7, #28]
 8005d96:	e001      	b.n	8005d9c <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 8005d98:	2300      	movs	r3, #0
 8005d9a:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8005d9c:	69f9      	ldr	r1, [r7, #28]
 8005d9e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005da0:	f000 ff5e 	bl	8006c60 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8005da4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005da6:	4618      	mov	r0, r3
 8005da8:	3728      	adds	r7, #40	@ 0x28
 8005daa:	46bd      	mov	sp, r7
 8005dac:	bd80      	pop	{r7, pc}
 8005dae:	bf00      	nop
 8005db0:	20000408 	.word	0x20000408

08005db4 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8005db4:	b580      	push	{r7, lr}
 8005db6:	b08a      	sub	sp, #40	@ 0x28
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	60f8      	str	r0, [r7, #12]
 8005dbc:	60b9      	str	r1, [r7, #8]
 8005dbe:	603b      	str	r3, [r7, #0]
 8005dc0:	4613      	mov	r3, r2
 8005dc2:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8005dc8:	2300      	movs	r3, #0
 8005dca:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005dcc:	f3ef 8305 	mrs	r3, IPSR
 8005dd0:	61fb      	str	r3, [r7, #28]
  return(result);
 8005dd2:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d10f      	bne.n	8005df8 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005dd8:	f3ef 8310 	mrs	r3, PRIMASK
 8005ddc:	61bb      	str	r3, [r7, #24]
  return(result);
 8005dde:	69bb      	ldr	r3, [r7, #24]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d105      	bne.n	8005df0 <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005de4:	f3ef 8311 	mrs	r3, BASEPRI
 8005de8:	617b      	str	r3, [r7, #20]
  return(result);
 8005dea:	697b      	ldr	r3, [r7, #20]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d02c      	beq.n	8005e4a <osMessageQueuePut+0x96>
 8005df0:	4b28      	ldr	r3, [pc, #160]	@ (8005e94 <osMessageQueuePut+0xe0>)
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	2b02      	cmp	r3, #2
 8005df6:	d128      	bne.n	8005e4a <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005df8:	6a3b      	ldr	r3, [r7, #32]
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d005      	beq.n	8005e0a <osMessageQueuePut+0x56>
 8005dfe:	68bb      	ldr	r3, [r7, #8]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d002      	beq.n	8005e0a <osMessageQueuePut+0x56>
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d003      	beq.n	8005e12 <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 8005e0a:	f06f 0303 	mvn.w	r3, #3
 8005e0e:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005e10:	e039      	b.n	8005e86 <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 8005e12:	2300      	movs	r3, #0
 8005e14:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8005e16:	f107 0210 	add.w	r2, r7, #16
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	68b9      	ldr	r1, [r7, #8]
 8005e1e:	6a38      	ldr	r0, [r7, #32]
 8005e20:	f000 fbfa 	bl	8006618 <xQueueGenericSendFromISR>
 8005e24:	4603      	mov	r3, r0
 8005e26:	2b01      	cmp	r3, #1
 8005e28:	d003      	beq.n	8005e32 <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 8005e2a:	f06f 0302 	mvn.w	r3, #2
 8005e2e:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005e30:	e029      	b.n	8005e86 <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 8005e32:	693b      	ldr	r3, [r7, #16]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d026      	beq.n	8005e86 <osMessageQueuePut+0xd2>
 8005e38:	4b17      	ldr	r3, [pc, #92]	@ (8005e98 <osMessageQueuePut+0xe4>)
 8005e3a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005e3e:	601a      	str	r2, [r3, #0]
 8005e40:	f3bf 8f4f 	dsb	sy
 8005e44:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005e48:	e01d      	b.n	8005e86 <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8005e4a:	6a3b      	ldr	r3, [r7, #32]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d002      	beq.n	8005e56 <osMessageQueuePut+0xa2>
 8005e50:	68bb      	ldr	r3, [r7, #8]
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d103      	bne.n	8005e5e <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 8005e56:	f06f 0303 	mvn.w	r3, #3
 8005e5a:	627b      	str	r3, [r7, #36]	@ 0x24
 8005e5c:	e014      	b.n	8005e88 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8005e5e:	2300      	movs	r3, #0
 8005e60:	683a      	ldr	r2, [r7, #0]
 8005e62:	68b9      	ldr	r1, [r7, #8]
 8005e64:	6a38      	ldr	r0, [r7, #32]
 8005e66:	f000 facd 	bl	8006404 <xQueueGenericSend>
 8005e6a:	4603      	mov	r3, r0
 8005e6c:	2b01      	cmp	r3, #1
 8005e6e:	d00b      	beq.n	8005e88 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d003      	beq.n	8005e7e <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 8005e76:	f06f 0301 	mvn.w	r3, #1
 8005e7a:	627b      	str	r3, [r7, #36]	@ 0x24
 8005e7c:	e004      	b.n	8005e88 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 8005e7e:	f06f 0302 	mvn.w	r3, #2
 8005e82:	627b      	str	r3, [r7, #36]	@ 0x24
 8005e84:	e000      	b.n	8005e88 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005e86:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8005e88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	3728      	adds	r7, #40	@ 0x28
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	bd80      	pop	{r7, pc}
 8005e92:	bf00      	nop
 8005e94:	20000408 	.word	0x20000408
 8005e98:	e000ed04 	.word	0xe000ed04

08005e9c <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	b08a      	sub	sp, #40	@ 0x28
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	60f8      	str	r0, [r7, #12]
 8005ea4:	60b9      	str	r1, [r7, #8]
 8005ea6:	607a      	str	r2, [r7, #4]
 8005ea8:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8005eae:	2300      	movs	r3, #0
 8005eb0:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005eb2:	f3ef 8305 	mrs	r3, IPSR
 8005eb6:	61fb      	str	r3, [r7, #28]
  return(result);
 8005eb8:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d10f      	bne.n	8005ede <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005ebe:	f3ef 8310 	mrs	r3, PRIMASK
 8005ec2:	61bb      	str	r3, [r7, #24]
  return(result);
 8005ec4:	69bb      	ldr	r3, [r7, #24]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d105      	bne.n	8005ed6 <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005eca:	f3ef 8311 	mrs	r3, BASEPRI
 8005ece:	617b      	str	r3, [r7, #20]
  return(result);
 8005ed0:	697b      	ldr	r3, [r7, #20]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d02c      	beq.n	8005f30 <osMessageQueueGet+0x94>
 8005ed6:	4b28      	ldr	r3, [pc, #160]	@ (8005f78 <osMessageQueueGet+0xdc>)
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	2b02      	cmp	r3, #2
 8005edc:	d128      	bne.n	8005f30 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005ede:	6a3b      	ldr	r3, [r7, #32]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d005      	beq.n	8005ef0 <osMessageQueueGet+0x54>
 8005ee4:	68bb      	ldr	r3, [r7, #8]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d002      	beq.n	8005ef0 <osMessageQueueGet+0x54>
 8005eea:	683b      	ldr	r3, [r7, #0]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d003      	beq.n	8005ef8 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 8005ef0:	f06f 0303 	mvn.w	r3, #3
 8005ef4:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005ef6:	e038      	b.n	8005f6a <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 8005ef8:	2300      	movs	r3, #0
 8005efa:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8005efc:	f107 0310 	add.w	r3, r7, #16
 8005f00:	461a      	mov	r2, r3
 8005f02:	68b9      	ldr	r1, [r7, #8]
 8005f04:	6a38      	ldr	r0, [r7, #32]
 8005f06:	f000 fd13 	bl	8006930 <xQueueReceiveFromISR>
 8005f0a:	4603      	mov	r3, r0
 8005f0c:	2b01      	cmp	r3, #1
 8005f0e:	d003      	beq.n	8005f18 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 8005f10:	f06f 0302 	mvn.w	r3, #2
 8005f14:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005f16:	e028      	b.n	8005f6a <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 8005f18:	693b      	ldr	r3, [r7, #16]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d025      	beq.n	8005f6a <osMessageQueueGet+0xce>
 8005f1e:	4b17      	ldr	r3, [pc, #92]	@ (8005f7c <osMessageQueueGet+0xe0>)
 8005f20:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005f24:	601a      	str	r2, [r3, #0]
 8005f26:	f3bf 8f4f 	dsb	sy
 8005f2a:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005f2e:	e01c      	b.n	8005f6a <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8005f30:	6a3b      	ldr	r3, [r7, #32]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d002      	beq.n	8005f3c <osMessageQueueGet+0xa0>
 8005f36:	68bb      	ldr	r3, [r7, #8]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d103      	bne.n	8005f44 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 8005f3c:	f06f 0303 	mvn.w	r3, #3
 8005f40:	627b      	str	r3, [r7, #36]	@ 0x24
 8005f42:	e013      	b.n	8005f6c <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8005f44:	683a      	ldr	r2, [r7, #0]
 8005f46:	68b9      	ldr	r1, [r7, #8]
 8005f48:	6a38      	ldr	r0, [r7, #32]
 8005f4a:	f000 fc09 	bl	8006760 <xQueueReceive>
 8005f4e:	4603      	mov	r3, r0
 8005f50:	2b01      	cmp	r3, #1
 8005f52:	d00b      	beq.n	8005f6c <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d003      	beq.n	8005f62 <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 8005f5a:	f06f 0301 	mvn.w	r3, #1
 8005f5e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005f60:	e004      	b.n	8005f6c <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 8005f62:	f06f 0302 	mvn.w	r3, #2
 8005f66:	627b      	str	r3, [r7, #36]	@ 0x24
 8005f68:	e000      	b.n	8005f6c <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005f6a:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8005f6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005f6e:	4618      	mov	r0, r3
 8005f70:	3728      	adds	r7, #40	@ 0x28
 8005f72:	46bd      	mov	sp, r7
 8005f74:	bd80      	pop	{r7, pc}
 8005f76:	bf00      	nop
 8005f78:	20000408 	.word	0x20000408
 8005f7c:	e000ed04 	.word	0xe000ed04

08005f80 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005f80:	b480      	push	{r7}
 8005f82:	b085      	sub	sp, #20
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	60f8      	str	r0, [r7, #12]
 8005f88:	60b9      	str	r1, [r7, #8]
 8005f8a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	4a07      	ldr	r2, [pc, #28]	@ (8005fac <vApplicationGetIdleTaskMemory+0x2c>)
 8005f90:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005f92:	68bb      	ldr	r3, [r7, #8]
 8005f94:	4a06      	ldr	r2, [pc, #24]	@ (8005fb0 <vApplicationGetIdleTaskMemory+0x30>)
 8005f96:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005f9e:	601a      	str	r2, [r3, #0]
}
 8005fa0:	bf00      	nop
 8005fa2:	3714      	adds	r7, #20
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005faa:	4770      	bx	lr
 8005fac:	2000040c 	.word	0x2000040c
 8005fb0:	200004b4 	.word	0x200004b4

08005fb4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005fb4:	b480      	push	{r7}
 8005fb6:	b085      	sub	sp, #20
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	60f8      	str	r0, [r7, #12]
 8005fbc:	60b9      	str	r1, [r7, #8]
 8005fbe:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	4a07      	ldr	r2, [pc, #28]	@ (8005fe0 <vApplicationGetTimerTaskMemory+0x2c>)
 8005fc4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005fc6:	68bb      	ldr	r3, [r7, #8]
 8005fc8:	4a06      	ldr	r2, [pc, #24]	@ (8005fe4 <vApplicationGetTimerTaskMemory+0x30>)
 8005fca:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005fd2:	601a      	str	r2, [r3, #0]
}
 8005fd4:	bf00      	nop
 8005fd6:	3714      	adds	r7, #20
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fde:	4770      	bx	lr
 8005fe0:	200008b4 	.word	0x200008b4
 8005fe4:	2000095c 	.word	0x2000095c

08005fe8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005fe8:	b480      	push	{r7}
 8005fea:	b083      	sub	sp, #12
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	f103 0208 	add.w	r2, r3, #8
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006000:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	f103 0208 	add.w	r2, r3, #8
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	f103 0208 	add.w	r2, r3, #8
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	2200      	movs	r2, #0
 800601a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800601c:	bf00      	nop
 800601e:	370c      	adds	r7, #12
 8006020:	46bd      	mov	sp, r7
 8006022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006026:	4770      	bx	lr

08006028 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006028:	b480      	push	{r7}
 800602a:	b083      	sub	sp, #12
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2200      	movs	r2, #0
 8006034:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006036:	bf00      	nop
 8006038:	370c      	adds	r7, #12
 800603a:	46bd      	mov	sp, r7
 800603c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006040:	4770      	bx	lr

08006042 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006042:	b480      	push	{r7}
 8006044:	b085      	sub	sp, #20
 8006046:	af00      	add	r7, sp, #0
 8006048:	6078      	str	r0, [r7, #4]
 800604a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	685b      	ldr	r3, [r3, #4]
 8006050:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006052:	683b      	ldr	r3, [r7, #0]
 8006054:	68fa      	ldr	r2, [r7, #12]
 8006056:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	689a      	ldr	r2, [r3, #8]
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	689b      	ldr	r3, [r3, #8]
 8006064:	683a      	ldr	r2, [r7, #0]
 8006066:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	683a      	ldr	r2, [r7, #0]
 800606c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800606e:	683b      	ldr	r3, [r7, #0]
 8006070:	687a      	ldr	r2, [r7, #4]
 8006072:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	1c5a      	adds	r2, r3, #1
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	601a      	str	r2, [r3, #0]
}
 800607e:	bf00      	nop
 8006080:	3714      	adds	r7, #20
 8006082:	46bd      	mov	sp, r7
 8006084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006088:	4770      	bx	lr

0800608a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800608a:	b480      	push	{r7}
 800608c:	b085      	sub	sp, #20
 800608e:	af00      	add	r7, sp, #0
 8006090:	6078      	str	r0, [r7, #4]
 8006092:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006094:	683b      	ldr	r3, [r7, #0]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800609a:	68bb      	ldr	r3, [r7, #8]
 800609c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80060a0:	d103      	bne.n	80060aa <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	691b      	ldr	r3, [r3, #16]
 80060a6:	60fb      	str	r3, [r7, #12]
 80060a8:	e00c      	b.n	80060c4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	3308      	adds	r3, #8
 80060ae:	60fb      	str	r3, [r7, #12]
 80060b0:	e002      	b.n	80060b8 <vListInsert+0x2e>
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	685b      	ldr	r3, [r3, #4]
 80060b6:	60fb      	str	r3, [r7, #12]
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	685b      	ldr	r3, [r3, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	68ba      	ldr	r2, [r7, #8]
 80060c0:	429a      	cmp	r2, r3
 80060c2:	d2f6      	bcs.n	80060b2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	685a      	ldr	r2, [r3, #4]
 80060c8:	683b      	ldr	r3, [r7, #0]
 80060ca:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80060cc:	683b      	ldr	r3, [r7, #0]
 80060ce:	685b      	ldr	r3, [r3, #4]
 80060d0:	683a      	ldr	r2, [r7, #0]
 80060d2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	68fa      	ldr	r2, [r7, #12]
 80060d8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	683a      	ldr	r2, [r7, #0]
 80060de:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80060e0:	683b      	ldr	r3, [r7, #0]
 80060e2:	687a      	ldr	r2, [r7, #4]
 80060e4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	1c5a      	adds	r2, r3, #1
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	601a      	str	r2, [r3, #0]
}
 80060f0:	bf00      	nop
 80060f2:	3714      	adds	r7, #20
 80060f4:	46bd      	mov	sp, r7
 80060f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fa:	4770      	bx	lr

080060fc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80060fc:	b480      	push	{r7}
 80060fe:	b085      	sub	sp, #20
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	691b      	ldr	r3, [r3, #16]
 8006108:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	685b      	ldr	r3, [r3, #4]
 800610e:	687a      	ldr	r2, [r7, #4]
 8006110:	6892      	ldr	r2, [r2, #8]
 8006112:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	689b      	ldr	r3, [r3, #8]
 8006118:	687a      	ldr	r2, [r7, #4]
 800611a:	6852      	ldr	r2, [r2, #4]
 800611c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	685b      	ldr	r3, [r3, #4]
 8006122:	687a      	ldr	r2, [r7, #4]
 8006124:	429a      	cmp	r2, r3
 8006126:	d103      	bne.n	8006130 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	689a      	ldr	r2, [r3, #8]
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	2200      	movs	r2, #0
 8006134:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	1e5a      	subs	r2, r3, #1
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	681b      	ldr	r3, [r3, #0]
}
 8006144:	4618      	mov	r0, r3
 8006146:	3714      	adds	r7, #20
 8006148:	46bd      	mov	sp, r7
 800614a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614e:	4770      	bx	lr

08006150 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006150:	b580      	push	{r7, lr}
 8006152:	b084      	sub	sp, #16
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
 8006158:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	2b00      	cmp	r3, #0
 8006162:	d10d      	bne.n	8006180 <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006164:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006168:	b672      	cpsid	i
 800616a:	f383 8811 	msr	BASEPRI, r3
 800616e:	f3bf 8f6f 	isb	sy
 8006172:	f3bf 8f4f 	dsb	sy
 8006176:	b662      	cpsie	i
 8006178:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800617a:	bf00      	nop
 800617c:	bf00      	nop
 800617e:	e7fd      	b.n	800617c <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8006180:	f002 f9a4 	bl	80084cc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	681a      	ldr	r2, [r3, #0]
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800618c:	68f9      	ldr	r1, [r7, #12]
 800618e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8006190:	fb01 f303 	mul.w	r3, r1, r3
 8006194:	441a      	add	r2, r3
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	2200      	movs	r2, #0
 800619e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	681a      	ldr	r2, [r3, #0]
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	681a      	ldr	r2, [r3, #0]
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80061b0:	3b01      	subs	r3, #1
 80061b2:	68f9      	ldr	r1, [r7, #12]
 80061b4:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80061b6:	fb01 f303 	mul.w	r3, r1, r3
 80061ba:	441a      	add	r2, r3
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	22ff      	movs	r2, #255	@ 0xff
 80061c4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	22ff      	movs	r2, #255	@ 0xff
 80061cc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80061d0:	683b      	ldr	r3, [r7, #0]
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d114      	bne.n	8006200 <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	691b      	ldr	r3, [r3, #16]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d01a      	beq.n	8006214 <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	3310      	adds	r3, #16
 80061e2:	4618      	mov	r0, r3
 80061e4:	f001 fa44 	bl	8007670 <xTaskRemoveFromEventList>
 80061e8:	4603      	mov	r3, r0
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d012      	beq.n	8006214 <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80061ee:	4b0d      	ldr	r3, [pc, #52]	@ (8006224 <xQueueGenericReset+0xd4>)
 80061f0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80061f4:	601a      	str	r2, [r3, #0]
 80061f6:	f3bf 8f4f 	dsb	sy
 80061fa:	f3bf 8f6f 	isb	sy
 80061fe:	e009      	b.n	8006214 <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	3310      	adds	r3, #16
 8006204:	4618      	mov	r0, r3
 8006206:	f7ff feef 	bl	8005fe8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	3324      	adds	r3, #36	@ 0x24
 800620e:	4618      	mov	r0, r3
 8006210:	f7ff feea 	bl	8005fe8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006214:	f002 f990 	bl	8008538 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006218:	2301      	movs	r3, #1
}
 800621a:	4618      	mov	r0, r3
 800621c:	3710      	adds	r7, #16
 800621e:	46bd      	mov	sp, r7
 8006220:	bd80      	pop	{r7, pc}
 8006222:	bf00      	nop
 8006224:	e000ed04 	.word	0xe000ed04

08006228 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006228:	b580      	push	{r7, lr}
 800622a:	b08e      	sub	sp, #56	@ 0x38
 800622c:	af02      	add	r7, sp, #8
 800622e:	60f8      	str	r0, [r7, #12]
 8006230:	60b9      	str	r1, [r7, #8]
 8006232:	607a      	str	r2, [r7, #4]
 8006234:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	2b00      	cmp	r3, #0
 800623a:	d10d      	bne.n	8006258 <xQueueGenericCreateStatic+0x30>
	__asm volatile
 800623c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006240:	b672      	cpsid	i
 8006242:	f383 8811 	msr	BASEPRI, r3
 8006246:	f3bf 8f6f 	isb	sy
 800624a:	f3bf 8f4f 	dsb	sy
 800624e:	b662      	cpsie	i
 8006250:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006252:	bf00      	nop
 8006254:	bf00      	nop
 8006256:	e7fd      	b.n	8006254 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006258:	683b      	ldr	r3, [r7, #0]
 800625a:	2b00      	cmp	r3, #0
 800625c:	d10d      	bne.n	800627a <xQueueGenericCreateStatic+0x52>
	__asm volatile
 800625e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006262:	b672      	cpsid	i
 8006264:	f383 8811 	msr	BASEPRI, r3
 8006268:	f3bf 8f6f 	isb	sy
 800626c:	f3bf 8f4f 	dsb	sy
 8006270:	b662      	cpsie	i
 8006272:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006274:	bf00      	nop
 8006276:	bf00      	nop
 8006278:	e7fd      	b.n	8006276 <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	2b00      	cmp	r3, #0
 800627e:	d002      	beq.n	8006286 <xQueueGenericCreateStatic+0x5e>
 8006280:	68bb      	ldr	r3, [r7, #8]
 8006282:	2b00      	cmp	r3, #0
 8006284:	d001      	beq.n	800628a <xQueueGenericCreateStatic+0x62>
 8006286:	2301      	movs	r3, #1
 8006288:	e000      	b.n	800628c <xQueueGenericCreateStatic+0x64>
 800628a:	2300      	movs	r3, #0
 800628c:	2b00      	cmp	r3, #0
 800628e:	d10d      	bne.n	80062ac <xQueueGenericCreateStatic+0x84>
	__asm volatile
 8006290:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006294:	b672      	cpsid	i
 8006296:	f383 8811 	msr	BASEPRI, r3
 800629a:	f3bf 8f6f 	isb	sy
 800629e:	f3bf 8f4f 	dsb	sy
 80062a2:	b662      	cpsie	i
 80062a4:	623b      	str	r3, [r7, #32]
}
 80062a6:	bf00      	nop
 80062a8:	bf00      	nop
 80062aa:	e7fd      	b.n	80062a8 <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d102      	bne.n	80062b8 <xQueueGenericCreateStatic+0x90>
 80062b2:	68bb      	ldr	r3, [r7, #8]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d101      	bne.n	80062bc <xQueueGenericCreateStatic+0x94>
 80062b8:	2301      	movs	r3, #1
 80062ba:	e000      	b.n	80062be <xQueueGenericCreateStatic+0x96>
 80062bc:	2300      	movs	r3, #0
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d10d      	bne.n	80062de <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 80062c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062c6:	b672      	cpsid	i
 80062c8:	f383 8811 	msr	BASEPRI, r3
 80062cc:	f3bf 8f6f 	isb	sy
 80062d0:	f3bf 8f4f 	dsb	sy
 80062d4:	b662      	cpsie	i
 80062d6:	61fb      	str	r3, [r7, #28]
}
 80062d8:	bf00      	nop
 80062da:	bf00      	nop
 80062dc:	e7fd      	b.n	80062da <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80062de:	2350      	movs	r3, #80	@ 0x50
 80062e0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80062e2:	697b      	ldr	r3, [r7, #20]
 80062e4:	2b50      	cmp	r3, #80	@ 0x50
 80062e6:	d00d      	beq.n	8006304 <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 80062e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062ec:	b672      	cpsid	i
 80062ee:	f383 8811 	msr	BASEPRI, r3
 80062f2:	f3bf 8f6f 	isb	sy
 80062f6:	f3bf 8f4f 	dsb	sy
 80062fa:	b662      	cpsie	i
 80062fc:	61bb      	str	r3, [r7, #24]
}
 80062fe:	bf00      	nop
 8006300:	bf00      	nop
 8006302:	e7fd      	b.n	8006300 <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006304:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006306:	683b      	ldr	r3, [r7, #0]
 8006308:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800630a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800630c:	2b00      	cmp	r3, #0
 800630e:	d00d      	beq.n	800632c <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006310:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006312:	2201      	movs	r2, #1
 8006314:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006318:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800631c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800631e:	9300      	str	r3, [sp, #0]
 8006320:	4613      	mov	r3, r2
 8006322:	687a      	ldr	r2, [r7, #4]
 8006324:	68b9      	ldr	r1, [r7, #8]
 8006326:	68f8      	ldr	r0, [r7, #12]
 8006328:	f000 f848 	bl	80063bc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800632c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800632e:	4618      	mov	r0, r3
 8006330:	3730      	adds	r7, #48	@ 0x30
 8006332:	46bd      	mov	sp, r7
 8006334:	bd80      	pop	{r7, pc}

08006336 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006336:	b580      	push	{r7, lr}
 8006338:	b08a      	sub	sp, #40	@ 0x28
 800633a:	af02      	add	r7, sp, #8
 800633c:	60f8      	str	r0, [r7, #12]
 800633e:	60b9      	str	r1, [r7, #8]
 8006340:	4613      	mov	r3, r2
 8006342:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	2b00      	cmp	r3, #0
 8006348:	d10d      	bne.n	8006366 <xQueueGenericCreate+0x30>
	__asm volatile
 800634a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800634e:	b672      	cpsid	i
 8006350:	f383 8811 	msr	BASEPRI, r3
 8006354:	f3bf 8f6f 	isb	sy
 8006358:	f3bf 8f4f 	dsb	sy
 800635c:	b662      	cpsie	i
 800635e:	613b      	str	r3, [r7, #16]
}
 8006360:	bf00      	nop
 8006362:	bf00      	nop
 8006364:	e7fd      	b.n	8006362 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8006366:	68bb      	ldr	r3, [r7, #8]
 8006368:	2b00      	cmp	r3, #0
 800636a:	d102      	bne.n	8006372 <xQueueGenericCreate+0x3c>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800636c:	2300      	movs	r3, #0
 800636e:	61fb      	str	r3, [r7, #28]
 8006370:	e004      	b.n	800637c <xQueueGenericCreate+0x46>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	68ba      	ldr	r2, [r7, #8]
 8006376:	fb02 f303 	mul.w	r3, r2, r3
 800637a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800637c:	69fb      	ldr	r3, [r7, #28]
 800637e:	3350      	adds	r3, #80	@ 0x50
 8006380:	4618      	mov	r0, r3
 8006382:	f002 f9d1 	bl	8008728 <pvPortMalloc>
 8006386:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006388:	69bb      	ldr	r3, [r7, #24]
 800638a:	2b00      	cmp	r3, #0
 800638c:	d011      	beq.n	80063b2 <xQueueGenericCreate+0x7c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800638e:	69bb      	ldr	r3, [r7, #24]
 8006390:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006392:	697b      	ldr	r3, [r7, #20]
 8006394:	3350      	adds	r3, #80	@ 0x50
 8006396:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006398:	69bb      	ldr	r3, [r7, #24]
 800639a:	2200      	movs	r2, #0
 800639c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80063a0:	79fa      	ldrb	r2, [r7, #7]
 80063a2:	69bb      	ldr	r3, [r7, #24]
 80063a4:	9300      	str	r3, [sp, #0]
 80063a6:	4613      	mov	r3, r2
 80063a8:	697a      	ldr	r2, [r7, #20]
 80063aa:	68b9      	ldr	r1, [r7, #8]
 80063ac:	68f8      	ldr	r0, [r7, #12]
 80063ae:	f000 f805 	bl	80063bc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80063b2:	69bb      	ldr	r3, [r7, #24]
	}
 80063b4:	4618      	mov	r0, r3
 80063b6:	3720      	adds	r7, #32
 80063b8:	46bd      	mov	sp, r7
 80063ba:	bd80      	pop	{r7, pc}

080063bc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80063bc:	b580      	push	{r7, lr}
 80063be:	b084      	sub	sp, #16
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	60f8      	str	r0, [r7, #12]
 80063c4:	60b9      	str	r1, [r7, #8]
 80063c6:	607a      	str	r2, [r7, #4]
 80063c8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80063ca:	68bb      	ldr	r3, [r7, #8]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d103      	bne.n	80063d8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80063d0:	69bb      	ldr	r3, [r7, #24]
 80063d2:	69ba      	ldr	r2, [r7, #24]
 80063d4:	601a      	str	r2, [r3, #0]
 80063d6:	e002      	b.n	80063de <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80063d8:	69bb      	ldr	r3, [r7, #24]
 80063da:	687a      	ldr	r2, [r7, #4]
 80063dc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80063de:	69bb      	ldr	r3, [r7, #24]
 80063e0:	68fa      	ldr	r2, [r7, #12]
 80063e2:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80063e4:	69bb      	ldr	r3, [r7, #24]
 80063e6:	68ba      	ldr	r2, [r7, #8]
 80063e8:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80063ea:	2101      	movs	r1, #1
 80063ec:	69b8      	ldr	r0, [r7, #24]
 80063ee:	f7ff feaf 	bl	8006150 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80063f2:	69bb      	ldr	r3, [r7, #24]
 80063f4:	78fa      	ldrb	r2, [r7, #3]
 80063f6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80063fa:	bf00      	nop
 80063fc:	3710      	adds	r7, #16
 80063fe:	46bd      	mov	sp, r7
 8006400:	bd80      	pop	{r7, pc}
	...

08006404 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006404:	b580      	push	{r7, lr}
 8006406:	b08e      	sub	sp, #56	@ 0x38
 8006408:	af00      	add	r7, sp, #0
 800640a:	60f8      	str	r0, [r7, #12]
 800640c:	60b9      	str	r1, [r7, #8]
 800640e:	607a      	str	r2, [r7, #4]
 8006410:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006412:	2300      	movs	r3, #0
 8006414:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800641a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800641c:	2b00      	cmp	r3, #0
 800641e:	d10d      	bne.n	800643c <xQueueGenericSend+0x38>
	__asm volatile
 8006420:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006424:	b672      	cpsid	i
 8006426:	f383 8811 	msr	BASEPRI, r3
 800642a:	f3bf 8f6f 	isb	sy
 800642e:	f3bf 8f4f 	dsb	sy
 8006432:	b662      	cpsie	i
 8006434:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006436:	bf00      	nop
 8006438:	bf00      	nop
 800643a:	e7fd      	b.n	8006438 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800643c:	68bb      	ldr	r3, [r7, #8]
 800643e:	2b00      	cmp	r3, #0
 8006440:	d103      	bne.n	800644a <xQueueGenericSend+0x46>
 8006442:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006444:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006446:	2b00      	cmp	r3, #0
 8006448:	d101      	bne.n	800644e <xQueueGenericSend+0x4a>
 800644a:	2301      	movs	r3, #1
 800644c:	e000      	b.n	8006450 <xQueueGenericSend+0x4c>
 800644e:	2300      	movs	r3, #0
 8006450:	2b00      	cmp	r3, #0
 8006452:	d10d      	bne.n	8006470 <xQueueGenericSend+0x6c>
	__asm volatile
 8006454:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006458:	b672      	cpsid	i
 800645a:	f383 8811 	msr	BASEPRI, r3
 800645e:	f3bf 8f6f 	isb	sy
 8006462:	f3bf 8f4f 	dsb	sy
 8006466:	b662      	cpsie	i
 8006468:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800646a:	bf00      	nop
 800646c:	bf00      	nop
 800646e:	e7fd      	b.n	800646c <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006470:	683b      	ldr	r3, [r7, #0]
 8006472:	2b02      	cmp	r3, #2
 8006474:	d103      	bne.n	800647e <xQueueGenericSend+0x7a>
 8006476:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006478:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800647a:	2b01      	cmp	r3, #1
 800647c:	d101      	bne.n	8006482 <xQueueGenericSend+0x7e>
 800647e:	2301      	movs	r3, #1
 8006480:	e000      	b.n	8006484 <xQueueGenericSend+0x80>
 8006482:	2300      	movs	r3, #0
 8006484:	2b00      	cmp	r3, #0
 8006486:	d10d      	bne.n	80064a4 <xQueueGenericSend+0xa0>
	__asm volatile
 8006488:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800648c:	b672      	cpsid	i
 800648e:	f383 8811 	msr	BASEPRI, r3
 8006492:	f3bf 8f6f 	isb	sy
 8006496:	f3bf 8f4f 	dsb	sy
 800649a:	b662      	cpsie	i
 800649c:	623b      	str	r3, [r7, #32]
}
 800649e:	bf00      	nop
 80064a0:	bf00      	nop
 80064a2:	e7fd      	b.n	80064a0 <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80064a4:	f001 fab2 	bl	8007a0c <xTaskGetSchedulerState>
 80064a8:	4603      	mov	r3, r0
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d102      	bne.n	80064b4 <xQueueGenericSend+0xb0>
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d101      	bne.n	80064b8 <xQueueGenericSend+0xb4>
 80064b4:	2301      	movs	r3, #1
 80064b6:	e000      	b.n	80064ba <xQueueGenericSend+0xb6>
 80064b8:	2300      	movs	r3, #0
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d10d      	bne.n	80064da <xQueueGenericSend+0xd6>
	__asm volatile
 80064be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064c2:	b672      	cpsid	i
 80064c4:	f383 8811 	msr	BASEPRI, r3
 80064c8:	f3bf 8f6f 	isb	sy
 80064cc:	f3bf 8f4f 	dsb	sy
 80064d0:	b662      	cpsie	i
 80064d2:	61fb      	str	r3, [r7, #28]
}
 80064d4:	bf00      	nop
 80064d6:	bf00      	nop
 80064d8:	e7fd      	b.n	80064d6 <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80064da:	f001 fff7 	bl	80084cc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80064de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064e0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80064e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80064e6:	429a      	cmp	r2, r3
 80064e8:	d302      	bcc.n	80064f0 <xQueueGenericSend+0xec>
 80064ea:	683b      	ldr	r3, [r7, #0]
 80064ec:	2b02      	cmp	r3, #2
 80064ee:	d129      	bne.n	8006544 <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80064f0:	683a      	ldr	r2, [r7, #0]
 80064f2:	68b9      	ldr	r1, [r7, #8]
 80064f4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80064f6:	f000 faa3 	bl	8006a40 <prvCopyDataToQueue>
 80064fa:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80064fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006500:	2b00      	cmp	r3, #0
 8006502:	d010      	beq.n	8006526 <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006504:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006506:	3324      	adds	r3, #36	@ 0x24
 8006508:	4618      	mov	r0, r3
 800650a:	f001 f8b1 	bl	8007670 <xTaskRemoveFromEventList>
 800650e:	4603      	mov	r3, r0
 8006510:	2b00      	cmp	r3, #0
 8006512:	d013      	beq.n	800653c <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006514:	4b3f      	ldr	r3, [pc, #252]	@ (8006614 <xQueueGenericSend+0x210>)
 8006516:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800651a:	601a      	str	r2, [r3, #0]
 800651c:	f3bf 8f4f 	dsb	sy
 8006520:	f3bf 8f6f 	isb	sy
 8006524:	e00a      	b.n	800653c <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006526:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006528:	2b00      	cmp	r3, #0
 800652a:	d007      	beq.n	800653c <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800652c:	4b39      	ldr	r3, [pc, #228]	@ (8006614 <xQueueGenericSend+0x210>)
 800652e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006532:	601a      	str	r2, [r3, #0]
 8006534:	f3bf 8f4f 	dsb	sy
 8006538:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800653c:	f001 fffc 	bl	8008538 <vPortExitCritical>
				return pdPASS;
 8006540:	2301      	movs	r3, #1
 8006542:	e063      	b.n	800660c <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	2b00      	cmp	r3, #0
 8006548:	d103      	bne.n	8006552 <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800654a:	f001 fff5 	bl	8008538 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800654e:	2300      	movs	r3, #0
 8006550:	e05c      	b.n	800660c <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006552:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006554:	2b00      	cmp	r3, #0
 8006556:	d106      	bne.n	8006566 <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006558:	f107 0314 	add.w	r3, r7, #20
 800655c:	4618      	mov	r0, r3
 800655e:	f001 f8ed 	bl	800773c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006562:	2301      	movs	r3, #1
 8006564:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006566:	f001 ffe7 	bl	8008538 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800656a:	f000 fe49 	bl	8007200 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800656e:	f001 ffad 	bl	80084cc <vPortEnterCritical>
 8006572:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006574:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006578:	b25b      	sxtb	r3, r3
 800657a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800657e:	d103      	bne.n	8006588 <xQueueGenericSend+0x184>
 8006580:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006582:	2200      	movs	r2, #0
 8006584:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006588:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800658a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800658e:	b25b      	sxtb	r3, r3
 8006590:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006594:	d103      	bne.n	800659e <xQueueGenericSend+0x19a>
 8006596:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006598:	2200      	movs	r2, #0
 800659a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800659e:	f001 ffcb 	bl	8008538 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80065a2:	1d3a      	adds	r2, r7, #4
 80065a4:	f107 0314 	add.w	r3, r7, #20
 80065a8:	4611      	mov	r1, r2
 80065aa:	4618      	mov	r0, r3
 80065ac:	f001 f8dc 	bl	8007768 <xTaskCheckForTimeOut>
 80065b0:	4603      	mov	r3, r0
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d124      	bne.n	8006600 <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80065b6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80065b8:	f000 fb3a 	bl	8006c30 <prvIsQueueFull>
 80065bc:	4603      	mov	r3, r0
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d018      	beq.n	80065f4 <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80065c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065c4:	3310      	adds	r3, #16
 80065c6:	687a      	ldr	r2, [r7, #4]
 80065c8:	4611      	mov	r1, r2
 80065ca:	4618      	mov	r0, r3
 80065cc:	f000 fffa 	bl	80075c4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80065d0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80065d2:	f000 fac5 	bl	8006b60 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80065d6:	f000 fe21 	bl	800721c <xTaskResumeAll>
 80065da:	4603      	mov	r3, r0
 80065dc:	2b00      	cmp	r3, #0
 80065de:	f47f af7c 	bne.w	80064da <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 80065e2:	4b0c      	ldr	r3, [pc, #48]	@ (8006614 <xQueueGenericSend+0x210>)
 80065e4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80065e8:	601a      	str	r2, [r3, #0]
 80065ea:	f3bf 8f4f 	dsb	sy
 80065ee:	f3bf 8f6f 	isb	sy
 80065f2:	e772      	b.n	80064da <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80065f4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80065f6:	f000 fab3 	bl	8006b60 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80065fa:	f000 fe0f 	bl	800721c <xTaskResumeAll>
 80065fe:	e76c      	b.n	80064da <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006600:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006602:	f000 faad 	bl	8006b60 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006606:	f000 fe09 	bl	800721c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800660a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800660c:	4618      	mov	r0, r3
 800660e:	3738      	adds	r7, #56	@ 0x38
 8006610:	46bd      	mov	sp, r7
 8006612:	bd80      	pop	{r7, pc}
 8006614:	e000ed04 	.word	0xe000ed04

08006618 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006618:	b580      	push	{r7, lr}
 800661a:	b08e      	sub	sp, #56	@ 0x38
 800661c:	af00      	add	r7, sp, #0
 800661e:	60f8      	str	r0, [r7, #12]
 8006620:	60b9      	str	r1, [r7, #8]
 8006622:	607a      	str	r2, [r7, #4]
 8006624:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800662a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800662c:	2b00      	cmp	r3, #0
 800662e:	d10d      	bne.n	800664c <xQueueGenericSendFromISR+0x34>
	__asm volatile
 8006630:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006634:	b672      	cpsid	i
 8006636:	f383 8811 	msr	BASEPRI, r3
 800663a:	f3bf 8f6f 	isb	sy
 800663e:	f3bf 8f4f 	dsb	sy
 8006642:	b662      	cpsie	i
 8006644:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006646:	bf00      	nop
 8006648:	bf00      	nop
 800664a:	e7fd      	b.n	8006648 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800664c:	68bb      	ldr	r3, [r7, #8]
 800664e:	2b00      	cmp	r3, #0
 8006650:	d103      	bne.n	800665a <xQueueGenericSendFromISR+0x42>
 8006652:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006654:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006656:	2b00      	cmp	r3, #0
 8006658:	d101      	bne.n	800665e <xQueueGenericSendFromISR+0x46>
 800665a:	2301      	movs	r3, #1
 800665c:	e000      	b.n	8006660 <xQueueGenericSendFromISR+0x48>
 800665e:	2300      	movs	r3, #0
 8006660:	2b00      	cmp	r3, #0
 8006662:	d10d      	bne.n	8006680 <xQueueGenericSendFromISR+0x68>
	__asm volatile
 8006664:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006668:	b672      	cpsid	i
 800666a:	f383 8811 	msr	BASEPRI, r3
 800666e:	f3bf 8f6f 	isb	sy
 8006672:	f3bf 8f4f 	dsb	sy
 8006676:	b662      	cpsie	i
 8006678:	623b      	str	r3, [r7, #32]
}
 800667a:	bf00      	nop
 800667c:	bf00      	nop
 800667e:	e7fd      	b.n	800667c <xQueueGenericSendFromISR+0x64>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006680:	683b      	ldr	r3, [r7, #0]
 8006682:	2b02      	cmp	r3, #2
 8006684:	d103      	bne.n	800668e <xQueueGenericSendFromISR+0x76>
 8006686:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006688:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800668a:	2b01      	cmp	r3, #1
 800668c:	d101      	bne.n	8006692 <xQueueGenericSendFromISR+0x7a>
 800668e:	2301      	movs	r3, #1
 8006690:	e000      	b.n	8006694 <xQueueGenericSendFromISR+0x7c>
 8006692:	2300      	movs	r3, #0
 8006694:	2b00      	cmp	r3, #0
 8006696:	d10d      	bne.n	80066b4 <xQueueGenericSendFromISR+0x9c>
	__asm volatile
 8006698:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800669c:	b672      	cpsid	i
 800669e:	f383 8811 	msr	BASEPRI, r3
 80066a2:	f3bf 8f6f 	isb	sy
 80066a6:	f3bf 8f4f 	dsb	sy
 80066aa:	b662      	cpsie	i
 80066ac:	61fb      	str	r3, [r7, #28]
}
 80066ae:	bf00      	nop
 80066b0:	bf00      	nop
 80066b2:	e7fd      	b.n	80066b0 <xQueueGenericSendFromISR+0x98>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80066b4:	f001 fff2 	bl	800869c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80066b8:	f3ef 8211 	mrs	r2, BASEPRI
 80066bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066c0:	b672      	cpsid	i
 80066c2:	f383 8811 	msr	BASEPRI, r3
 80066c6:	f3bf 8f6f 	isb	sy
 80066ca:	f3bf 8f4f 	dsb	sy
 80066ce:	b662      	cpsie	i
 80066d0:	61ba      	str	r2, [r7, #24]
 80066d2:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80066d4:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80066d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80066d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066da:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80066dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80066e0:	429a      	cmp	r2, r3
 80066e2:	d302      	bcc.n	80066ea <xQueueGenericSendFromISR+0xd2>
 80066e4:	683b      	ldr	r3, [r7, #0]
 80066e6:	2b02      	cmp	r3, #2
 80066e8:	d12c      	bne.n	8006744 <xQueueGenericSendFromISR+0x12c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80066ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066ec:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80066f0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80066f4:	683a      	ldr	r2, [r7, #0]
 80066f6:	68b9      	ldr	r1, [r7, #8]
 80066f8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80066fa:	f000 f9a1 	bl	8006a40 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80066fe:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8006702:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006706:	d112      	bne.n	800672e <xQueueGenericSendFromISR+0x116>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006708:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800670a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800670c:	2b00      	cmp	r3, #0
 800670e:	d016      	beq.n	800673e <xQueueGenericSendFromISR+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006710:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006712:	3324      	adds	r3, #36	@ 0x24
 8006714:	4618      	mov	r0, r3
 8006716:	f000 ffab 	bl	8007670 <xTaskRemoveFromEventList>
 800671a:	4603      	mov	r3, r0
 800671c:	2b00      	cmp	r3, #0
 800671e:	d00e      	beq.n	800673e <xQueueGenericSendFromISR+0x126>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2b00      	cmp	r3, #0
 8006724:	d00b      	beq.n	800673e <xQueueGenericSendFromISR+0x126>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	2201      	movs	r2, #1
 800672a:	601a      	str	r2, [r3, #0]
 800672c:	e007      	b.n	800673e <xQueueGenericSendFromISR+0x126>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800672e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006732:	3301      	adds	r3, #1
 8006734:	b2db      	uxtb	r3, r3
 8006736:	b25a      	sxtb	r2, r3
 8006738:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800673a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800673e:	2301      	movs	r3, #1
 8006740:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 8006742:	e001      	b.n	8006748 <xQueueGenericSendFromISR+0x130>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006744:	2300      	movs	r3, #0
 8006746:	637b      	str	r3, [r7, #52]	@ 0x34
 8006748:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800674a:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800674c:	693b      	ldr	r3, [r7, #16]
 800674e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006752:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006754:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8006756:	4618      	mov	r0, r3
 8006758:	3738      	adds	r7, #56	@ 0x38
 800675a:	46bd      	mov	sp, r7
 800675c:	bd80      	pop	{r7, pc}
	...

08006760 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006760:	b580      	push	{r7, lr}
 8006762:	b08c      	sub	sp, #48	@ 0x30
 8006764:	af00      	add	r7, sp, #0
 8006766:	60f8      	str	r0, [r7, #12]
 8006768:	60b9      	str	r1, [r7, #8]
 800676a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800676c:	2300      	movs	r3, #0
 800676e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006774:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006776:	2b00      	cmp	r3, #0
 8006778:	d10d      	bne.n	8006796 <xQueueReceive+0x36>
	__asm volatile
 800677a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800677e:	b672      	cpsid	i
 8006780:	f383 8811 	msr	BASEPRI, r3
 8006784:	f3bf 8f6f 	isb	sy
 8006788:	f3bf 8f4f 	dsb	sy
 800678c:	b662      	cpsie	i
 800678e:	623b      	str	r3, [r7, #32]
}
 8006790:	bf00      	nop
 8006792:	bf00      	nop
 8006794:	e7fd      	b.n	8006792 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006796:	68bb      	ldr	r3, [r7, #8]
 8006798:	2b00      	cmp	r3, #0
 800679a:	d103      	bne.n	80067a4 <xQueueReceive+0x44>
 800679c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800679e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d101      	bne.n	80067a8 <xQueueReceive+0x48>
 80067a4:	2301      	movs	r3, #1
 80067a6:	e000      	b.n	80067aa <xQueueReceive+0x4a>
 80067a8:	2300      	movs	r3, #0
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d10d      	bne.n	80067ca <xQueueReceive+0x6a>
	__asm volatile
 80067ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067b2:	b672      	cpsid	i
 80067b4:	f383 8811 	msr	BASEPRI, r3
 80067b8:	f3bf 8f6f 	isb	sy
 80067bc:	f3bf 8f4f 	dsb	sy
 80067c0:	b662      	cpsie	i
 80067c2:	61fb      	str	r3, [r7, #28]
}
 80067c4:	bf00      	nop
 80067c6:	bf00      	nop
 80067c8:	e7fd      	b.n	80067c6 <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80067ca:	f001 f91f 	bl	8007a0c <xTaskGetSchedulerState>
 80067ce:	4603      	mov	r3, r0
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d102      	bne.n	80067da <xQueueReceive+0x7a>
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d101      	bne.n	80067de <xQueueReceive+0x7e>
 80067da:	2301      	movs	r3, #1
 80067dc:	e000      	b.n	80067e0 <xQueueReceive+0x80>
 80067de:	2300      	movs	r3, #0
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d10d      	bne.n	8006800 <xQueueReceive+0xa0>
	__asm volatile
 80067e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067e8:	b672      	cpsid	i
 80067ea:	f383 8811 	msr	BASEPRI, r3
 80067ee:	f3bf 8f6f 	isb	sy
 80067f2:	f3bf 8f4f 	dsb	sy
 80067f6:	b662      	cpsie	i
 80067f8:	61bb      	str	r3, [r7, #24]
}
 80067fa:	bf00      	nop
 80067fc:	bf00      	nop
 80067fe:	e7fd      	b.n	80067fc <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006800:	f001 fe64 	bl	80084cc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006804:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006806:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006808:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800680a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800680c:	2b00      	cmp	r3, #0
 800680e:	d01f      	beq.n	8006850 <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006810:	68b9      	ldr	r1, [r7, #8]
 8006812:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006814:	f000 f97e 	bl	8006b14 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006818:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800681a:	1e5a      	subs	r2, r3, #1
 800681c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800681e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006820:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006822:	691b      	ldr	r3, [r3, #16]
 8006824:	2b00      	cmp	r3, #0
 8006826:	d00f      	beq.n	8006848 <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006828:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800682a:	3310      	adds	r3, #16
 800682c:	4618      	mov	r0, r3
 800682e:	f000 ff1f 	bl	8007670 <xTaskRemoveFromEventList>
 8006832:	4603      	mov	r3, r0
 8006834:	2b00      	cmp	r3, #0
 8006836:	d007      	beq.n	8006848 <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006838:	4b3c      	ldr	r3, [pc, #240]	@ (800692c <xQueueReceive+0x1cc>)
 800683a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800683e:	601a      	str	r2, [r3, #0]
 8006840:	f3bf 8f4f 	dsb	sy
 8006844:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006848:	f001 fe76 	bl	8008538 <vPortExitCritical>
				return pdPASS;
 800684c:	2301      	movs	r3, #1
 800684e:	e069      	b.n	8006924 <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2b00      	cmp	r3, #0
 8006854:	d103      	bne.n	800685e <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006856:	f001 fe6f 	bl	8008538 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800685a:	2300      	movs	r3, #0
 800685c:	e062      	b.n	8006924 <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 800685e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006860:	2b00      	cmp	r3, #0
 8006862:	d106      	bne.n	8006872 <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006864:	f107 0310 	add.w	r3, r7, #16
 8006868:	4618      	mov	r0, r3
 800686a:	f000 ff67 	bl	800773c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800686e:	2301      	movs	r3, #1
 8006870:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006872:	f001 fe61 	bl	8008538 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006876:	f000 fcc3 	bl	8007200 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800687a:	f001 fe27 	bl	80084cc <vPortEnterCritical>
 800687e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006880:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006884:	b25b      	sxtb	r3, r3
 8006886:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800688a:	d103      	bne.n	8006894 <xQueueReceive+0x134>
 800688c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800688e:	2200      	movs	r2, #0
 8006890:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006894:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006896:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800689a:	b25b      	sxtb	r3, r3
 800689c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80068a0:	d103      	bne.n	80068aa <xQueueReceive+0x14a>
 80068a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068a4:	2200      	movs	r2, #0
 80068a6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80068aa:	f001 fe45 	bl	8008538 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80068ae:	1d3a      	adds	r2, r7, #4
 80068b0:	f107 0310 	add.w	r3, r7, #16
 80068b4:	4611      	mov	r1, r2
 80068b6:	4618      	mov	r0, r3
 80068b8:	f000 ff56 	bl	8007768 <xTaskCheckForTimeOut>
 80068bc:	4603      	mov	r3, r0
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d123      	bne.n	800690a <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80068c2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80068c4:	f000 f99e 	bl	8006c04 <prvIsQueueEmpty>
 80068c8:	4603      	mov	r3, r0
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d017      	beq.n	80068fe <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80068ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068d0:	3324      	adds	r3, #36	@ 0x24
 80068d2:	687a      	ldr	r2, [r7, #4]
 80068d4:	4611      	mov	r1, r2
 80068d6:	4618      	mov	r0, r3
 80068d8:	f000 fe74 	bl	80075c4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80068dc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80068de:	f000 f93f 	bl	8006b60 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80068e2:	f000 fc9b 	bl	800721c <xTaskResumeAll>
 80068e6:	4603      	mov	r3, r0
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d189      	bne.n	8006800 <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 80068ec:	4b0f      	ldr	r3, [pc, #60]	@ (800692c <xQueueReceive+0x1cc>)
 80068ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80068f2:	601a      	str	r2, [r3, #0]
 80068f4:	f3bf 8f4f 	dsb	sy
 80068f8:	f3bf 8f6f 	isb	sy
 80068fc:	e780      	b.n	8006800 <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80068fe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006900:	f000 f92e 	bl	8006b60 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006904:	f000 fc8a 	bl	800721c <xTaskResumeAll>
 8006908:	e77a      	b.n	8006800 <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800690a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800690c:	f000 f928 	bl	8006b60 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006910:	f000 fc84 	bl	800721c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006914:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006916:	f000 f975 	bl	8006c04 <prvIsQueueEmpty>
 800691a:	4603      	mov	r3, r0
 800691c:	2b00      	cmp	r3, #0
 800691e:	f43f af6f 	beq.w	8006800 <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006922:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006924:	4618      	mov	r0, r3
 8006926:	3730      	adds	r7, #48	@ 0x30
 8006928:	46bd      	mov	sp, r7
 800692a:	bd80      	pop	{r7, pc}
 800692c:	e000ed04 	.word	0xe000ed04

08006930 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006930:	b580      	push	{r7, lr}
 8006932:	b08e      	sub	sp, #56	@ 0x38
 8006934:	af00      	add	r7, sp, #0
 8006936:	60f8      	str	r0, [r7, #12]
 8006938:	60b9      	str	r1, [r7, #8]
 800693a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8006940:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006942:	2b00      	cmp	r3, #0
 8006944:	d10d      	bne.n	8006962 <xQueueReceiveFromISR+0x32>
	__asm volatile
 8006946:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800694a:	b672      	cpsid	i
 800694c:	f383 8811 	msr	BASEPRI, r3
 8006950:	f3bf 8f6f 	isb	sy
 8006954:	f3bf 8f4f 	dsb	sy
 8006958:	b662      	cpsie	i
 800695a:	623b      	str	r3, [r7, #32]
}
 800695c:	bf00      	nop
 800695e:	bf00      	nop
 8006960:	e7fd      	b.n	800695e <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006962:	68bb      	ldr	r3, [r7, #8]
 8006964:	2b00      	cmp	r3, #0
 8006966:	d103      	bne.n	8006970 <xQueueReceiveFromISR+0x40>
 8006968:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800696a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800696c:	2b00      	cmp	r3, #0
 800696e:	d101      	bne.n	8006974 <xQueueReceiveFromISR+0x44>
 8006970:	2301      	movs	r3, #1
 8006972:	e000      	b.n	8006976 <xQueueReceiveFromISR+0x46>
 8006974:	2300      	movs	r3, #0
 8006976:	2b00      	cmp	r3, #0
 8006978:	d10d      	bne.n	8006996 <xQueueReceiveFromISR+0x66>
	__asm volatile
 800697a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800697e:	b672      	cpsid	i
 8006980:	f383 8811 	msr	BASEPRI, r3
 8006984:	f3bf 8f6f 	isb	sy
 8006988:	f3bf 8f4f 	dsb	sy
 800698c:	b662      	cpsie	i
 800698e:	61fb      	str	r3, [r7, #28]
}
 8006990:	bf00      	nop
 8006992:	bf00      	nop
 8006994:	e7fd      	b.n	8006992 <xQueueReceiveFromISR+0x62>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006996:	f001 fe81 	bl	800869c <vPortValidateInterruptPriority>
	__asm volatile
 800699a:	f3ef 8211 	mrs	r2, BASEPRI
 800699e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069a2:	b672      	cpsid	i
 80069a4:	f383 8811 	msr	BASEPRI, r3
 80069a8:	f3bf 8f6f 	isb	sy
 80069ac:	f3bf 8f4f 	dsb	sy
 80069b0:	b662      	cpsie	i
 80069b2:	61ba      	str	r2, [r7, #24]
 80069b4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80069b6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80069b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80069ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069be:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80069c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d02f      	beq.n	8006a26 <xQueueReceiveFromISR+0xf6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80069c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069c8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80069cc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80069d0:	68b9      	ldr	r1, [r7, #8]
 80069d2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80069d4:	f000 f89e 	bl	8006b14 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80069d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069da:	1e5a      	subs	r2, r3, #1
 80069dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069de:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80069e0:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80069e4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80069e8:	d112      	bne.n	8006a10 <xQueueReceiveFromISR+0xe0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80069ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069ec:	691b      	ldr	r3, [r3, #16]
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d016      	beq.n	8006a20 <xQueueReceiveFromISR+0xf0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80069f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069f4:	3310      	adds	r3, #16
 80069f6:	4618      	mov	r0, r3
 80069f8:	f000 fe3a 	bl	8007670 <xTaskRemoveFromEventList>
 80069fc:	4603      	mov	r3, r0
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d00e      	beq.n	8006a20 <xQueueReceiveFromISR+0xf0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d00b      	beq.n	8006a20 <xQueueReceiveFromISR+0xf0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	2201      	movs	r2, #1
 8006a0c:	601a      	str	r2, [r3, #0]
 8006a0e:	e007      	b.n	8006a20 <xQueueReceiveFromISR+0xf0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8006a10:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006a14:	3301      	adds	r3, #1
 8006a16:	b2db      	uxtb	r3, r3
 8006a18:	b25a      	sxtb	r2, r3
 8006a1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a1c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8006a20:	2301      	movs	r3, #1
 8006a22:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a24:	e001      	b.n	8006a2a <xQueueReceiveFromISR+0xfa>
		}
		else
		{
			xReturn = pdFAIL;
 8006a26:	2300      	movs	r3, #0
 8006a28:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a2c:	613b      	str	r3, [r7, #16]
	__asm volatile
 8006a2e:	693b      	ldr	r3, [r7, #16]
 8006a30:	f383 8811 	msr	BASEPRI, r3
}
 8006a34:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006a36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8006a38:	4618      	mov	r0, r3
 8006a3a:	3738      	adds	r7, #56	@ 0x38
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	bd80      	pop	{r7, pc}

08006a40 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006a40:	b580      	push	{r7, lr}
 8006a42:	b086      	sub	sp, #24
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	60f8      	str	r0, [r7, #12]
 8006a48:	60b9      	str	r1, [r7, #8]
 8006a4a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006a4c:	2300      	movs	r3, #0
 8006a4e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a54:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d10d      	bne.n	8006a7a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d14d      	bne.n	8006b02 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	689b      	ldr	r3, [r3, #8]
 8006a6a:	4618      	mov	r0, r3
 8006a6c:	f000 ffec 	bl	8007a48 <xTaskPriorityDisinherit>
 8006a70:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	2200      	movs	r2, #0
 8006a76:	609a      	str	r2, [r3, #8]
 8006a78:	e043      	b.n	8006b02 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d119      	bne.n	8006ab4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	6858      	ldr	r0, [r3, #4]
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a88:	461a      	mov	r2, r3
 8006a8a:	68b9      	ldr	r1, [r7, #8]
 8006a8c:	f003 ff17 	bl	800a8be <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	685a      	ldr	r2, [r3, #4]
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a98:	441a      	add	r2, r3
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	685a      	ldr	r2, [r3, #4]
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	689b      	ldr	r3, [r3, #8]
 8006aa6:	429a      	cmp	r2, r3
 8006aa8:	d32b      	bcc.n	8006b02 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	681a      	ldr	r2, [r3, #0]
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	605a      	str	r2, [r3, #4]
 8006ab2:	e026      	b.n	8006b02 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	68d8      	ldr	r0, [r3, #12]
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006abc:	461a      	mov	r2, r3
 8006abe:	68b9      	ldr	r1, [r7, #8]
 8006ac0:	f003 fefd 	bl	800a8be <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	68da      	ldr	r2, [r3, #12]
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006acc:	425b      	negs	r3, r3
 8006ace:	441a      	add	r2, r3
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	68da      	ldr	r2, [r3, #12]
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	429a      	cmp	r2, r3
 8006ade:	d207      	bcs.n	8006af0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	689a      	ldr	r2, [r3, #8]
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ae8:	425b      	negs	r3, r3
 8006aea:	441a      	add	r2, r3
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	2b02      	cmp	r3, #2
 8006af4:	d105      	bne.n	8006b02 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006af6:	693b      	ldr	r3, [r7, #16]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d002      	beq.n	8006b02 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006afc:	693b      	ldr	r3, [r7, #16]
 8006afe:	3b01      	subs	r3, #1
 8006b00:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006b02:	693b      	ldr	r3, [r7, #16]
 8006b04:	1c5a      	adds	r2, r3, #1
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8006b0a:	697b      	ldr	r3, [r7, #20]
}
 8006b0c:	4618      	mov	r0, r3
 8006b0e:	3718      	adds	r7, #24
 8006b10:	46bd      	mov	sp, r7
 8006b12:	bd80      	pop	{r7, pc}

08006b14 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006b14:	b580      	push	{r7, lr}
 8006b16:	b082      	sub	sp, #8
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
 8006b1c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d018      	beq.n	8006b58 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	68da      	ldr	r2, [r3, #12]
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b2e:	441a      	add	r2, r3
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	68da      	ldr	r2, [r3, #12]
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	689b      	ldr	r3, [r3, #8]
 8006b3c:	429a      	cmp	r2, r3
 8006b3e:	d303      	bcc.n	8006b48 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681a      	ldr	r2, [r3, #0]
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	68d9      	ldr	r1, [r3, #12]
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b50:	461a      	mov	r2, r3
 8006b52:	6838      	ldr	r0, [r7, #0]
 8006b54:	f003 feb3 	bl	800a8be <memcpy>
	}
}
 8006b58:	bf00      	nop
 8006b5a:	3708      	adds	r7, #8
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	bd80      	pop	{r7, pc}

08006b60 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006b60:	b580      	push	{r7, lr}
 8006b62:	b084      	sub	sp, #16
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006b68:	f001 fcb0 	bl	80084cc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006b72:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006b74:	e011      	b.n	8006b9a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d012      	beq.n	8006ba4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	3324      	adds	r3, #36	@ 0x24
 8006b82:	4618      	mov	r0, r3
 8006b84:	f000 fd74 	bl	8007670 <xTaskRemoveFromEventList>
 8006b88:	4603      	mov	r3, r0
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d001      	beq.n	8006b92 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006b8e:	f000 fe53 	bl	8007838 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006b92:	7bfb      	ldrb	r3, [r7, #15]
 8006b94:	3b01      	subs	r3, #1
 8006b96:	b2db      	uxtb	r3, r3
 8006b98:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006b9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	dce9      	bgt.n	8006b76 <prvUnlockQueue+0x16>
 8006ba2:	e000      	b.n	8006ba6 <prvUnlockQueue+0x46>
					break;
 8006ba4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	22ff      	movs	r2, #255	@ 0xff
 8006baa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8006bae:	f001 fcc3 	bl	8008538 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006bb2:	f001 fc8b 	bl	80084cc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006bbc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006bbe:	e011      	b.n	8006be4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	691b      	ldr	r3, [r3, #16]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d012      	beq.n	8006bee <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	3310      	adds	r3, #16
 8006bcc:	4618      	mov	r0, r3
 8006bce:	f000 fd4f 	bl	8007670 <xTaskRemoveFromEventList>
 8006bd2:	4603      	mov	r3, r0
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d001      	beq.n	8006bdc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006bd8:	f000 fe2e 	bl	8007838 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006bdc:	7bbb      	ldrb	r3, [r7, #14]
 8006bde:	3b01      	subs	r3, #1
 8006be0:	b2db      	uxtb	r3, r3
 8006be2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006be4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	dce9      	bgt.n	8006bc0 <prvUnlockQueue+0x60>
 8006bec:	e000      	b.n	8006bf0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006bee:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	22ff      	movs	r2, #255	@ 0xff
 8006bf4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8006bf8:	f001 fc9e 	bl	8008538 <vPortExitCritical>
}
 8006bfc:	bf00      	nop
 8006bfe:	3710      	adds	r7, #16
 8006c00:	46bd      	mov	sp, r7
 8006c02:	bd80      	pop	{r7, pc}

08006c04 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006c04:	b580      	push	{r7, lr}
 8006c06:	b084      	sub	sp, #16
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006c0c:	f001 fc5e 	bl	80084cc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d102      	bne.n	8006c1e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006c18:	2301      	movs	r3, #1
 8006c1a:	60fb      	str	r3, [r7, #12]
 8006c1c:	e001      	b.n	8006c22 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006c1e:	2300      	movs	r3, #0
 8006c20:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006c22:	f001 fc89 	bl	8008538 <vPortExitCritical>

	return xReturn;
 8006c26:	68fb      	ldr	r3, [r7, #12]
}
 8006c28:	4618      	mov	r0, r3
 8006c2a:	3710      	adds	r7, #16
 8006c2c:	46bd      	mov	sp, r7
 8006c2e:	bd80      	pop	{r7, pc}

08006c30 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006c30:	b580      	push	{r7, lr}
 8006c32:	b084      	sub	sp, #16
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006c38:	f001 fc48 	bl	80084cc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c44:	429a      	cmp	r2, r3
 8006c46:	d102      	bne.n	8006c4e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006c48:	2301      	movs	r3, #1
 8006c4a:	60fb      	str	r3, [r7, #12]
 8006c4c:	e001      	b.n	8006c52 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006c4e:	2300      	movs	r3, #0
 8006c50:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006c52:	f001 fc71 	bl	8008538 <vPortExitCritical>

	return xReturn;
 8006c56:	68fb      	ldr	r3, [r7, #12]
}
 8006c58:	4618      	mov	r0, r3
 8006c5a:	3710      	adds	r7, #16
 8006c5c:	46bd      	mov	sp, r7
 8006c5e:	bd80      	pop	{r7, pc}

08006c60 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006c60:	b480      	push	{r7}
 8006c62:	b085      	sub	sp, #20
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	6078      	str	r0, [r7, #4]
 8006c68:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006c6a:	2300      	movs	r3, #0
 8006c6c:	60fb      	str	r3, [r7, #12]
 8006c6e:	e014      	b.n	8006c9a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006c70:	4a0f      	ldr	r2, [pc, #60]	@ (8006cb0 <vQueueAddToRegistry+0x50>)
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d10b      	bne.n	8006c94 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006c7c:	490c      	ldr	r1, [pc, #48]	@ (8006cb0 <vQueueAddToRegistry+0x50>)
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	683a      	ldr	r2, [r7, #0]
 8006c82:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006c86:	4a0a      	ldr	r2, [pc, #40]	@ (8006cb0 <vQueueAddToRegistry+0x50>)
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	00db      	lsls	r3, r3, #3
 8006c8c:	4413      	add	r3, r2
 8006c8e:	687a      	ldr	r2, [r7, #4]
 8006c90:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006c92:	e006      	b.n	8006ca2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	3301      	adds	r3, #1
 8006c98:	60fb      	str	r3, [r7, #12]
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	2b07      	cmp	r3, #7
 8006c9e:	d9e7      	bls.n	8006c70 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006ca0:	bf00      	nop
 8006ca2:	bf00      	nop
 8006ca4:	3714      	adds	r7, #20
 8006ca6:	46bd      	mov	sp, r7
 8006ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cac:	4770      	bx	lr
 8006cae:	bf00      	nop
 8006cb0:	2000115c 	.word	0x2000115c

08006cb4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006cb4:	b580      	push	{r7, lr}
 8006cb6:	b086      	sub	sp, #24
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	60f8      	str	r0, [r7, #12]
 8006cbc:	60b9      	str	r1, [r7, #8]
 8006cbe:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006cc4:	f001 fc02 	bl	80084cc <vPortEnterCritical>
 8006cc8:	697b      	ldr	r3, [r7, #20]
 8006cca:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006cce:	b25b      	sxtb	r3, r3
 8006cd0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006cd4:	d103      	bne.n	8006cde <vQueueWaitForMessageRestricted+0x2a>
 8006cd6:	697b      	ldr	r3, [r7, #20]
 8006cd8:	2200      	movs	r2, #0
 8006cda:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006cde:	697b      	ldr	r3, [r7, #20]
 8006ce0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006ce4:	b25b      	sxtb	r3, r3
 8006ce6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006cea:	d103      	bne.n	8006cf4 <vQueueWaitForMessageRestricted+0x40>
 8006cec:	697b      	ldr	r3, [r7, #20]
 8006cee:	2200      	movs	r2, #0
 8006cf0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006cf4:	f001 fc20 	bl	8008538 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006cf8:	697b      	ldr	r3, [r7, #20]
 8006cfa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d106      	bne.n	8006d0e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006d00:	697b      	ldr	r3, [r7, #20]
 8006d02:	3324      	adds	r3, #36	@ 0x24
 8006d04:	687a      	ldr	r2, [r7, #4]
 8006d06:	68b9      	ldr	r1, [r7, #8]
 8006d08:	4618      	mov	r0, r3
 8006d0a:	f000 fc83 	bl	8007614 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006d0e:	6978      	ldr	r0, [r7, #20]
 8006d10:	f7ff ff26 	bl	8006b60 <prvUnlockQueue>
	}
 8006d14:	bf00      	nop
 8006d16:	3718      	adds	r7, #24
 8006d18:	46bd      	mov	sp, r7
 8006d1a:	bd80      	pop	{r7, pc}

08006d1c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006d1c:	b580      	push	{r7, lr}
 8006d1e:	b08e      	sub	sp, #56	@ 0x38
 8006d20:	af04      	add	r7, sp, #16
 8006d22:	60f8      	str	r0, [r7, #12]
 8006d24:	60b9      	str	r1, [r7, #8]
 8006d26:	607a      	str	r2, [r7, #4]
 8006d28:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006d2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d10d      	bne.n	8006d4c <xTaskCreateStatic+0x30>
	__asm volatile
 8006d30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d34:	b672      	cpsid	i
 8006d36:	f383 8811 	msr	BASEPRI, r3
 8006d3a:	f3bf 8f6f 	isb	sy
 8006d3e:	f3bf 8f4f 	dsb	sy
 8006d42:	b662      	cpsie	i
 8006d44:	623b      	str	r3, [r7, #32]
}
 8006d46:	bf00      	nop
 8006d48:	bf00      	nop
 8006d4a:	e7fd      	b.n	8006d48 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8006d4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d10d      	bne.n	8006d6e <xTaskCreateStatic+0x52>
	__asm volatile
 8006d52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d56:	b672      	cpsid	i
 8006d58:	f383 8811 	msr	BASEPRI, r3
 8006d5c:	f3bf 8f6f 	isb	sy
 8006d60:	f3bf 8f4f 	dsb	sy
 8006d64:	b662      	cpsie	i
 8006d66:	61fb      	str	r3, [r7, #28]
}
 8006d68:	bf00      	nop
 8006d6a:	bf00      	nop
 8006d6c:	e7fd      	b.n	8006d6a <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006d6e:	23a8      	movs	r3, #168	@ 0xa8
 8006d70:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006d72:	693b      	ldr	r3, [r7, #16]
 8006d74:	2ba8      	cmp	r3, #168	@ 0xa8
 8006d76:	d00d      	beq.n	8006d94 <xTaskCreateStatic+0x78>
	__asm volatile
 8006d78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d7c:	b672      	cpsid	i
 8006d7e:	f383 8811 	msr	BASEPRI, r3
 8006d82:	f3bf 8f6f 	isb	sy
 8006d86:	f3bf 8f4f 	dsb	sy
 8006d8a:	b662      	cpsie	i
 8006d8c:	61bb      	str	r3, [r7, #24]
}
 8006d8e:	bf00      	nop
 8006d90:	bf00      	nop
 8006d92:	e7fd      	b.n	8006d90 <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006d94:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006d96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d01e      	beq.n	8006dda <xTaskCreateStatic+0xbe>
 8006d9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d01b      	beq.n	8006dda <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006da2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006da4:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006da6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006da8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006daa:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006dac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dae:	2202      	movs	r2, #2
 8006db0:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006db4:	2300      	movs	r3, #0
 8006db6:	9303      	str	r3, [sp, #12]
 8006db8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dba:	9302      	str	r3, [sp, #8]
 8006dbc:	f107 0314 	add.w	r3, r7, #20
 8006dc0:	9301      	str	r3, [sp, #4]
 8006dc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dc4:	9300      	str	r3, [sp, #0]
 8006dc6:	683b      	ldr	r3, [r7, #0]
 8006dc8:	687a      	ldr	r2, [r7, #4]
 8006dca:	68b9      	ldr	r1, [r7, #8]
 8006dcc:	68f8      	ldr	r0, [r7, #12]
 8006dce:	f000 f851 	bl	8006e74 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006dd2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006dd4:	f000 f8f8 	bl	8006fc8 <prvAddNewTaskToReadyList>
 8006dd8:	e001      	b.n	8006dde <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 8006dda:	2300      	movs	r3, #0
 8006ddc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006dde:	697b      	ldr	r3, [r7, #20]
	}
 8006de0:	4618      	mov	r0, r3
 8006de2:	3728      	adds	r7, #40	@ 0x28
 8006de4:	46bd      	mov	sp, r7
 8006de6:	bd80      	pop	{r7, pc}

08006de8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006de8:	b580      	push	{r7, lr}
 8006dea:	b08c      	sub	sp, #48	@ 0x30
 8006dec:	af04      	add	r7, sp, #16
 8006dee:	60f8      	str	r0, [r7, #12]
 8006df0:	60b9      	str	r1, [r7, #8]
 8006df2:	603b      	str	r3, [r7, #0]
 8006df4:	4613      	mov	r3, r2
 8006df6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006df8:	88fb      	ldrh	r3, [r7, #6]
 8006dfa:	009b      	lsls	r3, r3, #2
 8006dfc:	4618      	mov	r0, r3
 8006dfe:	f001 fc93 	bl	8008728 <pvPortMalloc>
 8006e02:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006e04:	697b      	ldr	r3, [r7, #20]
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d00e      	beq.n	8006e28 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006e0a:	20a8      	movs	r0, #168	@ 0xa8
 8006e0c:	f001 fc8c 	bl	8008728 <pvPortMalloc>
 8006e10:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006e12:	69fb      	ldr	r3, [r7, #28]
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d003      	beq.n	8006e20 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006e18:	69fb      	ldr	r3, [r7, #28]
 8006e1a:	697a      	ldr	r2, [r7, #20]
 8006e1c:	631a      	str	r2, [r3, #48]	@ 0x30
 8006e1e:	e005      	b.n	8006e2c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006e20:	6978      	ldr	r0, [r7, #20]
 8006e22:	f001 fd4f 	bl	80088c4 <vPortFree>
 8006e26:	e001      	b.n	8006e2c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006e28:	2300      	movs	r3, #0
 8006e2a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006e2c:	69fb      	ldr	r3, [r7, #28]
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d017      	beq.n	8006e62 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006e32:	69fb      	ldr	r3, [r7, #28]
 8006e34:	2200      	movs	r2, #0
 8006e36:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006e3a:	88fa      	ldrh	r2, [r7, #6]
 8006e3c:	2300      	movs	r3, #0
 8006e3e:	9303      	str	r3, [sp, #12]
 8006e40:	69fb      	ldr	r3, [r7, #28]
 8006e42:	9302      	str	r3, [sp, #8]
 8006e44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e46:	9301      	str	r3, [sp, #4]
 8006e48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e4a:	9300      	str	r3, [sp, #0]
 8006e4c:	683b      	ldr	r3, [r7, #0]
 8006e4e:	68b9      	ldr	r1, [r7, #8]
 8006e50:	68f8      	ldr	r0, [r7, #12]
 8006e52:	f000 f80f 	bl	8006e74 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006e56:	69f8      	ldr	r0, [r7, #28]
 8006e58:	f000 f8b6 	bl	8006fc8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006e5c:	2301      	movs	r3, #1
 8006e5e:	61bb      	str	r3, [r7, #24]
 8006e60:	e002      	b.n	8006e68 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006e62:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006e66:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006e68:	69bb      	ldr	r3, [r7, #24]
	}
 8006e6a:	4618      	mov	r0, r3
 8006e6c:	3720      	adds	r7, #32
 8006e6e:	46bd      	mov	sp, r7
 8006e70:	bd80      	pop	{r7, pc}
	...

08006e74 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006e74:	b580      	push	{r7, lr}
 8006e76:	b088      	sub	sp, #32
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	60f8      	str	r0, [r7, #12]
 8006e7c:	60b9      	str	r1, [r7, #8]
 8006e7e:	607a      	str	r2, [r7, #4]
 8006e80:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006e82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e84:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	009b      	lsls	r3, r3, #2
 8006e8a:	461a      	mov	r2, r3
 8006e8c:	21a5      	movs	r1, #165	@ 0xa5
 8006e8e:	f002 fc10 	bl	80096b2 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006e92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e94:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006e96:	6879      	ldr	r1, [r7, #4]
 8006e98:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8006e9c:	440b      	add	r3, r1
 8006e9e:	009b      	lsls	r3, r3, #2
 8006ea0:	4413      	add	r3, r2
 8006ea2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006ea4:	69bb      	ldr	r3, [r7, #24]
 8006ea6:	f023 0307 	bic.w	r3, r3, #7
 8006eaa:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006eac:	69bb      	ldr	r3, [r7, #24]
 8006eae:	f003 0307 	and.w	r3, r3, #7
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d00d      	beq.n	8006ed2 <prvInitialiseNewTask+0x5e>
	__asm volatile
 8006eb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006eba:	b672      	cpsid	i
 8006ebc:	f383 8811 	msr	BASEPRI, r3
 8006ec0:	f3bf 8f6f 	isb	sy
 8006ec4:	f3bf 8f4f 	dsb	sy
 8006ec8:	b662      	cpsie	i
 8006eca:	617b      	str	r3, [r7, #20]
}
 8006ecc:	bf00      	nop
 8006ece:	bf00      	nop
 8006ed0:	e7fd      	b.n	8006ece <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006ed2:	68bb      	ldr	r3, [r7, #8]
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d01f      	beq.n	8006f18 <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006ed8:	2300      	movs	r3, #0
 8006eda:	61fb      	str	r3, [r7, #28]
 8006edc:	e012      	b.n	8006f04 <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006ede:	68ba      	ldr	r2, [r7, #8]
 8006ee0:	69fb      	ldr	r3, [r7, #28]
 8006ee2:	4413      	add	r3, r2
 8006ee4:	7819      	ldrb	r1, [r3, #0]
 8006ee6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006ee8:	69fb      	ldr	r3, [r7, #28]
 8006eea:	4413      	add	r3, r2
 8006eec:	3334      	adds	r3, #52	@ 0x34
 8006eee:	460a      	mov	r2, r1
 8006ef0:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006ef2:	68ba      	ldr	r2, [r7, #8]
 8006ef4:	69fb      	ldr	r3, [r7, #28]
 8006ef6:	4413      	add	r3, r2
 8006ef8:	781b      	ldrb	r3, [r3, #0]
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d006      	beq.n	8006f0c <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006efe:	69fb      	ldr	r3, [r7, #28]
 8006f00:	3301      	adds	r3, #1
 8006f02:	61fb      	str	r3, [r7, #28]
 8006f04:	69fb      	ldr	r3, [r7, #28]
 8006f06:	2b0f      	cmp	r3, #15
 8006f08:	d9e9      	bls.n	8006ede <prvInitialiseNewTask+0x6a>
 8006f0a:	e000      	b.n	8006f0e <prvInitialiseNewTask+0x9a>
			{
				break;
 8006f0c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006f0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f10:	2200      	movs	r2, #0
 8006f12:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006f16:	e003      	b.n	8006f20 <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006f18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f1a:	2200      	movs	r2, #0
 8006f1c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006f20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f22:	2b37      	cmp	r3, #55	@ 0x37
 8006f24:	d901      	bls.n	8006f2a <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006f26:	2337      	movs	r3, #55	@ 0x37
 8006f28:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006f2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f2c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006f2e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006f30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f32:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006f34:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006f36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f38:	2200      	movs	r2, #0
 8006f3a:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006f3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f3e:	3304      	adds	r3, #4
 8006f40:	4618      	mov	r0, r3
 8006f42:	f7ff f871 	bl	8006028 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006f46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f48:	3318      	adds	r3, #24
 8006f4a:	4618      	mov	r0, r3
 8006f4c:	f7ff f86c 	bl	8006028 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006f50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f52:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006f54:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006f56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f58:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006f5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f5e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006f60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f62:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006f64:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006f66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f68:	2200      	movs	r2, #0
 8006f6a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006f6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f70:	2200      	movs	r2, #0
 8006f72:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006f76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f78:	3354      	adds	r3, #84	@ 0x54
 8006f7a:	224c      	movs	r2, #76	@ 0x4c
 8006f7c:	2100      	movs	r1, #0
 8006f7e:	4618      	mov	r0, r3
 8006f80:	f002 fb97 	bl	80096b2 <memset>
 8006f84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f86:	4a0d      	ldr	r2, [pc, #52]	@ (8006fbc <prvInitialiseNewTask+0x148>)
 8006f88:	659a      	str	r2, [r3, #88]	@ 0x58
 8006f8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f8c:	4a0c      	ldr	r2, [pc, #48]	@ (8006fc0 <prvInitialiseNewTask+0x14c>)
 8006f8e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8006f90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f92:	4a0c      	ldr	r2, [pc, #48]	@ (8006fc4 <prvInitialiseNewTask+0x150>)
 8006f94:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006f96:	683a      	ldr	r2, [r7, #0]
 8006f98:	68f9      	ldr	r1, [r7, #12]
 8006f9a:	69b8      	ldr	r0, [r7, #24]
 8006f9c:	f001 f984 	bl	80082a8 <pxPortInitialiseStack>
 8006fa0:	4602      	mov	r2, r0
 8006fa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006fa4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006fa6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d002      	beq.n	8006fb2 <prvInitialiseNewTask+0x13e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006fac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006fae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006fb0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006fb2:	bf00      	nop
 8006fb4:	3720      	adds	r7, #32
 8006fb6:	46bd      	mov	sp, r7
 8006fb8:	bd80      	pop	{r7, pc}
 8006fba:	bf00      	nop
 8006fbc:	200053e8 	.word	0x200053e8
 8006fc0:	20005450 	.word	0x20005450
 8006fc4:	200054b8 	.word	0x200054b8

08006fc8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006fc8:	b580      	push	{r7, lr}
 8006fca:	b082      	sub	sp, #8
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006fd0:	f001 fa7c 	bl	80084cc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006fd4:	4b2d      	ldr	r3, [pc, #180]	@ (800708c <prvAddNewTaskToReadyList+0xc4>)
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	3301      	adds	r3, #1
 8006fda:	4a2c      	ldr	r2, [pc, #176]	@ (800708c <prvAddNewTaskToReadyList+0xc4>)
 8006fdc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006fde:	4b2c      	ldr	r3, [pc, #176]	@ (8007090 <prvAddNewTaskToReadyList+0xc8>)
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d109      	bne.n	8006ffa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006fe6:	4a2a      	ldr	r2, [pc, #168]	@ (8007090 <prvAddNewTaskToReadyList+0xc8>)
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006fec:	4b27      	ldr	r3, [pc, #156]	@ (800708c <prvAddNewTaskToReadyList+0xc4>)
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	2b01      	cmp	r3, #1
 8006ff2:	d110      	bne.n	8007016 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006ff4:	f000 fc44 	bl	8007880 <prvInitialiseTaskLists>
 8006ff8:	e00d      	b.n	8007016 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006ffa:	4b26      	ldr	r3, [pc, #152]	@ (8007094 <prvAddNewTaskToReadyList+0xcc>)
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d109      	bne.n	8007016 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007002:	4b23      	ldr	r3, [pc, #140]	@ (8007090 <prvAddNewTaskToReadyList+0xc8>)
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800700c:	429a      	cmp	r2, r3
 800700e:	d802      	bhi.n	8007016 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007010:	4a1f      	ldr	r2, [pc, #124]	@ (8007090 <prvAddNewTaskToReadyList+0xc8>)
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007016:	4b20      	ldr	r3, [pc, #128]	@ (8007098 <prvAddNewTaskToReadyList+0xd0>)
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	3301      	adds	r3, #1
 800701c:	4a1e      	ldr	r2, [pc, #120]	@ (8007098 <prvAddNewTaskToReadyList+0xd0>)
 800701e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007020:	4b1d      	ldr	r3, [pc, #116]	@ (8007098 <prvAddNewTaskToReadyList+0xd0>)
 8007022:	681a      	ldr	r2, [r3, #0]
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800702c:	4b1b      	ldr	r3, [pc, #108]	@ (800709c <prvAddNewTaskToReadyList+0xd4>)
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	429a      	cmp	r2, r3
 8007032:	d903      	bls.n	800703c <prvAddNewTaskToReadyList+0x74>
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007038:	4a18      	ldr	r2, [pc, #96]	@ (800709c <prvAddNewTaskToReadyList+0xd4>)
 800703a:	6013      	str	r3, [r2, #0]
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007040:	4613      	mov	r3, r2
 8007042:	009b      	lsls	r3, r3, #2
 8007044:	4413      	add	r3, r2
 8007046:	009b      	lsls	r3, r3, #2
 8007048:	4a15      	ldr	r2, [pc, #84]	@ (80070a0 <prvAddNewTaskToReadyList+0xd8>)
 800704a:	441a      	add	r2, r3
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	3304      	adds	r3, #4
 8007050:	4619      	mov	r1, r3
 8007052:	4610      	mov	r0, r2
 8007054:	f7fe fff5 	bl	8006042 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007058:	f001 fa6e 	bl	8008538 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800705c:	4b0d      	ldr	r3, [pc, #52]	@ (8007094 <prvAddNewTaskToReadyList+0xcc>)
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	2b00      	cmp	r3, #0
 8007062:	d00e      	beq.n	8007082 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007064:	4b0a      	ldr	r3, [pc, #40]	@ (8007090 <prvAddNewTaskToReadyList+0xc8>)
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800706e:	429a      	cmp	r2, r3
 8007070:	d207      	bcs.n	8007082 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007072:	4b0c      	ldr	r3, [pc, #48]	@ (80070a4 <prvAddNewTaskToReadyList+0xdc>)
 8007074:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007078:	601a      	str	r2, [r3, #0]
 800707a:	f3bf 8f4f 	dsb	sy
 800707e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007082:	bf00      	nop
 8007084:	3708      	adds	r7, #8
 8007086:	46bd      	mov	sp, r7
 8007088:	bd80      	pop	{r7, pc}
 800708a:	bf00      	nop
 800708c:	20001670 	.word	0x20001670
 8007090:	2000119c 	.word	0x2000119c
 8007094:	2000167c 	.word	0x2000167c
 8007098:	2000168c 	.word	0x2000168c
 800709c:	20001678 	.word	0x20001678
 80070a0:	200011a0 	.word	0x200011a0
 80070a4:	e000ed04 	.word	0xe000ed04

080070a8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80070a8:	b580      	push	{r7, lr}
 80070aa:	b084      	sub	sp, #16
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80070b0:	2300      	movs	r3, #0
 80070b2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d01a      	beq.n	80070f0 <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80070ba:	4b15      	ldr	r3, [pc, #84]	@ (8007110 <vTaskDelay+0x68>)
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d00d      	beq.n	80070de <vTaskDelay+0x36>
	__asm volatile
 80070c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070c6:	b672      	cpsid	i
 80070c8:	f383 8811 	msr	BASEPRI, r3
 80070cc:	f3bf 8f6f 	isb	sy
 80070d0:	f3bf 8f4f 	dsb	sy
 80070d4:	b662      	cpsie	i
 80070d6:	60bb      	str	r3, [r7, #8]
}
 80070d8:	bf00      	nop
 80070da:	bf00      	nop
 80070dc:	e7fd      	b.n	80070da <vTaskDelay+0x32>
			vTaskSuspendAll();
 80070de:	f000 f88f 	bl	8007200 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80070e2:	2100      	movs	r1, #0
 80070e4:	6878      	ldr	r0, [r7, #4]
 80070e6:	f000 fd23 	bl	8007b30 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80070ea:	f000 f897 	bl	800721c <xTaskResumeAll>
 80070ee:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d107      	bne.n	8007106 <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 80070f6:	4b07      	ldr	r3, [pc, #28]	@ (8007114 <vTaskDelay+0x6c>)
 80070f8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80070fc:	601a      	str	r2, [r3, #0]
 80070fe:	f3bf 8f4f 	dsb	sy
 8007102:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007106:	bf00      	nop
 8007108:	3710      	adds	r7, #16
 800710a:	46bd      	mov	sp, r7
 800710c:	bd80      	pop	{r7, pc}
 800710e:	bf00      	nop
 8007110:	20001698 	.word	0x20001698
 8007114:	e000ed04 	.word	0xe000ed04

08007118 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007118:	b580      	push	{r7, lr}
 800711a:	b08a      	sub	sp, #40	@ 0x28
 800711c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800711e:	2300      	movs	r3, #0
 8007120:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007122:	2300      	movs	r3, #0
 8007124:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007126:	463a      	mov	r2, r7
 8007128:	1d39      	adds	r1, r7, #4
 800712a:	f107 0308 	add.w	r3, r7, #8
 800712e:	4618      	mov	r0, r3
 8007130:	f7fe ff26 	bl	8005f80 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007134:	6839      	ldr	r1, [r7, #0]
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	68ba      	ldr	r2, [r7, #8]
 800713a:	9202      	str	r2, [sp, #8]
 800713c:	9301      	str	r3, [sp, #4]
 800713e:	2300      	movs	r3, #0
 8007140:	9300      	str	r3, [sp, #0]
 8007142:	2300      	movs	r3, #0
 8007144:	460a      	mov	r2, r1
 8007146:	4926      	ldr	r1, [pc, #152]	@ (80071e0 <vTaskStartScheduler+0xc8>)
 8007148:	4826      	ldr	r0, [pc, #152]	@ (80071e4 <vTaskStartScheduler+0xcc>)
 800714a:	f7ff fde7 	bl	8006d1c <xTaskCreateStatic>
 800714e:	4603      	mov	r3, r0
 8007150:	4a25      	ldr	r2, [pc, #148]	@ (80071e8 <vTaskStartScheduler+0xd0>)
 8007152:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007154:	4b24      	ldr	r3, [pc, #144]	@ (80071e8 <vTaskStartScheduler+0xd0>)
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	2b00      	cmp	r3, #0
 800715a:	d002      	beq.n	8007162 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800715c:	2301      	movs	r3, #1
 800715e:	617b      	str	r3, [r7, #20]
 8007160:	e001      	b.n	8007166 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007162:	2300      	movs	r3, #0
 8007164:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007166:	697b      	ldr	r3, [r7, #20]
 8007168:	2b01      	cmp	r3, #1
 800716a:	d102      	bne.n	8007172 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800716c:	f000 fd34 	bl	8007bd8 <xTimerCreateTimerTask>
 8007170:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007172:	697b      	ldr	r3, [r7, #20]
 8007174:	2b01      	cmp	r3, #1
 8007176:	d11d      	bne.n	80071b4 <vTaskStartScheduler+0x9c>
	__asm volatile
 8007178:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800717c:	b672      	cpsid	i
 800717e:	f383 8811 	msr	BASEPRI, r3
 8007182:	f3bf 8f6f 	isb	sy
 8007186:	f3bf 8f4f 	dsb	sy
 800718a:	b662      	cpsie	i
 800718c:	613b      	str	r3, [r7, #16]
}
 800718e:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007190:	4b16      	ldr	r3, [pc, #88]	@ (80071ec <vTaskStartScheduler+0xd4>)
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	3354      	adds	r3, #84	@ 0x54
 8007196:	4a16      	ldr	r2, [pc, #88]	@ (80071f0 <vTaskStartScheduler+0xd8>)
 8007198:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800719a:	4b16      	ldr	r3, [pc, #88]	@ (80071f4 <vTaskStartScheduler+0xdc>)
 800719c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80071a0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80071a2:	4b15      	ldr	r3, [pc, #84]	@ (80071f8 <vTaskStartScheduler+0xe0>)
 80071a4:	2201      	movs	r2, #1
 80071a6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80071a8:	4b14      	ldr	r3, [pc, #80]	@ (80071fc <vTaskStartScheduler+0xe4>)
 80071aa:	2200      	movs	r2, #0
 80071ac:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80071ae:	f001 f90f 	bl	80083d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80071b2:	e011      	b.n	80071d8 <vTaskStartScheduler+0xc0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80071b4:	697b      	ldr	r3, [r7, #20]
 80071b6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80071ba:	d10d      	bne.n	80071d8 <vTaskStartScheduler+0xc0>
	__asm volatile
 80071bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071c0:	b672      	cpsid	i
 80071c2:	f383 8811 	msr	BASEPRI, r3
 80071c6:	f3bf 8f6f 	isb	sy
 80071ca:	f3bf 8f4f 	dsb	sy
 80071ce:	b662      	cpsie	i
 80071d0:	60fb      	str	r3, [r7, #12]
}
 80071d2:	bf00      	nop
 80071d4:	bf00      	nop
 80071d6:	e7fd      	b.n	80071d4 <vTaskStartScheduler+0xbc>
}
 80071d8:	bf00      	nop
 80071da:	3718      	adds	r7, #24
 80071dc:	46bd      	mov	sp, r7
 80071de:	bd80      	pop	{r7, pc}
 80071e0:	0800d65c 	.word	0x0800d65c
 80071e4:	08007851 	.word	0x08007851
 80071e8:	20001694 	.word	0x20001694
 80071ec:	2000119c 	.word	0x2000119c
 80071f0:	2000002c 	.word	0x2000002c
 80071f4:	20001690 	.word	0x20001690
 80071f8:	2000167c 	.word	0x2000167c
 80071fc:	20001674 	.word	0x20001674

08007200 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007200:	b480      	push	{r7}
 8007202:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8007204:	4b04      	ldr	r3, [pc, #16]	@ (8007218 <vTaskSuspendAll+0x18>)
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	3301      	adds	r3, #1
 800720a:	4a03      	ldr	r2, [pc, #12]	@ (8007218 <vTaskSuspendAll+0x18>)
 800720c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800720e:	bf00      	nop
 8007210:	46bd      	mov	sp, r7
 8007212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007216:	4770      	bx	lr
 8007218:	20001698 	.word	0x20001698

0800721c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800721c:	b580      	push	{r7, lr}
 800721e:	b084      	sub	sp, #16
 8007220:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007222:	2300      	movs	r3, #0
 8007224:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007226:	2300      	movs	r3, #0
 8007228:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800722a:	4b43      	ldr	r3, [pc, #268]	@ (8007338 <xTaskResumeAll+0x11c>)
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	2b00      	cmp	r3, #0
 8007230:	d10d      	bne.n	800724e <xTaskResumeAll+0x32>
	__asm volatile
 8007232:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007236:	b672      	cpsid	i
 8007238:	f383 8811 	msr	BASEPRI, r3
 800723c:	f3bf 8f6f 	isb	sy
 8007240:	f3bf 8f4f 	dsb	sy
 8007244:	b662      	cpsie	i
 8007246:	603b      	str	r3, [r7, #0]
}
 8007248:	bf00      	nop
 800724a:	bf00      	nop
 800724c:	e7fd      	b.n	800724a <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800724e:	f001 f93d 	bl	80084cc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007252:	4b39      	ldr	r3, [pc, #228]	@ (8007338 <xTaskResumeAll+0x11c>)
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	3b01      	subs	r3, #1
 8007258:	4a37      	ldr	r2, [pc, #220]	@ (8007338 <xTaskResumeAll+0x11c>)
 800725a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800725c:	4b36      	ldr	r3, [pc, #216]	@ (8007338 <xTaskResumeAll+0x11c>)
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	2b00      	cmp	r3, #0
 8007262:	d162      	bne.n	800732a <xTaskResumeAll+0x10e>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007264:	4b35      	ldr	r3, [pc, #212]	@ (800733c <xTaskResumeAll+0x120>)
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	2b00      	cmp	r3, #0
 800726a:	d05e      	beq.n	800732a <xTaskResumeAll+0x10e>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800726c:	e02f      	b.n	80072ce <xTaskResumeAll+0xb2>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800726e:	4b34      	ldr	r3, [pc, #208]	@ (8007340 <xTaskResumeAll+0x124>)
 8007270:	68db      	ldr	r3, [r3, #12]
 8007272:	68db      	ldr	r3, [r3, #12]
 8007274:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	3318      	adds	r3, #24
 800727a:	4618      	mov	r0, r3
 800727c:	f7fe ff3e 	bl	80060fc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	3304      	adds	r3, #4
 8007284:	4618      	mov	r0, r3
 8007286:	f7fe ff39 	bl	80060fc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800728e:	4b2d      	ldr	r3, [pc, #180]	@ (8007344 <xTaskResumeAll+0x128>)
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	429a      	cmp	r2, r3
 8007294:	d903      	bls.n	800729e <xTaskResumeAll+0x82>
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800729a:	4a2a      	ldr	r2, [pc, #168]	@ (8007344 <xTaskResumeAll+0x128>)
 800729c:	6013      	str	r3, [r2, #0]
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80072a2:	4613      	mov	r3, r2
 80072a4:	009b      	lsls	r3, r3, #2
 80072a6:	4413      	add	r3, r2
 80072a8:	009b      	lsls	r3, r3, #2
 80072aa:	4a27      	ldr	r2, [pc, #156]	@ (8007348 <xTaskResumeAll+0x12c>)
 80072ac:	441a      	add	r2, r3
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	3304      	adds	r3, #4
 80072b2:	4619      	mov	r1, r3
 80072b4:	4610      	mov	r0, r2
 80072b6:	f7fe fec4 	bl	8006042 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80072be:	4b23      	ldr	r3, [pc, #140]	@ (800734c <xTaskResumeAll+0x130>)
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072c4:	429a      	cmp	r2, r3
 80072c6:	d302      	bcc.n	80072ce <xTaskResumeAll+0xb2>
					{
						xYieldPending = pdTRUE;
 80072c8:	4b21      	ldr	r3, [pc, #132]	@ (8007350 <xTaskResumeAll+0x134>)
 80072ca:	2201      	movs	r2, #1
 80072cc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80072ce:	4b1c      	ldr	r3, [pc, #112]	@ (8007340 <xTaskResumeAll+0x124>)
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d1cb      	bne.n	800726e <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d001      	beq.n	80072e0 <xTaskResumeAll+0xc4>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80072dc:	f000 fb76 	bl	80079cc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80072e0:	4b1c      	ldr	r3, [pc, #112]	@ (8007354 <xTaskResumeAll+0x138>)
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d010      	beq.n	800730e <xTaskResumeAll+0xf2>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80072ec:	f000 f846 	bl	800737c <xTaskIncrementTick>
 80072f0:	4603      	mov	r3, r0
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d002      	beq.n	80072fc <xTaskResumeAll+0xe0>
							{
								xYieldPending = pdTRUE;
 80072f6:	4b16      	ldr	r3, [pc, #88]	@ (8007350 <xTaskResumeAll+0x134>)
 80072f8:	2201      	movs	r2, #1
 80072fa:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	3b01      	subs	r3, #1
 8007300:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	2b00      	cmp	r3, #0
 8007306:	d1f1      	bne.n	80072ec <xTaskResumeAll+0xd0>

						uxPendedTicks = 0;
 8007308:	4b12      	ldr	r3, [pc, #72]	@ (8007354 <xTaskResumeAll+0x138>)
 800730a:	2200      	movs	r2, #0
 800730c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800730e:	4b10      	ldr	r3, [pc, #64]	@ (8007350 <xTaskResumeAll+0x134>)
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	2b00      	cmp	r3, #0
 8007314:	d009      	beq.n	800732a <xTaskResumeAll+0x10e>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007316:	2301      	movs	r3, #1
 8007318:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800731a:	4b0f      	ldr	r3, [pc, #60]	@ (8007358 <xTaskResumeAll+0x13c>)
 800731c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007320:	601a      	str	r2, [r3, #0]
 8007322:	f3bf 8f4f 	dsb	sy
 8007326:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800732a:	f001 f905 	bl	8008538 <vPortExitCritical>

	return xAlreadyYielded;
 800732e:	68bb      	ldr	r3, [r7, #8]
}
 8007330:	4618      	mov	r0, r3
 8007332:	3710      	adds	r7, #16
 8007334:	46bd      	mov	sp, r7
 8007336:	bd80      	pop	{r7, pc}
 8007338:	20001698 	.word	0x20001698
 800733c:	20001670 	.word	0x20001670
 8007340:	20001630 	.word	0x20001630
 8007344:	20001678 	.word	0x20001678
 8007348:	200011a0 	.word	0x200011a0
 800734c:	2000119c 	.word	0x2000119c
 8007350:	20001684 	.word	0x20001684
 8007354:	20001680 	.word	0x20001680
 8007358:	e000ed04 	.word	0xe000ed04

0800735c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800735c:	b480      	push	{r7}
 800735e:	b083      	sub	sp, #12
 8007360:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007362:	4b05      	ldr	r3, [pc, #20]	@ (8007378 <xTaskGetTickCount+0x1c>)
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007368:	687b      	ldr	r3, [r7, #4]
}
 800736a:	4618      	mov	r0, r3
 800736c:	370c      	adds	r7, #12
 800736e:	46bd      	mov	sp, r7
 8007370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007374:	4770      	bx	lr
 8007376:	bf00      	nop
 8007378:	20001674 	.word	0x20001674

0800737c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800737c:	b580      	push	{r7, lr}
 800737e:	b086      	sub	sp, #24
 8007380:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007382:	2300      	movs	r3, #0
 8007384:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007386:	4b50      	ldr	r3, [pc, #320]	@ (80074c8 <xTaskIncrementTick+0x14c>)
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	2b00      	cmp	r3, #0
 800738c:	f040 808c 	bne.w	80074a8 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007390:	4b4e      	ldr	r3, [pc, #312]	@ (80074cc <xTaskIncrementTick+0x150>)
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	3301      	adds	r3, #1
 8007396:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007398:	4a4c      	ldr	r2, [pc, #304]	@ (80074cc <xTaskIncrementTick+0x150>)
 800739a:	693b      	ldr	r3, [r7, #16]
 800739c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800739e:	693b      	ldr	r3, [r7, #16]
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d123      	bne.n	80073ec <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 80073a4:	4b4a      	ldr	r3, [pc, #296]	@ (80074d0 <xTaskIncrementTick+0x154>)
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d00d      	beq.n	80073ca <xTaskIncrementTick+0x4e>
	__asm volatile
 80073ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073b2:	b672      	cpsid	i
 80073b4:	f383 8811 	msr	BASEPRI, r3
 80073b8:	f3bf 8f6f 	isb	sy
 80073bc:	f3bf 8f4f 	dsb	sy
 80073c0:	b662      	cpsie	i
 80073c2:	603b      	str	r3, [r7, #0]
}
 80073c4:	bf00      	nop
 80073c6:	bf00      	nop
 80073c8:	e7fd      	b.n	80073c6 <xTaskIncrementTick+0x4a>
 80073ca:	4b41      	ldr	r3, [pc, #260]	@ (80074d0 <xTaskIncrementTick+0x154>)
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	60fb      	str	r3, [r7, #12]
 80073d0:	4b40      	ldr	r3, [pc, #256]	@ (80074d4 <xTaskIncrementTick+0x158>)
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	4a3e      	ldr	r2, [pc, #248]	@ (80074d0 <xTaskIncrementTick+0x154>)
 80073d6:	6013      	str	r3, [r2, #0]
 80073d8:	4a3e      	ldr	r2, [pc, #248]	@ (80074d4 <xTaskIncrementTick+0x158>)
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	6013      	str	r3, [r2, #0]
 80073de:	4b3e      	ldr	r3, [pc, #248]	@ (80074d8 <xTaskIncrementTick+0x15c>)
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	3301      	adds	r3, #1
 80073e4:	4a3c      	ldr	r2, [pc, #240]	@ (80074d8 <xTaskIncrementTick+0x15c>)
 80073e6:	6013      	str	r3, [r2, #0]
 80073e8:	f000 faf0 	bl	80079cc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80073ec:	4b3b      	ldr	r3, [pc, #236]	@ (80074dc <xTaskIncrementTick+0x160>)
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	693a      	ldr	r2, [r7, #16]
 80073f2:	429a      	cmp	r2, r3
 80073f4:	d349      	bcc.n	800748a <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80073f6:	4b36      	ldr	r3, [pc, #216]	@ (80074d0 <xTaskIncrementTick+0x154>)
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d104      	bne.n	800740a <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007400:	4b36      	ldr	r3, [pc, #216]	@ (80074dc <xTaskIncrementTick+0x160>)
 8007402:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007406:	601a      	str	r2, [r3, #0]
					break;
 8007408:	e03f      	b.n	800748a <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800740a:	4b31      	ldr	r3, [pc, #196]	@ (80074d0 <xTaskIncrementTick+0x154>)
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	68db      	ldr	r3, [r3, #12]
 8007410:	68db      	ldr	r3, [r3, #12]
 8007412:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007414:	68bb      	ldr	r3, [r7, #8]
 8007416:	685b      	ldr	r3, [r3, #4]
 8007418:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800741a:	693a      	ldr	r2, [r7, #16]
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	429a      	cmp	r2, r3
 8007420:	d203      	bcs.n	800742a <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007422:	4a2e      	ldr	r2, [pc, #184]	@ (80074dc <xTaskIncrementTick+0x160>)
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007428:	e02f      	b.n	800748a <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800742a:	68bb      	ldr	r3, [r7, #8]
 800742c:	3304      	adds	r3, #4
 800742e:	4618      	mov	r0, r3
 8007430:	f7fe fe64 	bl	80060fc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007434:	68bb      	ldr	r3, [r7, #8]
 8007436:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007438:	2b00      	cmp	r3, #0
 800743a:	d004      	beq.n	8007446 <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800743c:	68bb      	ldr	r3, [r7, #8]
 800743e:	3318      	adds	r3, #24
 8007440:	4618      	mov	r0, r3
 8007442:	f7fe fe5b 	bl	80060fc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007446:	68bb      	ldr	r3, [r7, #8]
 8007448:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800744a:	4b25      	ldr	r3, [pc, #148]	@ (80074e0 <xTaskIncrementTick+0x164>)
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	429a      	cmp	r2, r3
 8007450:	d903      	bls.n	800745a <xTaskIncrementTick+0xde>
 8007452:	68bb      	ldr	r3, [r7, #8]
 8007454:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007456:	4a22      	ldr	r2, [pc, #136]	@ (80074e0 <xTaskIncrementTick+0x164>)
 8007458:	6013      	str	r3, [r2, #0]
 800745a:	68bb      	ldr	r3, [r7, #8]
 800745c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800745e:	4613      	mov	r3, r2
 8007460:	009b      	lsls	r3, r3, #2
 8007462:	4413      	add	r3, r2
 8007464:	009b      	lsls	r3, r3, #2
 8007466:	4a1f      	ldr	r2, [pc, #124]	@ (80074e4 <xTaskIncrementTick+0x168>)
 8007468:	441a      	add	r2, r3
 800746a:	68bb      	ldr	r3, [r7, #8]
 800746c:	3304      	adds	r3, #4
 800746e:	4619      	mov	r1, r3
 8007470:	4610      	mov	r0, r2
 8007472:	f7fe fde6 	bl	8006042 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007476:	68bb      	ldr	r3, [r7, #8]
 8007478:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800747a:	4b1b      	ldr	r3, [pc, #108]	@ (80074e8 <xTaskIncrementTick+0x16c>)
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007480:	429a      	cmp	r2, r3
 8007482:	d3b8      	bcc.n	80073f6 <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 8007484:	2301      	movs	r3, #1
 8007486:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007488:	e7b5      	b.n	80073f6 <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800748a:	4b17      	ldr	r3, [pc, #92]	@ (80074e8 <xTaskIncrementTick+0x16c>)
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007490:	4914      	ldr	r1, [pc, #80]	@ (80074e4 <xTaskIncrementTick+0x168>)
 8007492:	4613      	mov	r3, r2
 8007494:	009b      	lsls	r3, r3, #2
 8007496:	4413      	add	r3, r2
 8007498:	009b      	lsls	r3, r3, #2
 800749a:	440b      	add	r3, r1
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	2b01      	cmp	r3, #1
 80074a0:	d907      	bls.n	80074b2 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 80074a2:	2301      	movs	r3, #1
 80074a4:	617b      	str	r3, [r7, #20]
 80074a6:	e004      	b.n	80074b2 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80074a8:	4b10      	ldr	r3, [pc, #64]	@ (80074ec <xTaskIncrementTick+0x170>)
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	3301      	adds	r3, #1
 80074ae:	4a0f      	ldr	r2, [pc, #60]	@ (80074ec <xTaskIncrementTick+0x170>)
 80074b0:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80074b2:	4b0f      	ldr	r3, [pc, #60]	@ (80074f0 <xTaskIncrementTick+0x174>)
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d001      	beq.n	80074be <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 80074ba:	2301      	movs	r3, #1
 80074bc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80074be:	697b      	ldr	r3, [r7, #20]
}
 80074c0:	4618      	mov	r0, r3
 80074c2:	3718      	adds	r7, #24
 80074c4:	46bd      	mov	sp, r7
 80074c6:	bd80      	pop	{r7, pc}
 80074c8:	20001698 	.word	0x20001698
 80074cc:	20001674 	.word	0x20001674
 80074d0:	20001628 	.word	0x20001628
 80074d4:	2000162c 	.word	0x2000162c
 80074d8:	20001688 	.word	0x20001688
 80074dc:	20001690 	.word	0x20001690
 80074e0:	20001678 	.word	0x20001678
 80074e4:	200011a0 	.word	0x200011a0
 80074e8:	2000119c 	.word	0x2000119c
 80074ec:	20001680 	.word	0x20001680
 80074f0:	20001684 	.word	0x20001684

080074f4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80074f4:	b480      	push	{r7}
 80074f6:	b085      	sub	sp, #20
 80074f8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80074fa:	4b2c      	ldr	r3, [pc, #176]	@ (80075ac <vTaskSwitchContext+0xb8>)
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d003      	beq.n	800750a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007502:	4b2b      	ldr	r3, [pc, #172]	@ (80075b0 <vTaskSwitchContext+0xbc>)
 8007504:	2201      	movs	r2, #1
 8007506:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007508:	e049      	b.n	800759e <vTaskSwitchContext+0xaa>
		xYieldPending = pdFALSE;
 800750a:	4b29      	ldr	r3, [pc, #164]	@ (80075b0 <vTaskSwitchContext+0xbc>)
 800750c:	2200      	movs	r2, #0
 800750e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007510:	4b28      	ldr	r3, [pc, #160]	@ (80075b4 <vTaskSwitchContext+0xc0>)
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	60fb      	str	r3, [r7, #12]
 8007516:	e013      	b.n	8007540 <vTaskSwitchContext+0x4c>
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	2b00      	cmp	r3, #0
 800751c:	d10d      	bne.n	800753a <vTaskSwitchContext+0x46>
	__asm volatile
 800751e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007522:	b672      	cpsid	i
 8007524:	f383 8811 	msr	BASEPRI, r3
 8007528:	f3bf 8f6f 	isb	sy
 800752c:	f3bf 8f4f 	dsb	sy
 8007530:	b662      	cpsie	i
 8007532:	607b      	str	r3, [r7, #4]
}
 8007534:	bf00      	nop
 8007536:	bf00      	nop
 8007538:	e7fd      	b.n	8007536 <vTaskSwitchContext+0x42>
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	3b01      	subs	r3, #1
 800753e:	60fb      	str	r3, [r7, #12]
 8007540:	491d      	ldr	r1, [pc, #116]	@ (80075b8 <vTaskSwitchContext+0xc4>)
 8007542:	68fa      	ldr	r2, [r7, #12]
 8007544:	4613      	mov	r3, r2
 8007546:	009b      	lsls	r3, r3, #2
 8007548:	4413      	add	r3, r2
 800754a:	009b      	lsls	r3, r3, #2
 800754c:	440b      	add	r3, r1
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	2b00      	cmp	r3, #0
 8007552:	d0e1      	beq.n	8007518 <vTaskSwitchContext+0x24>
 8007554:	68fa      	ldr	r2, [r7, #12]
 8007556:	4613      	mov	r3, r2
 8007558:	009b      	lsls	r3, r3, #2
 800755a:	4413      	add	r3, r2
 800755c:	009b      	lsls	r3, r3, #2
 800755e:	4a16      	ldr	r2, [pc, #88]	@ (80075b8 <vTaskSwitchContext+0xc4>)
 8007560:	4413      	add	r3, r2
 8007562:	60bb      	str	r3, [r7, #8]
 8007564:	68bb      	ldr	r3, [r7, #8]
 8007566:	685b      	ldr	r3, [r3, #4]
 8007568:	685a      	ldr	r2, [r3, #4]
 800756a:	68bb      	ldr	r3, [r7, #8]
 800756c:	605a      	str	r2, [r3, #4]
 800756e:	68bb      	ldr	r3, [r7, #8]
 8007570:	685a      	ldr	r2, [r3, #4]
 8007572:	68bb      	ldr	r3, [r7, #8]
 8007574:	3308      	adds	r3, #8
 8007576:	429a      	cmp	r2, r3
 8007578:	d104      	bne.n	8007584 <vTaskSwitchContext+0x90>
 800757a:	68bb      	ldr	r3, [r7, #8]
 800757c:	685b      	ldr	r3, [r3, #4]
 800757e:	685a      	ldr	r2, [r3, #4]
 8007580:	68bb      	ldr	r3, [r7, #8]
 8007582:	605a      	str	r2, [r3, #4]
 8007584:	68bb      	ldr	r3, [r7, #8]
 8007586:	685b      	ldr	r3, [r3, #4]
 8007588:	68db      	ldr	r3, [r3, #12]
 800758a:	4a0c      	ldr	r2, [pc, #48]	@ (80075bc <vTaskSwitchContext+0xc8>)
 800758c:	6013      	str	r3, [r2, #0]
 800758e:	4a09      	ldr	r2, [pc, #36]	@ (80075b4 <vTaskSwitchContext+0xc0>)
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007594:	4b09      	ldr	r3, [pc, #36]	@ (80075bc <vTaskSwitchContext+0xc8>)
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	3354      	adds	r3, #84	@ 0x54
 800759a:	4a09      	ldr	r2, [pc, #36]	@ (80075c0 <vTaskSwitchContext+0xcc>)
 800759c:	6013      	str	r3, [r2, #0]
}
 800759e:	bf00      	nop
 80075a0:	3714      	adds	r7, #20
 80075a2:	46bd      	mov	sp, r7
 80075a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a8:	4770      	bx	lr
 80075aa:	bf00      	nop
 80075ac:	20001698 	.word	0x20001698
 80075b0:	20001684 	.word	0x20001684
 80075b4:	20001678 	.word	0x20001678
 80075b8:	200011a0 	.word	0x200011a0
 80075bc:	2000119c 	.word	0x2000119c
 80075c0:	2000002c 	.word	0x2000002c

080075c4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80075c4:	b580      	push	{r7, lr}
 80075c6:	b084      	sub	sp, #16
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	6078      	str	r0, [r7, #4]
 80075cc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d10d      	bne.n	80075f0 <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 80075d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075d8:	b672      	cpsid	i
 80075da:	f383 8811 	msr	BASEPRI, r3
 80075de:	f3bf 8f6f 	isb	sy
 80075e2:	f3bf 8f4f 	dsb	sy
 80075e6:	b662      	cpsie	i
 80075e8:	60fb      	str	r3, [r7, #12]
}
 80075ea:	bf00      	nop
 80075ec:	bf00      	nop
 80075ee:	e7fd      	b.n	80075ec <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80075f0:	4b07      	ldr	r3, [pc, #28]	@ (8007610 <vTaskPlaceOnEventList+0x4c>)
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	3318      	adds	r3, #24
 80075f6:	4619      	mov	r1, r3
 80075f8:	6878      	ldr	r0, [r7, #4]
 80075fa:	f7fe fd46 	bl	800608a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80075fe:	2101      	movs	r1, #1
 8007600:	6838      	ldr	r0, [r7, #0]
 8007602:	f000 fa95 	bl	8007b30 <prvAddCurrentTaskToDelayedList>
}
 8007606:	bf00      	nop
 8007608:	3710      	adds	r7, #16
 800760a:	46bd      	mov	sp, r7
 800760c:	bd80      	pop	{r7, pc}
 800760e:	bf00      	nop
 8007610:	2000119c 	.word	0x2000119c

08007614 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007614:	b580      	push	{r7, lr}
 8007616:	b086      	sub	sp, #24
 8007618:	af00      	add	r7, sp, #0
 800761a:	60f8      	str	r0, [r7, #12]
 800761c:	60b9      	str	r1, [r7, #8]
 800761e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	2b00      	cmp	r3, #0
 8007624:	d10d      	bne.n	8007642 <vTaskPlaceOnEventListRestricted+0x2e>
	__asm volatile
 8007626:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800762a:	b672      	cpsid	i
 800762c:	f383 8811 	msr	BASEPRI, r3
 8007630:	f3bf 8f6f 	isb	sy
 8007634:	f3bf 8f4f 	dsb	sy
 8007638:	b662      	cpsie	i
 800763a:	617b      	str	r3, [r7, #20]
}
 800763c:	bf00      	nop
 800763e:	bf00      	nop
 8007640:	e7fd      	b.n	800763e <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007642:	4b0a      	ldr	r3, [pc, #40]	@ (800766c <vTaskPlaceOnEventListRestricted+0x58>)
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	3318      	adds	r3, #24
 8007648:	4619      	mov	r1, r3
 800764a:	68f8      	ldr	r0, [r7, #12]
 800764c:	f7fe fcf9 	bl	8006042 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	2b00      	cmp	r3, #0
 8007654:	d002      	beq.n	800765c <vTaskPlaceOnEventListRestricted+0x48>
		{
			xTicksToWait = portMAX_DELAY;
 8007656:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800765a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800765c:	6879      	ldr	r1, [r7, #4]
 800765e:	68b8      	ldr	r0, [r7, #8]
 8007660:	f000 fa66 	bl	8007b30 <prvAddCurrentTaskToDelayedList>
	}
 8007664:	bf00      	nop
 8007666:	3718      	adds	r7, #24
 8007668:	46bd      	mov	sp, r7
 800766a:	bd80      	pop	{r7, pc}
 800766c:	2000119c 	.word	0x2000119c

08007670 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007670:	b580      	push	{r7, lr}
 8007672:	b086      	sub	sp, #24
 8007674:	af00      	add	r7, sp, #0
 8007676:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	68db      	ldr	r3, [r3, #12]
 800767c:	68db      	ldr	r3, [r3, #12]
 800767e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007680:	693b      	ldr	r3, [r7, #16]
 8007682:	2b00      	cmp	r3, #0
 8007684:	d10d      	bne.n	80076a2 <xTaskRemoveFromEventList+0x32>
	__asm volatile
 8007686:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800768a:	b672      	cpsid	i
 800768c:	f383 8811 	msr	BASEPRI, r3
 8007690:	f3bf 8f6f 	isb	sy
 8007694:	f3bf 8f4f 	dsb	sy
 8007698:	b662      	cpsie	i
 800769a:	60fb      	str	r3, [r7, #12]
}
 800769c:	bf00      	nop
 800769e:	bf00      	nop
 80076a0:	e7fd      	b.n	800769e <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80076a2:	693b      	ldr	r3, [r7, #16]
 80076a4:	3318      	adds	r3, #24
 80076a6:	4618      	mov	r0, r3
 80076a8:	f7fe fd28 	bl	80060fc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80076ac:	4b1d      	ldr	r3, [pc, #116]	@ (8007724 <xTaskRemoveFromEventList+0xb4>)
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d11d      	bne.n	80076f0 <xTaskRemoveFromEventList+0x80>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80076b4:	693b      	ldr	r3, [r7, #16]
 80076b6:	3304      	adds	r3, #4
 80076b8:	4618      	mov	r0, r3
 80076ba:	f7fe fd1f 	bl	80060fc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80076be:	693b      	ldr	r3, [r7, #16]
 80076c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80076c2:	4b19      	ldr	r3, [pc, #100]	@ (8007728 <xTaskRemoveFromEventList+0xb8>)
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	429a      	cmp	r2, r3
 80076c8:	d903      	bls.n	80076d2 <xTaskRemoveFromEventList+0x62>
 80076ca:	693b      	ldr	r3, [r7, #16]
 80076cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076ce:	4a16      	ldr	r2, [pc, #88]	@ (8007728 <xTaskRemoveFromEventList+0xb8>)
 80076d0:	6013      	str	r3, [r2, #0]
 80076d2:	693b      	ldr	r3, [r7, #16]
 80076d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80076d6:	4613      	mov	r3, r2
 80076d8:	009b      	lsls	r3, r3, #2
 80076da:	4413      	add	r3, r2
 80076dc:	009b      	lsls	r3, r3, #2
 80076de:	4a13      	ldr	r2, [pc, #76]	@ (800772c <xTaskRemoveFromEventList+0xbc>)
 80076e0:	441a      	add	r2, r3
 80076e2:	693b      	ldr	r3, [r7, #16]
 80076e4:	3304      	adds	r3, #4
 80076e6:	4619      	mov	r1, r3
 80076e8:	4610      	mov	r0, r2
 80076ea:	f7fe fcaa 	bl	8006042 <vListInsertEnd>
 80076ee:	e005      	b.n	80076fc <xTaskRemoveFromEventList+0x8c>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80076f0:	693b      	ldr	r3, [r7, #16]
 80076f2:	3318      	adds	r3, #24
 80076f4:	4619      	mov	r1, r3
 80076f6:	480e      	ldr	r0, [pc, #56]	@ (8007730 <xTaskRemoveFromEventList+0xc0>)
 80076f8:	f7fe fca3 	bl	8006042 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80076fc:	693b      	ldr	r3, [r7, #16]
 80076fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007700:	4b0c      	ldr	r3, [pc, #48]	@ (8007734 <xTaskRemoveFromEventList+0xc4>)
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007706:	429a      	cmp	r2, r3
 8007708:	d905      	bls.n	8007716 <xTaskRemoveFromEventList+0xa6>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800770a:	2301      	movs	r3, #1
 800770c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800770e:	4b0a      	ldr	r3, [pc, #40]	@ (8007738 <xTaskRemoveFromEventList+0xc8>)
 8007710:	2201      	movs	r2, #1
 8007712:	601a      	str	r2, [r3, #0]
 8007714:	e001      	b.n	800771a <xTaskRemoveFromEventList+0xaa>
	}
	else
	{
		xReturn = pdFALSE;
 8007716:	2300      	movs	r3, #0
 8007718:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800771a:	697b      	ldr	r3, [r7, #20]
}
 800771c:	4618      	mov	r0, r3
 800771e:	3718      	adds	r7, #24
 8007720:	46bd      	mov	sp, r7
 8007722:	bd80      	pop	{r7, pc}
 8007724:	20001698 	.word	0x20001698
 8007728:	20001678 	.word	0x20001678
 800772c:	200011a0 	.word	0x200011a0
 8007730:	20001630 	.word	0x20001630
 8007734:	2000119c 	.word	0x2000119c
 8007738:	20001684 	.word	0x20001684

0800773c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800773c:	b480      	push	{r7}
 800773e:	b083      	sub	sp, #12
 8007740:	af00      	add	r7, sp, #0
 8007742:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007744:	4b06      	ldr	r3, [pc, #24]	@ (8007760 <vTaskInternalSetTimeOutState+0x24>)
 8007746:	681a      	ldr	r2, [r3, #0]
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800774c:	4b05      	ldr	r3, [pc, #20]	@ (8007764 <vTaskInternalSetTimeOutState+0x28>)
 800774e:	681a      	ldr	r2, [r3, #0]
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	605a      	str	r2, [r3, #4]
}
 8007754:	bf00      	nop
 8007756:	370c      	adds	r7, #12
 8007758:	46bd      	mov	sp, r7
 800775a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800775e:	4770      	bx	lr
 8007760:	20001688 	.word	0x20001688
 8007764:	20001674 	.word	0x20001674

08007768 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007768:	b580      	push	{r7, lr}
 800776a:	b088      	sub	sp, #32
 800776c:	af00      	add	r7, sp, #0
 800776e:	6078      	str	r0, [r7, #4]
 8007770:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	2b00      	cmp	r3, #0
 8007776:	d10d      	bne.n	8007794 <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 8007778:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800777c:	b672      	cpsid	i
 800777e:	f383 8811 	msr	BASEPRI, r3
 8007782:	f3bf 8f6f 	isb	sy
 8007786:	f3bf 8f4f 	dsb	sy
 800778a:	b662      	cpsie	i
 800778c:	613b      	str	r3, [r7, #16]
}
 800778e:	bf00      	nop
 8007790:	bf00      	nop
 8007792:	e7fd      	b.n	8007790 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8007794:	683b      	ldr	r3, [r7, #0]
 8007796:	2b00      	cmp	r3, #0
 8007798:	d10d      	bne.n	80077b6 <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 800779a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800779e:	b672      	cpsid	i
 80077a0:	f383 8811 	msr	BASEPRI, r3
 80077a4:	f3bf 8f6f 	isb	sy
 80077a8:	f3bf 8f4f 	dsb	sy
 80077ac:	b662      	cpsie	i
 80077ae:	60fb      	str	r3, [r7, #12]
}
 80077b0:	bf00      	nop
 80077b2:	bf00      	nop
 80077b4:	e7fd      	b.n	80077b2 <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 80077b6:	f000 fe89 	bl	80084cc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80077ba:	4b1d      	ldr	r3, [pc, #116]	@ (8007830 <xTaskCheckForTimeOut+0xc8>)
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	685b      	ldr	r3, [r3, #4]
 80077c4:	69ba      	ldr	r2, [r7, #24]
 80077c6:	1ad3      	subs	r3, r2, r3
 80077c8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80077ca:	683b      	ldr	r3, [r7, #0]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80077d2:	d102      	bne.n	80077da <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80077d4:	2300      	movs	r3, #0
 80077d6:	61fb      	str	r3, [r7, #28]
 80077d8:	e023      	b.n	8007822 <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681a      	ldr	r2, [r3, #0]
 80077de:	4b15      	ldr	r3, [pc, #84]	@ (8007834 <xTaskCheckForTimeOut+0xcc>)
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	429a      	cmp	r2, r3
 80077e4:	d007      	beq.n	80077f6 <xTaskCheckForTimeOut+0x8e>
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	685b      	ldr	r3, [r3, #4]
 80077ea:	69ba      	ldr	r2, [r7, #24]
 80077ec:	429a      	cmp	r2, r3
 80077ee:	d302      	bcc.n	80077f6 <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80077f0:	2301      	movs	r3, #1
 80077f2:	61fb      	str	r3, [r7, #28]
 80077f4:	e015      	b.n	8007822 <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80077f6:	683b      	ldr	r3, [r7, #0]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	697a      	ldr	r2, [r7, #20]
 80077fc:	429a      	cmp	r2, r3
 80077fe:	d20b      	bcs.n	8007818 <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007800:	683b      	ldr	r3, [r7, #0]
 8007802:	681a      	ldr	r2, [r3, #0]
 8007804:	697b      	ldr	r3, [r7, #20]
 8007806:	1ad2      	subs	r2, r2, r3
 8007808:	683b      	ldr	r3, [r7, #0]
 800780a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800780c:	6878      	ldr	r0, [r7, #4]
 800780e:	f7ff ff95 	bl	800773c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007812:	2300      	movs	r3, #0
 8007814:	61fb      	str	r3, [r7, #28]
 8007816:	e004      	b.n	8007822 <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 8007818:	683b      	ldr	r3, [r7, #0]
 800781a:	2200      	movs	r2, #0
 800781c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800781e:	2301      	movs	r3, #1
 8007820:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007822:	f000 fe89 	bl	8008538 <vPortExitCritical>

	return xReturn;
 8007826:	69fb      	ldr	r3, [r7, #28]
}
 8007828:	4618      	mov	r0, r3
 800782a:	3720      	adds	r7, #32
 800782c:	46bd      	mov	sp, r7
 800782e:	bd80      	pop	{r7, pc}
 8007830:	20001674 	.word	0x20001674
 8007834:	20001688 	.word	0x20001688

08007838 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007838:	b480      	push	{r7}
 800783a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800783c:	4b03      	ldr	r3, [pc, #12]	@ (800784c <vTaskMissedYield+0x14>)
 800783e:	2201      	movs	r2, #1
 8007840:	601a      	str	r2, [r3, #0]
}
 8007842:	bf00      	nop
 8007844:	46bd      	mov	sp, r7
 8007846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800784a:	4770      	bx	lr
 800784c:	20001684 	.word	0x20001684

08007850 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007850:	b580      	push	{r7, lr}
 8007852:	b082      	sub	sp, #8
 8007854:	af00      	add	r7, sp, #0
 8007856:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007858:	f000 f852 	bl	8007900 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800785c:	4b06      	ldr	r3, [pc, #24]	@ (8007878 <prvIdleTask+0x28>)
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	2b01      	cmp	r3, #1
 8007862:	d9f9      	bls.n	8007858 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007864:	4b05      	ldr	r3, [pc, #20]	@ (800787c <prvIdleTask+0x2c>)
 8007866:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800786a:	601a      	str	r2, [r3, #0]
 800786c:	f3bf 8f4f 	dsb	sy
 8007870:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007874:	e7f0      	b.n	8007858 <prvIdleTask+0x8>
 8007876:	bf00      	nop
 8007878:	200011a0 	.word	0x200011a0
 800787c:	e000ed04 	.word	0xe000ed04

08007880 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007880:	b580      	push	{r7, lr}
 8007882:	b082      	sub	sp, #8
 8007884:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007886:	2300      	movs	r3, #0
 8007888:	607b      	str	r3, [r7, #4]
 800788a:	e00c      	b.n	80078a6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800788c:	687a      	ldr	r2, [r7, #4]
 800788e:	4613      	mov	r3, r2
 8007890:	009b      	lsls	r3, r3, #2
 8007892:	4413      	add	r3, r2
 8007894:	009b      	lsls	r3, r3, #2
 8007896:	4a12      	ldr	r2, [pc, #72]	@ (80078e0 <prvInitialiseTaskLists+0x60>)
 8007898:	4413      	add	r3, r2
 800789a:	4618      	mov	r0, r3
 800789c:	f7fe fba4 	bl	8005fe8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	3301      	adds	r3, #1
 80078a4:	607b      	str	r3, [r7, #4]
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	2b37      	cmp	r3, #55	@ 0x37
 80078aa:	d9ef      	bls.n	800788c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80078ac:	480d      	ldr	r0, [pc, #52]	@ (80078e4 <prvInitialiseTaskLists+0x64>)
 80078ae:	f7fe fb9b 	bl	8005fe8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80078b2:	480d      	ldr	r0, [pc, #52]	@ (80078e8 <prvInitialiseTaskLists+0x68>)
 80078b4:	f7fe fb98 	bl	8005fe8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80078b8:	480c      	ldr	r0, [pc, #48]	@ (80078ec <prvInitialiseTaskLists+0x6c>)
 80078ba:	f7fe fb95 	bl	8005fe8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80078be:	480c      	ldr	r0, [pc, #48]	@ (80078f0 <prvInitialiseTaskLists+0x70>)
 80078c0:	f7fe fb92 	bl	8005fe8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80078c4:	480b      	ldr	r0, [pc, #44]	@ (80078f4 <prvInitialiseTaskLists+0x74>)
 80078c6:	f7fe fb8f 	bl	8005fe8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80078ca:	4b0b      	ldr	r3, [pc, #44]	@ (80078f8 <prvInitialiseTaskLists+0x78>)
 80078cc:	4a05      	ldr	r2, [pc, #20]	@ (80078e4 <prvInitialiseTaskLists+0x64>)
 80078ce:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80078d0:	4b0a      	ldr	r3, [pc, #40]	@ (80078fc <prvInitialiseTaskLists+0x7c>)
 80078d2:	4a05      	ldr	r2, [pc, #20]	@ (80078e8 <prvInitialiseTaskLists+0x68>)
 80078d4:	601a      	str	r2, [r3, #0]
}
 80078d6:	bf00      	nop
 80078d8:	3708      	adds	r7, #8
 80078da:	46bd      	mov	sp, r7
 80078dc:	bd80      	pop	{r7, pc}
 80078de:	bf00      	nop
 80078e0:	200011a0 	.word	0x200011a0
 80078e4:	20001600 	.word	0x20001600
 80078e8:	20001614 	.word	0x20001614
 80078ec:	20001630 	.word	0x20001630
 80078f0:	20001644 	.word	0x20001644
 80078f4:	2000165c 	.word	0x2000165c
 80078f8:	20001628 	.word	0x20001628
 80078fc:	2000162c 	.word	0x2000162c

08007900 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007900:	b580      	push	{r7, lr}
 8007902:	b082      	sub	sp, #8
 8007904:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007906:	e019      	b.n	800793c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007908:	f000 fde0 	bl	80084cc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800790c:	4b10      	ldr	r3, [pc, #64]	@ (8007950 <prvCheckTasksWaitingTermination+0x50>)
 800790e:	68db      	ldr	r3, [r3, #12]
 8007910:	68db      	ldr	r3, [r3, #12]
 8007912:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	3304      	adds	r3, #4
 8007918:	4618      	mov	r0, r3
 800791a:	f7fe fbef 	bl	80060fc <uxListRemove>
				--uxCurrentNumberOfTasks;
 800791e:	4b0d      	ldr	r3, [pc, #52]	@ (8007954 <prvCheckTasksWaitingTermination+0x54>)
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	3b01      	subs	r3, #1
 8007924:	4a0b      	ldr	r2, [pc, #44]	@ (8007954 <prvCheckTasksWaitingTermination+0x54>)
 8007926:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007928:	4b0b      	ldr	r3, [pc, #44]	@ (8007958 <prvCheckTasksWaitingTermination+0x58>)
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	3b01      	subs	r3, #1
 800792e:	4a0a      	ldr	r2, [pc, #40]	@ (8007958 <prvCheckTasksWaitingTermination+0x58>)
 8007930:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007932:	f000 fe01 	bl	8008538 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007936:	6878      	ldr	r0, [r7, #4]
 8007938:	f000 f810 	bl	800795c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800793c:	4b06      	ldr	r3, [pc, #24]	@ (8007958 <prvCheckTasksWaitingTermination+0x58>)
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	2b00      	cmp	r3, #0
 8007942:	d1e1      	bne.n	8007908 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007944:	bf00      	nop
 8007946:	bf00      	nop
 8007948:	3708      	adds	r7, #8
 800794a:	46bd      	mov	sp, r7
 800794c:	bd80      	pop	{r7, pc}
 800794e:	bf00      	nop
 8007950:	20001644 	.word	0x20001644
 8007954:	20001670 	.word	0x20001670
 8007958:	20001658 	.word	0x20001658

0800795c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800795c:	b580      	push	{r7, lr}
 800795e:	b084      	sub	sp, #16
 8007960:	af00      	add	r7, sp, #0
 8007962:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	3354      	adds	r3, #84	@ 0x54
 8007968:	4618      	mov	r0, r3
 800796a:	f002 fedd 	bl	800a728 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8007974:	2b00      	cmp	r3, #0
 8007976:	d108      	bne.n	800798a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800797c:	4618      	mov	r0, r3
 800797e:	f000 ffa1 	bl	80088c4 <vPortFree>
				vPortFree( pxTCB );
 8007982:	6878      	ldr	r0, [r7, #4]
 8007984:	f000 ff9e 	bl	80088c4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007988:	e01b      	b.n	80079c2 <prvDeleteTCB+0x66>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8007990:	2b01      	cmp	r3, #1
 8007992:	d103      	bne.n	800799c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007994:	6878      	ldr	r0, [r7, #4]
 8007996:	f000 ff95 	bl	80088c4 <vPortFree>
	}
 800799a:	e012      	b.n	80079c2 <prvDeleteTCB+0x66>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80079a2:	2b02      	cmp	r3, #2
 80079a4:	d00d      	beq.n	80079c2 <prvDeleteTCB+0x66>
	__asm volatile
 80079a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079aa:	b672      	cpsid	i
 80079ac:	f383 8811 	msr	BASEPRI, r3
 80079b0:	f3bf 8f6f 	isb	sy
 80079b4:	f3bf 8f4f 	dsb	sy
 80079b8:	b662      	cpsie	i
 80079ba:	60fb      	str	r3, [r7, #12]
}
 80079bc:	bf00      	nop
 80079be:	bf00      	nop
 80079c0:	e7fd      	b.n	80079be <prvDeleteTCB+0x62>
	}
 80079c2:	bf00      	nop
 80079c4:	3710      	adds	r7, #16
 80079c6:	46bd      	mov	sp, r7
 80079c8:	bd80      	pop	{r7, pc}
	...

080079cc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80079cc:	b480      	push	{r7}
 80079ce:	b083      	sub	sp, #12
 80079d0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80079d2:	4b0c      	ldr	r3, [pc, #48]	@ (8007a04 <prvResetNextTaskUnblockTime+0x38>)
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d104      	bne.n	80079e6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80079dc:	4b0a      	ldr	r3, [pc, #40]	@ (8007a08 <prvResetNextTaskUnblockTime+0x3c>)
 80079de:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80079e2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80079e4:	e008      	b.n	80079f8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80079e6:	4b07      	ldr	r3, [pc, #28]	@ (8007a04 <prvResetNextTaskUnblockTime+0x38>)
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	68db      	ldr	r3, [r3, #12]
 80079ec:	68db      	ldr	r3, [r3, #12]
 80079ee:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	685b      	ldr	r3, [r3, #4]
 80079f4:	4a04      	ldr	r2, [pc, #16]	@ (8007a08 <prvResetNextTaskUnblockTime+0x3c>)
 80079f6:	6013      	str	r3, [r2, #0]
}
 80079f8:	bf00      	nop
 80079fa:	370c      	adds	r7, #12
 80079fc:	46bd      	mov	sp, r7
 80079fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a02:	4770      	bx	lr
 8007a04:	20001628 	.word	0x20001628
 8007a08:	20001690 	.word	0x20001690

08007a0c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007a0c:	b480      	push	{r7}
 8007a0e:	b083      	sub	sp, #12
 8007a10:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007a12:	4b0b      	ldr	r3, [pc, #44]	@ (8007a40 <xTaskGetSchedulerState+0x34>)
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d102      	bne.n	8007a20 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007a1a:	2301      	movs	r3, #1
 8007a1c:	607b      	str	r3, [r7, #4]
 8007a1e:	e008      	b.n	8007a32 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007a20:	4b08      	ldr	r3, [pc, #32]	@ (8007a44 <xTaskGetSchedulerState+0x38>)
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d102      	bne.n	8007a2e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007a28:	2302      	movs	r3, #2
 8007a2a:	607b      	str	r3, [r7, #4]
 8007a2c:	e001      	b.n	8007a32 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007a2e:	2300      	movs	r3, #0
 8007a30:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007a32:	687b      	ldr	r3, [r7, #4]
	}
 8007a34:	4618      	mov	r0, r3
 8007a36:	370c      	adds	r7, #12
 8007a38:	46bd      	mov	sp, r7
 8007a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a3e:	4770      	bx	lr
 8007a40:	2000167c 	.word	0x2000167c
 8007a44:	20001698 	.word	0x20001698

08007a48 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007a48:	b580      	push	{r7, lr}
 8007a4a:	b086      	sub	sp, #24
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007a54:	2300      	movs	r3, #0
 8007a56:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d05c      	beq.n	8007b18 <xTaskPriorityDisinherit+0xd0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007a5e:	4b31      	ldr	r3, [pc, #196]	@ (8007b24 <xTaskPriorityDisinherit+0xdc>)
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	693a      	ldr	r2, [r7, #16]
 8007a64:	429a      	cmp	r2, r3
 8007a66:	d00d      	beq.n	8007a84 <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 8007a68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a6c:	b672      	cpsid	i
 8007a6e:	f383 8811 	msr	BASEPRI, r3
 8007a72:	f3bf 8f6f 	isb	sy
 8007a76:	f3bf 8f4f 	dsb	sy
 8007a7a:	b662      	cpsie	i
 8007a7c:	60fb      	str	r3, [r7, #12]
}
 8007a7e:	bf00      	nop
 8007a80:	bf00      	nop
 8007a82:	e7fd      	b.n	8007a80 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8007a84:	693b      	ldr	r3, [r7, #16]
 8007a86:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d10d      	bne.n	8007aa8 <xTaskPriorityDisinherit+0x60>
	__asm volatile
 8007a8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a90:	b672      	cpsid	i
 8007a92:	f383 8811 	msr	BASEPRI, r3
 8007a96:	f3bf 8f6f 	isb	sy
 8007a9a:	f3bf 8f4f 	dsb	sy
 8007a9e:	b662      	cpsie	i
 8007aa0:	60bb      	str	r3, [r7, #8]
}
 8007aa2:	bf00      	nop
 8007aa4:	bf00      	nop
 8007aa6:	e7fd      	b.n	8007aa4 <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 8007aa8:	693b      	ldr	r3, [r7, #16]
 8007aaa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007aac:	1e5a      	subs	r2, r3, #1
 8007aae:	693b      	ldr	r3, [r7, #16]
 8007ab0:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007ab2:	693b      	ldr	r3, [r7, #16]
 8007ab4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007ab6:	693b      	ldr	r3, [r7, #16]
 8007ab8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007aba:	429a      	cmp	r2, r3
 8007abc:	d02c      	beq.n	8007b18 <xTaskPriorityDisinherit+0xd0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007abe:	693b      	ldr	r3, [r7, #16]
 8007ac0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d128      	bne.n	8007b18 <xTaskPriorityDisinherit+0xd0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007ac6:	693b      	ldr	r3, [r7, #16]
 8007ac8:	3304      	adds	r3, #4
 8007aca:	4618      	mov	r0, r3
 8007acc:	f7fe fb16 	bl	80060fc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007ad0:	693b      	ldr	r3, [r7, #16]
 8007ad2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007ad4:	693b      	ldr	r3, [r7, #16]
 8007ad6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007ad8:	693b      	ldr	r3, [r7, #16]
 8007ada:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007adc:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007ae0:	693b      	ldr	r3, [r7, #16]
 8007ae2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007ae4:	693b      	ldr	r3, [r7, #16]
 8007ae6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007ae8:	4b0f      	ldr	r3, [pc, #60]	@ (8007b28 <xTaskPriorityDisinherit+0xe0>)
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	429a      	cmp	r2, r3
 8007aee:	d903      	bls.n	8007af8 <xTaskPriorityDisinherit+0xb0>
 8007af0:	693b      	ldr	r3, [r7, #16]
 8007af2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007af4:	4a0c      	ldr	r2, [pc, #48]	@ (8007b28 <xTaskPriorityDisinherit+0xe0>)
 8007af6:	6013      	str	r3, [r2, #0]
 8007af8:	693b      	ldr	r3, [r7, #16]
 8007afa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007afc:	4613      	mov	r3, r2
 8007afe:	009b      	lsls	r3, r3, #2
 8007b00:	4413      	add	r3, r2
 8007b02:	009b      	lsls	r3, r3, #2
 8007b04:	4a09      	ldr	r2, [pc, #36]	@ (8007b2c <xTaskPriorityDisinherit+0xe4>)
 8007b06:	441a      	add	r2, r3
 8007b08:	693b      	ldr	r3, [r7, #16]
 8007b0a:	3304      	adds	r3, #4
 8007b0c:	4619      	mov	r1, r3
 8007b0e:	4610      	mov	r0, r2
 8007b10:	f7fe fa97 	bl	8006042 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007b14:	2301      	movs	r3, #1
 8007b16:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007b18:	697b      	ldr	r3, [r7, #20]
	}
 8007b1a:	4618      	mov	r0, r3
 8007b1c:	3718      	adds	r7, #24
 8007b1e:	46bd      	mov	sp, r7
 8007b20:	bd80      	pop	{r7, pc}
 8007b22:	bf00      	nop
 8007b24:	2000119c 	.word	0x2000119c
 8007b28:	20001678 	.word	0x20001678
 8007b2c:	200011a0 	.word	0x200011a0

08007b30 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007b30:	b580      	push	{r7, lr}
 8007b32:	b084      	sub	sp, #16
 8007b34:	af00      	add	r7, sp, #0
 8007b36:	6078      	str	r0, [r7, #4]
 8007b38:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007b3a:	4b21      	ldr	r3, [pc, #132]	@ (8007bc0 <prvAddCurrentTaskToDelayedList+0x90>)
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007b40:	4b20      	ldr	r3, [pc, #128]	@ (8007bc4 <prvAddCurrentTaskToDelayedList+0x94>)
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	3304      	adds	r3, #4
 8007b46:	4618      	mov	r0, r3
 8007b48:	f7fe fad8 	bl	80060fc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007b52:	d10a      	bne.n	8007b6a <prvAddCurrentTaskToDelayedList+0x3a>
 8007b54:	683b      	ldr	r3, [r7, #0]
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d007      	beq.n	8007b6a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007b5a:	4b1a      	ldr	r3, [pc, #104]	@ (8007bc4 <prvAddCurrentTaskToDelayedList+0x94>)
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	3304      	adds	r3, #4
 8007b60:	4619      	mov	r1, r3
 8007b62:	4819      	ldr	r0, [pc, #100]	@ (8007bc8 <prvAddCurrentTaskToDelayedList+0x98>)
 8007b64:	f7fe fa6d 	bl	8006042 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007b68:	e026      	b.n	8007bb8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007b6a:	68fa      	ldr	r2, [r7, #12]
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	4413      	add	r3, r2
 8007b70:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007b72:	4b14      	ldr	r3, [pc, #80]	@ (8007bc4 <prvAddCurrentTaskToDelayedList+0x94>)
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	68ba      	ldr	r2, [r7, #8]
 8007b78:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007b7a:	68ba      	ldr	r2, [r7, #8]
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	429a      	cmp	r2, r3
 8007b80:	d209      	bcs.n	8007b96 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007b82:	4b12      	ldr	r3, [pc, #72]	@ (8007bcc <prvAddCurrentTaskToDelayedList+0x9c>)
 8007b84:	681a      	ldr	r2, [r3, #0]
 8007b86:	4b0f      	ldr	r3, [pc, #60]	@ (8007bc4 <prvAddCurrentTaskToDelayedList+0x94>)
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	3304      	adds	r3, #4
 8007b8c:	4619      	mov	r1, r3
 8007b8e:	4610      	mov	r0, r2
 8007b90:	f7fe fa7b 	bl	800608a <vListInsert>
}
 8007b94:	e010      	b.n	8007bb8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007b96:	4b0e      	ldr	r3, [pc, #56]	@ (8007bd0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007b98:	681a      	ldr	r2, [r3, #0]
 8007b9a:	4b0a      	ldr	r3, [pc, #40]	@ (8007bc4 <prvAddCurrentTaskToDelayedList+0x94>)
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	3304      	adds	r3, #4
 8007ba0:	4619      	mov	r1, r3
 8007ba2:	4610      	mov	r0, r2
 8007ba4:	f7fe fa71 	bl	800608a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007ba8:	4b0a      	ldr	r3, [pc, #40]	@ (8007bd4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	68ba      	ldr	r2, [r7, #8]
 8007bae:	429a      	cmp	r2, r3
 8007bb0:	d202      	bcs.n	8007bb8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007bb2:	4a08      	ldr	r2, [pc, #32]	@ (8007bd4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007bb4:	68bb      	ldr	r3, [r7, #8]
 8007bb6:	6013      	str	r3, [r2, #0]
}
 8007bb8:	bf00      	nop
 8007bba:	3710      	adds	r7, #16
 8007bbc:	46bd      	mov	sp, r7
 8007bbe:	bd80      	pop	{r7, pc}
 8007bc0:	20001674 	.word	0x20001674
 8007bc4:	2000119c 	.word	0x2000119c
 8007bc8:	2000165c 	.word	0x2000165c
 8007bcc:	2000162c 	.word	0x2000162c
 8007bd0:	20001628 	.word	0x20001628
 8007bd4:	20001690 	.word	0x20001690

08007bd8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007bd8:	b580      	push	{r7, lr}
 8007bda:	b08a      	sub	sp, #40	@ 0x28
 8007bdc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007bde:	2300      	movs	r3, #0
 8007be0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007be2:	f000 fb21 	bl	8008228 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007be6:	4b1e      	ldr	r3, [pc, #120]	@ (8007c60 <xTimerCreateTimerTask+0x88>)
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d021      	beq.n	8007c32 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007bee:	2300      	movs	r3, #0
 8007bf0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007bf2:	2300      	movs	r3, #0
 8007bf4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007bf6:	1d3a      	adds	r2, r7, #4
 8007bf8:	f107 0108 	add.w	r1, r7, #8
 8007bfc:	f107 030c 	add.w	r3, r7, #12
 8007c00:	4618      	mov	r0, r3
 8007c02:	f7fe f9d7 	bl	8005fb4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007c06:	6879      	ldr	r1, [r7, #4]
 8007c08:	68bb      	ldr	r3, [r7, #8]
 8007c0a:	68fa      	ldr	r2, [r7, #12]
 8007c0c:	9202      	str	r2, [sp, #8]
 8007c0e:	9301      	str	r3, [sp, #4]
 8007c10:	2302      	movs	r3, #2
 8007c12:	9300      	str	r3, [sp, #0]
 8007c14:	2300      	movs	r3, #0
 8007c16:	460a      	mov	r2, r1
 8007c18:	4912      	ldr	r1, [pc, #72]	@ (8007c64 <xTimerCreateTimerTask+0x8c>)
 8007c1a:	4813      	ldr	r0, [pc, #76]	@ (8007c68 <xTimerCreateTimerTask+0x90>)
 8007c1c:	f7ff f87e 	bl	8006d1c <xTaskCreateStatic>
 8007c20:	4603      	mov	r3, r0
 8007c22:	4a12      	ldr	r2, [pc, #72]	@ (8007c6c <xTimerCreateTimerTask+0x94>)
 8007c24:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007c26:	4b11      	ldr	r3, [pc, #68]	@ (8007c6c <xTimerCreateTimerTask+0x94>)
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d001      	beq.n	8007c32 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007c2e:	2301      	movs	r3, #1
 8007c30:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007c32:	697b      	ldr	r3, [r7, #20]
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d10d      	bne.n	8007c54 <xTimerCreateTimerTask+0x7c>
	__asm volatile
 8007c38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c3c:	b672      	cpsid	i
 8007c3e:	f383 8811 	msr	BASEPRI, r3
 8007c42:	f3bf 8f6f 	isb	sy
 8007c46:	f3bf 8f4f 	dsb	sy
 8007c4a:	b662      	cpsie	i
 8007c4c:	613b      	str	r3, [r7, #16]
}
 8007c4e:	bf00      	nop
 8007c50:	bf00      	nop
 8007c52:	e7fd      	b.n	8007c50 <xTimerCreateTimerTask+0x78>
	return xReturn;
 8007c54:	697b      	ldr	r3, [r7, #20]
}
 8007c56:	4618      	mov	r0, r3
 8007c58:	3718      	adds	r7, #24
 8007c5a:	46bd      	mov	sp, r7
 8007c5c:	bd80      	pop	{r7, pc}
 8007c5e:	bf00      	nop
 8007c60:	200016cc 	.word	0x200016cc
 8007c64:	0800d664 	.word	0x0800d664
 8007c68:	08007db1 	.word	0x08007db1
 8007c6c:	200016d0 	.word	0x200016d0

08007c70 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007c70:	b580      	push	{r7, lr}
 8007c72:	b08a      	sub	sp, #40	@ 0x28
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	60f8      	str	r0, [r7, #12]
 8007c78:	60b9      	str	r1, [r7, #8]
 8007c7a:	607a      	str	r2, [r7, #4]
 8007c7c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007c7e:	2300      	movs	r3, #0
 8007c80:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d10d      	bne.n	8007ca4 <xTimerGenericCommand+0x34>
	__asm volatile
 8007c88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c8c:	b672      	cpsid	i
 8007c8e:	f383 8811 	msr	BASEPRI, r3
 8007c92:	f3bf 8f6f 	isb	sy
 8007c96:	f3bf 8f4f 	dsb	sy
 8007c9a:	b662      	cpsie	i
 8007c9c:	623b      	str	r3, [r7, #32]
}
 8007c9e:	bf00      	nop
 8007ca0:	bf00      	nop
 8007ca2:	e7fd      	b.n	8007ca0 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007ca4:	4b19      	ldr	r3, [pc, #100]	@ (8007d0c <xTimerGenericCommand+0x9c>)
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d02a      	beq.n	8007d02 <xTimerGenericCommand+0x92>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007cac:	68bb      	ldr	r3, [r7, #8]
 8007cae:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007cb8:	68bb      	ldr	r3, [r7, #8]
 8007cba:	2b05      	cmp	r3, #5
 8007cbc:	dc18      	bgt.n	8007cf0 <xTimerGenericCommand+0x80>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007cbe:	f7ff fea5 	bl	8007a0c <xTaskGetSchedulerState>
 8007cc2:	4603      	mov	r3, r0
 8007cc4:	2b02      	cmp	r3, #2
 8007cc6:	d109      	bne.n	8007cdc <xTimerGenericCommand+0x6c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007cc8:	4b10      	ldr	r3, [pc, #64]	@ (8007d0c <xTimerGenericCommand+0x9c>)
 8007cca:	6818      	ldr	r0, [r3, #0]
 8007ccc:	f107 0110 	add.w	r1, r7, #16
 8007cd0:	2300      	movs	r3, #0
 8007cd2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007cd4:	f7fe fb96 	bl	8006404 <xQueueGenericSend>
 8007cd8:	6278      	str	r0, [r7, #36]	@ 0x24
 8007cda:	e012      	b.n	8007d02 <xTimerGenericCommand+0x92>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007cdc:	4b0b      	ldr	r3, [pc, #44]	@ (8007d0c <xTimerGenericCommand+0x9c>)
 8007cde:	6818      	ldr	r0, [r3, #0]
 8007ce0:	f107 0110 	add.w	r1, r7, #16
 8007ce4:	2300      	movs	r3, #0
 8007ce6:	2200      	movs	r2, #0
 8007ce8:	f7fe fb8c 	bl	8006404 <xQueueGenericSend>
 8007cec:	6278      	str	r0, [r7, #36]	@ 0x24
 8007cee:	e008      	b.n	8007d02 <xTimerGenericCommand+0x92>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007cf0:	4b06      	ldr	r3, [pc, #24]	@ (8007d0c <xTimerGenericCommand+0x9c>)
 8007cf2:	6818      	ldr	r0, [r3, #0]
 8007cf4:	f107 0110 	add.w	r1, r7, #16
 8007cf8:	2300      	movs	r3, #0
 8007cfa:	683a      	ldr	r2, [r7, #0]
 8007cfc:	f7fe fc8c 	bl	8006618 <xQueueGenericSendFromISR>
 8007d00:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007d02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007d04:	4618      	mov	r0, r3
 8007d06:	3728      	adds	r7, #40	@ 0x28
 8007d08:	46bd      	mov	sp, r7
 8007d0a:	bd80      	pop	{r7, pc}
 8007d0c:	200016cc 	.word	0x200016cc

08007d10 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007d10:	b580      	push	{r7, lr}
 8007d12:	b088      	sub	sp, #32
 8007d14:	af02      	add	r7, sp, #8
 8007d16:	6078      	str	r0, [r7, #4]
 8007d18:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007d1a:	4b24      	ldr	r3, [pc, #144]	@ (8007dac <prvProcessExpiredTimer+0x9c>)
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	68db      	ldr	r3, [r3, #12]
 8007d20:	68db      	ldr	r3, [r3, #12]
 8007d22:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007d24:	697b      	ldr	r3, [r7, #20]
 8007d26:	3304      	adds	r3, #4
 8007d28:	4618      	mov	r0, r3
 8007d2a:	f7fe f9e7 	bl	80060fc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007d2e:	697b      	ldr	r3, [r7, #20]
 8007d30:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007d34:	f003 0304 	and.w	r3, r3, #4
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d025      	beq.n	8007d88 <prvProcessExpiredTimer+0x78>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007d3c:	697b      	ldr	r3, [r7, #20]
 8007d3e:	699a      	ldr	r2, [r3, #24]
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	18d1      	adds	r1, r2, r3
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	683a      	ldr	r2, [r7, #0]
 8007d48:	6978      	ldr	r0, [r7, #20]
 8007d4a:	f000 f8d7 	bl	8007efc <prvInsertTimerInActiveList>
 8007d4e:	4603      	mov	r3, r0
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d022      	beq.n	8007d9a <prvProcessExpiredTimer+0x8a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007d54:	2300      	movs	r3, #0
 8007d56:	9300      	str	r3, [sp, #0]
 8007d58:	2300      	movs	r3, #0
 8007d5a:	687a      	ldr	r2, [r7, #4]
 8007d5c:	2100      	movs	r1, #0
 8007d5e:	6978      	ldr	r0, [r7, #20]
 8007d60:	f7ff ff86 	bl	8007c70 <xTimerGenericCommand>
 8007d64:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007d66:	693b      	ldr	r3, [r7, #16]
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d116      	bne.n	8007d9a <prvProcessExpiredTimer+0x8a>
	__asm volatile
 8007d6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d70:	b672      	cpsid	i
 8007d72:	f383 8811 	msr	BASEPRI, r3
 8007d76:	f3bf 8f6f 	isb	sy
 8007d7a:	f3bf 8f4f 	dsb	sy
 8007d7e:	b662      	cpsie	i
 8007d80:	60fb      	str	r3, [r7, #12]
}
 8007d82:	bf00      	nop
 8007d84:	bf00      	nop
 8007d86:	e7fd      	b.n	8007d84 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007d88:	697b      	ldr	r3, [r7, #20]
 8007d8a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007d8e:	f023 0301 	bic.w	r3, r3, #1
 8007d92:	b2da      	uxtb	r2, r3
 8007d94:	697b      	ldr	r3, [r7, #20]
 8007d96:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007d9a:	697b      	ldr	r3, [r7, #20]
 8007d9c:	6a1b      	ldr	r3, [r3, #32]
 8007d9e:	6978      	ldr	r0, [r7, #20]
 8007da0:	4798      	blx	r3
}
 8007da2:	bf00      	nop
 8007da4:	3718      	adds	r7, #24
 8007da6:	46bd      	mov	sp, r7
 8007da8:	bd80      	pop	{r7, pc}
 8007daa:	bf00      	nop
 8007dac:	200016c4 	.word	0x200016c4

08007db0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007db0:	b580      	push	{r7, lr}
 8007db2:	b084      	sub	sp, #16
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007db8:	f107 0308 	add.w	r3, r7, #8
 8007dbc:	4618      	mov	r0, r3
 8007dbe:	f000 f859 	bl	8007e74 <prvGetNextExpireTime>
 8007dc2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007dc4:	68bb      	ldr	r3, [r7, #8]
 8007dc6:	4619      	mov	r1, r3
 8007dc8:	68f8      	ldr	r0, [r7, #12]
 8007dca:	f000 f805 	bl	8007dd8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007dce:	f000 f8d7 	bl	8007f80 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007dd2:	bf00      	nop
 8007dd4:	e7f0      	b.n	8007db8 <prvTimerTask+0x8>
	...

08007dd8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007dd8:	b580      	push	{r7, lr}
 8007dda:	b084      	sub	sp, #16
 8007ddc:	af00      	add	r7, sp, #0
 8007dde:	6078      	str	r0, [r7, #4]
 8007de0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007de2:	f7ff fa0d 	bl	8007200 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007de6:	f107 0308 	add.w	r3, r7, #8
 8007dea:	4618      	mov	r0, r3
 8007dec:	f000 f866 	bl	8007ebc <prvSampleTimeNow>
 8007df0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007df2:	68bb      	ldr	r3, [r7, #8]
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d130      	bne.n	8007e5a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007df8:	683b      	ldr	r3, [r7, #0]
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d10a      	bne.n	8007e14 <prvProcessTimerOrBlockTask+0x3c>
 8007dfe:	687a      	ldr	r2, [r7, #4]
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	429a      	cmp	r2, r3
 8007e04:	d806      	bhi.n	8007e14 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007e06:	f7ff fa09 	bl	800721c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007e0a:	68f9      	ldr	r1, [r7, #12]
 8007e0c:	6878      	ldr	r0, [r7, #4]
 8007e0e:	f7ff ff7f 	bl	8007d10 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007e12:	e024      	b.n	8007e5e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007e14:	683b      	ldr	r3, [r7, #0]
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d008      	beq.n	8007e2c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007e1a:	4b13      	ldr	r3, [pc, #76]	@ (8007e68 <prvProcessTimerOrBlockTask+0x90>)
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d101      	bne.n	8007e28 <prvProcessTimerOrBlockTask+0x50>
 8007e24:	2301      	movs	r3, #1
 8007e26:	e000      	b.n	8007e2a <prvProcessTimerOrBlockTask+0x52>
 8007e28:	2300      	movs	r3, #0
 8007e2a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007e2c:	4b0f      	ldr	r3, [pc, #60]	@ (8007e6c <prvProcessTimerOrBlockTask+0x94>)
 8007e2e:	6818      	ldr	r0, [r3, #0]
 8007e30:	687a      	ldr	r2, [r7, #4]
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	1ad3      	subs	r3, r2, r3
 8007e36:	683a      	ldr	r2, [r7, #0]
 8007e38:	4619      	mov	r1, r3
 8007e3a:	f7fe ff3b 	bl	8006cb4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007e3e:	f7ff f9ed 	bl	800721c <xTaskResumeAll>
 8007e42:	4603      	mov	r3, r0
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d10a      	bne.n	8007e5e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007e48:	4b09      	ldr	r3, [pc, #36]	@ (8007e70 <prvProcessTimerOrBlockTask+0x98>)
 8007e4a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007e4e:	601a      	str	r2, [r3, #0]
 8007e50:	f3bf 8f4f 	dsb	sy
 8007e54:	f3bf 8f6f 	isb	sy
}
 8007e58:	e001      	b.n	8007e5e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007e5a:	f7ff f9df 	bl	800721c <xTaskResumeAll>
}
 8007e5e:	bf00      	nop
 8007e60:	3710      	adds	r7, #16
 8007e62:	46bd      	mov	sp, r7
 8007e64:	bd80      	pop	{r7, pc}
 8007e66:	bf00      	nop
 8007e68:	200016c8 	.word	0x200016c8
 8007e6c:	200016cc 	.word	0x200016cc
 8007e70:	e000ed04 	.word	0xe000ed04

08007e74 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007e74:	b480      	push	{r7}
 8007e76:	b085      	sub	sp, #20
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007e7c:	4b0e      	ldr	r3, [pc, #56]	@ (8007eb8 <prvGetNextExpireTime+0x44>)
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d101      	bne.n	8007e8a <prvGetNextExpireTime+0x16>
 8007e86:	2201      	movs	r2, #1
 8007e88:	e000      	b.n	8007e8c <prvGetNextExpireTime+0x18>
 8007e8a:	2200      	movs	r2, #0
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d105      	bne.n	8007ea4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007e98:	4b07      	ldr	r3, [pc, #28]	@ (8007eb8 <prvGetNextExpireTime+0x44>)
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	68db      	ldr	r3, [r3, #12]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	60fb      	str	r3, [r7, #12]
 8007ea2:	e001      	b.n	8007ea8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007ea4:	2300      	movs	r3, #0
 8007ea6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007ea8:	68fb      	ldr	r3, [r7, #12]
}
 8007eaa:	4618      	mov	r0, r3
 8007eac:	3714      	adds	r7, #20
 8007eae:	46bd      	mov	sp, r7
 8007eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb4:	4770      	bx	lr
 8007eb6:	bf00      	nop
 8007eb8:	200016c4 	.word	0x200016c4

08007ebc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007ebc:	b580      	push	{r7, lr}
 8007ebe:	b084      	sub	sp, #16
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007ec4:	f7ff fa4a 	bl	800735c <xTaskGetTickCount>
 8007ec8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007eca:	4b0b      	ldr	r3, [pc, #44]	@ (8007ef8 <prvSampleTimeNow+0x3c>)
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	68fa      	ldr	r2, [r7, #12]
 8007ed0:	429a      	cmp	r2, r3
 8007ed2:	d205      	bcs.n	8007ee0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007ed4:	f000 f940 	bl	8008158 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	2201      	movs	r2, #1
 8007edc:	601a      	str	r2, [r3, #0]
 8007ede:	e002      	b.n	8007ee6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	2200      	movs	r2, #0
 8007ee4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007ee6:	4a04      	ldr	r2, [pc, #16]	@ (8007ef8 <prvSampleTimeNow+0x3c>)
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007eec:	68fb      	ldr	r3, [r7, #12]
}
 8007eee:	4618      	mov	r0, r3
 8007ef0:	3710      	adds	r7, #16
 8007ef2:	46bd      	mov	sp, r7
 8007ef4:	bd80      	pop	{r7, pc}
 8007ef6:	bf00      	nop
 8007ef8:	200016d4 	.word	0x200016d4

08007efc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007efc:	b580      	push	{r7, lr}
 8007efe:	b086      	sub	sp, #24
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	60f8      	str	r0, [r7, #12]
 8007f04:	60b9      	str	r1, [r7, #8]
 8007f06:	607a      	str	r2, [r7, #4]
 8007f08:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007f0a:	2300      	movs	r3, #0
 8007f0c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	68ba      	ldr	r2, [r7, #8]
 8007f12:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	68fa      	ldr	r2, [r7, #12]
 8007f18:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007f1a:	68ba      	ldr	r2, [r7, #8]
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	429a      	cmp	r2, r3
 8007f20:	d812      	bhi.n	8007f48 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007f22:	687a      	ldr	r2, [r7, #4]
 8007f24:	683b      	ldr	r3, [r7, #0]
 8007f26:	1ad2      	subs	r2, r2, r3
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	699b      	ldr	r3, [r3, #24]
 8007f2c:	429a      	cmp	r2, r3
 8007f2e:	d302      	bcc.n	8007f36 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007f30:	2301      	movs	r3, #1
 8007f32:	617b      	str	r3, [r7, #20]
 8007f34:	e01b      	b.n	8007f6e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007f36:	4b10      	ldr	r3, [pc, #64]	@ (8007f78 <prvInsertTimerInActiveList+0x7c>)
 8007f38:	681a      	ldr	r2, [r3, #0]
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	3304      	adds	r3, #4
 8007f3e:	4619      	mov	r1, r3
 8007f40:	4610      	mov	r0, r2
 8007f42:	f7fe f8a2 	bl	800608a <vListInsert>
 8007f46:	e012      	b.n	8007f6e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007f48:	687a      	ldr	r2, [r7, #4]
 8007f4a:	683b      	ldr	r3, [r7, #0]
 8007f4c:	429a      	cmp	r2, r3
 8007f4e:	d206      	bcs.n	8007f5e <prvInsertTimerInActiveList+0x62>
 8007f50:	68ba      	ldr	r2, [r7, #8]
 8007f52:	683b      	ldr	r3, [r7, #0]
 8007f54:	429a      	cmp	r2, r3
 8007f56:	d302      	bcc.n	8007f5e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007f58:	2301      	movs	r3, #1
 8007f5a:	617b      	str	r3, [r7, #20]
 8007f5c:	e007      	b.n	8007f6e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007f5e:	4b07      	ldr	r3, [pc, #28]	@ (8007f7c <prvInsertTimerInActiveList+0x80>)
 8007f60:	681a      	ldr	r2, [r3, #0]
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	3304      	adds	r3, #4
 8007f66:	4619      	mov	r1, r3
 8007f68:	4610      	mov	r0, r2
 8007f6a:	f7fe f88e 	bl	800608a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007f6e:	697b      	ldr	r3, [r7, #20]
}
 8007f70:	4618      	mov	r0, r3
 8007f72:	3718      	adds	r7, #24
 8007f74:	46bd      	mov	sp, r7
 8007f76:	bd80      	pop	{r7, pc}
 8007f78:	200016c8 	.word	0x200016c8
 8007f7c:	200016c4 	.word	0x200016c4

08007f80 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007f80:	b580      	push	{r7, lr}
 8007f82:	b08e      	sub	sp, #56	@ 0x38
 8007f84:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007f86:	e0d4      	b.n	8008132 <prvProcessReceivedCommands+0x1b2>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	da1b      	bge.n	8007fc6 <prvProcessReceivedCommands+0x46>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007f8e:	1d3b      	adds	r3, r7, #4
 8007f90:	3304      	adds	r3, #4
 8007f92:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007f94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d10d      	bne.n	8007fb6 <prvProcessReceivedCommands+0x36>
	__asm volatile
 8007f9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f9e:	b672      	cpsid	i
 8007fa0:	f383 8811 	msr	BASEPRI, r3
 8007fa4:	f3bf 8f6f 	isb	sy
 8007fa8:	f3bf 8f4f 	dsb	sy
 8007fac:	b662      	cpsie	i
 8007fae:	61fb      	str	r3, [r7, #28]
}
 8007fb0:	bf00      	nop
 8007fb2:	bf00      	nop
 8007fb4:	e7fd      	b.n	8007fb2 <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007fb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007fbc:	6850      	ldr	r0, [r2, #4]
 8007fbe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007fc0:	6892      	ldr	r2, [r2, #8]
 8007fc2:	4611      	mov	r1, r2
 8007fc4:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	f2c0 80b2 	blt.w	8008132 <prvProcessReceivedCommands+0x1b2>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007fd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fd4:	695b      	ldr	r3, [r3, #20]
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d004      	beq.n	8007fe4 <prvProcessReceivedCommands+0x64>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007fda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fdc:	3304      	adds	r3, #4
 8007fde:	4618      	mov	r0, r3
 8007fe0:	f7fe f88c 	bl	80060fc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007fe4:	463b      	mov	r3, r7
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	f7ff ff68 	bl	8007ebc <prvSampleTimeNow>
 8007fec:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	2b09      	cmp	r3, #9
 8007ff2:	f200 809b 	bhi.w	800812c <prvProcessReceivedCommands+0x1ac>
 8007ff6:	a201      	add	r2, pc, #4	@ (adr r2, 8007ffc <prvProcessReceivedCommands+0x7c>)
 8007ff8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ffc:	08008025 	.word	0x08008025
 8008000:	08008025 	.word	0x08008025
 8008004:	08008025 	.word	0x08008025
 8008008:	0800809f 	.word	0x0800809f
 800800c:	080080b3 	.word	0x080080b3
 8008010:	08008103 	.word	0x08008103
 8008014:	08008025 	.word	0x08008025
 8008018:	08008025 	.word	0x08008025
 800801c:	0800809f 	.word	0x0800809f
 8008020:	080080b3 	.word	0x080080b3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008024:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008026:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800802a:	f043 0301 	orr.w	r3, r3, #1
 800802e:	b2da      	uxtb	r2, r3
 8008030:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008032:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008036:	68ba      	ldr	r2, [r7, #8]
 8008038:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800803a:	699b      	ldr	r3, [r3, #24]
 800803c:	18d1      	adds	r1, r2, r3
 800803e:	68bb      	ldr	r3, [r7, #8]
 8008040:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008042:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008044:	f7ff ff5a 	bl	8007efc <prvInsertTimerInActiveList>
 8008048:	4603      	mov	r3, r0
 800804a:	2b00      	cmp	r3, #0
 800804c:	d070      	beq.n	8008130 <prvProcessReceivedCommands+0x1b0>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800804e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008050:	6a1b      	ldr	r3, [r3, #32]
 8008052:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008054:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008056:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008058:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800805c:	f003 0304 	and.w	r3, r3, #4
 8008060:	2b00      	cmp	r3, #0
 8008062:	d065      	beq.n	8008130 <prvProcessReceivedCommands+0x1b0>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008064:	68ba      	ldr	r2, [r7, #8]
 8008066:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008068:	699b      	ldr	r3, [r3, #24]
 800806a:	441a      	add	r2, r3
 800806c:	2300      	movs	r3, #0
 800806e:	9300      	str	r3, [sp, #0]
 8008070:	2300      	movs	r3, #0
 8008072:	2100      	movs	r1, #0
 8008074:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008076:	f7ff fdfb 	bl	8007c70 <xTimerGenericCommand>
 800807a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800807c:	6a3b      	ldr	r3, [r7, #32]
 800807e:	2b00      	cmp	r3, #0
 8008080:	d156      	bne.n	8008130 <prvProcessReceivedCommands+0x1b0>
	__asm volatile
 8008082:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008086:	b672      	cpsid	i
 8008088:	f383 8811 	msr	BASEPRI, r3
 800808c:	f3bf 8f6f 	isb	sy
 8008090:	f3bf 8f4f 	dsb	sy
 8008094:	b662      	cpsie	i
 8008096:	61bb      	str	r3, [r7, #24]
}
 8008098:	bf00      	nop
 800809a:	bf00      	nop
 800809c:	e7fd      	b.n	800809a <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800809e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080a0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80080a4:	f023 0301 	bic.w	r3, r3, #1
 80080a8:	b2da      	uxtb	r2, r3
 80080aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080ac:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80080b0:	e03f      	b.n	8008132 <prvProcessReceivedCommands+0x1b2>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80080b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080b4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80080b8:	f043 0301 	orr.w	r3, r3, #1
 80080bc:	b2da      	uxtb	r2, r3
 80080be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080c0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80080c4:	68ba      	ldr	r2, [r7, #8]
 80080c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080c8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80080ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080cc:	699b      	ldr	r3, [r3, #24]
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d10d      	bne.n	80080ee <prvProcessReceivedCommands+0x16e>
	__asm volatile
 80080d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080d6:	b672      	cpsid	i
 80080d8:	f383 8811 	msr	BASEPRI, r3
 80080dc:	f3bf 8f6f 	isb	sy
 80080e0:	f3bf 8f4f 	dsb	sy
 80080e4:	b662      	cpsie	i
 80080e6:	617b      	str	r3, [r7, #20]
}
 80080e8:	bf00      	nop
 80080ea:	bf00      	nop
 80080ec:	e7fd      	b.n	80080ea <prvProcessReceivedCommands+0x16a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80080ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080f0:	699a      	ldr	r2, [r3, #24]
 80080f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080f4:	18d1      	adds	r1, r2, r3
 80080f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80080fa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80080fc:	f7ff fefe 	bl	8007efc <prvInsertTimerInActiveList>
					break;
 8008100:	e017      	b.n	8008132 <prvProcessReceivedCommands+0x1b2>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008102:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008104:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008108:	f003 0302 	and.w	r3, r3, #2
 800810c:	2b00      	cmp	r3, #0
 800810e:	d103      	bne.n	8008118 <prvProcessReceivedCommands+0x198>
						{
							vPortFree( pxTimer );
 8008110:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008112:	f000 fbd7 	bl	80088c4 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008116:	e00c      	b.n	8008132 <prvProcessReceivedCommands+0x1b2>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008118:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800811a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800811e:	f023 0301 	bic.w	r3, r3, #1
 8008122:	b2da      	uxtb	r2, r3
 8008124:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008126:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800812a:	e002      	b.n	8008132 <prvProcessReceivedCommands+0x1b2>

				default	:
					/* Don't expect to get here. */
					break;
 800812c:	bf00      	nop
 800812e:	e000      	b.n	8008132 <prvProcessReceivedCommands+0x1b2>
					break;
 8008130:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008132:	4b08      	ldr	r3, [pc, #32]	@ (8008154 <prvProcessReceivedCommands+0x1d4>)
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	1d39      	adds	r1, r7, #4
 8008138:	2200      	movs	r2, #0
 800813a:	4618      	mov	r0, r3
 800813c:	f7fe fb10 	bl	8006760 <xQueueReceive>
 8008140:	4603      	mov	r3, r0
 8008142:	2b00      	cmp	r3, #0
 8008144:	f47f af20 	bne.w	8007f88 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8008148:	bf00      	nop
 800814a:	bf00      	nop
 800814c:	3730      	adds	r7, #48	@ 0x30
 800814e:	46bd      	mov	sp, r7
 8008150:	bd80      	pop	{r7, pc}
 8008152:	bf00      	nop
 8008154:	200016cc 	.word	0x200016cc

08008158 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008158:	b580      	push	{r7, lr}
 800815a:	b088      	sub	sp, #32
 800815c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800815e:	e04b      	b.n	80081f8 <prvSwitchTimerLists+0xa0>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008160:	4b2f      	ldr	r3, [pc, #188]	@ (8008220 <prvSwitchTimerLists+0xc8>)
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	68db      	ldr	r3, [r3, #12]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800816a:	4b2d      	ldr	r3, [pc, #180]	@ (8008220 <prvSwitchTimerLists+0xc8>)
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	68db      	ldr	r3, [r3, #12]
 8008170:	68db      	ldr	r3, [r3, #12]
 8008172:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	3304      	adds	r3, #4
 8008178:	4618      	mov	r0, r3
 800817a:	f7fd ffbf 	bl	80060fc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	6a1b      	ldr	r3, [r3, #32]
 8008182:	68f8      	ldr	r0, [r7, #12]
 8008184:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800818c:	f003 0304 	and.w	r3, r3, #4
 8008190:	2b00      	cmp	r3, #0
 8008192:	d031      	beq.n	80081f8 <prvSwitchTimerLists+0xa0>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	699b      	ldr	r3, [r3, #24]
 8008198:	693a      	ldr	r2, [r7, #16]
 800819a:	4413      	add	r3, r2
 800819c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800819e:	68ba      	ldr	r2, [r7, #8]
 80081a0:	693b      	ldr	r3, [r7, #16]
 80081a2:	429a      	cmp	r2, r3
 80081a4:	d90e      	bls.n	80081c4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	68ba      	ldr	r2, [r7, #8]
 80081aa:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	68fa      	ldr	r2, [r7, #12]
 80081b0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80081b2:	4b1b      	ldr	r3, [pc, #108]	@ (8008220 <prvSwitchTimerLists+0xc8>)
 80081b4:	681a      	ldr	r2, [r3, #0]
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	3304      	adds	r3, #4
 80081ba:	4619      	mov	r1, r3
 80081bc:	4610      	mov	r0, r2
 80081be:	f7fd ff64 	bl	800608a <vListInsert>
 80081c2:	e019      	b.n	80081f8 <prvSwitchTimerLists+0xa0>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80081c4:	2300      	movs	r3, #0
 80081c6:	9300      	str	r3, [sp, #0]
 80081c8:	2300      	movs	r3, #0
 80081ca:	693a      	ldr	r2, [r7, #16]
 80081cc:	2100      	movs	r1, #0
 80081ce:	68f8      	ldr	r0, [r7, #12]
 80081d0:	f7ff fd4e 	bl	8007c70 <xTimerGenericCommand>
 80081d4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d10d      	bne.n	80081f8 <prvSwitchTimerLists+0xa0>
	__asm volatile
 80081dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081e0:	b672      	cpsid	i
 80081e2:	f383 8811 	msr	BASEPRI, r3
 80081e6:	f3bf 8f6f 	isb	sy
 80081ea:	f3bf 8f4f 	dsb	sy
 80081ee:	b662      	cpsie	i
 80081f0:	603b      	str	r3, [r7, #0]
}
 80081f2:	bf00      	nop
 80081f4:	bf00      	nop
 80081f6:	e7fd      	b.n	80081f4 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80081f8:	4b09      	ldr	r3, [pc, #36]	@ (8008220 <prvSwitchTimerLists+0xc8>)
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d1ae      	bne.n	8008160 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008202:	4b07      	ldr	r3, [pc, #28]	@ (8008220 <prvSwitchTimerLists+0xc8>)
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008208:	4b06      	ldr	r3, [pc, #24]	@ (8008224 <prvSwitchTimerLists+0xcc>)
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	4a04      	ldr	r2, [pc, #16]	@ (8008220 <prvSwitchTimerLists+0xc8>)
 800820e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008210:	4a04      	ldr	r2, [pc, #16]	@ (8008224 <prvSwitchTimerLists+0xcc>)
 8008212:	697b      	ldr	r3, [r7, #20]
 8008214:	6013      	str	r3, [r2, #0]
}
 8008216:	bf00      	nop
 8008218:	3718      	adds	r7, #24
 800821a:	46bd      	mov	sp, r7
 800821c:	bd80      	pop	{r7, pc}
 800821e:	bf00      	nop
 8008220:	200016c4 	.word	0x200016c4
 8008224:	200016c8 	.word	0x200016c8

08008228 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008228:	b580      	push	{r7, lr}
 800822a:	b082      	sub	sp, #8
 800822c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800822e:	f000 f94d 	bl	80084cc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008232:	4b15      	ldr	r3, [pc, #84]	@ (8008288 <prvCheckForValidListAndQueue+0x60>)
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	2b00      	cmp	r3, #0
 8008238:	d120      	bne.n	800827c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800823a:	4814      	ldr	r0, [pc, #80]	@ (800828c <prvCheckForValidListAndQueue+0x64>)
 800823c:	f7fd fed4 	bl	8005fe8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008240:	4813      	ldr	r0, [pc, #76]	@ (8008290 <prvCheckForValidListAndQueue+0x68>)
 8008242:	f7fd fed1 	bl	8005fe8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008246:	4b13      	ldr	r3, [pc, #76]	@ (8008294 <prvCheckForValidListAndQueue+0x6c>)
 8008248:	4a10      	ldr	r2, [pc, #64]	@ (800828c <prvCheckForValidListAndQueue+0x64>)
 800824a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800824c:	4b12      	ldr	r3, [pc, #72]	@ (8008298 <prvCheckForValidListAndQueue+0x70>)
 800824e:	4a10      	ldr	r2, [pc, #64]	@ (8008290 <prvCheckForValidListAndQueue+0x68>)
 8008250:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008252:	2300      	movs	r3, #0
 8008254:	9300      	str	r3, [sp, #0]
 8008256:	4b11      	ldr	r3, [pc, #68]	@ (800829c <prvCheckForValidListAndQueue+0x74>)
 8008258:	4a11      	ldr	r2, [pc, #68]	@ (80082a0 <prvCheckForValidListAndQueue+0x78>)
 800825a:	2110      	movs	r1, #16
 800825c:	200a      	movs	r0, #10
 800825e:	f7fd ffe3 	bl	8006228 <xQueueGenericCreateStatic>
 8008262:	4603      	mov	r3, r0
 8008264:	4a08      	ldr	r2, [pc, #32]	@ (8008288 <prvCheckForValidListAndQueue+0x60>)
 8008266:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008268:	4b07      	ldr	r3, [pc, #28]	@ (8008288 <prvCheckForValidListAndQueue+0x60>)
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	2b00      	cmp	r3, #0
 800826e:	d005      	beq.n	800827c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008270:	4b05      	ldr	r3, [pc, #20]	@ (8008288 <prvCheckForValidListAndQueue+0x60>)
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	490b      	ldr	r1, [pc, #44]	@ (80082a4 <prvCheckForValidListAndQueue+0x7c>)
 8008276:	4618      	mov	r0, r3
 8008278:	f7fe fcf2 	bl	8006c60 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800827c:	f000 f95c 	bl	8008538 <vPortExitCritical>
}
 8008280:	bf00      	nop
 8008282:	46bd      	mov	sp, r7
 8008284:	bd80      	pop	{r7, pc}
 8008286:	bf00      	nop
 8008288:	200016cc 	.word	0x200016cc
 800828c:	2000169c 	.word	0x2000169c
 8008290:	200016b0 	.word	0x200016b0
 8008294:	200016c4 	.word	0x200016c4
 8008298:	200016c8 	.word	0x200016c8
 800829c:	20001778 	.word	0x20001778
 80082a0:	200016d8 	.word	0x200016d8
 80082a4:	0800d66c 	.word	0x0800d66c

080082a8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80082a8:	b480      	push	{r7}
 80082aa:	b085      	sub	sp, #20
 80082ac:	af00      	add	r7, sp, #0
 80082ae:	60f8      	str	r0, [r7, #12]
 80082b0:	60b9      	str	r1, [r7, #8]
 80082b2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	3b04      	subs	r3, #4
 80082b8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80082c0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	3b04      	subs	r3, #4
 80082c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80082c8:	68bb      	ldr	r3, [r7, #8]
 80082ca:	f023 0201 	bic.w	r2, r3, #1
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	3b04      	subs	r3, #4
 80082d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80082d8:	4a0c      	ldr	r2, [pc, #48]	@ (800830c <pxPortInitialiseStack+0x64>)
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	3b14      	subs	r3, #20
 80082e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80082e4:	687a      	ldr	r2, [r7, #4]
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	3b04      	subs	r3, #4
 80082ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	f06f 0202 	mvn.w	r2, #2
 80082f6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	3b20      	subs	r3, #32
 80082fc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80082fe:	68fb      	ldr	r3, [r7, #12]
}
 8008300:	4618      	mov	r0, r3
 8008302:	3714      	adds	r7, #20
 8008304:	46bd      	mov	sp, r7
 8008306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800830a:	4770      	bx	lr
 800830c:	08008311 	.word	0x08008311

08008310 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008310:	b480      	push	{r7}
 8008312:	b085      	sub	sp, #20
 8008314:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008316:	2300      	movs	r3, #0
 8008318:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800831a:	4b15      	ldr	r3, [pc, #84]	@ (8008370 <prvTaskExitError+0x60>)
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008322:	d00d      	beq.n	8008340 <prvTaskExitError+0x30>
	__asm volatile
 8008324:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008328:	b672      	cpsid	i
 800832a:	f383 8811 	msr	BASEPRI, r3
 800832e:	f3bf 8f6f 	isb	sy
 8008332:	f3bf 8f4f 	dsb	sy
 8008336:	b662      	cpsie	i
 8008338:	60fb      	str	r3, [r7, #12]
}
 800833a:	bf00      	nop
 800833c:	bf00      	nop
 800833e:	e7fd      	b.n	800833c <prvTaskExitError+0x2c>
	__asm volatile
 8008340:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008344:	b672      	cpsid	i
 8008346:	f383 8811 	msr	BASEPRI, r3
 800834a:	f3bf 8f6f 	isb	sy
 800834e:	f3bf 8f4f 	dsb	sy
 8008352:	b662      	cpsie	i
 8008354:	60bb      	str	r3, [r7, #8]
}
 8008356:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008358:	bf00      	nop
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	2b00      	cmp	r3, #0
 800835e:	d0fc      	beq.n	800835a <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008360:	bf00      	nop
 8008362:	bf00      	nop
 8008364:	3714      	adds	r7, #20
 8008366:	46bd      	mov	sp, r7
 8008368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800836c:	4770      	bx	lr
 800836e:	bf00      	nop
 8008370:	20000014 	.word	0x20000014
	...

08008380 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008380:	4b07      	ldr	r3, [pc, #28]	@ (80083a0 <pxCurrentTCBConst2>)
 8008382:	6819      	ldr	r1, [r3, #0]
 8008384:	6808      	ldr	r0, [r1, #0]
 8008386:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800838a:	f380 8809 	msr	PSP, r0
 800838e:	f3bf 8f6f 	isb	sy
 8008392:	f04f 0000 	mov.w	r0, #0
 8008396:	f380 8811 	msr	BASEPRI, r0
 800839a:	4770      	bx	lr
 800839c:	f3af 8000 	nop.w

080083a0 <pxCurrentTCBConst2>:
 80083a0:	2000119c 	.word	0x2000119c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80083a4:	bf00      	nop
 80083a6:	bf00      	nop

080083a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80083a8:	4808      	ldr	r0, [pc, #32]	@ (80083cc <prvPortStartFirstTask+0x24>)
 80083aa:	6800      	ldr	r0, [r0, #0]
 80083ac:	6800      	ldr	r0, [r0, #0]
 80083ae:	f380 8808 	msr	MSP, r0
 80083b2:	f04f 0000 	mov.w	r0, #0
 80083b6:	f380 8814 	msr	CONTROL, r0
 80083ba:	b662      	cpsie	i
 80083bc:	b661      	cpsie	f
 80083be:	f3bf 8f4f 	dsb	sy
 80083c2:	f3bf 8f6f 	isb	sy
 80083c6:	df00      	svc	0
 80083c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80083ca:	bf00      	nop
 80083cc:	e000ed08 	.word	0xe000ed08

080083d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80083d0:	b580      	push	{r7, lr}
 80083d2:	b084      	sub	sp, #16
 80083d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80083d6:	4b37      	ldr	r3, [pc, #220]	@ (80084b4 <xPortStartScheduler+0xe4>)
 80083d8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	781b      	ldrb	r3, [r3, #0]
 80083de:	b2db      	uxtb	r3, r3
 80083e0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	22ff      	movs	r2, #255	@ 0xff
 80083e6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	781b      	ldrb	r3, [r3, #0]
 80083ec:	b2db      	uxtb	r3, r3
 80083ee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80083f0:	78fb      	ldrb	r3, [r7, #3]
 80083f2:	b2db      	uxtb	r3, r3
 80083f4:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80083f8:	b2da      	uxtb	r2, r3
 80083fa:	4b2f      	ldr	r3, [pc, #188]	@ (80084b8 <xPortStartScheduler+0xe8>)
 80083fc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80083fe:	4b2f      	ldr	r3, [pc, #188]	@ (80084bc <xPortStartScheduler+0xec>)
 8008400:	2207      	movs	r2, #7
 8008402:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008404:	e009      	b.n	800841a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8008406:	4b2d      	ldr	r3, [pc, #180]	@ (80084bc <xPortStartScheduler+0xec>)
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	3b01      	subs	r3, #1
 800840c:	4a2b      	ldr	r2, [pc, #172]	@ (80084bc <xPortStartScheduler+0xec>)
 800840e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008410:	78fb      	ldrb	r3, [r7, #3]
 8008412:	b2db      	uxtb	r3, r3
 8008414:	005b      	lsls	r3, r3, #1
 8008416:	b2db      	uxtb	r3, r3
 8008418:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800841a:	78fb      	ldrb	r3, [r7, #3]
 800841c:	b2db      	uxtb	r3, r3
 800841e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008422:	2b80      	cmp	r3, #128	@ 0x80
 8008424:	d0ef      	beq.n	8008406 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008426:	4b25      	ldr	r3, [pc, #148]	@ (80084bc <xPortStartScheduler+0xec>)
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	f1c3 0307 	rsb	r3, r3, #7
 800842e:	2b04      	cmp	r3, #4
 8008430:	d00d      	beq.n	800844e <xPortStartScheduler+0x7e>
	__asm volatile
 8008432:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008436:	b672      	cpsid	i
 8008438:	f383 8811 	msr	BASEPRI, r3
 800843c:	f3bf 8f6f 	isb	sy
 8008440:	f3bf 8f4f 	dsb	sy
 8008444:	b662      	cpsie	i
 8008446:	60bb      	str	r3, [r7, #8]
}
 8008448:	bf00      	nop
 800844a:	bf00      	nop
 800844c:	e7fd      	b.n	800844a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800844e:	4b1b      	ldr	r3, [pc, #108]	@ (80084bc <xPortStartScheduler+0xec>)
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	021b      	lsls	r3, r3, #8
 8008454:	4a19      	ldr	r2, [pc, #100]	@ (80084bc <xPortStartScheduler+0xec>)
 8008456:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008458:	4b18      	ldr	r3, [pc, #96]	@ (80084bc <xPortStartScheduler+0xec>)
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008460:	4a16      	ldr	r2, [pc, #88]	@ (80084bc <xPortStartScheduler+0xec>)
 8008462:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	b2da      	uxtb	r2, r3
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800846c:	4b14      	ldr	r3, [pc, #80]	@ (80084c0 <xPortStartScheduler+0xf0>)
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	4a13      	ldr	r2, [pc, #76]	@ (80084c0 <xPortStartScheduler+0xf0>)
 8008472:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008476:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008478:	4b11      	ldr	r3, [pc, #68]	@ (80084c0 <xPortStartScheduler+0xf0>)
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	4a10      	ldr	r2, [pc, #64]	@ (80084c0 <xPortStartScheduler+0xf0>)
 800847e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8008482:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008484:	f000 f8dc 	bl	8008640 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008488:	4b0e      	ldr	r3, [pc, #56]	@ (80084c4 <xPortStartScheduler+0xf4>)
 800848a:	2200      	movs	r2, #0
 800848c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800848e:	f000 f8fb 	bl	8008688 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008492:	4b0d      	ldr	r3, [pc, #52]	@ (80084c8 <xPortStartScheduler+0xf8>)
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	4a0c      	ldr	r2, [pc, #48]	@ (80084c8 <xPortStartScheduler+0xf8>)
 8008498:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800849c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800849e:	f7ff ff83 	bl	80083a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80084a2:	f7ff f827 	bl	80074f4 <vTaskSwitchContext>
	prvTaskExitError();
 80084a6:	f7ff ff33 	bl	8008310 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80084aa:	2300      	movs	r3, #0
}
 80084ac:	4618      	mov	r0, r3
 80084ae:	3710      	adds	r7, #16
 80084b0:	46bd      	mov	sp, r7
 80084b2:	bd80      	pop	{r7, pc}
 80084b4:	e000e400 	.word	0xe000e400
 80084b8:	200017c8 	.word	0x200017c8
 80084bc:	200017cc 	.word	0x200017cc
 80084c0:	e000ed20 	.word	0xe000ed20
 80084c4:	20000014 	.word	0x20000014
 80084c8:	e000ef34 	.word	0xe000ef34

080084cc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80084cc:	b480      	push	{r7}
 80084ce:	b083      	sub	sp, #12
 80084d0:	af00      	add	r7, sp, #0
	__asm volatile
 80084d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084d6:	b672      	cpsid	i
 80084d8:	f383 8811 	msr	BASEPRI, r3
 80084dc:	f3bf 8f6f 	isb	sy
 80084e0:	f3bf 8f4f 	dsb	sy
 80084e4:	b662      	cpsie	i
 80084e6:	607b      	str	r3, [r7, #4]
}
 80084e8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80084ea:	4b11      	ldr	r3, [pc, #68]	@ (8008530 <vPortEnterCritical+0x64>)
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	3301      	adds	r3, #1
 80084f0:	4a0f      	ldr	r2, [pc, #60]	@ (8008530 <vPortEnterCritical+0x64>)
 80084f2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80084f4:	4b0e      	ldr	r3, [pc, #56]	@ (8008530 <vPortEnterCritical+0x64>)
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	2b01      	cmp	r3, #1
 80084fa:	d112      	bne.n	8008522 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80084fc:	4b0d      	ldr	r3, [pc, #52]	@ (8008534 <vPortEnterCritical+0x68>)
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	b2db      	uxtb	r3, r3
 8008502:	2b00      	cmp	r3, #0
 8008504:	d00d      	beq.n	8008522 <vPortEnterCritical+0x56>
	__asm volatile
 8008506:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800850a:	b672      	cpsid	i
 800850c:	f383 8811 	msr	BASEPRI, r3
 8008510:	f3bf 8f6f 	isb	sy
 8008514:	f3bf 8f4f 	dsb	sy
 8008518:	b662      	cpsie	i
 800851a:	603b      	str	r3, [r7, #0]
}
 800851c:	bf00      	nop
 800851e:	bf00      	nop
 8008520:	e7fd      	b.n	800851e <vPortEnterCritical+0x52>
	}
}
 8008522:	bf00      	nop
 8008524:	370c      	adds	r7, #12
 8008526:	46bd      	mov	sp, r7
 8008528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800852c:	4770      	bx	lr
 800852e:	bf00      	nop
 8008530:	20000014 	.word	0x20000014
 8008534:	e000ed04 	.word	0xe000ed04

08008538 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008538:	b480      	push	{r7}
 800853a:	b083      	sub	sp, #12
 800853c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800853e:	4b13      	ldr	r3, [pc, #76]	@ (800858c <vPortExitCritical+0x54>)
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	2b00      	cmp	r3, #0
 8008544:	d10d      	bne.n	8008562 <vPortExitCritical+0x2a>
	__asm volatile
 8008546:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800854a:	b672      	cpsid	i
 800854c:	f383 8811 	msr	BASEPRI, r3
 8008550:	f3bf 8f6f 	isb	sy
 8008554:	f3bf 8f4f 	dsb	sy
 8008558:	b662      	cpsie	i
 800855a:	607b      	str	r3, [r7, #4]
}
 800855c:	bf00      	nop
 800855e:	bf00      	nop
 8008560:	e7fd      	b.n	800855e <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8008562:	4b0a      	ldr	r3, [pc, #40]	@ (800858c <vPortExitCritical+0x54>)
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	3b01      	subs	r3, #1
 8008568:	4a08      	ldr	r2, [pc, #32]	@ (800858c <vPortExitCritical+0x54>)
 800856a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800856c:	4b07      	ldr	r3, [pc, #28]	@ (800858c <vPortExitCritical+0x54>)
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	2b00      	cmp	r3, #0
 8008572:	d105      	bne.n	8008580 <vPortExitCritical+0x48>
 8008574:	2300      	movs	r3, #0
 8008576:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008578:	683b      	ldr	r3, [r7, #0]
 800857a:	f383 8811 	msr	BASEPRI, r3
}
 800857e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008580:	bf00      	nop
 8008582:	370c      	adds	r7, #12
 8008584:	46bd      	mov	sp, r7
 8008586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800858a:	4770      	bx	lr
 800858c:	20000014 	.word	0x20000014

08008590 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008590:	f3ef 8009 	mrs	r0, PSP
 8008594:	f3bf 8f6f 	isb	sy
 8008598:	4b15      	ldr	r3, [pc, #84]	@ (80085f0 <pxCurrentTCBConst>)
 800859a:	681a      	ldr	r2, [r3, #0]
 800859c:	f01e 0f10 	tst.w	lr, #16
 80085a0:	bf08      	it	eq
 80085a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80085a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085aa:	6010      	str	r0, [r2, #0]
 80085ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80085b0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80085b4:	b672      	cpsid	i
 80085b6:	f380 8811 	msr	BASEPRI, r0
 80085ba:	f3bf 8f4f 	dsb	sy
 80085be:	f3bf 8f6f 	isb	sy
 80085c2:	b662      	cpsie	i
 80085c4:	f7fe ff96 	bl	80074f4 <vTaskSwitchContext>
 80085c8:	f04f 0000 	mov.w	r0, #0
 80085cc:	f380 8811 	msr	BASEPRI, r0
 80085d0:	bc09      	pop	{r0, r3}
 80085d2:	6819      	ldr	r1, [r3, #0]
 80085d4:	6808      	ldr	r0, [r1, #0]
 80085d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085da:	f01e 0f10 	tst.w	lr, #16
 80085de:	bf08      	it	eq
 80085e0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80085e4:	f380 8809 	msr	PSP, r0
 80085e8:	f3bf 8f6f 	isb	sy
 80085ec:	4770      	bx	lr
 80085ee:	bf00      	nop

080085f0 <pxCurrentTCBConst>:
 80085f0:	2000119c 	.word	0x2000119c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80085f4:	bf00      	nop
 80085f6:	bf00      	nop

080085f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80085f8:	b580      	push	{r7, lr}
 80085fa:	b082      	sub	sp, #8
 80085fc:	af00      	add	r7, sp, #0
	__asm volatile
 80085fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008602:	b672      	cpsid	i
 8008604:	f383 8811 	msr	BASEPRI, r3
 8008608:	f3bf 8f6f 	isb	sy
 800860c:	f3bf 8f4f 	dsb	sy
 8008610:	b662      	cpsie	i
 8008612:	607b      	str	r3, [r7, #4]
}
 8008614:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008616:	f7fe feb1 	bl	800737c <xTaskIncrementTick>
 800861a:	4603      	mov	r3, r0
 800861c:	2b00      	cmp	r3, #0
 800861e:	d003      	beq.n	8008628 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008620:	4b06      	ldr	r3, [pc, #24]	@ (800863c <SysTick_Handler+0x44>)
 8008622:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008626:	601a      	str	r2, [r3, #0]
 8008628:	2300      	movs	r3, #0
 800862a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800862c:	683b      	ldr	r3, [r7, #0]
 800862e:	f383 8811 	msr	BASEPRI, r3
}
 8008632:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008634:	bf00      	nop
 8008636:	3708      	adds	r7, #8
 8008638:	46bd      	mov	sp, r7
 800863a:	bd80      	pop	{r7, pc}
 800863c:	e000ed04 	.word	0xe000ed04

08008640 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008640:	b480      	push	{r7}
 8008642:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008644:	4b0b      	ldr	r3, [pc, #44]	@ (8008674 <vPortSetupTimerInterrupt+0x34>)
 8008646:	2200      	movs	r2, #0
 8008648:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800864a:	4b0b      	ldr	r3, [pc, #44]	@ (8008678 <vPortSetupTimerInterrupt+0x38>)
 800864c:	2200      	movs	r2, #0
 800864e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008650:	4b0a      	ldr	r3, [pc, #40]	@ (800867c <vPortSetupTimerInterrupt+0x3c>)
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	4a0a      	ldr	r2, [pc, #40]	@ (8008680 <vPortSetupTimerInterrupt+0x40>)
 8008656:	fba2 2303 	umull	r2, r3, r2, r3
 800865a:	099b      	lsrs	r3, r3, #6
 800865c:	4a09      	ldr	r2, [pc, #36]	@ (8008684 <vPortSetupTimerInterrupt+0x44>)
 800865e:	3b01      	subs	r3, #1
 8008660:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008662:	4b04      	ldr	r3, [pc, #16]	@ (8008674 <vPortSetupTimerInterrupt+0x34>)
 8008664:	2207      	movs	r2, #7
 8008666:	601a      	str	r2, [r3, #0]
}
 8008668:	bf00      	nop
 800866a:	46bd      	mov	sp, r7
 800866c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008670:	4770      	bx	lr
 8008672:	bf00      	nop
 8008674:	e000e010 	.word	0xe000e010
 8008678:	e000e018 	.word	0xe000e018
 800867c:	20000004 	.word	0x20000004
 8008680:	10624dd3 	.word	0x10624dd3
 8008684:	e000e014 	.word	0xe000e014

08008688 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008688:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8008698 <vPortEnableVFP+0x10>
 800868c:	6801      	ldr	r1, [r0, #0]
 800868e:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8008692:	6001      	str	r1, [r0, #0]
 8008694:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008696:	bf00      	nop
 8008698:	e000ed88 	.word	0xe000ed88

0800869c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800869c:	b480      	push	{r7}
 800869e:	b085      	sub	sp, #20
 80086a0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80086a2:	f3ef 8305 	mrs	r3, IPSR
 80086a6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	2b0f      	cmp	r3, #15
 80086ac:	d917      	bls.n	80086de <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80086ae:	4a1a      	ldr	r2, [pc, #104]	@ (8008718 <vPortValidateInterruptPriority+0x7c>)
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	4413      	add	r3, r2
 80086b4:	781b      	ldrb	r3, [r3, #0]
 80086b6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80086b8:	4b18      	ldr	r3, [pc, #96]	@ (800871c <vPortValidateInterruptPriority+0x80>)
 80086ba:	781b      	ldrb	r3, [r3, #0]
 80086bc:	7afa      	ldrb	r2, [r7, #11]
 80086be:	429a      	cmp	r2, r3
 80086c0:	d20d      	bcs.n	80086de <vPortValidateInterruptPriority+0x42>
	__asm volatile
 80086c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086c6:	b672      	cpsid	i
 80086c8:	f383 8811 	msr	BASEPRI, r3
 80086cc:	f3bf 8f6f 	isb	sy
 80086d0:	f3bf 8f4f 	dsb	sy
 80086d4:	b662      	cpsie	i
 80086d6:	607b      	str	r3, [r7, #4]
}
 80086d8:	bf00      	nop
 80086da:	bf00      	nop
 80086dc:	e7fd      	b.n	80086da <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80086de:	4b10      	ldr	r3, [pc, #64]	@ (8008720 <vPortValidateInterruptPriority+0x84>)
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80086e6:	4b0f      	ldr	r3, [pc, #60]	@ (8008724 <vPortValidateInterruptPriority+0x88>)
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	429a      	cmp	r2, r3
 80086ec:	d90d      	bls.n	800870a <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 80086ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086f2:	b672      	cpsid	i
 80086f4:	f383 8811 	msr	BASEPRI, r3
 80086f8:	f3bf 8f6f 	isb	sy
 80086fc:	f3bf 8f4f 	dsb	sy
 8008700:	b662      	cpsie	i
 8008702:	603b      	str	r3, [r7, #0]
}
 8008704:	bf00      	nop
 8008706:	bf00      	nop
 8008708:	e7fd      	b.n	8008706 <vPortValidateInterruptPriority+0x6a>
	}
 800870a:	bf00      	nop
 800870c:	3714      	adds	r7, #20
 800870e:	46bd      	mov	sp, r7
 8008710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008714:	4770      	bx	lr
 8008716:	bf00      	nop
 8008718:	e000e3f0 	.word	0xe000e3f0
 800871c:	200017c8 	.word	0x200017c8
 8008720:	e000ed0c 	.word	0xe000ed0c
 8008724:	200017cc 	.word	0x200017cc

08008728 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008728:	b580      	push	{r7, lr}
 800872a:	b08a      	sub	sp, #40	@ 0x28
 800872c:	af00      	add	r7, sp, #0
 800872e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008730:	2300      	movs	r3, #0
 8008732:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008734:	f7fe fd64 	bl	8007200 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008738:	4b5d      	ldr	r3, [pc, #372]	@ (80088b0 <pvPortMalloc+0x188>)
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	2b00      	cmp	r3, #0
 800873e:	d101      	bne.n	8008744 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008740:	f000 f920 	bl	8008984 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008744:	4b5b      	ldr	r3, [pc, #364]	@ (80088b4 <pvPortMalloc+0x18c>)
 8008746:	681a      	ldr	r2, [r3, #0]
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	4013      	ands	r3, r2
 800874c:	2b00      	cmp	r3, #0
 800874e:	f040 8094 	bne.w	800887a <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	2b00      	cmp	r3, #0
 8008756:	d020      	beq.n	800879a <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 8008758:	2208      	movs	r2, #8
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	4413      	add	r3, r2
 800875e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	f003 0307 	and.w	r3, r3, #7
 8008766:	2b00      	cmp	r3, #0
 8008768:	d017      	beq.n	800879a <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	f023 0307 	bic.w	r3, r3, #7
 8008770:	3308      	adds	r3, #8
 8008772:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	f003 0307 	and.w	r3, r3, #7
 800877a:	2b00      	cmp	r3, #0
 800877c:	d00d      	beq.n	800879a <pvPortMalloc+0x72>
	__asm volatile
 800877e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008782:	b672      	cpsid	i
 8008784:	f383 8811 	msr	BASEPRI, r3
 8008788:	f3bf 8f6f 	isb	sy
 800878c:	f3bf 8f4f 	dsb	sy
 8008790:	b662      	cpsie	i
 8008792:	617b      	str	r3, [r7, #20]
}
 8008794:	bf00      	nop
 8008796:	bf00      	nop
 8008798:	e7fd      	b.n	8008796 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	2b00      	cmp	r3, #0
 800879e:	d06c      	beq.n	800887a <pvPortMalloc+0x152>
 80087a0:	4b45      	ldr	r3, [pc, #276]	@ (80088b8 <pvPortMalloc+0x190>)
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	687a      	ldr	r2, [r7, #4]
 80087a6:	429a      	cmp	r2, r3
 80087a8:	d867      	bhi.n	800887a <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80087aa:	4b44      	ldr	r3, [pc, #272]	@ (80088bc <pvPortMalloc+0x194>)
 80087ac:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80087ae:	4b43      	ldr	r3, [pc, #268]	@ (80088bc <pvPortMalloc+0x194>)
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80087b4:	e004      	b.n	80087c0 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 80087b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087b8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80087ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80087c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087c2:	685b      	ldr	r3, [r3, #4]
 80087c4:	687a      	ldr	r2, [r7, #4]
 80087c6:	429a      	cmp	r2, r3
 80087c8:	d903      	bls.n	80087d2 <pvPortMalloc+0xaa>
 80087ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d1f1      	bne.n	80087b6 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80087d2:	4b37      	ldr	r3, [pc, #220]	@ (80088b0 <pvPortMalloc+0x188>)
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80087d8:	429a      	cmp	r2, r3
 80087da:	d04e      	beq.n	800887a <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80087dc:	6a3b      	ldr	r3, [r7, #32]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	2208      	movs	r2, #8
 80087e2:	4413      	add	r3, r2
 80087e4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80087e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087e8:	681a      	ldr	r2, [r3, #0]
 80087ea:	6a3b      	ldr	r3, [r7, #32]
 80087ec:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80087ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087f0:	685a      	ldr	r2, [r3, #4]
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	1ad2      	subs	r2, r2, r3
 80087f6:	2308      	movs	r3, #8
 80087f8:	005b      	lsls	r3, r3, #1
 80087fa:	429a      	cmp	r2, r3
 80087fc:	d922      	bls.n	8008844 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80087fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	4413      	add	r3, r2
 8008804:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008806:	69bb      	ldr	r3, [r7, #24]
 8008808:	f003 0307 	and.w	r3, r3, #7
 800880c:	2b00      	cmp	r3, #0
 800880e:	d00d      	beq.n	800882c <pvPortMalloc+0x104>
	__asm volatile
 8008810:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008814:	b672      	cpsid	i
 8008816:	f383 8811 	msr	BASEPRI, r3
 800881a:	f3bf 8f6f 	isb	sy
 800881e:	f3bf 8f4f 	dsb	sy
 8008822:	b662      	cpsie	i
 8008824:	613b      	str	r3, [r7, #16]
}
 8008826:	bf00      	nop
 8008828:	bf00      	nop
 800882a:	e7fd      	b.n	8008828 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800882c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800882e:	685a      	ldr	r2, [r3, #4]
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	1ad2      	subs	r2, r2, r3
 8008834:	69bb      	ldr	r3, [r7, #24]
 8008836:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008838:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800883a:	687a      	ldr	r2, [r7, #4]
 800883c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800883e:	69b8      	ldr	r0, [r7, #24]
 8008840:	f000 f902 	bl	8008a48 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008844:	4b1c      	ldr	r3, [pc, #112]	@ (80088b8 <pvPortMalloc+0x190>)
 8008846:	681a      	ldr	r2, [r3, #0]
 8008848:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800884a:	685b      	ldr	r3, [r3, #4]
 800884c:	1ad3      	subs	r3, r2, r3
 800884e:	4a1a      	ldr	r2, [pc, #104]	@ (80088b8 <pvPortMalloc+0x190>)
 8008850:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008852:	4b19      	ldr	r3, [pc, #100]	@ (80088b8 <pvPortMalloc+0x190>)
 8008854:	681a      	ldr	r2, [r3, #0]
 8008856:	4b1a      	ldr	r3, [pc, #104]	@ (80088c0 <pvPortMalloc+0x198>)
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	429a      	cmp	r2, r3
 800885c:	d203      	bcs.n	8008866 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800885e:	4b16      	ldr	r3, [pc, #88]	@ (80088b8 <pvPortMalloc+0x190>)
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	4a17      	ldr	r2, [pc, #92]	@ (80088c0 <pvPortMalloc+0x198>)
 8008864:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008866:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008868:	685a      	ldr	r2, [r3, #4]
 800886a:	4b12      	ldr	r3, [pc, #72]	@ (80088b4 <pvPortMalloc+0x18c>)
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	431a      	orrs	r2, r3
 8008870:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008872:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008874:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008876:	2200      	movs	r2, #0
 8008878:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800887a:	f7fe fccf 	bl	800721c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800887e:	69fb      	ldr	r3, [r7, #28]
 8008880:	f003 0307 	and.w	r3, r3, #7
 8008884:	2b00      	cmp	r3, #0
 8008886:	d00d      	beq.n	80088a4 <pvPortMalloc+0x17c>
	__asm volatile
 8008888:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800888c:	b672      	cpsid	i
 800888e:	f383 8811 	msr	BASEPRI, r3
 8008892:	f3bf 8f6f 	isb	sy
 8008896:	f3bf 8f4f 	dsb	sy
 800889a:	b662      	cpsie	i
 800889c:	60fb      	str	r3, [r7, #12]
}
 800889e:	bf00      	nop
 80088a0:	bf00      	nop
 80088a2:	e7fd      	b.n	80088a0 <pvPortMalloc+0x178>
	return pvReturn;
 80088a4:	69fb      	ldr	r3, [r7, #28]
}
 80088a6:	4618      	mov	r0, r3
 80088a8:	3728      	adds	r7, #40	@ 0x28
 80088aa:	46bd      	mov	sp, r7
 80088ac:	bd80      	pop	{r7, pc}
 80088ae:	bf00      	nop
 80088b0:	200053d8 	.word	0x200053d8
 80088b4:	200053e4 	.word	0x200053e4
 80088b8:	200053dc 	.word	0x200053dc
 80088bc:	200053d0 	.word	0x200053d0
 80088c0:	200053e0 	.word	0x200053e0

080088c4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80088c4:	b580      	push	{r7, lr}
 80088c6:	b086      	sub	sp, #24
 80088c8:	af00      	add	r7, sp, #0
 80088ca:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d04e      	beq.n	8008974 <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80088d6:	2308      	movs	r3, #8
 80088d8:	425b      	negs	r3, r3
 80088da:	697a      	ldr	r2, [r7, #20]
 80088dc:	4413      	add	r3, r2
 80088de:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80088e0:	697b      	ldr	r3, [r7, #20]
 80088e2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80088e4:	693b      	ldr	r3, [r7, #16]
 80088e6:	685a      	ldr	r2, [r3, #4]
 80088e8:	4b24      	ldr	r3, [pc, #144]	@ (800897c <vPortFree+0xb8>)
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	4013      	ands	r3, r2
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d10d      	bne.n	800890e <vPortFree+0x4a>
	__asm volatile
 80088f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088f6:	b672      	cpsid	i
 80088f8:	f383 8811 	msr	BASEPRI, r3
 80088fc:	f3bf 8f6f 	isb	sy
 8008900:	f3bf 8f4f 	dsb	sy
 8008904:	b662      	cpsie	i
 8008906:	60fb      	str	r3, [r7, #12]
}
 8008908:	bf00      	nop
 800890a:	bf00      	nop
 800890c:	e7fd      	b.n	800890a <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800890e:	693b      	ldr	r3, [r7, #16]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	2b00      	cmp	r3, #0
 8008914:	d00d      	beq.n	8008932 <vPortFree+0x6e>
	__asm volatile
 8008916:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800891a:	b672      	cpsid	i
 800891c:	f383 8811 	msr	BASEPRI, r3
 8008920:	f3bf 8f6f 	isb	sy
 8008924:	f3bf 8f4f 	dsb	sy
 8008928:	b662      	cpsie	i
 800892a:	60bb      	str	r3, [r7, #8]
}
 800892c:	bf00      	nop
 800892e:	bf00      	nop
 8008930:	e7fd      	b.n	800892e <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008932:	693b      	ldr	r3, [r7, #16]
 8008934:	685a      	ldr	r2, [r3, #4]
 8008936:	4b11      	ldr	r3, [pc, #68]	@ (800897c <vPortFree+0xb8>)
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	4013      	ands	r3, r2
 800893c:	2b00      	cmp	r3, #0
 800893e:	d019      	beq.n	8008974 <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008940:	693b      	ldr	r3, [r7, #16]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	2b00      	cmp	r3, #0
 8008946:	d115      	bne.n	8008974 <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008948:	693b      	ldr	r3, [r7, #16]
 800894a:	685a      	ldr	r2, [r3, #4]
 800894c:	4b0b      	ldr	r3, [pc, #44]	@ (800897c <vPortFree+0xb8>)
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	43db      	mvns	r3, r3
 8008952:	401a      	ands	r2, r3
 8008954:	693b      	ldr	r3, [r7, #16]
 8008956:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008958:	f7fe fc52 	bl	8007200 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800895c:	693b      	ldr	r3, [r7, #16]
 800895e:	685a      	ldr	r2, [r3, #4]
 8008960:	4b07      	ldr	r3, [pc, #28]	@ (8008980 <vPortFree+0xbc>)
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	4413      	add	r3, r2
 8008966:	4a06      	ldr	r2, [pc, #24]	@ (8008980 <vPortFree+0xbc>)
 8008968:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800896a:	6938      	ldr	r0, [r7, #16]
 800896c:	f000 f86c 	bl	8008a48 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8008970:	f7fe fc54 	bl	800721c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008974:	bf00      	nop
 8008976:	3718      	adds	r7, #24
 8008978:	46bd      	mov	sp, r7
 800897a:	bd80      	pop	{r7, pc}
 800897c:	200053e4 	.word	0x200053e4
 8008980:	200053dc 	.word	0x200053dc

08008984 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008984:	b480      	push	{r7}
 8008986:	b085      	sub	sp, #20
 8008988:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800898a:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800898e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008990:	4b27      	ldr	r3, [pc, #156]	@ (8008a30 <prvHeapInit+0xac>)
 8008992:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	f003 0307 	and.w	r3, r3, #7
 800899a:	2b00      	cmp	r3, #0
 800899c:	d00c      	beq.n	80089b8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	3307      	adds	r3, #7
 80089a2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	f023 0307 	bic.w	r3, r3, #7
 80089aa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80089ac:	68ba      	ldr	r2, [r7, #8]
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	1ad3      	subs	r3, r2, r3
 80089b2:	4a1f      	ldr	r2, [pc, #124]	@ (8008a30 <prvHeapInit+0xac>)
 80089b4:	4413      	add	r3, r2
 80089b6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80089bc:	4a1d      	ldr	r2, [pc, #116]	@ (8008a34 <prvHeapInit+0xb0>)
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80089c2:	4b1c      	ldr	r3, [pc, #112]	@ (8008a34 <prvHeapInit+0xb0>)
 80089c4:	2200      	movs	r2, #0
 80089c6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	68ba      	ldr	r2, [r7, #8]
 80089cc:	4413      	add	r3, r2
 80089ce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80089d0:	2208      	movs	r2, #8
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	1a9b      	subs	r3, r3, r2
 80089d6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	f023 0307 	bic.w	r3, r3, #7
 80089de:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	4a15      	ldr	r2, [pc, #84]	@ (8008a38 <prvHeapInit+0xb4>)
 80089e4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80089e6:	4b14      	ldr	r3, [pc, #80]	@ (8008a38 <prvHeapInit+0xb4>)
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	2200      	movs	r2, #0
 80089ec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80089ee:	4b12      	ldr	r3, [pc, #72]	@ (8008a38 <prvHeapInit+0xb4>)
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	2200      	movs	r2, #0
 80089f4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80089fa:	683b      	ldr	r3, [r7, #0]
 80089fc:	68fa      	ldr	r2, [r7, #12]
 80089fe:	1ad2      	subs	r2, r2, r3
 8008a00:	683b      	ldr	r3, [r7, #0]
 8008a02:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008a04:	4b0c      	ldr	r3, [pc, #48]	@ (8008a38 <prvHeapInit+0xb4>)
 8008a06:	681a      	ldr	r2, [r3, #0]
 8008a08:	683b      	ldr	r3, [r7, #0]
 8008a0a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008a0c:	683b      	ldr	r3, [r7, #0]
 8008a0e:	685b      	ldr	r3, [r3, #4]
 8008a10:	4a0a      	ldr	r2, [pc, #40]	@ (8008a3c <prvHeapInit+0xb8>)
 8008a12:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008a14:	683b      	ldr	r3, [r7, #0]
 8008a16:	685b      	ldr	r3, [r3, #4]
 8008a18:	4a09      	ldr	r2, [pc, #36]	@ (8008a40 <prvHeapInit+0xbc>)
 8008a1a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008a1c:	4b09      	ldr	r3, [pc, #36]	@ (8008a44 <prvHeapInit+0xc0>)
 8008a1e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8008a22:	601a      	str	r2, [r3, #0]
}
 8008a24:	bf00      	nop
 8008a26:	3714      	adds	r7, #20
 8008a28:	46bd      	mov	sp, r7
 8008a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a2e:	4770      	bx	lr
 8008a30:	200017d0 	.word	0x200017d0
 8008a34:	200053d0 	.word	0x200053d0
 8008a38:	200053d8 	.word	0x200053d8
 8008a3c:	200053e0 	.word	0x200053e0
 8008a40:	200053dc 	.word	0x200053dc
 8008a44:	200053e4 	.word	0x200053e4

08008a48 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008a48:	b480      	push	{r7}
 8008a4a:	b085      	sub	sp, #20
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008a50:	4b28      	ldr	r3, [pc, #160]	@ (8008af4 <prvInsertBlockIntoFreeList+0xac>)
 8008a52:	60fb      	str	r3, [r7, #12]
 8008a54:	e002      	b.n	8008a5c <prvInsertBlockIntoFreeList+0x14>
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	60fb      	str	r3, [r7, #12]
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	687a      	ldr	r2, [r7, #4]
 8008a62:	429a      	cmp	r2, r3
 8008a64:	d8f7      	bhi.n	8008a56 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	685b      	ldr	r3, [r3, #4]
 8008a6e:	68ba      	ldr	r2, [r7, #8]
 8008a70:	4413      	add	r3, r2
 8008a72:	687a      	ldr	r2, [r7, #4]
 8008a74:	429a      	cmp	r2, r3
 8008a76:	d108      	bne.n	8008a8a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	685a      	ldr	r2, [r3, #4]
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	685b      	ldr	r3, [r3, #4]
 8008a80:	441a      	add	r2, r3
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	685b      	ldr	r3, [r3, #4]
 8008a92:	68ba      	ldr	r2, [r7, #8]
 8008a94:	441a      	add	r2, r3
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	429a      	cmp	r2, r3
 8008a9c:	d118      	bne.n	8008ad0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	681a      	ldr	r2, [r3, #0]
 8008aa2:	4b15      	ldr	r3, [pc, #84]	@ (8008af8 <prvInsertBlockIntoFreeList+0xb0>)
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	429a      	cmp	r2, r3
 8008aa8:	d00d      	beq.n	8008ac6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	685a      	ldr	r2, [r3, #4]
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	685b      	ldr	r3, [r3, #4]
 8008ab4:	441a      	add	r2, r3
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	681a      	ldr	r2, [r3, #0]
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	601a      	str	r2, [r3, #0]
 8008ac4:	e008      	b.n	8008ad8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008ac6:	4b0c      	ldr	r3, [pc, #48]	@ (8008af8 <prvInsertBlockIntoFreeList+0xb0>)
 8008ac8:	681a      	ldr	r2, [r3, #0]
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	601a      	str	r2, [r3, #0]
 8008ace:	e003      	b.n	8008ad8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	681a      	ldr	r2, [r3, #0]
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008ad8:	68fa      	ldr	r2, [r7, #12]
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	429a      	cmp	r2, r3
 8008ade:	d002      	beq.n	8008ae6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	687a      	ldr	r2, [r7, #4]
 8008ae4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008ae6:	bf00      	nop
 8008ae8:	3714      	adds	r7, #20
 8008aea:	46bd      	mov	sp, r7
 8008aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af0:	4770      	bx	lr
 8008af2:	bf00      	nop
 8008af4:	200053d0 	.word	0x200053d0
 8008af8:	200053d8 	.word	0x200053d8

08008afc <srand>:
 8008afc:	b538      	push	{r3, r4, r5, lr}
 8008afe:	4b10      	ldr	r3, [pc, #64]	@ (8008b40 <srand+0x44>)
 8008b00:	681d      	ldr	r5, [r3, #0]
 8008b02:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8008b04:	4604      	mov	r4, r0
 8008b06:	b9b3      	cbnz	r3, 8008b36 <srand+0x3a>
 8008b08:	2018      	movs	r0, #24
 8008b0a:	f002 fdf3 	bl	800b6f4 <malloc>
 8008b0e:	4602      	mov	r2, r0
 8008b10:	6328      	str	r0, [r5, #48]	@ 0x30
 8008b12:	b920      	cbnz	r0, 8008b1e <srand+0x22>
 8008b14:	4b0b      	ldr	r3, [pc, #44]	@ (8008b44 <srand+0x48>)
 8008b16:	480c      	ldr	r0, [pc, #48]	@ (8008b48 <srand+0x4c>)
 8008b18:	2146      	movs	r1, #70	@ 0x46
 8008b1a:	f001 fee3 	bl	800a8e4 <__assert_func>
 8008b1e:	490b      	ldr	r1, [pc, #44]	@ (8008b4c <srand+0x50>)
 8008b20:	4b0b      	ldr	r3, [pc, #44]	@ (8008b50 <srand+0x54>)
 8008b22:	e9c0 1300 	strd	r1, r3, [r0]
 8008b26:	4b0b      	ldr	r3, [pc, #44]	@ (8008b54 <srand+0x58>)
 8008b28:	6083      	str	r3, [r0, #8]
 8008b2a:	230b      	movs	r3, #11
 8008b2c:	8183      	strh	r3, [r0, #12]
 8008b2e:	2100      	movs	r1, #0
 8008b30:	2001      	movs	r0, #1
 8008b32:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8008b36:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8008b38:	2200      	movs	r2, #0
 8008b3a:	611c      	str	r4, [r3, #16]
 8008b3c:	615a      	str	r2, [r3, #20]
 8008b3e:	bd38      	pop	{r3, r4, r5, pc}
 8008b40:	2000002c 	.word	0x2000002c
 8008b44:	0800d71c 	.word	0x0800d71c
 8008b48:	0800d733 	.word	0x0800d733
 8008b4c:	abcd330e 	.word	0xabcd330e
 8008b50:	e66d1234 	.word	0xe66d1234
 8008b54:	0005deec 	.word	0x0005deec

08008b58 <rand>:
 8008b58:	4b16      	ldr	r3, [pc, #88]	@ (8008bb4 <rand+0x5c>)
 8008b5a:	b510      	push	{r4, lr}
 8008b5c:	681c      	ldr	r4, [r3, #0]
 8008b5e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8008b60:	b9b3      	cbnz	r3, 8008b90 <rand+0x38>
 8008b62:	2018      	movs	r0, #24
 8008b64:	f002 fdc6 	bl	800b6f4 <malloc>
 8008b68:	4602      	mov	r2, r0
 8008b6a:	6320      	str	r0, [r4, #48]	@ 0x30
 8008b6c:	b920      	cbnz	r0, 8008b78 <rand+0x20>
 8008b6e:	4b12      	ldr	r3, [pc, #72]	@ (8008bb8 <rand+0x60>)
 8008b70:	4812      	ldr	r0, [pc, #72]	@ (8008bbc <rand+0x64>)
 8008b72:	2152      	movs	r1, #82	@ 0x52
 8008b74:	f001 feb6 	bl	800a8e4 <__assert_func>
 8008b78:	4911      	ldr	r1, [pc, #68]	@ (8008bc0 <rand+0x68>)
 8008b7a:	4b12      	ldr	r3, [pc, #72]	@ (8008bc4 <rand+0x6c>)
 8008b7c:	e9c0 1300 	strd	r1, r3, [r0]
 8008b80:	4b11      	ldr	r3, [pc, #68]	@ (8008bc8 <rand+0x70>)
 8008b82:	6083      	str	r3, [r0, #8]
 8008b84:	230b      	movs	r3, #11
 8008b86:	8183      	strh	r3, [r0, #12]
 8008b88:	2100      	movs	r1, #0
 8008b8a:	2001      	movs	r0, #1
 8008b8c:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8008b90:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8008b92:	480e      	ldr	r0, [pc, #56]	@ (8008bcc <rand+0x74>)
 8008b94:	690b      	ldr	r3, [r1, #16]
 8008b96:	694c      	ldr	r4, [r1, #20]
 8008b98:	4a0d      	ldr	r2, [pc, #52]	@ (8008bd0 <rand+0x78>)
 8008b9a:	4358      	muls	r0, r3
 8008b9c:	fb02 0004 	mla	r0, r2, r4, r0
 8008ba0:	fba3 3202 	umull	r3, r2, r3, r2
 8008ba4:	3301      	adds	r3, #1
 8008ba6:	eb40 0002 	adc.w	r0, r0, r2
 8008baa:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8008bae:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8008bb2:	bd10      	pop	{r4, pc}
 8008bb4:	2000002c 	.word	0x2000002c
 8008bb8:	0800d71c 	.word	0x0800d71c
 8008bbc:	0800d733 	.word	0x0800d733
 8008bc0:	abcd330e 	.word	0xabcd330e
 8008bc4:	e66d1234 	.word	0xe66d1234
 8008bc8:	0005deec 	.word	0x0005deec
 8008bcc:	5851f42d 	.word	0x5851f42d
 8008bd0:	4c957f2d 	.word	0x4c957f2d

08008bd4 <__cvt>:
 8008bd4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008bd8:	ec57 6b10 	vmov	r6, r7, d0
 8008bdc:	2f00      	cmp	r7, #0
 8008bde:	460c      	mov	r4, r1
 8008be0:	4619      	mov	r1, r3
 8008be2:	463b      	mov	r3, r7
 8008be4:	bfbb      	ittet	lt
 8008be6:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8008bea:	461f      	movlt	r7, r3
 8008bec:	2300      	movge	r3, #0
 8008bee:	232d      	movlt	r3, #45	@ 0x2d
 8008bf0:	700b      	strb	r3, [r1, #0]
 8008bf2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008bf4:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8008bf8:	4691      	mov	r9, r2
 8008bfa:	f023 0820 	bic.w	r8, r3, #32
 8008bfe:	bfbc      	itt	lt
 8008c00:	4632      	movlt	r2, r6
 8008c02:	4616      	movlt	r6, r2
 8008c04:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008c08:	d005      	beq.n	8008c16 <__cvt+0x42>
 8008c0a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8008c0e:	d100      	bne.n	8008c12 <__cvt+0x3e>
 8008c10:	3401      	adds	r4, #1
 8008c12:	2102      	movs	r1, #2
 8008c14:	e000      	b.n	8008c18 <__cvt+0x44>
 8008c16:	2103      	movs	r1, #3
 8008c18:	ab03      	add	r3, sp, #12
 8008c1a:	9301      	str	r3, [sp, #4]
 8008c1c:	ab02      	add	r3, sp, #8
 8008c1e:	9300      	str	r3, [sp, #0]
 8008c20:	ec47 6b10 	vmov	d0, r6, r7
 8008c24:	4653      	mov	r3, sl
 8008c26:	4622      	mov	r2, r4
 8008c28:	f001 ff02 	bl	800aa30 <_dtoa_r>
 8008c2c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8008c30:	4605      	mov	r5, r0
 8008c32:	d119      	bne.n	8008c68 <__cvt+0x94>
 8008c34:	f019 0f01 	tst.w	r9, #1
 8008c38:	d00e      	beq.n	8008c58 <__cvt+0x84>
 8008c3a:	eb00 0904 	add.w	r9, r0, r4
 8008c3e:	2200      	movs	r2, #0
 8008c40:	2300      	movs	r3, #0
 8008c42:	4630      	mov	r0, r6
 8008c44:	4639      	mov	r1, r7
 8008c46:	f7f7 ff6f 	bl	8000b28 <__aeabi_dcmpeq>
 8008c4a:	b108      	cbz	r0, 8008c50 <__cvt+0x7c>
 8008c4c:	f8cd 900c 	str.w	r9, [sp, #12]
 8008c50:	2230      	movs	r2, #48	@ 0x30
 8008c52:	9b03      	ldr	r3, [sp, #12]
 8008c54:	454b      	cmp	r3, r9
 8008c56:	d31e      	bcc.n	8008c96 <__cvt+0xc2>
 8008c58:	9b03      	ldr	r3, [sp, #12]
 8008c5a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008c5c:	1b5b      	subs	r3, r3, r5
 8008c5e:	4628      	mov	r0, r5
 8008c60:	6013      	str	r3, [r2, #0]
 8008c62:	b004      	add	sp, #16
 8008c64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c68:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008c6c:	eb00 0904 	add.w	r9, r0, r4
 8008c70:	d1e5      	bne.n	8008c3e <__cvt+0x6a>
 8008c72:	7803      	ldrb	r3, [r0, #0]
 8008c74:	2b30      	cmp	r3, #48	@ 0x30
 8008c76:	d10a      	bne.n	8008c8e <__cvt+0xba>
 8008c78:	2200      	movs	r2, #0
 8008c7a:	2300      	movs	r3, #0
 8008c7c:	4630      	mov	r0, r6
 8008c7e:	4639      	mov	r1, r7
 8008c80:	f7f7 ff52 	bl	8000b28 <__aeabi_dcmpeq>
 8008c84:	b918      	cbnz	r0, 8008c8e <__cvt+0xba>
 8008c86:	f1c4 0401 	rsb	r4, r4, #1
 8008c8a:	f8ca 4000 	str.w	r4, [sl]
 8008c8e:	f8da 3000 	ldr.w	r3, [sl]
 8008c92:	4499      	add	r9, r3
 8008c94:	e7d3      	b.n	8008c3e <__cvt+0x6a>
 8008c96:	1c59      	adds	r1, r3, #1
 8008c98:	9103      	str	r1, [sp, #12]
 8008c9a:	701a      	strb	r2, [r3, #0]
 8008c9c:	e7d9      	b.n	8008c52 <__cvt+0x7e>

08008c9e <__exponent>:
 8008c9e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008ca0:	2900      	cmp	r1, #0
 8008ca2:	bfba      	itte	lt
 8008ca4:	4249      	neglt	r1, r1
 8008ca6:	232d      	movlt	r3, #45	@ 0x2d
 8008ca8:	232b      	movge	r3, #43	@ 0x2b
 8008caa:	2909      	cmp	r1, #9
 8008cac:	7002      	strb	r2, [r0, #0]
 8008cae:	7043      	strb	r3, [r0, #1]
 8008cb0:	dd29      	ble.n	8008d06 <__exponent+0x68>
 8008cb2:	f10d 0307 	add.w	r3, sp, #7
 8008cb6:	461d      	mov	r5, r3
 8008cb8:	270a      	movs	r7, #10
 8008cba:	461a      	mov	r2, r3
 8008cbc:	fbb1 f6f7 	udiv	r6, r1, r7
 8008cc0:	fb07 1416 	mls	r4, r7, r6, r1
 8008cc4:	3430      	adds	r4, #48	@ 0x30
 8008cc6:	f802 4c01 	strb.w	r4, [r2, #-1]
 8008cca:	460c      	mov	r4, r1
 8008ccc:	2c63      	cmp	r4, #99	@ 0x63
 8008cce:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8008cd2:	4631      	mov	r1, r6
 8008cd4:	dcf1      	bgt.n	8008cba <__exponent+0x1c>
 8008cd6:	3130      	adds	r1, #48	@ 0x30
 8008cd8:	1e94      	subs	r4, r2, #2
 8008cda:	f803 1c01 	strb.w	r1, [r3, #-1]
 8008cde:	1c41      	adds	r1, r0, #1
 8008ce0:	4623      	mov	r3, r4
 8008ce2:	42ab      	cmp	r3, r5
 8008ce4:	d30a      	bcc.n	8008cfc <__exponent+0x5e>
 8008ce6:	f10d 0309 	add.w	r3, sp, #9
 8008cea:	1a9b      	subs	r3, r3, r2
 8008cec:	42ac      	cmp	r4, r5
 8008cee:	bf88      	it	hi
 8008cf0:	2300      	movhi	r3, #0
 8008cf2:	3302      	adds	r3, #2
 8008cf4:	4403      	add	r3, r0
 8008cf6:	1a18      	subs	r0, r3, r0
 8008cf8:	b003      	add	sp, #12
 8008cfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008cfc:	f813 6b01 	ldrb.w	r6, [r3], #1
 8008d00:	f801 6f01 	strb.w	r6, [r1, #1]!
 8008d04:	e7ed      	b.n	8008ce2 <__exponent+0x44>
 8008d06:	2330      	movs	r3, #48	@ 0x30
 8008d08:	3130      	adds	r1, #48	@ 0x30
 8008d0a:	7083      	strb	r3, [r0, #2]
 8008d0c:	70c1      	strb	r1, [r0, #3]
 8008d0e:	1d03      	adds	r3, r0, #4
 8008d10:	e7f1      	b.n	8008cf6 <__exponent+0x58>
	...

08008d14 <_printf_float>:
 8008d14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d18:	b08d      	sub	sp, #52	@ 0x34
 8008d1a:	460c      	mov	r4, r1
 8008d1c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8008d20:	4616      	mov	r6, r2
 8008d22:	461f      	mov	r7, r3
 8008d24:	4605      	mov	r5, r0
 8008d26:	f001 fceb 	bl	800a700 <_localeconv_r>
 8008d2a:	6803      	ldr	r3, [r0, #0]
 8008d2c:	9304      	str	r3, [sp, #16]
 8008d2e:	4618      	mov	r0, r3
 8008d30:	f7f7 face 	bl	80002d0 <strlen>
 8008d34:	2300      	movs	r3, #0
 8008d36:	930a      	str	r3, [sp, #40]	@ 0x28
 8008d38:	f8d8 3000 	ldr.w	r3, [r8]
 8008d3c:	9005      	str	r0, [sp, #20]
 8008d3e:	3307      	adds	r3, #7
 8008d40:	f023 0307 	bic.w	r3, r3, #7
 8008d44:	f103 0208 	add.w	r2, r3, #8
 8008d48:	f894 a018 	ldrb.w	sl, [r4, #24]
 8008d4c:	f8d4 b000 	ldr.w	fp, [r4]
 8008d50:	f8c8 2000 	str.w	r2, [r8]
 8008d54:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008d58:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8008d5c:	9307      	str	r3, [sp, #28]
 8008d5e:	f8cd 8018 	str.w	r8, [sp, #24]
 8008d62:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8008d66:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008d6a:	4b9c      	ldr	r3, [pc, #624]	@ (8008fdc <_printf_float+0x2c8>)
 8008d6c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008d70:	f7f7 ff0c 	bl	8000b8c <__aeabi_dcmpun>
 8008d74:	bb70      	cbnz	r0, 8008dd4 <_printf_float+0xc0>
 8008d76:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008d7a:	4b98      	ldr	r3, [pc, #608]	@ (8008fdc <_printf_float+0x2c8>)
 8008d7c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008d80:	f7f7 fee6 	bl	8000b50 <__aeabi_dcmple>
 8008d84:	bb30      	cbnz	r0, 8008dd4 <_printf_float+0xc0>
 8008d86:	2200      	movs	r2, #0
 8008d88:	2300      	movs	r3, #0
 8008d8a:	4640      	mov	r0, r8
 8008d8c:	4649      	mov	r1, r9
 8008d8e:	f7f7 fed5 	bl	8000b3c <__aeabi_dcmplt>
 8008d92:	b110      	cbz	r0, 8008d9a <_printf_float+0x86>
 8008d94:	232d      	movs	r3, #45	@ 0x2d
 8008d96:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008d9a:	4a91      	ldr	r2, [pc, #580]	@ (8008fe0 <_printf_float+0x2cc>)
 8008d9c:	4b91      	ldr	r3, [pc, #580]	@ (8008fe4 <_printf_float+0x2d0>)
 8008d9e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8008da2:	bf8c      	ite	hi
 8008da4:	4690      	movhi	r8, r2
 8008da6:	4698      	movls	r8, r3
 8008da8:	2303      	movs	r3, #3
 8008daa:	6123      	str	r3, [r4, #16]
 8008dac:	f02b 0304 	bic.w	r3, fp, #4
 8008db0:	6023      	str	r3, [r4, #0]
 8008db2:	f04f 0900 	mov.w	r9, #0
 8008db6:	9700      	str	r7, [sp, #0]
 8008db8:	4633      	mov	r3, r6
 8008dba:	aa0b      	add	r2, sp, #44	@ 0x2c
 8008dbc:	4621      	mov	r1, r4
 8008dbe:	4628      	mov	r0, r5
 8008dc0:	f000 f9d2 	bl	8009168 <_printf_common>
 8008dc4:	3001      	adds	r0, #1
 8008dc6:	f040 808d 	bne.w	8008ee4 <_printf_float+0x1d0>
 8008dca:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008dce:	b00d      	add	sp, #52	@ 0x34
 8008dd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008dd4:	4642      	mov	r2, r8
 8008dd6:	464b      	mov	r3, r9
 8008dd8:	4640      	mov	r0, r8
 8008dda:	4649      	mov	r1, r9
 8008ddc:	f7f7 fed6 	bl	8000b8c <__aeabi_dcmpun>
 8008de0:	b140      	cbz	r0, 8008df4 <_printf_float+0xe0>
 8008de2:	464b      	mov	r3, r9
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	bfbc      	itt	lt
 8008de8:	232d      	movlt	r3, #45	@ 0x2d
 8008dea:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8008dee:	4a7e      	ldr	r2, [pc, #504]	@ (8008fe8 <_printf_float+0x2d4>)
 8008df0:	4b7e      	ldr	r3, [pc, #504]	@ (8008fec <_printf_float+0x2d8>)
 8008df2:	e7d4      	b.n	8008d9e <_printf_float+0x8a>
 8008df4:	6863      	ldr	r3, [r4, #4]
 8008df6:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8008dfa:	9206      	str	r2, [sp, #24]
 8008dfc:	1c5a      	adds	r2, r3, #1
 8008dfe:	d13b      	bne.n	8008e78 <_printf_float+0x164>
 8008e00:	2306      	movs	r3, #6
 8008e02:	6063      	str	r3, [r4, #4]
 8008e04:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8008e08:	2300      	movs	r3, #0
 8008e0a:	6022      	str	r2, [r4, #0]
 8008e0c:	9303      	str	r3, [sp, #12]
 8008e0e:	ab0a      	add	r3, sp, #40	@ 0x28
 8008e10:	e9cd a301 	strd	sl, r3, [sp, #4]
 8008e14:	ab09      	add	r3, sp, #36	@ 0x24
 8008e16:	9300      	str	r3, [sp, #0]
 8008e18:	6861      	ldr	r1, [r4, #4]
 8008e1a:	ec49 8b10 	vmov	d0, r8, r9
 8008e1e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8008e22:	4628      	mov	r0, r5
 8008e24:	f7ff fed6 	bl	8008bd4 <__cvt>
 8008e28:	9b06      	ldr	r3, [sp, #24]
 8008e2a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008e2c:	2b47      	cmp	r3, #71	@ 0x47
 8008e2e:	4680      	mov	r8, r0
 8008e30:	d129      	bne.n	8008e86 <_printf_float+0x172>
 8008e32:	1cc8      	adds	r0, r1, #3
 8008e34:	db02      	blt.n	8008e3c <_printf_float+0x128>
 8008e36:	6863      	ldr	r3, [r4, #4]
 8008e38:	4299      	cmp	r1, r3
 8008e3a:	dd41      	ble.n	8008ec0 <_printf_float+0x1ac>
 8008e3c:	f1aa 0a02 	sub.w	sl, sl, #2
 8008e40:	fa5f fa8a 	uxtb.w	sl, sl
 8008e44:	3901      	subs	r1, #1
 8008e46:	4652      	mov	r2, sl
 8008e48:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8008e4c:	9109      	str	r1, [sp, #36]	@ 0x24
 8008e4e:	f7ff ff26 	bl	8008c9e <__exponent>
 8008e52:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008e54:	1813      	adds	r3, r2, r0
 8008e56:	2a01      	cmp	r2, #1
 8008e58:	4681      	mov	r9, r0
 8008e5a:	6123      	str	r3, [r4, #16]
 8008e5c:	dc02      	bgt.n	8008e64 <_printf_float+0x150>
 8008e5e:	6822      	ldr	r2, [r4, #0]
 8008e60:	07d2      	lsls	r2, r2, #31
 8008e62:	d501      	bpl.n	8008e68 <_printf_float+0x154>
 8008e64:	3301      	adds	r3, #1
 8008e66:	6123      	str	r3, [r4, #16]
 8008e68:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d0a2      	beq.n	8008db6 <_printf_float+0xa2>
 8008e70:	232d      	movs	r3, #45	@ 0x2d
 8008e72:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008e76:	e79e      	b.n	8008db6 <_printf_float+0xa2>
 8008e78:	9a06      	ldr	r2, [sp, #24]
 8008e7a:	2a47      	cmp	r2, #71	@ 0x47
 8008e7c:	d1c2      	bne.n	8008e04 <_printf_float+0xf0>
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d1c0      	bne.n	8008e04 <_printf_float+0xf0>
 8008e82:	2301      	movs	r3, #1
 8008e84:	e7bd      	b.n	8008e02 <_printf_float+0xee>
 8008e86:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008e8a:	d9db      	bls.n	8008e44 <_printf_float+0x130>
 8008e8c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8008e90:	d118      	bne.n	8008ec4 <_printf_float+0x1b0>
 8008e92:	2900      	cmp	r1, #0
 8008e94:	6863      	ldr	r3, [r4, #4]
 8008e96:	dd0b      	ble.n	8008eb0 <_printf_float+0x19c>
 8008e98:	6121      	str	r1, [r4, #16]
 8008e9a:	b913      	cbnz	r3, 8008ea2 <_printf_float+0x18e>
 8008e9c:	6822      	ldr	r2, [r4, #0]
 8008e9e:	07d0      	lsls	r0, r2, #31
 8008ea0:	d502      	bpl.n	8008ea8 <_printf_float+0x194>
 8008ea2:	3301      	adds	r3, #1
 8008ea4:	440b      	add	r3, r1
 8008ea6:	6123      	str	r3, [r4, #16]
 8008ea8:	65a1      	str	r1, [r4, #88]	@ 0x58
 8008eaa:	f04f 0900 	mov.w	r9, #0
 8008eae:	e7db      	b.n	8008e68 <_printf_float+0x154>
 8008eb0:	b913      	cbnz	r3, 8008eb8 <_printf_float+0x1a4>
 8008eb2:	6822      	ldr	r2, [r4, #0]
 8008eb4:	07d2      	lsls	r2, r2, #31
 8008eb6:	d501      	bpl.n	8008ebc <_printf_float+0x1a8>
 8008eb8:	3302      	adds	r3, #2
 8008eba:	e7f4      	b.n	8008ea6 <_printf_float+0x192>
 8008ebc:	2301      	movs	r3, #1
 8008ebe:	e7f2      	b.n	8008ea6 <_printf_float+0x192>
 8008ec0:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8008ec4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008ec6:	4299      	cmp	r1, r3
 8008ec8:	db05      	blt.n	8008ed6 <_printf_float+0x1c2>
 8008eca:	6823      	ldr	r3, [r4, #0]
 8008ecc:	6121      	str	r1, [r4, #16]
 8008ece:	07d8      	lsls	r0, r3, #31
 8008ed0:	d5ea      	bpl.n	8008ea8 <_printf_float+0x194>
 8008ed2:	1c4b      	adds	r3, r1, #1
 8008ed4:	e7e7      	b.n	8008ea6 <_printf_float+0x192>
 8008ed6:	2900      	cmp	r1, #0
 8008ed8:	bfd4      	ite	le
 8008eda:	f1c1 0202 	rsble	r2, r1, #2
 8008ede:	2201      	movgt	r2, #1
 8008ee0:	4413      	add	r3, r2
 8008ee2:	e7e0      	b.n	8008ea6 <_printf_float+0x192>
 8008ee4:	6823      	ldr	r3, [r4, #0]
 8008ee6:	055a      	lsls	r2, r3, #21
 8008ee8:	d407      	bmi.n	8008efa <_printf_float+0x1e6>
 8008eea:	6923      	ldr	r3, [r4, #16]
 8008eec:	4642      	mov	r2, r8
 8008eee:	4631      	mov	r1, r6
 8008ef0:	4628      	mov	r0, r5
 8008ef2:	47b8      	blx	r7
 8008ef4:	3001      	adds	r0, #1
 8008ef6:	d12b      	bne.n	8008f50 <_printf_float+0x23c>
 8008ef8:	e767      	b.n	8008dca <_printf_float+0xb6>
 8008efa:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008efe:	f240 80dd 	bls.w	80090bc <_printf_float+0x3a8>
 8008f02:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008f06:	2200      	movs	r2, #0
 8008f08:	2300      	movs	r3, #0
 8008f0a:	f7f7 fe0d 	bl	8000b28 <__aeabi_dcmpeq>
 8008f0e:	2800      	cmp	r0, #0
 8008f10:	d033      	beq.n	8008f7a <_printf_float+0x266>
 8008f12:	4a37      	ldr	r2, [pc, #220]	@ (8008ff0 <_printf_float+0x2dc>)
 8008f14:	2301      	movs	r3, #1
 8008f16:	4631      	mov	r1, r6
 8008f18:	4628      	mov	r0, r5
 8008f1a:	47b8      	blx	r7
 8008f1c:	3001      	adds	r0, #1
 8008f1e:	f43f af54 	beq.w	8008dca <_printf_float+0xb6>
 8008f22:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8008f26:	4543      	cmp	r3, r8
 8008f28:	db02      	blt.n	8008f30 <_printf_float+0x21c>
 8008f2a:	6823      	ldr	r3, [r4, #0]
 8008f2c:	07d8      	lsls	r0, r3, #31
 8008f2e:	d50f      	bpl.n	8008f50 <_printf_float+0x23c>
 8008f30:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008f34:	4631      	mov	r1, r6
 8008f36:	4628      	mov	r0, r5
 8008f38:	47b8      	blx	r7
 8008f3a:	3001      	adds	r0, #1
 8008f3c:	f43f af45 	beq.w	8008dca <_printf_float+0xb6>
 8008f40:	f04f 0900 	mov.w	r9, #0
 8008f44:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8008f48:	f104 0a1a 	add.w	sl, r4, #26
 8008f4c:	45c8      	cmp	r8, r9
 8008f4e:	dc09      	bgt.n	8008f64 <_printf_float+0x250>
 8008f50:	6823      	ldr	r3, [r4, #0]
 8008f52:	079b      	lsls	r3, r3, #30
 8008f54:	f100 8103 	bmi.w	800915e <_printf_float+0x44a>
 8008f58:	68e0      	ldr	r0, [r4, #12]
 8008f5a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008f5c:	4298      	cmp	r0, r3
 8008f5e:	bfb8      	it	lt
 8008f60:	4618      	movlt	r0, r3
 8008f62:	e734      	b.n	8008dce <_printf_float+0xba>
 8008f64:	2301      	movs	r3, #1
 8008f66:	4652      	mov	r2, sl
 8008f68:	4631      	mov	r1, r6
 8008f6a:	4628      	mov	r0, r5
 8008f6c:	47b8      	blx	r7
 8008f6e:	3001      	adds	r0, #1
 8008f70:	f43f af2b 	beq.w	8008dca <_printf_float+0xb6>
 8008f74:	f109 0901 	add.w	r9, r9, #1
 8008f78:	e7e8      	b.n	8008f4c <_printf_float+0x238>
 8008f7a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	dc39      	bgt.n	8008ff4 <_printf_float+0x2e0>
 8008f80:	4a1b      	ldr	r2, [pc, #108]	@ (8008ff0 <_printf_float+0x2dc>)
 8008f82:	2301      	movs	r3, #1
 8008f84:	4631      	mov	r1, r6
 8008f86:	4628      	mov	r0, r5
 8008f88:	47b8      	blx	r7
 8008f8a:	3001      	adds	r0, #1
 8008f8c:	f43f af1d 	beq.w	8008dca <_printf_float+0xb6>
 8008f90:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8008f94:	ea59 0303 	orrs.w	r3, r9, r3
 8008f98:	d102      	bne.n	8008fa0 <_printf_float+0x28c>
 8008f9a:	6823      	ldr	r3, [r4, #0]
 8008f9c:	07d9      	lsls	r1, r3, #31
 8008f9e:	d5d7      	bpl.n	8008f50 <_printf_float+0x23c>
 8008fa0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008fa4:	4631      	mov	r1, r6
 8008fa6:	4628      	mov	r0, r5
 8008fa8:	47b8      	blx	r7
 8008faa:	3001      	adds	r0, #1
 8008fac:	f43f af0d 	beq.w	8008dca <_printf_float+0xb6>
 8008fb0:	f04f 0a00 	mov.w	sl, #0
 8008fb4:	f104 0b1a 	add.w	fp, r4, #26
 8008fb8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008fba:	425b      	negs	r3, r3
 8008fbc:	4553      	cmp	r3, sl
 8008fbe:	dc01      	bgt.n	8008fc4 <_printf_float+0x2b0>
 8008fc0:	464b      	mov	r3, r9
 8008fc2:	e793      	b.n	8008eec <_printf_float+0x1d8>
 8008fc4:	2301      	movs	r3, #1
 8008fc6:	465a      	mov	r2, fp
 8008fc8:	4631      	mov	r1, r6
 8008fca:	4628      	mov	r0, r5
 8008fcc:	47b8      	blx	r7
 8008fce:	3001      	adds	r0, #1
 8008fd0:	f43f aefb 	beq.w	8008dca <_printf_float+0xb6>
 8008fd4:	f10a 0a01 	add.w	sl, sl, #1
 8008fd8:	e7ee      	b.n	8008fb8 <_printf_float+0x2a4>
 8008fda:	bf00      	nop
 8008fdc:	7fefffff 	.word	0x7fefffff
 8008fe0:	0800d78f 	.word	0x0800d78f
 8008fe4:	0800d78b 	.word	0x0800d78b
 8008fe8:	0800d797 	.word	0x0800d797
 8008fec:	0800d793 	.word	0x0800d793
 8008ff0:	0800db30 	.word	0x0800db30
 8008ff4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008ff6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008ffa:	4553      	cmp	r3, sl
 8008ffc:	bfa8      	it	ge
 8008ffe:	4653      	movge	r3, sl
 8009000:	2b00      	cmp	r3, #0
 8009002:	4699      	mov	r9, r3
 8009004:	dc36      	bgt.n	8009074 <_printf_float+0x360>
 8009006:	f04f 0b00 	mov.w	fp, #0
 800900a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800900e:	f104 021a 	add.w	r2, r4, #26
 8009012:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009014:	9306      	str	r3, [sp, #24]
 8009016:	eba3 0309 	sub.w	r3, r3, r9
 800901a:	455b      	cmp	r3, fp
 800901c:	dc31      	bgt.n	8009082 <_printf_float+0x36e>
 800901e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009020:	459a      	cmp	sl, r3
 8009022:	dc3a      	bgt.n	800909a <_printf_float+0x386>
 8009024:	6823      	ldr	r3, [r4, #0]
 8009026:	07da      	lsls	r2, r3, #31
 8009028:	d437      	bmi.n	800909a <_printf_float+0x386>
 800902a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800902c:	ebaa 0903 	sub.w	r9, sl, r3
 8009030:	9b06      	ldr	r3, [sp, #24]
 8009032:	ebaa 0303 	sub.w	r3, sl, r3
 8009036:	4599      	cmp	r9, r3
 8009038:	bfa8      	it	ge
 800903a:	4699      	movge	r9, r3
 800903c:	f1b9 0f00 	cmp.w	r9, #0
 8009040:	dc33      	bgt.n	80090aa <_printf_float+0x396>
 8009042:	f04f 0800 	mov.w	r8, #0
 8009046:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800904a:	f104 0b1a 	add.w	fp, r4, #26
 800904e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009050:	ebaa 0303 	sub.w	r3, sl, r3
 8009054:	eba3 0309 	sub.w	r3, r3, r9
 8009058:	4543      	cmp	r3, r8
 800905a:	f77f af79 	ble.w	8008f50 <_printf_float+0x23c>
 800905e:	2301      	movs	r3, #1
 8009060:	465a      	mov	r2, fp
 8009062:	4631      	mov	r1, r6
 8009064:	4628      	mov	r0, r5
 8009066:	47b8      	blx	r7
 8009068:	3001      	adds	r0, #1
 800906a:	f43f aeae 	beq.w	8008dca <_printf_float+0xb6>
 800906e:	f108 0801 	add.w	r8, r8, #1
 8009072:	e7ec      	b.n	800904e <_printf_float+0x33a>
 8009074:	4642      	mov	r2, r8
 8009076:	4631      	mov	r1, r6
 8009078:	4628      	mov	r0, r5
 800907a:	47b8      	blx	r7
 800907c:	3001      	adds	r0, #1
 800907e:	d1c2      	bne.n	8009006 <_printf_float+0x2f2>
 8009080:	e6a3      	b.n	8008dca <_printf_float+0xb6>
 8009082:	2301      	movs	r3, #1
 8009084:	4631      	mov	r1, r6
 8009086:	4628      	mov	r0, r5
 8009088:	9206      	str	r2, [sp, #24]
 800908a:	47b8      	blx	r7
 800908c:	3001      	adds	r0, #1
 800908e:	f43f ae9c 	beq.w	8008dca <_printf_float+0xb6>
 8009092:	9a06      	ldr	r2, [sp, #24]
 8009094:	f10b 0b01 	add.w	fp, fp, #1
 8009098:	e7bb      	b.n	8009012 <_printf_float+0x2fe>
 800909a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800909e:	4631      	mov	r1, r6
 80090a0:	4628      	mov	r0, r5
 80090a2:	47b8      	blx	r7
 80090a4:	3001      	adds	r0, #1
 80090a6:	d1c0      	bne.n	800902a <_printf_float+0x316>
 80090a8:	e68f      	b.n	8008dca <_printf_float+0xb6>
 80090aa:	9a06      	ldr	r2, [sp, #24]
 80090ac:	464b      	mov	r3, r9
 80090ae:	4442      	add	r2, r8
 80090b0:	4631      	mov	r1, r6
 80090b2:	4628      	mov	r0, r5
 80090b4:	47b8      	blx	r7
 80090b6:	3001      	adds	r0, #1
 80090b8:	d1c3      	bne.n	8009042 <_printf_float+0x32e>
 80090ba:	e686      	b.n	8008dca <_printf_float+0xb6>
 80090bc:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80090c0:	f1ba 0f01 	cmp.w	sl, #1
 80090c4:	dc01      	bgt.n	80090ca <_printf_float+0x3b6>
 80090c6:	07db      	lsls	r3, r3, #31
 80090c8:	d536      	bpl.n	8009138 <_printf_float+0x424>
 80090ca:	2301      	movs	r3, #1
 80090cc:	4642      	mov	r2, r8
 80090ce:	4631      	mov	r1, r6
 80090d0:	4628      	mov	r0, r5
 80090d2:	47b8      	blx	r7
 80090d4:	3001      	adds	r0, #1
 80090d6:	f43f ae78 	beq.w	8008dca <_printf_float+0xb6>
 80090da:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80090de:	4631      	mov	r1, r6
 80090e0:	4628      	mov	r0, r5
 80090e2:	47b8      	blx	r7
 80090e4:	3001      	adds	r0, #1
 80090e6:	f43f ae70 	beq.w	8008dca <_printf_float+0xb6>
 80090ea:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80090ee:	2200      	movs	r2, #0
 80090f0:	2300      	movs	r3, #0
 80090f2:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 80090f6:	f7f7 fd17 	bl	8000b28 <__aeabi_dcmpeq>
 80090fa:	b9c0      	cbnz	r0, 800912e <_printf_float+0x41a>
 80090fc:	4653      	mov	r3, sl
 80090fe:	f108 0201 	add.w	r2, r8, #1
 8009102:	4631      	mov	r1, r6
 8009104:	4628      	mov	r0, r5
 8009106:	47b8      	blx	r7
 8009108:	3001      	adds	r0, #1
 800910a:	d10c      	bne.n	8009126 <_printf_float+0x412>
 800910c:	e65d      	b.n	8008dca <_printf_float+0xb6>
 800910e:	2301      	movs	r3, #1
 8009110:	465a      	mov	r2, fp
 8009112:	4631      	mov	r1, r6
 8009114:	4628      	mov	r0, r5
 8009116:	47b8      	blx	r7
 8009118:	3001      	adds	r0, #1
 800911a:	f43f ae56 	beq.w	8008dca <_printf_float+0xb6>
 800911e:	f108 0801 	add.w	r8, r8, #1
 8009122:	45d0      	cmp	r8, sl
 8009124:	dbf3      	blt.n	800910e <_printf_float+0x3fa>
 8009126:	464b      	mov	r3, r9
 8009128:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800912c:	e6df      	b.n	8008eee <_printf_float+0x1da>
 800912e:	f04f 0800 	mov.w	r8, #0
 8009132:	f104 0b1a 	add.w	fp, r4, #26
 8009136:	e7f4      	b.n	8009122 <_printf_float+0x40e>
 8009138:	2301      	movs	r3, #1
 800913a:	4642      	mov	r2, r8
 800913c:	e7e1      	b.n	8009102 <_printf_float+0x3ee>
 800913e:	2301      	movs	r3, #1
 8009140:	464a      	mov	r2, r9
 8009142:	4631      	mov	r1, r6
 8009144:	4628      	mov	r0, r5
 8009146:	47b8      	blx	r7
 8009148:	3001      	adds	r0, #1
 800914a:	f43f ae3e 	beq.w	8008dca <_printf_float+0xb6>
 800914e:	f108 0801 	add.w	r8, r8, #1
 8009152:	68e3      	ldr	r3, [r4, #12]
 8009154:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009156:	1a5b      	subs	r3, r3, r1
 8009158:	4543      	cmp	r3, r8
 800915a:	dcf0      	bgt.n	800913e <_printf_float+0x42a>
 800915c:	e6fc      	b.n	8008f58 <_printf_float+0x244>
 800915e:	f04f 0800 	mov.w	r8, #0
 8009162:	f104 0919 	add.w	r9, r4, #25
 8009166:	e7f4      	b.n	8009152 <_printf_float+0x43e>

08009168 <_printf_common>:
 8009168:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800916c:	4616      	mov	r6, r2
 800916e:	4698      	mov	r8, r3
 8009170:	688a      	ldr	r2, [r1, #8]
 8009172:	690b      	ldr	r3, [r1, #16]
 8009174:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009178:	4293      	cmp	r3, r2
 800917a:	bfb8      	it	lt
 800917c:	4613      	movlt	r3, r2
 800917e:	6033      	str	r3, [r6, #0]
 8009180:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009184:	4607      	mov	r7, r0
 8009186:	460c      	mov	r4, r1
 8009188:	b10a      	cbz	r2, 800918e <_printf_common+0x26>
 800918a:	3301      	adds	r3, #1
 800918c:	6033      	str	r3, [r6, #0]
 800918e:	6823      	ldr	r3, [r4, #0]
 8009190:	0699      	lsls	r1, r3, #26
 8009192:	bf42      	ittt	mi
 8009194:	6833      	ldrmi	r3, [r6, #0]
 8009196:	3302      	addmi	r3, #2
 8009198:	6033      	strmi	r3, [r6, #0]
 800919a:	6825      	ldr	r5, [r4, #0]
 800919c:	f015 0506 	ands.w	r5, r5, #6
 80091a0:	d106      	bne.n	80091b0 <_printf_common+0x48>
 80091a2:	f104 0a19 	add.w	sl, r4, #25
 80091a6:	68e3      	ldr	r3, [r4, #12]
 80091a8:	6832      	ldr	r2, [r6, #0]
 80091aa:	1a9b      	subs	r3, r3, r2
 80091ac:	42ab      	cmp	r3, r5
 80091ae:	dc26      	bgt.n	80091fe <_printf_common+0x96>
 80091b0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80091b4:	6822      	ldr	r2, [r4, #0]
 80091b6:	3b00      	subs	r3, #0
 80091b8:	bf18      	it	ne
 80091ba:	2301      	movne	r3, #1
 80091bc:	0692      	lsls	r2, r2, #26
 80091be:	d42b      	bmi.n	8009218 <_printf_common+0xb0>
 80091c0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80091c4:	4641      	mov	r1, r8
 80091c6:	4638      	mov	r0, r7
 80091c8:	47c8      	blx	r9
 80091ca:	3001      	adds	r0, #1
 80091cc:	d01e      	beq.n	800920c <_printf_common+0xa4>
 80091ce:	6823      	ldr	r3, [r4, #0]
 80091d0:	6922      	ldr	r2, [r4, #16]
 80091d2:	f003 0306 	and.w	r3, r3, #6
 80091d6:	2b04      	cmp	r3, #4
 80091d8:	bf02      	ittt	eq
 80091da:	68e5      	ldreq	r5, [r4, #12]
 80091dc:	6833      	ldreq	r3, [r6, #0]
 80091de:	1aed      	subeq	r5, r5, r3
 80091e0:	68a3      	ldr	r3, [r4, #8]
 80091e2:	bf0c      	ite	eq
 80091e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80091e8:	2500      	movne	r5, #0
 80091ea:	4293      	cmp	r3, r2
 80091ec:	bfc4      	itt	gt
 80091ee:	1a9b      	subgt	r3, r3, r2
 80091f0:	18ed      	addgt	r5, r5, r3
 80091f2:	2600      	movs	r6, #0
 80091f4:	341a      	adds	r4, #26
 80091f6:	42b5      	cmp	r5, r6
 80091f8:	d11a      	bne.n	8009230 <_printf_common+0xc8>
 80091fa:	2000      	movs	r0, #0
 80091fc:	e008      	b.n	8009210 <_printf_common+0xa8>
 80091fe:	2301      	movs	r3, #1
 8009200:	4652      	mov	r2, sl
 8009202:	4641      	mov	r1, r8
 8009204:	4638      	mov	r0, r7
 8009206:	47c8      	blx	r9
 8009208:	3001      	adds	r0, #1
 800920a:	d103      	bne.n	8009214 <_printf_common+0xac>
 800920c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009210:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009214:	3501      	adds	r5, #1
 8009216:	e7c6      	b.n	80091a6 <_printf_common+0x3e>
 8009218:	18e1      	adds	r1, r4, r3
 800921a:	1c5a      	adds	r2, r3, #1
 800921c:	2030      	movs	r0, #48	@ 0x30
 800921e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009222:	4422      	add	r2, r4
 8009224:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009228:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800922c:	3302      	adds	r3, #2
 800922e:	e7c7      	b.n	80091c0 <_printf_common+0x58>
 8009230:	2301      	movs	r3, #1
 8009232:	4622      	mov	r2, r4
 8009234:	4641      	mov	r1, r8
 8009236:	4638      	mov	r0, r7
 8009238:	47c8      	blx	r9
 800923a:	3001      	adds	r0, #1
 800923c:	d0e6      	beq.n	800920c <_printf_common+0xa4>
 800923e:	3601      	adds	r6, #1
 8009240:	e7d9      	b.n	80091f6 <_printf_common+0x8e>
	...

08009244 <_printf_i>:
 8009244:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009248:	7e0f      	ldrb	r7, [r1, #24]
 800924a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800924c:	2f78      	cmp	r7, #120	@ 0x78
 800924e:	4691      	mov	r9, r2
 8009250:	4680      	mov	r8, r0
 8009252:	460c      	mov	r4, r1
 8009254:	469a      	mov	sl, r3
 8009256:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800925a:	d807      	bhi.n	800926c <_printf_i+0x28>
 800925c:	2f62      	cmp	r7, #98	@ 0x62
 800925e:	d80a      	bhi.n	8009276 <_printf_i+0x32>
 8009260:	2f00      	cmp	r7, #0
 8009262:	f000 80d1 	beq.w	8009408 <_printf_i+0x1c4>
 8009266:	2f58      	cmp	r7, #88	@ 0x58
 8009268:	f000 80b8 	beq.w	80093dc <_printf_i+0x198>
 800926c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009270:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009274:	e03a      	b.n	80092ec <_printf_i+0xa8>
 8009276:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800927a:	2b15      	cmp	r3, #21
 800927c:	d8f6      	bhi.n	800926c <_printf_i+0x28>
 800927e:	a101      	add	r1, pc, #4	@ (adr r1, 8009284 <_printf_i+0x40>)
 8009280:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009284:	080092dd 	.word	0x080092dd
 8009288:	080092f1 	.word	0x080092f1
 800928c:	0800926d 	.word	0x0800926d
 8009290:	0800926d 	.word	0x0800926d
 8009294:	0800926d 	.word	0x0800926d
 8009298:	0800926d 	.word	0x0800926d
 800929c:	080092f1 	.word	0x080092f1
 80092a0:	0800926d 	.word	0x0800926d
 80092a4:	0800926d 	.word	0x0800926d
 80092a8:	0800926d 	.word	0x0800926d
 80092ac:	0800926d 	.word	0x0800926d
 80092b0:	080093ef 	.word	0x080093ef
 80092b4:	0800931b 	.word	0x0800931b
 80092b8:	080093a9 	.word	0x080093a9
 80092bc:	0800926d 	.word	0x0800926d
 80092c0:	0800926d 	.word	0x0800926d
 80092c4:	08009411 	.word	0x08009411
 80092c8:	0800926d 	.word	0x0800926d
 80092cc:	0800931b 	.word	0x0800931b
 80092d0:	0800926d 	.word	0x0800926d
 80092d4:	0800926d 	.word	0x0800926d
 80092d8:	080093b1 	.word	0x080093b1
 80092dc:	6833      	ldr	r3, [r6, #0]
 80092de:	1d1a      	adds	r2, r3, #4
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	6032      	str	r2, [r6, #0]
 80092e4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80092e8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80092ec:	2301      	movs	r3, #1
 80092ee:	e09c      	b.n	800942a <_printf_i+0x1e6>
 80092f0:	6833      	ldr	r3, [r6, #0]
 80092f2:	6820      	ldr	r0, [r4, #0]
 80092f4:	1d19      	adds	r1, r3, #4
 80092f6:	6031      	str	r1, [r6, #0]
 80092f8:	0606      	lsls	r6, r0, #24
 80092fa:	d501      	bpl.n	8009300 <_printf_i+0xbc>
 80092fc:	681d      	ldr	r5, [r3, #0]
 80092fe:	e003      	b.n	8009308 <_printf_i+0xc4>
 8009300:	0645      	lsls	r5, r0, #25
 8009302:	d5fb      	bpl.n	80092fc <_printf_i+0xb8>
 8009304:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009308:	2d00      	cmp	r5, #0
 800930a:	da03      	bge.n	8009314 <_printf_i+0xd0>
 800930c:	232d      	movs	r3, #45	@ 0x2d
 800930e:	426d      	negs	r5, r5
 8009310:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009314:	4858      	ldr	r0, [pc, #352]	@ (8009478 <_printf_i+0x234>)
 8009316:	230a      	movs	r3, #10
 8009318:	e011      	b.n	800933e <_printf_i+0xfa>
 800931a:	6821      	ldr	r1, [r4, #0]
 800931c:	6833      	ldr	r3, [r6, #0]
 800931e:	0608      	lsls	r0, r1, #24
 8009320:	f853 5b04 	ldr.w	r5, [r3], #4
 8009324:	d402      	bmi.n	800932c <_printf_i+0xe8>
 8009326:	0649      	lsls	r1, r1, #25
 8009328:	bf48      	it	mi
 800932a:	b2ad      	uxthmi	r5, r5
 800932c:	2f6f      	cmp	r7, #111	@ 0x6f
 800932e:	4852      	ldr	r0, [pc, #328]	@ (8009478 <_printf_i+0x234>)
 8009330:	6033      	str	r3, [r6, #0]
 8009332:	bf14      	ite	ne
 8009334:	230a      	movne	r3, #10
 8009336:	2308      	moveq	r3, #8
 8009338:	2100      	movs	r1, #0
 800933a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800933e:	6866      	ldr	r6, [r4, #4]
 8009340:	60a6      	str	r6, [r4, #8]
 8009342:	2e00      	cmp	r6, #0
 8009344:	db05      	blt.n	8009352 <_printf_i+0x10e>
 8009346:	6821      	ldr	r1, [r4, #0]
 8009348:	432e      	orrs	r6, r5
 800934a:	f021 0104 	bic.w	r1, r1, #4
 800934e:	6021      	str	r1, [r4, #0]
 8009350:	d04b      	beq.n	80093ea <_printf_i+0x1a6>
 8009352:	4616      	mov	r6, r2
 8009354:	fbb5 f1f3 	udiv	r1, r5, r3
 8009358:	fb03 5711 	mls	r7, r3, r1, r5
 800935c:	5dc7      	ldrb	r7, [r0, r7]
 800935e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009362:	462f      	mov	r7, r5
 8009364:	42bb      	cmp	r3, r7
 8009366:	460d      	mov	r5, r1
 8009368:	d9f4      	bls.n	8009354 <_printf_i+0x110>
 800936a:	2b08      	cmp	r3, #8
 800936c:	d10b      	bne.n	8009386 <_printf_i+0x142>
 800936e:	6823      	ldr	r3, [r4, #0]
 8009370:	07df      	lsls	r7, r3, #31
 8009372:	d508      	bpl.n	8009386 <_printf_i+0x142>
 8009374:	6923      	ldr	r3, [r4, #16]
 8009376:	6861      	ldr	r1, [r4, #4]
 8009378:	4299      	cmp	r1, r3
 800937a:	bfde      	ittt	le
 800937c:	2330      	movle	r3, #48	@ 0x30
 800937e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009382:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8009386:	1b92      	subs	r2, r2, r6
 8009388:	6122      	str	r2, [r4, #16]
 800938a:	f8cd a000 	str.w	sl, [sp]
 800938e:	464b      	mov	r3, r9
 8009390:	aa03      	add	r2, sp, #12
 8009392:	4621      	mov	r1, r4
 8009394:	4640      	mov	r0, r8
 8009396:	f7ff fee7 	bl	8009168 <_printf_common>
 800939a:	3001      	adds	r0, #1
 800939c:	d14a      	bne.n	8009434 <_printf_i+0x1f0>
 800939e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80093a2:	b004      	add	sp, #16
 80093a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80093a8:	6823      	ldr	r3, [r4, #0]
 80093aa:	f043 0320 	orr.w	r3, r3, #32
 80093ae:	6023      	str	r3, [r4, #0]
 80093b0:	4832      	ldr	r0, [pc, #200]	@ (800947c <_printf_i+0x238>)
 80093b2:	2778      	movs	r7, #120	@ 0x78
 80093b4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80093b8:	6823      	ldr	r3, [r4, #0]
 80093ba:	6831      	ldr	r1, [r6, #0]
 80093bc:	061f      	lsls	r7, r3, #24
 80093be:	f851 5b04 	ldr.w	r5, [r1], #4
 80093c2:	d402      	bmi.n	80093ca <_printf_i+0x186>
 80093c4:	065f      	lsls	r7, r3, #25
 80093c6:	bf48      	it	mi
 80093c8:	b2ad      	uxthmi	r5, r5
 80093ca:	6031      	str	r1, [r6, #0]
 80093cc:	07d9      	lsls	r1, r3, #31
 80093ce:	bf44      	itt	mi
 80093d0:	f043 0320 	orrmi.w	r3, r3, #32
 80093d4:	6023      	strmi	r3, [r4, #0]
 80093d6:	b11d      	cbz	r5, 80093e0 <_printf_i+0x19c>
 80093d8:	2310      	movs	r3, #16
 80093da:	e7ad      	b.n	8009338 <_printf_i+0xf4>
 80093dc:	4826      	ldr	r0, [pc, #152]	@ (8009478 <_printf_i+0x234>)
 80093de:	e7e9      	b.n	80093b4 <_printf_i+0x170>
 80093e0:	6823      	ldr	r3, [r4, #0]
 80093e2:	f023 0320 	bic.w	r3, r3, #32
 80093e6:	6023      	str	r3, [r4, #0]
 80093e8:	e7f6      	b.n	80093d8 <_printf_i+0x194>
 80093ea:	4616      	mov	r6, r2
 80093ec:	e7bd      	b.n	800936a <_printf_i+0x126>
 80093ee:	6833      	ldr	r3, [r6, #0]
 80093f0:	6825      	ldr	r5, [r4, #0]
 80093f2:	6961      	ldr	r1, [r4, #20]
 80093f4:	1d18      	adds	r0, r3, #4
 80093f6:	6030      	str	r0, [r6, #0]
 80093f8:	062e      	lsls	r6, r5, #24
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	d501      	bpl.n	8009402 <_printf_i+0x1be>
 80093fe:	6019      	str	r1, [r3, #0]
 8009400:	e002      	b.n	8009408 <_printf_i+0x1c4>
 8009402:	0668      	lsls	r0, r5, #25
 8009404:	d5fb      	bpl.n	80093fe <_printf_i+0x1ba>
 8009406:	8019      	strh	r1, [r3, #0]
 8009408:	2300      	movs	r3, #0
 800940a:	6123      	str	r3, [r4, #16]
 800940c:	4616      	mov	r6, r2
 800940e:	e7bc      	b.n	800938a <_printf_i+0x146>
 8009410:	6833      	ldr	r3, [r6, #0]
 8009412:	1d1a      	adds	r2, r3, #4
 8009414:	6032      	str	r2, [r6, #0]
 8009416:	681e      	ldr	r6, [r3, #0]
 8009418:	6862      	ldr	r2, [r4, #4]
 800941a:	2100      	movs	r1, #0
 800941c:	4630      	mov	r0, r6
 800941e:	f7f6 ff07 	bl	8000230 <memchr>
 8009422:	b108      	cbz	r0, 8009428 <_printf_i+0x1e4>
 8009424:	1b80      	subs	r0, r0, r6
 8009426:	6060      	str	r0, [r4, #4]
 8009428:	6863      	ldr	r3, [r4, #4]
 800942a:	6123      	str	r3, [r4, #16]
 800942c:	2300      	movs	r3, #0
 800942e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009432:	e7aa      	b.n	800938a <_printf_i+0x146>
 8009434:	6923      	ldr	r3, [r4, #16]
 8009436:	4632      	mov	r2, r6
 8009438:	4649      	mov	r1, r9
 800943a:	4640      	mov	r0, r8
 800943c:	47d0      	blx	sl
 800943e:	3001      	adds	r0, #1
 8009440:	d0ad      	beq.n	800939e <_printf_i+0x15a>
 8009442:	6823      	ldr	r3, [r4, #0]
 8009444:	079b      	lsls	r3, r3, #30
 8009446:	d413      	bmi.n	8009470 <_printf_i+0x22c>
 8009448:	68e0      	ldr	r0, [r4, #12]
 800944a:	9b03      	ldr	r3, [sp, #12]
 800944c:	4298      	cmp	r0, r3
 800944e:	bfb8      	it	lt
 8009450:	4618      	movlt	r0, r3
 8009452:	e7a6      	b.n	80093a2 <_printf_i+0x15e>
 8009454:	2301      	movs	r3, #1
 8009456:	4632      	mov	r2, r6
 8009458:	4649      	mov	r1, r9
 800945a:	4640      	mov	r0, r8
 800945c:	47d0      	blx	sl
 800945e:	3001      	adds	r0, #1
 8009460:	d09d      	beq.n	800939e <_printf_i+0x15a>
 8009462:	3501      	adds	r5, #1
 8009464:	68e3      	ldr	r3, [r4, #12]
 8009466:	9903      	ldr	r1, [sp, #12]
 8009468:	1a5b      	subs	r3, r3, r1
 800946a:	42ab      	cmp	r3, r5
 800946c:	dcf2      	bgt.n	8009454 <_printf_i+0x210>
 800946e:	e7eb      	b.n	8009448 <_printf_i+0x204>
 8009470:	2500      	movs	r5, #0
 8009472:	f104 0619 	add.w	r6, r4, #25
 8009476:	e7f5      	b.n	8009464 <_printf_i+0x220>
 8009478:	0800d79b 	.word	0x0800d79b
 800947c:	0800d7ac 	.word	0x0800d7ac

08009480 <std>:
 8009480:	2300      	movs	r3, #0
 8009482:	b510      	push	{r4, lr}
 8009484:	4604      	mov	r4, r0
 8009486:	e9c0 3300 	strd	r3, r3, [r0]
 800948a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800948e:	6083      	str	r3, [r0, #8]
 8009490:	8181      	strh	r1, [r0, #12]
 8009492:	6643      	str	r3, [r0, #100]	@ 0x64
 8009494:	81c2      	strh	r2, [r0, #14]
 8009496:	6183      	str	r3, [r0, #24]
 8009498:	4619      	mov	r1, r3
 800949a:	2208      	movs	r2, #8
 800949c:	305c      	adds	r0, #92	@ 0x5c
 800949e:	f000 f908 	bl	80096b2 <memset>
 80094a2:	4b0d      	ldr	r3, [pc, #52]	@ (80094d8 <std+0x58>)
 80094a4:	6263      	str	r3, [r4, #36]	@ 0x24
 80094a6:	4b0d      	ldr	r3, [pc, #52]	@ (80094dc <std+0x5c>)
 80094a8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80094aa:	4b0d      	ldr	r3, [pc, #52]	@ (80094e0 <std+0x60>)
 80094ac:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80094ae:	4b0d      	ldr	r3, [pc, #52]	@ (80094e4 <std+0x64>)
 80094b0:	6323      	str	r3, [r4, #48]	@ 0x30
 80094b2:	4b0d      	ldr	r3, [pc, #52]	@ (80094e8 <std+0x68>)
 80094b4:	6224      	str	r4, [r4, #32]
 80094b6:	429c      	cmp	r4, r3
 80094b8:	d006      	beq.n	80094c8 <std+0x48>
 80094ba:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80094be:	4294      	cmp	r4, r2
 80094c0:	d002      	beq.n	80094c8 <std+0x48>
 80094c2:	33d0      	adds	r3, #208	@ 0xd0
 80094c4:	429c      	cmp	r4, r3
 80094c6:	d105      	bne.n	80094d4 <std+0x54>
 80094c8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80094cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80094d0:	f001 b9e8 	b.w	800a8a4 <__retarget_lock_init_recursive>
 80094d4:	bd10      	pop	{r4, pc}
 80094d6:	bf00      	nop
 80094d8:	08009629 	.word	0x08009629
 80094dc:	0800964f 	.word	0x0800964f
 80094e0:	08009687 	.word	0x08009687
 80094e4:	080096ab 	.word	0x080096ab
 80094e8:	200053e8 	.word	0x200053e8

080094ec <stdio_exit_handler>:
 80094ec:	4a02      	ldr	r2, [pc, #8]	@ (80094f8 <stdio_exit_handler+0xc>)
 80094ee:	4903      	ldr	r1, [pc, #12]	@ (80094fc <stdio_exit_handler+0x10>)
 80094f0:	4803      	ldr	r0, [pc, #12]	@ (8009500 <stdio_exit_handler+0x14>)
 80094f2:	f000 b869 	b.w	80095c8 <_fwalk_sglue>
 80094f6:	bf00      	nop
 80094f8:	20000018 	.word	0x20000018
 80094fc:	0800c3e5 	.word	0x0800c3e5
 8009500:	20000030 	.word	0x20000030

08009504 <cleanup_stdio>:
 8009504:	6841      	ldr	r1, [r0, #4]
 8009506:	4b0c      	ldr	r3, [pc, #48]	@ (8009538 <cleanup_stdio+0x34>)
 8009508:	4299      	cmp	r1, r3
 800950a:	b510      	push	{r4, lr}
 800950c:	4604      	mov	r4, r0
 800950e:	d001      	beq.n	8009514 <cleanup_stdio+0x10>
 8009510:	f002 ff68 	bl	800c3e4 <_fflush_r>
 8009514:	68a1      	ldr	r1, [r4, #8]
 8009516:	4b09      	ldr	r3, [pc, #36]	@ (800953c <cleanup_stdio+0x38>)
 8009518:	4299      	cmp	r1, r3
 800951a:	d002      	beq.n	8009522 <cleanup_stdio+0x1e>
 800951c:	4620      	mov	r0, r4
 800951e:	f002 ff61 	bl	800c3e4 <_fflush_r>
 8009522:	68e1      	ldr	r1, [r4, #12]
 8009524:	4b06      	ldr	r3, [pc, #24]	@ (8009540 <cleanup_stdio+0x3c>)
 8009526:	4299      	cmp	r1, r3
 8009528:	d004      	beq.n	8009534 <cleanup_stdio+0x30>
 800952a:	4620      	mov	r0, r4
 800952c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009530:	f002 bf58 	b.w	800c3e4 <_fflush_r>
 8009534:	bd10      	pop	{r4, pc}
 8009536:	bf00      	nop
 8009538:	200053e8 	.word	0x200053e8
 800953c:	20005450 	.word	0x20005450
 8009540:	200054b8 	.word	0x200054b8

08009544 <global_stdio_init.part.0>:
 8009544:	b510      	push	{r4, lr}
 8009546:	4b0b      	ldr	r3, [pc, #44]	@ (8009574 <global_stdio_init.part.0+0x30>)
 8009548:	4c0b      	ldr	r4, [pc, #44]	@ (8009578 <global_stdio_init.part.0+0x34>)
 800954a:	4a0c      	ldr	r2, [pc, #48]	@ (800957c <global_stdio_init.part.0+0x38>)
 800954c:	601a      	str	r2, [r3, #0]
 800954e:	4620      	mov	r0, r4
 8009550:	2200      	movs	r2, #0
 8009552:	2104      	movs	r1, #4
 8009554:	f7ff ff94 	bl	8009480 <std>
 8009558:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800955c:	2201      	movs	r2, #1
 800955e:	2109      	movs	r1, #9
 8009560:	f7ff ff8e 	bl	8009480 <std>
 8009564:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009568:	2202      	movs	r2, #2
 800956a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800956e:	2112      	movs	r1, #18
 8009570:	f7ff bf86 	b.w	8009480 <std>
 8009574:	20005520 	.word	0x20005520
 8009578:	200053e8 	.word	0x200053e8
 800957c:	080094ed 	.word	0x080094ed

08009580 <__sfp_lock_acquire>:
 8009580:	4801      	ldr	r0, [pc, #4]	@ (8009588 <__sfp_lock_acquire+0x8>)
 8009582:	f001 b991 	b.w	800a8a8 <__retarget_lock_acquire_recursive>
 8009586:	bf00      	nop
 8009588:	2000554f 	.word	0x2000554f

0800958c <__sfp_lock_release>:
 800958c:	4801      	ldr	r0, [pc, #4]	@ (8009594 <__sfp_lock_release+0x8>)
 800958e:	f001 b98d 	b.w	800a8ac <__retarget_lock_release_recursive>
 8009592:	bf00      	nop
 8009594:	2000554f 	.word	0x2000554f

08009598 <__sinit>:
 8009598:	b510      	push	{r4, lr}
 800959a:	4604      	mov	r4, r0
 800959c:	f7ff fff0 	bl	8009580 <__sfp_lock_acquire>
 80095a0:	6a23      	ldr	r3, [r4, #32]
 80095a2:	b11b      	cbz	r3, 80095ac <__sinit+0x14>
 80095a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80095a8:	f7ff bff0 	b.w	800958c <__sfp_lock_release>
 80095ac:	4b04      	ldr	r3, [pc, #16]	@ (80095c0 <__sinit+0x28>)
 80095ae:	6223      	str	r3, [r4, #32]
 80095b0:	4b04      	ldr	r3, [pc, #16]	@ (80095c4 <__sinit+0x2c>)
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d1f5      	bne.n	80095a4 <__sinit+0xc>
 80095b8:	f7ff ffc4 	bl	8009544 <global_stdio_init.part.0>
 80095bc:	e7f2      	b.n	80095a4 <__sinit+0xc>
 80095be:	bf00      	nop
 80095c0:	08009505 	.word	0x08009505
 80095c4:	20005520 	.word	0x20005520

080095c8 <_fwalk_sglue>:
 80095c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80095cc:	4607      	mov	r7, r0
 80095ce:	4688      	mov	r8, r1
 80095d0:	4614      	mov	r4, r2
 80095d2:	2600      	movs	r6, #0
 80095d4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80095d8:	f1b9 0901 	subs.w	r9, r9, #1
 80095dc:	d505      	bpl.n	80095ea <_fwalk_sglue+0x22>
 80095de:	6824      	ldr	r4, [r4, #0]
 80095e0:	2c00      	cmp	r4, #0
 80095e2:	d1f7      	bne.n	80095d4 <_fwalk_sglue+0xc>
 80095e4:	4630      	mov	r0, r6
 80095e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80095ea:	89ab      	ldrh	r3, [r5, #12]
 80095ec:	2b01      	cmp	r3, #1
 80095ee:	d907      	bls.n	8009600 <_fwalk_sglue+0x38>
 80095f0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80095f4:	3301      	adds	r3, #1
 80095f6:	d003      	beq.n	8009600 <_fwalk_sglue+0x38>
 80095f8:	4629      	mov	r1, r5
 80095fa:	4638      	mov	r0, r7
 80095fc:	47c0      	blx	r8
 80095fe:	4306      	orrs	r6, r0
 8009600:	3568      	adds	r5, #104	@ 0x68
 8009602:	e7e9      	b.n	80095d8 <_fwalk_sglue+0x10>

08009604 <iprintf>:
 8009604:	b40f      	push	{r0, r1, r2, r3}
 8009606:	b507      	push	{r0, r1, r2, lr}
 8009608:	4906      	ldr	r1, [pc, #24]	@ (8009624 <iprintf+0x20>)
 800960a:	ab04      	add	r3, sp, #16
 800960c:	6808      	ldr	r0, [r1, #0]
 800960e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009612:	6881      	ldr	r1, [r0, #8]
 8009614:	9301      	str	r3, [sp, #4]
 8009616:	f002 fd49 	bl	800c0ac <_vfiprintf_r>
 800961a:	b003      	add	sp, #12
 800961c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009620:	b004      	add	sp, #16
 8009622:	4770      	bx	lr
 8009624:	2000002c 	.word	0x2000002c

08009628 <__sread>:
 8009628:	b510      	push	{r4, lr}
 800962a:	460c      	mov	r4, r1
 800962c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009630:	f001 f8ea 	bl	800a808 <_read_r>
 8009634:	2800      	cmp	r0, #0
 8009636:	bfab      	itete	ge
 8009638:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800963a:	89a3      	ldrhlt	r3, [r4, #12]
 800963c:	181b      	addge	r3, r3, r0
 800963e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009642:	bfac      	ite	ge
 8009644:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009646:	81a3      	strhlt	r3, [r4, #12]
 8009648:	bd10      	pop	{r4, pc}

0800964a <__seofread>:
 800964a:	2000      	movs	r0, #0
 800964c:	4770      	bx	lr

0800964e <__swrite>:
 800964e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009652:	461f      	mov	r7, r3
 8009654:	898b      	ldrh	r3, [r1, #12]
 8009656:	05db      	lsls	r3, r3, #23
 8009658:	4605      	mov	r5, r0
 800965a:	460c      	mov	r4, r1
 800965c:	4616      	mov	r6, r2
 800965e:	d505      	bpl.n	800966c <__swrite+0x1e>
 8009660:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009664:	2302      	movs	r3, #2
 8009666:	2200      	movs	r2, #0
 8009668:	f001 f8bc 	bl	800a7e4 <_lseek_r>
 800966c:	89a3      	ldrh	r3, [r4, #12]
 800966e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009672:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009676:	81a3      	strh	r3, [r4, #12]
 8009678:	4632      	mov	r2, r6
 800967a:	463b      	mov	r3, r7
 800967c:	4628      	mov	r0, r5
 800967e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009682:	f001 b8d3 	b.w	800a82c <_write_r>

08009686 <__sseek>:
 8009686:	b510      	push	{r4, lr}
 8009688:	460c      	mov	r4, r1
 800968a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800968e:	f001 f8a9 	bl	800a7e4 <_lseek_r>
 8009692:	1c43      	adds	r3, r0, #1
 8009694:	89a3      	ldrh	r3, [r4, #12]
 8009696:	bf15      	itete	ne
 8009698:	6560      	strne	r0, [r4, #84]	@ 0x54
 800969a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800969e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80096a2:	81a3      	strheq	r3, [r4, #12]
 80096a4:	bf18      	it	ne
 80096a6:	81a3      	strhne	r3, [r4, #12]
 80096a8:	bd10      	pop	{r4, pc}

080096aa <__sclose>:
 80096aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80096ae:	f001 b82b 	b.w	800a708 <_close_r>

080096b2 <memset>:
 80096b2:	4402      	add	r2, r0
 80096b4:	4603      	mov	r3, r0
 80096b6:	4293      	cmp	r3, r2
 80096b8:	d100      	bne.n	80096bc <memset+0xa>
 80096ba:	4770      	bx	lr
 80096bc:	f803 1b01 	strb.w	r1, [r3], #1
 80096c0:	e7f9      	b.n	80096b6 <memset+0x4>
	...

080096c4 <gmtime>:
 80096c4:	b538      	push	{r3, r4, r5, lr}
 80096c6:	4b0b      	ldr	r3, [pc, #44]	@ (80096f4 <gmtime+0x30>)
 80096c8:	681d      	ldr	r5, [r3, #0]
 80096ca:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 80096cc:	4604      	mov	r4, r0
 80096ce:	b953      	cbnz	r3, 80096e6 <gmtime+0x22>
 80096d0:	2024      	movs	r0, #36	@ 0x24
 80096d2:	f002 f80f 	bl	800b6f4 <malloc>
 80096d6:	4602      	mov	r2, r0
 80096d8:	6368      	str	r0, [r5, #52]	@ 0x34
 80096da:	b920      	cbnz	r0, 80096e6 <gmtime+0x22>
 80096dc:	4b06      	ldr	r3, [pc, #24]	@ (80096f8 <gmtime+0x34>)
 80096de:	4807      	ldr	r0, [pc, #28]	@ (80096fc <gmtime+0x38>)
 80096e0:	213d      	movs	r1, #61	@ 0x3d
 80096e2:	f001 f8ff 	bl	800a8e4 <__assert_func>
 80096e6:	6b69      	ldr	r1, [r5, #52]	@ 0x34
 80096e8:	4620      	mov	r0, r4
 80096ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80096ee:	f000 b807 	b.w	8009700 <gmtime_r>
 80096f2:	bf00      	nop
 80096f4:	2000002c 	.word	0x2000002c
 80096f8:	0800d71c 	.word	0x0800d71c
 80096fc:	0800d7bd 	.word	0x0800d7bd

08009700 <gmtime_r>:
 8009700:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009704:	4a4d      	ldr	r2, [pc, #308]	@ (800983c <gmtime_r+0x13c>)
 8009706:	460c      	mov	r4, r1
 8009708:	2300      	movs	r3, #0
 800970a:	e9d0 0100 	ldrd	r0, r1, [r0]
 800970e:	f7f7 fa7b 	bl	8000c08 <__aeabi_ldivmod>
 8009712:	2a00      	cmp	r2, #0
 8009714:	bfbc      	itt	lt
 8009716:	f502 32a8 	addlt.w	r2, r2, #86016	@ 0x15000
 800971a:	f502 72c0 	addlt.w	r2, r2, #384	@ 0x180
 800971e:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 8009722:	f500 202f 	add.w	r0, r0, #716800	@ 0xaf000
 8009726:	fbb2 f3f1 	udiv	r3, r2, r1
 800972a:	fb01 2213 	mls	r2, r1, r3, r2
 800972e:	f04f 013c 	mov.w	r1, #60	@ 0x3c
 8009732:	bfac      	ite	ge
 8009734:	f600 206c 	addwge	r0, r0, #2668	@ 0xa6c
 8009738:	f600 206b 	addwlt	r0, r0, #2667	@ 0xa6b
 800973c:	60a3      	str	r3, [r4, #8]
 800973e:	fbb2 f3f1 	udiv	r3, r2, r1
 8009742:	fb01 2213 	mls	r2, r1, r3, r2
 8009746:	6063      	str	r3, [r4, #4]
 8009748:	6022      	str	r2, [r4, #0]
 800974a:	1cc3      	adds	r3, r0, #3
 800974c:	2207      	movs	r2, #7
 800974e:	fb93 f2f2 	sdiv	r2, r3, r2
 8009752:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 8009756:	1a9b      	subs	r3, r3, r2
 8009758:	4939      	ldr	r1, [pc, #228]	@ (8009840 <gmtime_r+0x140>)
 800975a:	d555      	bpl.n	8009808 <gmtime_r+0x108>
 800975c:	3307      	adds	r3, #7
 800975e:	61a3      	str	r3, [r4, #24]
 8009760:	f5a0 330e 	sub.w	r3, r0, #145408	@ 0x23800
 8009764:	f5a3 732c 	sub.w	r3, r3, #688	@ 0x2b0
 8009768:	fb93 f1f1 	sdiv	r1, r3, r1
 800976c:	4b35      	ldr	r3, [pc, #212]	@ (8009844 <gmtime_r+0x144>)
 800976e:	fb03 0001 	mla	r0, r3, r1, r0
 8009772:	f648 63ac 	movw	r3, #36524	@ 0x8eac
 8009776:	fbb0 f3f3 	udiv	r3, r0, r3
 800977a:	4403      	add	r3, r0
 800977c:	f240 5cb4 	movw	ip, #1460	@ 0x5b4
 8009780:	fbb0 f2fc 	udiv	r2, r0, ip
 8009784:	1a9b      	subs	r3, r3, r2
 8009786:	f240 176d 	movw	r7, #365	@ 0x16d
 800978a:	4a2f      	ldr	r2, [pc, #188]	@ (8009848 <gmtime_r+0x148>)
 800978c:	fbb0 f2f2 	udiv	r2, r0, r2
 8009790:	2664      	movs	r6, #100	@ 0x64
 8009792:	1a9b      	subs	r3, r3, r2
 8009794:	fbb3 f2f7 	udiv	r2, r3, r7
 8009798:	fbb3 f3fc 	udiv	r3, r3, ip
 800979c:	fbb2 f5f6 	udiv	r5, r2, r6
 80097a0:	1aeb      	subs	r3, r5, r3
 80097a2:	4403      	add	r3, r0
 80097a4:	fb07 3312 	mls	r3, r7, r2, r3
 80097a8:	2099      	movs	r0, #153	@ 0x99
 80097aa:	eb03 0783 	add.w	r7, r3, r3, lsl #2
 80097ae:	3702      	adds	r7, #2
 80097b0:	f103 0e01 	add.w	lr, r3, #1
 80097b4:	fbb7 fcf0 	udiv	ip, r7, r0
 80097b8:	fb00 f00c 	mul.w	r0, r0, ip
 80097bc:	3002      	adds	r0, #2
 80097be:	f04f 0805 	mov.w	r8, #5
 80097c2:	fbb0 f0f8 	udiv	r0, r0, r8
 80097c6:	ebae 0000 	sub.w	r0, lr, r0
 80097ca:	f240 5ef9 	movw	lr, #1529	@ 0x5f9
 80097ce:	4577      	cmp	r7, lr
 80097d0:	bf8c      	ite	hi
 80097d2:	f06f 0709 	mvnhi.w	r7, #9
 80097d6:	2702      	movls	r7, #2
 80097d8:	4467      	add	r7, ip
 80097da:	f44f 7cc8 	mov.w	ip, #400	@ 0x190
 80097de:	fb0c 2101 	mla	r1, ip, r1, r2
 80097e2:	2f01      	cmp	r7, #1
 80097e4:	bf98      	it	ls
 80097e6:	3101      	addls	r1, #1
 80097e8:	f5b3 7f99 	cmp.w	r3, #306	@ 0x132
 80097ec:	d312      	bcc.n	8009814 <gmtime_r+0x114>
 80097ee:	f5a3 7399 	sub.w	r3, r3, #306	@ 0x132
 80097f2:	61e3      	str	r3, [r4, #28]
 80097f4:	f2a1 716c 	subw	r1, r1, #1900	@ 0x76c
 80097f8:	2300      	movs	r3, #0
 80097fa:	60e0      	str	r0, [r4, #12]
 80097fc:	e9c4 7104 	strd	r7, r1, [r4, #16]
 8009800:	6223      	str	r3, [r4, #32]
 8009802:	4620      	mov	r0, r4
 8009804:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009808:	2800      	cmp	r0, #0
 800980a:	61a3      	str	r3, [r4, #24]
 800980c:	dba8      	blt.n	8009760 <gmtime_r+0x60>
 800980e:	fb90 f1f1 	sdiv	r1, r0, r1
 8009812:	e7ab      	b.n	800976c <gmtime_r+0x6c>
 8009814:	f012 0f03 	tst.w	r2, #3
 8009818:	d102      	bne.n	8009820 <gmtime_r+0x120>
 800981a:	fb06 2515 	mls	r5, r6, r5, r2
 800981e:	b95d      	cbnz	r5, 8009838 <gmtime_r+0x138>
 8009820:	f44f 75c8 	mov.w	r5, #400	@ 0x190
 8009824:	fbb2 f6f5 	udiv	r6, r2, r5
 8009828:	fb05 2216 	mls	r2, r5, r6, r2
 800982c:	fab2 f282 	clz	r2, r2
 8009830:	0952      	lsrs	r2, r2, #5
 8009832:	333b      	adds	r3, #59	@ 0x3b
 8009834:	4413      	add	r3, r2
 8009836:	e7dc      	b.n	80097f2 <gmtime_r+0xf2>
 8009838:	2201      	movs	r2, #1
 800983a:	e7fa      	b.n	8009832 <gmtime_r+0x132>
 800983c:	00015180 	.word	0x00015180
 8009840:	00023ab1 	.word	0x00023ab1
 8009844:	fffdc54f 	.word	0xfffdc54f
 8009848:	00023ab0 	.word	0x00023ab0

0800984c <iso_year_adjust>:
 800984c:	6942      	ldr	r2, [r0, #20]
 800984e:	2a00      	cmp	r2, #0
 8009850:	f240 736c 	movw	r3, #1900	@ 0x76c
 8009854:	bfa8      	it	ge
 8009856:	f06f 0363 	mvnge.w	r3, #99	@ 0x63
 800985a:	4413      	add	r3, r2
 800985c:	0792      	lsls	r2, r2, #30
 800985e:	d105      	bne.n	800986c <iso_year_adjust+0x20>
 8009860:	2164      	movs	r1, #100	@ 0x64
 8009862:	fb93 f2f1 	sdiv	r2, r3, r1
 8009866:	fb01 3212 	mls	r2, r1, r2, r3
 800986a:	b9ca      	cbnz	r2, 80098a0 <iso_year_adjust+0x54>
 800986c:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8009870:	fb93 f1f2 	sdiv	r1, r3, r2
 8009874:	fb02 3311 	mls	r3, r2, r1, r3
 8009878:	fab3 f383 	clz	r3, r3
 800987c:	095b      	lsrs	r3, r3, #5
 800987e:	e9d0 0206 	ldrd	r0, r2, [r0, #24]
 8009882:	0040      	lsls	r0, r0, #1
 8009884:	eb00 1002 	add.w	r0, r0, r2, lsl #4
 8009888:	4418      	add	r0, r3
 800988a:	f241 63a2 	movw	r3, #5794	@ 0x16a2
 800988e:	4298      	cmp	r0, r3
 8009890:	d027      	beq.n	80098e2 <iso_year_adjust+0x96>
 8009892:	dc11      	bgt.n	80098b8 <iso_year_adjust+0x6c>
 8009894:	2801      	cmp	r0, #1
 8009896:	dc0a      	bgt.n	80098ae <iso_year_adjust+0x62>
 8009898:	43c0      	mvns	r0, r0
 800989a:	0fc0      	lsrs	r0, r0, #31
 800989c:	4240      	negs	r0, r0
 800989e:	4770      	bx	lr
 80098a0:	2301      	movs	r3, #1
 80098a2:	e7ec      	b.n	800987e <iso_year_adjust+0x32>
 80098a4:	4b10      	ldr	r3, [pc, #64]	@ (80098e8 <iso_year_adjust+0x9c>)
 80098a6:	40c3      	lsrs	r3, r0
 80098a8:	f343 0000 	sbfx	r0, r3, #0, #1
 80098ac:	4770      	bx	lr
 80098ae:	380a      	subs	r0, #10
 80098b0:	2817      	cmp	r0, #23
 80098b2:	d9f7      	bls.n	80098a4 <iso_year_adjust+0x58>
 80098b4:	2000      	movs	r0, #0
 80098b6:	4770      	bx	lr
 80098b8:	f241 63b4 	movw	r3, #5812	@ 0x16b4
 80098bc:	4298      	cmp	r0, r3
 80098be:	dc06      	bgt.n	80098ce <iso_year_adjust+0x82>
 80098c0:	f241 63b1 	movw	r3, #5809	@ 0x16b1
 80098c4:	4298      	cmp	r0, r3
 80098c6:	bfd4      	ite	le
 80098c8:	2000      	movle	r0, #0
 80098ca:	2001      	movgt	r0, #1
 80098cc:	4770      	bx	lr
 80098ce:	f5a0 50b6 	sub.w	r0, r0, #5824	@ 0x16c0
 80098d2:	3802      	subs	r0, #2
 80098d4:	2815      	cmp	r0, #21
 80098d6:	d8ed      	bhi.n	80098b4 <iso_year_adjust+0x68>
 80098d8:	4b04      	ldr	r3, [pc, #16]	@ (80098ec <iso_year_adjust+0xa0>)
 80098da:	40c3      	lsrs	r3, r0
 80098dc:	f003 0001 	and.w	r0, r3, #1
 80098e0:	4770      	bx	lr
 80098e2:	2001      	movs	r0, #1
 80098e4:	4770      	bx	lr
 80098e6:	bf00      	nop
 80098e8:	00cc00cf 	.word	0x00cc00cf
 80098ec:	002a001f 	.word	0x002a001f

080098f0 <__strftime.isra.0>:
 80098f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098f4:	b08f      	sub	sp, #60	@ 0x3c
 80098f6:	461e      	mov	r6, r3
 80098f8:	2300      	movs	r3, #0
 80098fa:	4607      	mov	r7, r0
 80098fc:	460d      	mov	r5, r1
 80098fe:	9302      	str	r3, [sp, #8]
 8009900:	461c      	mov	r4, r3
 8009902:	7813      	ldrb	r3, [r2, #0]
 8009904:	2b00      	cmp	r3, #0
 8009906:	f000 84ad 	beq.w	800a264 <__strftime.isra.0+0x974>
 800990a:	2b25      	cmp	r3, #37	@ 0x25
 800990c:	d11f      	bne.n	800994e <__strftime.isra.0+0x5e>
 800990e:	f892 9001 	ldrb.w	r9, [r2, #1]
 8009912:	f1b9 0f30 	cmp.w	r9, #48	@ 0x30
 8009916:	d024      	beq.n	8009962 <__strftime.isra.0+0x72>
 8009918:	f1b9 0f2b 	cmp.w	r9, #43	@ 0x2b
 800991c:	d021      	beq.n	8009962 <__strftime.isra.0+0x72>
 800991e:	f102 0801 	add.w	r8, r2, #1
 8009922:	f04f 0900 	mov.w	r9, #0
 8009926:	f898 2000 	ldrb.w	r2, [r8]
 800992a:	3a31      	subs	r2, #49	@ 0x31
 800992c:	2a08      	cmp	r2, #8
 800992e:	d81b      	bhi.n	8009968 <__strftime.isra.0+0x78>
 8009930:	220a      	movs	r2, #10
 8009932:	4640      	mov	r0, r8
 8009934:	a906      	add	r1, sp, #24
 8009936:	f002 fb85 	bl	800c044 <strtoul>
 800993a:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800993e:	4602      	mov	r2, r0
 8009940:	f898 1000 	ldrb.w	r1, [r8]
 8009944:	2945      	cmp	r1, #69	@ 0x45
 8009946:	d111      	bne.n	800996c <__strftime.isra.0+0x7c>
 8009948:	f108 0801 	add.w	r8, r8, #1
 800994c:	e010      	b.n	8009970 <__strftime.isra.0+0x80>
 800994e:	1e69      	subs	r1, r5, #1
 8009950:	42a1      	cmp	r1, r4
 8009952:	f240 815d 	bls.w	8009c10 <__strftime.isra.0+0x320>
 8009956:	553b      	strb	r3, [r7, r4]
 8009958:	3201      	adds	r2, #1
 800995a:	f104 0a01 	add.w	sl, r4, #1
 800995e:	4654      	mov	r4, sl
 8009960:	e7cf      	b.n	8009902 <__strftime.isra.0+0x12>
 8009962:	f102 0802 	add.w	r8, r2, #2
 8009966:	e7de      	b.n	8009926 <__strftime.isra.0+0x36>
 8009968:	2200      	movs	r2, #0
 800996a:	e7e9      	b.n	8009940 <__strftime.isra.0+0x50>
 800996c:	294f      	cmp	r1, #79	@ 0x4f
 800996e:	d0eb      	beq.n	8009948 <__strftime.isra.0+0x58>
 8009970:	f898 0000 	ldrb.w	r0, [r8]
 8009974:	f1a0 0125 	sub.w	r1, r0, #37	@ 0x25
 8009978:	2955      	cmp	r1, #85	@ 0x55
 800997a:	f200 8149 	bhi.w	8009c10 <__strftime.isra.0+0x320>
 800997e:	e8df f011 	tbh	[pc, r1, lsl #1]
 8009982:	0469      	.short	0x0469
 8009984:	01470147 	.word	0x01470147
 8009988:	01470147 	.word	0x01470147
 800998c:	01470147 	.word	0x01470147
 8009990:	01470147 	.word	0x01470147
 8009994:	01470147 	.word	0x01470147
 8009998:	01470147 	.word	0x01470147
 800999c:	01470147 	.word	0x01470147
 80099a0:	01470147 	.word	0x01470147
 80099a4:	01470147 	.word	0x01470147
 80099a8:	01470147 	.word	0x01470147
 80099ac:	01470147 	.word	0x01470147
 80099b0:	01470147 	.word	0x01470147
 80099b4:	01470147 	.word	0x01470147
 80099b8:	00750147 	.word	0x00750147
 80099bc:	00dc00a3 	.word	0x00dc00a3
 80099c0:	01470128 	.word	0x01470128
 80099c4:	01cb0159 	.word	0x01cb0159
 80099c8:	024c0245 	.word	0x024c0245
 80099cc:	01470147 	.word	0x01470147
 80099d0:	02640147 	.word	0x02640147
 80099d4:	01470147 	.word	0x01470147
 80099d8:	0147026f 	.word	0x0147026f
 80099dc:	0327029f 	.word	0x0327029f
 80099e0:	035b0331 	.word	0x035b0331
 80099e4:	03c90363 	.word	0x03c90363
 80099e8:	03df00d8 	.word	0x03df00d8
 80099ec:	0147043f 	.word	0x0147043f
 80099f0:	01470147 	.word	0x01470147
 80099f4:	01470147 	.word	0x01470147
 80099f8:	00560147 	.word	0x00560147
 80099fc:	00ba008d 	.word	0x00ba008d
 8009a00:	011d011d 	.word	0x011d011d
 8009a04:	017e0147 	.word	0x017e0147
 8009a08:	0147008d 	.word	0x0147008d
 8009a0c:	0245025d 	.word	0x0245025d
 8009a10:	0261024c 	.word	0x0261024c
 8009a14:	01470266 	.word	0x01470266
 8009a18:	0298026f 	.word	0x0298026f
 8009a1c:	02a800d0 	.word	0x02a800d0
 8009a20:	03380329 	.word	0x03380329
 8009a24:	03c00395 	.word	0x03c00395
 8009a28:	03d100d4 	.word	0x03d100d4
 8009a2c:	0402      	.short	0x0402
 8009a2e:	69b3      	ldr	r3, [r6, #24]
 8009a30:	4aad      	ldr	r2, [pc, #692]	@ (8009ce8 <__strftime.isra.0+0x3f8>)
 8009a32:	3318      	adds	r3, #24
 8009a34:	f852 b023 	ldr.w	fp, [r2, r3, lsl #2]
 8009a38:	4658      	mov	r0, fp
 8009a3a:	f7f6 fc49 	bl	80002d0 <strlen>
 8009a3e:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 8009a42:	eb04 0a00 	add.w	sl, r4, r0
 8009a46:	1e6b      	subs	r3, r5, #1
 8009a48:	45a2      	cmp	sl, r4
 8009a4a:	d107      	bne.n	8009a5c <__strftime.isra.0+0x16c>
 8009a4c:	f898 3000 	ldrb.w	r3, [r8]
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	f000 8408 	beq.w	800a266 <__strftime.isra.0+0x976>
 8009a56:	f108 0201 	add.w	r2, r8, #1
 8009a5a:	e780      	b.n	800995e <__strftime.isra.0+0x6e>
 8009a5c:	42a3      	cmp	r3, r4
 8009a5e:	f240 80d7 	bls.w	8009c10 <__strftime.isra.0+0x320>
 8009a62:	f81b 2f01 	ldrb.w	r2, [fp, #1]!
 8009a66:	553a      	strb	r2, [r7, r4]
 8009a68:	3401      	adds	r4, #1
 8009a6a:	e7ed      	b.n	8009a48 <__strftime.isra.0+0x158>
 8009a6c:	69b2      	ldr	r2, [r6, #24]
 8009a6e:	4b9e      	ldr	r3, [pc, #632]	@ (8009ce8 <__strftime.isra.0+0x3f8>)
 8009a70:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8009a74:	f8d3 b07c 	ldr.w	fp, [r3, #124]	@ 0x7c
 8009a78:	4658      	mov	r0, fp
 8009a7a:	f7f6 fc29 	bl	80002d0 <strlen>
 8009a7e:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 8009a82:	eb04 0a00 	add.w	sl, r4, r0
 8009a86:	1e6b      	subs	r3, r5, #1
 8009a88:	45a2      	cmp	sl, r4
 8009a8a:	d0df      	beq.n	8009a4c <__strftime.isra.0+0x15c>
 8009a8c:	42a3      	cmp	r3, r4
 8009a8e:	f240 80bf 	bls.w	8009c10 <__strftime.isra.0+0x320>
 8009a92:	f81b 2f01 	ldrb.w	r2, [fp, #1]!
 8009a96:	553a      	strb	r2, [r7, r4]
 8009a98:	3401      	adds	r4, #1
 8009a9a:	e7f5      	b.n	8009a88 <__strftime.isra.0+0x198>
 8009a9c:	4b92      	ldr	r3, [pc, #584]	@ (8009ce8 <__strftime.isra.0+0x3f8>)
 8009a9e:	6932      	ldr	r2, [r6, #16]
 8009aa0:	f853 b022 	ldr.w	fp, [r3, r2, lsl #2]
 8009aa4:	4658      	mov	r0, fp
 8009aa6:	f7f6 fc13 	bl	80002d0 <strlen>
 8009aaa:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 8009aae:	eb04 0a00 	add.w	sl, r4, r0
 8009ab2:	1e6b      	subs	r3, r5, #1
 8009ab4:	45a2      	cmp	sl, r4
 8009ab6:	d0c9      	beq.n	8009a4c <__strftime.isra.0+0x15c>
 8009ab8:	42a3      	cmp	r3, r4
 8009aba:	f240 80a9 	bls.w	8009c10 <__strftime.isra.0+0x320>
 8009abe:	f81b 2f01 	ldrb.w	r2, [fp, #1]!
 8009ac2:	553a      	strb	r2, [r7, r4]
 8009ac4:	3401      	adds	r4, #1
 8009ac6:	e7f5      	b.n	8009ab4 <__strftime.isra.0+0x1c4>
 8009ac8:	6933      	ldr	r3, [r6, #16]
 8009aca:	4a87      	ldr	r2, [pc, #540]	@ (8009ce8 <__strftime.isra.0+0x3f8>)
 8009acc:	330c      	adds	r3, #12
 8009ace:	f852 b023 	ldr.w	fp, [r2, r3, lsl #2]
 8009ad2:	4658      	mov	r0, fp
 8009ad4:	f7f6 fbfc 	bl	80002d0 <strlen>
 8009ad8:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 8009adc:	eb04 0a00 	add.w	sl, r4, r0
 8009ae0:	1e6b      	subs	r3, r5, #1
 8009ae2:	45a2      	cmp	sl, r4
 8009ae4:	d0b2      	beq.n	8009a4c <__strftime.isra.0+0x15c>
 8009ae6:	42a3      	cmp	r3, r4
 8009ae8:	f240 8092 	bls.w	8009c10 <__strftime.isra.0+0x320>
 8009aec:	f81b 2f01 	ldrb.w	r2, [fp, #1]!
 8009af0:	553a      	strb	r2, [r7, r4]
 8009af2:	3401      	adds	r4, #1
 8009af4:	e7f5      	b.n	8009ae2 <__strftime.isra.0+0x1f2>
 8009af6:	4b7c      	ldr	r3, [pc, #496]	@ (8009ce8 <__strftime.isra.0+0x3f8>)
 8009af8:	f8d3 a0a0 	ldr.w	sl, [r3, #160]	@ 0xa0
 8009afc:	4650      	mov	r0, sl
 8009afe:	f7f6 fbe7 	bl	80002d0 <strlen>
 8009b02:	f89a 3000 	ldrb.w	r3, [sl]
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	f000 8340 	beq.w	800a18c <__strftime.isra.0+0x89c>
 8009b0c:	4633      	mov	r3, r6
 8009b0e:	4652      	mov	r2, sl
 8009b10:	1b29      	subs	r1, r5, r4
 8009b12:	1938      	adds	r0, r7, r4
 8009b14:	f7ff feec 	bl	80098f0 <__strftime.isra.0>
 8009b18:	2800      	cmp	r0, #0
 8009b1a:	dd79      	ble.n	8009c10 <__strftime.isra.0+0x320>
 8009b1c:	eb04 0a00 	add.w	sl, r4, r0
 8009b20:	e794      	b.n	8009a4c <__strftime.isra.0+0x15c>
 8009b22:	4b71      	ldr	r3, [pc, #452]	@ (8009ce8 <__strftime.isra.0+0x3f8>)
 8009b24:	f8d3 a0e4 	ldr.w	sl, [r3, #228]	@ 0xe4
 8009b28:	e7e8      	b.n	8009afc <__strftime.isra.0+0x20c>
 8009b2a:	4b6f      	ldr	r3, [pc, #444]	@ (8009ce8 <__strftime.isra.0+0x3f8>)
 8009b2c:	f8d3 a09c 	ldr.w	sl, [r3, #156]	@ 0x9c
 8009b30:	e7e4      	b.n	8009afc <__strftime.isra.0+0x20c>
 8009b32:	4b6d      	ldr	r3, [pc, #436]	@ (8009ce8 <__strftime.isra.0+0x3f8>)
 8009b34:	f8d3 a098 	ldr.w	sl, [r3, #152]	@ 0x98
 8009b38:	e7e0      	b.n	8009afc <__strftime.isra.0+0x20c>
 8009b3a:	f8d6 a014 	ldr.w	sl, [r6, #20]
 8009b3e:	496b      	ldr	r1, [pc, #428]	@ (8009cec <__strftime.isra.0+0x3fc>)
 8009b40:	458a      	cmp	sl, r1
 8009b42:	bfac      	ite	ge
 8009b44:	f04f 0b00 	movge.w	fp, #0
 8009b48:	f04f 0b01 	movlt.w	fp, #1
 8009b4c:	f1ba 0f00 	cmp.w	sl, #0
 8009b50:	db12      	blt.n	8009b78 <__strftime.isra.0+0x288>
 8009b52:	2064      	movs	r0, #100	@ 0x64
 8009b54:	fb9a f0f0 	sdiv	r0, sl, r0
 8009b58:	3013      	adds	r0, #19
 8009b5a:	f1b9 0f00 	cmp.w	r9, #0
 8009b5e:	d015      	beq.n	8009b8c <__strftime.isra.0+0x29c>
 8009b60:	2863      	cmp	r0, #99	@ 0x63
 8009b62:	dd28      	ble.n	8009bb6 <__strftime.isra.0+0x2c6>
 8009b64:	4b62      	ldr	r3, [pc, #392]	@ (8009cf0 <__strftime.isra.0+0x400>)
 8009b66:	4963      	ldr	r1, [pc, #396]	@ (8009cf4 <__strftime.isra.0+0x404>)
 8009b68:	f1b9 0f2b 	cmp.w	r9, #43	@ 0x2b
 8009b6c:	bf0c      	ite	eq
 8009b6e:	469c      	moveq	ip, r3
 8009b70:	468c      	movne	ip, r1
 8009b72:	f8df e19c 	ldr.w	lr, [pc, #412]	@ 8009d10 <__strftime.isra.0+0x420>
 8009b76:	e00d      	b.n	8009b94 <__strftime.isra.0+0x2a4>
 8009b78:	f20a 706c 	addw	r0, sl, #1900	@ 0x76c
 8009b7c:	9203      	str	r2, [sp, #12]
 8009b7e:	f000 feac 	bl	800a8da <abs>
 8009b82:	2164      	movs	r1, #100	@ 0x64
 8009b84:	9a03      	ldr	r2, [sp, #12]
 8009b86:	fb90 f0f1 	sdiv	r0, r0, r1
 8009b8a:	e7e6      	b.n	8009b5a <__strftime.isra.0+0x26a>
 8009b8c:	f8df c164 	ldr.w	ip, [pc, #356]	@ 8009cf4 <__strftime.isra.0+0x404>
 8009b90:	f8df e180 	ldr.w	lr, [pc, #384]	@ 8009d14 <__strftime.isra.0+0x424>
 8009b94:	4b58      	ldr	r3, [pc, #352]	@ (8009cf8 <__strftime.isra.0+0x408>)
 8009b96:	9001      	str	r0, [sp, #4]
 8009b98:	2a02      	cmp	r2, #2
 8009b9a:	bf2c      	ite	cs
 8009b9c:	ebcb 0102 	rsbcs	r1, fp, r2
 8009ba0:	f1cb 0102 	rsbcc	r1, fp, #2
 8009ba4:	4a51      	ldr	r2, [pc, #324]	@ (8009cec <__strftime.isra.0+0x3fc>)
 8009ba6:	9100      	str	r1, [sp, #0]
 8009ba8:	4592      	cmp	sl, r2
 8009baa:	bfa8      	it	ge
 8009bac:	4663      	movge	r3, ip
 8009bae:	4672      	mov	r2, lr
 8009bb0:	1b29      	subs	r1, r5, r4
 8009bb2:	1938      	adds	r0, r7, r4
 8009bb4:	e023      	b.n	8009bfe <__strftime.isra.0+0x30e>
 8009bb6:	f8df c13c 	ldr.w	ip, [pc, #316]	@ 8009cf4 <__strftime.isra.0+0x404>
 8009bba:	e7da      	b.n	8009b72 <__strftime.isra.0+0x282>
 8009bbc:	494f      	ldr	r1, [pc, #316]	@ (8009cfc <__strftime.isra.0+0x40c>)
 8009bbe:	4a50      	ldr	r2, [pc, #320]	@ (8009d00 <__strftime.isra.0+0x410>)
 8009bc0:	68f3      	ldr	r3, [r6, #12]
 8009bc2:	2864      	cmp	r0, #100	@ 0x64
 8009bc4:	bf18      	it	ne
 8009bc6:	460a      	movne	r2, r1
 8009bc8:	1b29      	subs	r1, r5, r4
 8009bca:	1938      	adds	r0, r7, r4
 8009bcc:	f002 fc44 	bl	800c458 <sniprintf>
 8009bd0:	e017      	b.n	8009c02 <__strftime.isra.0+0x312>
 8009bd2:	6970      	ldr	r0, [r6, #20]
 8009bd4:	6933      	ldr	r3, [r6, #16]
 8009bd6:	2800      	cmp	r0, #0
 8009bd8:	f103 0a01 	add.w	sl, r3, #1
 8009bdc:	eb07 0b04 	add.w	fp, r7, r4
 8009be0:	68f3      	ldr	r3, [r6, #12]
 8009be2:	eba5 0904 	sub.w	r9, r5, r4
 8009be6:	db19      	blt.n	8009c1c <__strftime.isra.0+0x32c>
 8009be8:	2264      	movs	r2, #100	@ 0x64
 8009bea:	fb90 fcf2 	sdiv	ip, r0, r2
 8009bee:	fb02 001c 	mls	r0, r2, ip, r0
 8009bf2:	4a44      	ldr	r2, [pc, #272]	@ (8009d04 <__strftime.isra.0+0x414>)
 8009bf4:	e9cd 3000 	strd	r3, r0, [sp]
 8009bf8:	4649      	mov	r1, r9
 8009bfa:	4653      	mov	r3, sl
 8009bfc:	4658      	mov	r0, fp
 8009bfe:	f002 fc2b 	bl	800c458 <sniprintf>
 8009c02:	2800      	cmp	r0, #0
 8009c04:	db04      	blt.n	8009c10 <__strftime.isra.0+0x320>
 8009c06:	eb00 0a04 	add.w	sl, r0, r4
 8009c0a:	4555      	cmp	r5, sl
 8009c0c:	f63f af1e 	bhi.w	8009a4c <__strftime.isra.0+0x15c>
 8009c10:	f04f 0a00 	mov.w	sl, #0
 8009c14:	4650      	mov	r0, sl
 8009c16:	b00f      	add	sp, #60	@ 0x3c
 8009c18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c1c:	f200 706c 	addw	r0, r0, #1900	@ 0x76c
 8009c20:	9303      	str	r3, [sp, #12]
 8009c22:	f000 fe5a 	bl	800a8da <abs>
 8009c26:	2264      	movs	r2, #100	@ 0x64
 8009c28:	9b03      	ldr	r3, [sp, #12]
 8009c2a:	fb90 fcf2 	sdiv	ip, r0, r2
 8009c2e:	fb0c 0012 	mls	r0, ip, r2, r0
 8009c32:	e7de      	b.n	8009bf2 <__strftime.isra.0+0x302>
 8009c34:	2125      	movs	r1, #37	@ 0x25
 8009c36:	f88d 1018 	strb.w	r1, [sp, #24]
 8009c3a:	f1b9 0f00 	cmp.w	r9, #0
 8009c3e:	d00b      	beq.n	8009c58 <__strftime.isra.0+0x368>
 8009c40:	2a05      	cmp	r2, #5
 8009c42:	f88d 9019 	strb.w	r9, [sp, #25]
 8009c46:	d817      	bhi.n	8009c78 <__strftime.isra.0+0x388>
 8009c48:	f10d 001a 	add.w	r0, sp, #26
 8009c4c:	492e      	ldr	r1, [pc, #184]	@ (8009d08 <__strftime.isra.0+0x418>)
 8009c4e:	f000 fe2e 	bl	800a8ae <strcpy>
 8009c52:	4633      	mov	r3, r6
 8009c54:	aa06      	add	r2, sp, #24
 8009c56:	e75b      	b.n	8009b10 <__strftime.isra.0+0x220>
 8009c58:	232b      	movs	r3, #43	@ 0x2b
 8009c5a:	f88d 3019 	strb.w	r3, [sp, #25]
 8009c5e:	2304      	movs	r3, #4
 8009c60:	4a2a      	ldr	r2, [pc, #168]	@ (8009d0c <__strftime.isra.0+0x41c>)
 8009c62:	211e      	movs	r1, #30
 8009c64:	f10d 001a 	add.w	r0, sp, #26
 8009c68:	f002 fbf6 	bl	800c458 <sniprintf>
 8009c6c:	2800      	cmp	r0, #0
 8009c6e:	ddeb      	ble.n	8009c48 <__strftime.isra.0+0x358>
 8009c70:	f10d 031a 	add.w	r3, sp, #26
 8009c74:	4418      	add	r0, r3
 8009c76:	e7e9      	b.n	8009c4c <__strftime.isra.0+0x35c>
 8009c78:	1f93      	subs	r3, r2, #6
 8009c7a:	d0e5      	beq.n	8009c48 <__strftime.isra.0+0x358>
 8009c7c:	e7f0      	b.n	8009c60 <__strftime.isra.0+0x370>
 8009c7e:	4630      	mov	r0, r6
 8009c80:	f7ff fde4 	bl	800984c <iso_year_adjust>
 8009c84:	4682      	mov	sl, r0
 8009c86:	6970      	ldr	r0, [r6, #20]
 8009c88:	2800      	cmp	r0, #0
 8009c8a:	db11      	blt.n	8009cb0 <__strftime.isra.0+0x3c0>
 8009c8c:	2364      	movs	r3, #100	@ 0x64
 8009c8e:	fb90 f2f3 	sdiv	r2, r0, r3
 8009c92:	fb03 0012 	mls	r0, r3, r2, r0
 8009c96:	2364      	movs	r3, #100	@ 0x64
 8009c98:	4482      	add	sl, r0
 8009c9a:	fb9a f2f3 	sdiv	r2, sl, r3
 8009c9e:	fb03 aa12 	mls	sl, r3, r2, sl
 8009ca2:	449a      	add	sl, r3
 8009ca4:	fbba f2f3 	udiv	r2, sl, r3
 8009ca8:	fb03 a312 	mls	r3, r3, r2, sl
 8009cac:	4a14      	ldr	r2, [pc, #80]	@ (8009d00 <__strftime.isra.0+0x410>)
 8009cae:	e78b      	b.n	8009bc8 <__strftime.isra.0+0x2d8>
 8009cb0:	f200 706c 	addw	r0, r0, #1900	@ 0x76c
 8009cb4:	f000 fe11 	bl	800a8da <abs>
 8009cb8:	2364      	movs	r3, #100	@ 0x64
 8009cba:	f1ba 0f00 	cmp.w	sl, #0
 8009cbe:	fb90 f2f3 	sdiv	r2, r0, r3
 8009cc2:	fb02 0013 	mls	r0, r2, r3, r0
 8009cc6:	da07      	bge.n	8009cd8 <__strftime.isra.0+0x3e8>
 8009cc8:	6972      	ldr	r2, [r6, #20]
 8009cca:	f2a3 73cf 	subw	r3, r3, #1999	@ 0x7cf
 8009cce:	429a      	cmp	r2, r3
 8009cd0:	bfb8      	it	lt
 8009cd2:	f04f 0a01 	movlt.w	sl, #1
 8009cd6:	e7de      	b.n	8009c96 <__strftime.isra.0+0x3a6>
 8009cd8:	d0dd      	beq.n	8009c96 <__strftime.isra.0+0x3a6>
 8009cda:	6972      	ldr	r2, [r6, #20]
 8009cdc:	4b03      	ldr	r3, [pc, #12]	@ (8009cec <__strftime.isra.0+0x3fc>)
 8009cde:	429a      	cmp	r2, r3
 8009ce0:	bfb8      	it	lt
 8009ce2:	f04f 3aff 	movlt.w	sl, #4294967295	@ 0xffffffff
 8009ce6:	e7d6      	b.n	8009c96 <__strftime.isra.0+0x3a6>
 8009ce8:	0800db38 	.word	0x0800db38
 8009cec:	fffff894 	.word	0xfffff894
 8009cf0:	0800d824 	.word	0x0800d824
 8009cf4:	0800da2f 	.word	0x0800da2f
 8009cf8:	0800db2d 	.word	0x0800db2d
 8009cfc:	0800d826 	.word	0x0800d826
 8009d00:	0800d834 	.word	0x0800d834
 8009d04:	0800d82a 	.word	0x0800d82a
 8009d08:	0800d83d 	.word	0x0800d83d
 8009d0c:	0800d839 	.word	0x0800d839
 8009d10:	0800d81c 	.word	0x0800d81c
 8009d14:	0800d815 	.word	0x0800d815
 8009d18:	6971      	ldr	r1, [r6, #20]
 8009d1a:	48bc      	ldr	r0, [pc, #752]	@ (800a00c <__strftime.isra.0+0x71c>)
 8009d1c:	9205      	str	r2, [sp, #20]
 8009d1e:	4281      	cmp	r1, r0
 8009d20:	bfac      	ite	ge
 8009d22:	2300      	movge	r3, #0
 8009d24:	2301      	movlt	r3, #1
 8009d26:	4630      	mov	r0, r6
 8009d28:	e9cd 3103 	strd	r3, r1, [sp, #12]
 8009d2c:	f7ff fd8e 	bl	800984c <iso_year_adjust>
 8009d30:	9904      	ldr	r1, [sp, #16]
 8009d32:	9a05      	ldr	r2, [sp, #20]
 8009d34:	2900      	cmp	r1, #0
 8009d36:	4682      	mov	sl, r0
 8009d38:	db39      	blt.n	8009dae <__strftime.isra.0+0x4be>
 8009d3a:	f04f 0b64 	mov.w	fp, #100	@ 0x64
 8009d3e:	fb91 fbfb 	sdiv	fp, r1, fp
 8009d42:	f10b 0b13 	add.w	fp, fp, #19
 8009d46:	6970      	ldr	r0, [r6, #20]
 8009d48:	2800      	cmp	r0, #0
 8009d4a:	db3d      	blt.n	8009dc8 <__strftime.isra.0+0x4d8>
 8009d4c:	f04f 0c64 	mov.w	ip, #100	@ 0x64
 8009d50:	fb90 fefc 	sdiv	lr, r0, ip
 8009d54:	fb0c 001e 	mls	r0, ip, lr, r0
 8009d58:	f1ba 0f00 	cmp.w	sl, #0
 8009d5c:	da43      	bge.n	8009de6 <__strftime.isra.0+0x4f6>
 8009d5e:	6971      	ldr	r1, [r6, #20]
 8009d60:	4bab      	ldr	r3, [pc, #684]	@ (800a010 <__strftime.isra.0+0x720>)
 8009d62:	4299      	cmp	r1, r3
 8009d64:	da03      	bge.n	8009d6e <__strftime.isra.0+0x47e>
 8009d66:	f04f 0a01 	mov.w	sl, #1
 8009d6a:	f8cd a00c 	str.w	sl, [sp, #12]
 8009d6e:	4482      	add	sl, r0
 8009d70:	f1ba 3fff 	cmp.w	sl, #4294967295	@ 0xffffffff
 8009d74:	d142      	bne.n	8009dfc <__strftime.isra.0+0x50c>
 8009d76:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 8009d7a:	f04f 0a63 	mov.w	sl, #99	@ 0x63
 8009d7e:	9b03      	ldr	r3, [sp, #12]
 8009d80:	2164      	movs	r1, #100	@ 0x64
 8009d82:	fb01 aa0b 	mla	sl, r1, fp, sl
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	f040 81e0 	bne.w	800a14c <__strftime.isra.0+0x85c>
 8009d8c:	f1b9 0f2b 	cmp.w	r9, #43	@ 0x2b
 8009d90:	f040 81e7 	bne.w	800a162 <__strftime.isra.0+0x872>
 8009d94:	f242 710f 	movw	r1, #9999	@ 0x270f
 8009d98:	458a      	cmp	sl, r1
 8009d9a:	f200 826b 	bhi.w	800a274 <__strftime.isra.0+0x984>
 8009d9e:	2325      	movs	r3, #37	@ 0x25
 8009da0:	f88d 3018 	strb.w	r3, [sp, #24]
 8009da4:	a906      	add	r1, sp, #24
 8009da6:	2330      	movs	r3, #48	@ 0x30
 8009da8:	1c88      	adds	r0, r1, #2
 8009daa:	704b      	strb	r3, [r1, #1]
 8009dac:	e1e1      	b.n	800a172 <__strftime.isra.0+0x882>
 8009dae:	f201 706c 	addw	r0, r1, #1900	@ 0x76c
 8009db2:	9205      	str	r2, [sp, #20]
 8009db4:	9104      	str	r1, [sp, #16]
 8009db6:	f000 fd90 	bl	800a8da <abs>
 8009dba:	f04f 0c64 	mov.w	ip, #100	@ 0x64
 8009dbe:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
 8009dc2:	fb90 fbfc 	sdiv	fp, r0, ip
 8009dc6:	e7be      	b.n	8009d46 <__strftime.isra.0+0x456>
 8009dc8:	f200 706c 	addw	r0, r0, #1900	@ 0x76c
 8009dcc:	e9cd 2104 	strd	r2, r1, [sp, #16]
 8009dd0:	f000 fd83 	bl	800a8da <abs>
 8009dd4:	f04f 0c64 	mov.w	ip, #100	@ 0x64
 8009dd8:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 8009ddc:	fb90 fefc 	sdiv	lr, r0, ip
 8009de0:	fb0e 001c 	mls	r0, lr, ip, r0
 8009de4:	e7b8      	b.n	8009d58 <__strftime.isra.0+0x468>
 8009de6:	d0c2      	beq.n	8009d6e <__strftime.isra.0+0x47e>
 8009de8:	4b88      	ldr	r3, [pc, #544]	@ (800a00c <__strftime.isra.0+0x71c>)
 8009dea:	4299      	cmp	r1, r3
 8009dec:	bfb4      	ite	lt
 8009dee:	2301      	movlt	r3, #1
 8009df0:	2300      	movge	r3, #0
 8009df2:	9303      	str	r3, [sp, #12]
 8009df4:	bfb8      	it	lt
 8009df6:	f04f 3aff 	movlt.w	sl, #4294967295	@ 0xffffffff
 8009dfa:	e7b8      	b.n	8009d6e <__strftime.isra.0+0x47e>
 8009dfc:	f1ba 0f64 	cmp.w	sl, #100	@ 0x64
 8009e00:	bf04      	itt	eq
 8009e02:	f10b 0b01 	addeq.w	fp, fp, #1
 8009e06:	f04f 0a00 	moveq.w	sl, #0
 8009e0a:	e7b8      	b.n	8009d7e <__strftime.isra.0+0x48e>
 8009e0c:	4981      	ldr	r1, [pc, #516]	@ (800a014 <__strftime.isra.0+0x724>)
 8009e0e:	4a82      	ldr	r2, [pc, #520]	@ (800a018 <__strftime.isra.0+0x728>)
 8009e10:	68b3      	ldr	r3, [r6, #8]
 8009e12:	286b      	cmp	r0, #107	@ 0x6b
 8009e14:	bf18      	it	ne
 8009e16:	460a      	movne	r2, r1
 8009e18:	e6d6      	b.n	8009bc8 <__strftime.isra.0+0x2d8>
 8009e1a:	68b3      	ldr	r3, [r6, #8]
 8009e1c:	b163      	cbz	r3, 8009e38 <__strftime.isra.0+0x548>
 8009e1e:	2b0c      	cmp	r3, #12
 8009e20:	d004      	beq.n	8009e2c <__strftime.isra.0+0x53c>
 8009e22:	210c      	movs	r1, #12
 8009e24:	fb93 f2f1 	sdiv	r2, r3, r1
 8009e28:	fb01 3312 	mls	r3, r1, r2, r3
 8009e2c:	497a      	ldr	r1, [pc, #488]	@ (800a018 <__strftime.isra.0+0x728>)
 8009e2e:	4a79      	ldr	r2, [pc, #484]	@ (800a014 <__strftime.isra.0+0x724>)
 8009e30:	2849      	cmp	r0, #73	@ 0x49
 8009e32:	bf18      	it	ne
 8009e34:	460a      	movne	r2, r1
 8009e36:	e6c7      	b.n	8009bc8 <__strftime.isra.0+0x2d8>
 8009e38:	230c      	movs	r3, #12
 8009e3a:	e7f7      	b.n	8009e2c <__strftime.isra.0+0x53c>
 8009e3c:	69f3      	ldr	r3, [r6, #28]
 8009e3e:	4a77      	ldr	r2, [pc, #476]	@ (800a01c <__strftime.isra.0+0x72c>)
 8009e40:	3301      	adds	r3, #1
 8009e42:	e6c1      	b.n	8009bc8 <__strftime.isra.0+0x2d8>
 8009e44:	6933      	ldr	r3, [r6, #16]
 8009e46:	3301      	adds	r3, #1
 8009e48:	e730      	b.n	8009cac <__strftime.isra.0+0x3bc>
 8009e4a:	6873      	ldr	r3, [r6, #4]
 8009e4c:	e72e      	b.n	8009cac <__strftime.isra.0+0x3bc>
 8009e4e:	1e6b      	subs	r3, r5, #1
 8009e50:	429c      	cmp	r4, r3
 8009e52:	f4bf aedd 	bcs.w	8009c10 <__strftime.isra.0+0x320>
 8009e56:	f104 0a01 	add.w	sl, r4, #1
 8009e5a:	230a      	movs	r3, #10
 8009e5c:	553b      	strb	r3, [r7, r4]
 8009e5e:	e5f5      	b.n	8009a4c <__strftime.isra.0+0x15c>
 8009e60:	68b3      	ldr	r3, [r6, #8]
 8009e62:	2b0b      	cmp	r3, #11
 8009e64:	4b6e      	ldr	r3, [pc, #440]	@ (800a020 <__strftime.isra.0+0x730>)
 8009e66:	bfd4      	ite	le
 8009e68:	2200      	movle	r2, #0
 8009e6a:	2201      	movgt	r2, #1
 8009e6c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8009e70:	f8d3 b0a4 	ldr.w	fp, [r3, #164]	@ 0xa4
 8009e74:	4658      	mov	r0, fp
 8009e76:	f7f6 fa2b 	bl	80002d0 <strlen>
 8009e7a:	eb04 0a00 	add.w	sl, r4, r0
 8009e7e:	4869      	ldr	r0, [pc, #420]	@ (800a024 <__strftime.isra.0+0x734>)
 8009e80:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 8009e84:	1e69      	subs	r1, r5, #1
 8009e86:	45a2      	cmp	sl, r4
 8009e88:	f43f ade0 	beq.w	8009a4c <__strftime.isra.0+0x15c>
 8009e8c:	42a1      	cmp	r1, r4
 8009e8e:	f67f aebf 	bls.w	8009c10 <__strftime.isra.0+0x320>
 8009e92:	f898 2000 	ldrb.w	r2, [r8]
 8009e96:	f81b 3f01 	ldrb.w	r3, [fp, #1]!
 8009e9a:	2a50      	cmp	r2, #80	@ 0x50
 8009e9c:	d106      	bne.n	8009eac <__strftime.isra.0+0x5bc>
 8009e9e:	5cc2      	ldrb	r2, [r0, r3]
 8009ea0:	f002 0203 	and.w	r2, r2, #3
 8009ea4:	2a01      	cmp	r2, #1
 8009ea6:	bf08      	it	eq
 8009ea8:	3320      	addeq	r3, #32
 8009eaa:	b2db      	uxtb	r3, r3
 8009eac:	553b      	strb	r3, [r7, r4]
 8009eae:	3401      	adds	r4, #1
 8009eb0:	e7e9      	b.n	8009e86 <__strftime.isra.0+0x596>
 8009eb2:	2203      	movs	r2, #3
 8009eb4:	6933      	ldr	r3, [r6, #16]
 8009eb6:	fb93 f3f2 	sdiv	r3, r3, r2
 8009eba:	4a5b      	ldr	r2, [pc, #364]	@ (800a028 <__strftime.isra.0+0x738>)
 8009ebc:	3301      	adds	r3, #1
 8009ebe:	e683      	b.n	8009bc8 <__strftime.isra.0+0x2d8>
 8009ec0:	6873      	ldr	r3, [r6, #4]
 8009ec2:	9300      	str	r3, [sp, #0]
 8009ec4:	68b3      	ldr	r3, [r6, #8]
 8009ec6:	4a59      	ldr	r2, [pc, #356]	@ (800a02c <__strftime.isra.0+0x73c>)
 8009ec8:	1b29      	subs	r1, r5, r4
 8009eca:	1938      	adds	r0, r7, r4
 8009ecc:	f002 fac4 	bl	800c458 <sniprintf>
 8009ed0:	e697      	b.n	8009c02 <__strftime.isra.0+0x312>
 8009ed2:	6a33      	ldr	r3, [r6, #32]
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	db78      	blt.n	8009fca <__strftime.isra.0+0x6da>
 8009ed8:	f000 f9de 	bl	800a298 <__tz_lock>
 8009edc:	9b02      	ldr	r3, [sp, #8]
 8009ede:	b90b      	cbnz	r3, 8009ee4 <__strftime.isra.0+0x5f4>
 8009ee0:	f000 f9e6 	bl	800a2b0 <_tzset_unlocked>
 8009ee4:	f002 fbda 	bl	800c69c <__gettzinfo>
 8009ee8:	6a33      	ldr	r3, [r6, #32]
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	bfd4      	ite	le
 8009eee:	2200      	movle	r2, #0
 8009ef0:	2201      	movgt	r2, #1
 8009ef2:	2328      	movs	r3, #40	@ 0x28
 8009ef4:	fb02 3303 	mla	r3, r2, r3, r3
 8009ef8:	58c3      	ldr	r3, [r0, r3]
 8009efa:	f1c3 0a00 	rsb	sl, r3, #0
 8009efe:	f000 f9d1 	bl	800a2a4 <__tz_unlock>
 8009f02:	2301      	movs	r3, #1
 8009f04:	9302      	str	r3, [sp, #8]
 8009f06:	6972      	ldr	r2, [r6, #20]
 8009f08:	f1b2 0345 	subs.w	r3, r2, #69	@ 0x45
 8009f0c:	ea4f 7ce2 	mov.w	ip, r2, asr #31
 8009f10:	f16c 0c00 	sbc.w	ip, ip, #0
 8009f14:	f1bc 0f00 	cmp.w	ip, #0
 8009f18:	eba5 0104 	sub.w	r1, r5, r4
 8009f1c:	eb07 0004 	add.w	r0, r7, r4
 8009f20:	da02      	bge.n	8009f28 <__strftime.isra.0+0x638>
 8009f22:	3303      	adds	r3, #3
 8009f24:	f14c 0c00 	adc.w	ip, ip, #0
 8009f28:	089b      	lsrs	r3, r3, #2
 8009f2a:	ea43 738c 	orr.w	r3, r3, ip, lsl #30
 8009f2e:	f102 3eff 	add.w	lr, r2, #4294967295	@ 0xffffffff
 8009f32:	f04f 0b64 	mov.w	fp, #100	@ 0x64
 8009f36:	ea4f 0cac 	mov.w	ip, ip, asr #2
 8009f3a:	fb9e fefb 	sdiv	lr, lr, fp
 8009f3e:	ebb3 030e 	subs.w	r3, r3, lr
 8009f42:	eb6c 7cee 	sbc.w	ip, ip, lr, asr #31
 8009f46:	f44f 7bc8 	mov.w	fp, #400	@ 0x190
 8009f4a:	f202 1e2b 	addw	lr, r2, #299	@ 0x12b
 8009f4e:	fb9e fefb 	sdiv	lr, lr, fp
 8009f52:	eb13 030e 	adds.w	r3, r3, lr
 8009f56:	eb4c 7cee 	adc.w	ip, ip, lr, asr #31
 8009f5a:	3a46      	subs	r2, #70	@ 0x46
 8009f5c:	f240 1e6d 	movw	lr, #365	@ 0x16d
 8009f60:	fb0e f202 	mul.w	r2, lr, r2
 8009f64:	189b      	adds	r3, r3, r2
 8009f66:	eb4c 7ce2 	adc.w	ip, ip, r2, asr #31
 8009f6a:	69f2      	ldr	r2, [r6, #28]
 8009f6c:	f8d6 b004 	ldr.w	fp, [r6, #4]
 8009f70:	189b      	adds	r3, r3, r2
 8009f72:	f04f 0e18 	mov.w	lr, #24
 8009f76:	eb4c 7ce2 	adc.w	ip, ip, r2, asr #31
 8009f7a:	fba3 230e 	umull	r2, r3, r3, lr
 8009f7e:	fb0e 330c 	mla	r3, lr, ip, r3
 8009f82:	f8d6 c008 	ldr.w	ip, [r6, #8]
 8009f86:	eb12 020c 	adds.w	r2, r2, ip
 8009f8a:	eb43 73ec 	adc.w	r3, r3, ip, asr #31
 8009f8e:	f04f 0c3c 	mov.w	ip, #60	@ 0x3c
 8009f92:	fba2 2e0c 	umull	r2, lr, r2, ip
 8009f96:	fb0c ee03 	mla	lr, ip, r3, lr
 8009f9a:	eb12 030b 	adds.w	r3, r2, fp
 8009f9e:	eb4e 72eb 	adc.w	r2, lr, fp, asr #31
 8009fa2:	fba3 e30c 	umull	lr, r3, r3, ip
 8009fa6:	fb0c 3302 	mla	r3, ip, r2, r3
 8009faa:	f8d6 c000 	ldr.w	ip, [r6]
 8009fae:	eb1e 020c 	adds.w	r2, lr, ip
 8009fb2:	eb43 73ec 	adc.w	r3, r3, ip, asr #31
 8009fb6:	ebb2 020a 	subs.w	r2, r2, sl
 8009fba:	eb63 73ea 	sbc.w	r3, r3, sl, asr #31
 8009fbe:	e9cd 2300 	strd	r2, r3, [sp]
 8009fc2:	4a1b      	ldr	r2, [pc, #108]	@ (800a030 <__strftime.isra.0+0x740>)
 8009fc4:	f002 fa48 	bl	800c458 <sniprintf>
 8009fc8:	e61b      	b.n	8009c02 <__strftime.isra.0+0x312>
 8009fca:	f04f 0a00 	mov.w	sl, #0
 8009fce:	e79a      	b.n	8009f06 <__strftime.isra.0+0x616>
 8009fd0:	6833      	ldr	r3, [r6, #0]
 8009fd2:	e66b      	b.n	8009cac <__strftime.isra.0+0x3bc>
 8009fd4:	1e6b      	subs	r3, r5, #1
 8009fd6:	429c      	cmp	r4, r3
 8009fd8:	f4bf ae1a 	bcs.w	8009c10 <__strftime.isra.0+0x320>
 8009fdc:	f104 0a01 	add.w	sl, r4, #1
 8009fe0:	2309      	movs	r3, #9
 8009fe2:	e73b      	b.n	8009e5c <__strftime.isra.0+0x56c>
 8009fe4:	6833      	ldr	r3, [r6, #0]
 8009fe6:	9301      	str	r3, [sp, #4]
 8009fe8:	6873      	ldr	r3, [r6, #4]
 8009fea:	9300      	str	r3, [sp, #0]
 8009fec:	68b3      	ldr	r3, [r6, #8]
 8009fee:	4a11      	ldr	r2, [pc, #68]	@ (800a034 <__strftime.isra.0+0x744>)
 8009ff0:	e5de      	b.n	8009bb0 <__strftime.isra.0+0x2c0>
 8009ff2:	1e6b      	subs	r3, r5, #1
 8009ff4:	429c      	cmp	r4, r3
 8009ff6:	f4bf ae0b 	bcs.w	8009c10 <__strftime.isra.0+0x320>
 8009ffa:	69b3      	ldr	r3, [r6, #24]
 8009ffc:	b91b      	cbnz	r3, 800a006 <__strftime.isra.0+0x716>
 8009ffe:	2337      	movs	r3, #55	@ 0x37
 800a000:	f104 0a01 	add.w	sl, r4, #1
 800a004:	e72a      	b.n	8009e5c <__strftime.isra.0+0x56c>
 800a006:	3330      	adds	r3, #48	@ 0x30
 800a008:	b2db      	uxtb	r3, r3
 800a00a:	e7f9      	b.n	800a000 <__strftime.isra.0+0x710>
 800a00c:	fffff894 	.word	0xfffff894
 800a010:	fffff895 	.word	0xfffff895
 800a014:	0800d834 	.word	0x0800d834
 800a018:	0800d826 	.word	0x0800d826
 800a01c:	0800d849 	.word	0x0800d849
 800a020:	0800db38 	.word	0x0800db38
 800a024:	0800dd31 	.word	0x0800dd31
 800a028:	0800d84e 	.word	0x0800d84e
 800a02c:	0800d85d 	.word	0x0800d85d
 800a030:	0800d853 	.word	0x0800d853
 800a034:	0800d858 	.word	0x0800d858
 800a038:	69f3      	ldr	r3, [r6, #28]
 800a03a:	69b2      	ldr	r2, [r6, #24]
 800a03c:	3307      	adds	r3, #7
 800a03e:	1a9b      	subs	r3, r3, r2
 800a040:	2207      	movs	r2, #7
 800a042:	fb93 f3f2 	sdiv	r3, r3, r2
 800a046:	e631      	b.n	8009cac <__strftime.isra.0+0x3bc>
 800a048:	4630      	mov	r0, r6
 800a04a:	f7ff fbff 	bl	800984c <iso_year_adjust>
 800a04e:	69b2      	ldr	r2, [r6, #24]
 800a050:	b132      	cbz	r2, 800a060 <__strftime.isra.0+0x770>
 800a052:	3a01      	subs	r2, #1
 800a054:	2800      	cmp	r0, #0
 800a056:	69f3      	ldr	r3, [r6, #28]
 800a058:	dc26      	bgt.n	800a0a8 <__strftime.isra.0+0x7b8>
 800a05a:	d103      	bne.n	800a064 <__strftime.isra.0+0x774>
 800a05c:	330a      	adds	r3, #10
 800a05e:	e7ee      	b.n	800a03e <__strftime.isra.0+0x74e>
 800a060:	2206      	movs	r2, #6
 800a062:	e7f7      	b.n	800a054 <__strftime.isra.0+0x764>
 800a064:	1ad2      	subs	r2, r2, r3
 800a066:	6973      	ldr	r3, [r6, #20]
 800a068:	2b00      	cmp	r3, #0
 800a06a:	f240 716b 	movw	r1, #1899	@ 0x76b
 800a06e:	bfa8      	it	ge
 800a070:	f06f 0164 	mvnge.w	r1, #100	@ 0x64
 800a074:	440b      	add	r3, r1
 800a076:	0799      	lsls	r1, r3, #30
 800a078:	d105      	bne.n	800a086 <__strftime.isra.0+0x796>
 800a07a:	2064      	movs	r0, #100	@ 0x64
 800a07c:	fb93 f1f0 	sdiv	r1, r3, r0
 800a080:	fb00 3111 	mls	r1, r0, r1, r3
 800a084:	b971      	cbnz	r1, 800a0a4 <__strftime.isra.0+0x7b4>
 800a086:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 800a08a:	fb93 f0f1 	sdiv	r0, r3, r1
 800a08e:	fb01 3310 	mls	r3, r1, r0, r3
 800a092:	fab3 f383 	clz	r3, r3
 800a096:	095b      	lsrs	r3, r3, #5
 800a098:	1ad2      	subs	r2, r2, r3
 800a09a:	2a04      	cmp	r2, #4
 800a09c:	bfcc      	ite	gt
 800a09e:	2334      	movgt	r3, #52	@ 0x34
 800a0a0:	2335      	movle	r3, #53	@ 0x35
 800a0a2:	e603      	b.n	8009cac <__strftime.isra.0+0x3bc>
 800a0a4:	2301      	movs	r3, #1
 800a0a6:	e7f7      	b.n	800a098 <__strftime.isra.0+0x7a8>
 800a0a8:	2301      	movs	r3, #1
 800a0aa:	e5ff      	b.n	8009cac <__strftime.isra.0+0x3bc>
 800a0ac:	4972      	ldr	r1, [pc, #456]	@ (800a278 <__strftime.isra.0+0x988>)
 800a0ae:	9203      	str	r2, [sp, #12]
 800a0b0:	a806      	add	r0, sp, #24
 800a0b2:	f000 fbfc 	bl	800a8ae <strcpy>
 800a0b6:	a806      	add	r0, sp, #24
 800a0b8:	f7f6 f90a 	bl	80002d0 <strlen>
 800a0bc:	ab06      	add	r3, sp, #24
 800a0be:	eb03 0a00 	add.w	sl, r3, r0
 800a0c2:	f10a 0a01 	add.w	sl, sl, #1
 800a0c6:	46d3      	mov	fp, sl
 800a0c8:	f1b9 0f00 	cmp.w	r9, #0
 800a0cc:	d009      	beq.n	800a0e2 <__strftime.isra.0+0x7f2>
 800a0ce:	9a03      	ldr	r2, [sp, #12]
 800a0d0:	f803 9000 	strb.w	r9, [r3, r0]
 800a0d4:	2a05      	cmp	r2, #5
 800a0d6:	d901      	bls.n	800a0dc <__strftime.isra.0+0x7ec>
 800a0d8:	1f93      	subs	r3, r2, #6
 800a0da:	d106      	bne.n	800a0ea <__strftime.isra.0+0x7fa>
 800a0dc:	4967      	ldr	r1, [pc, #412]	@ (800a27c <__strftime.isra.0+0x98c>)
 800a0de:	4658      	mov	r0, fp
 800a0e0:	e5b5      	b.n	8009c4e <__strftime.isra.0+0x35e>
 800a0e2:	aa06      	add	r2, sp, #24
 800a0e4:	232b      	movs	r3, #43	@ 0x2b
 800a0e6:	5413      	strb	r3, [r2, r0]
 800a0e8:	2304      	movs	r3, #4
 800a0ea:	a90e      	add	r1, sp, #56	@ 0x38
 800a0ec:	4a64      	ldr	r2, [pc, #400]	@ (800a280 <__strftime.isra.0+0x990>)
 800a0ee:	eba1 010a 	sub.w	r1, r1, sl
 800a0f2:	4650      	mov	r0, sl
 800a0f4:	f002 f9b0 	bl	800c458 <sniprintf>
 800a0f8:	2800      	cmp	r0, #0
 800a0fa:	bfc8      	it	gt
 800a0fc:	eb0a 0b00 	addgt.w	fp, sl, r0
 800a100:	e7ec      	b.n	800a0dc <__strftime.isra.0+0x7ec>
 800a102:	1e6b      	subs	r3, r5, #1
 800a104:	429c      	cmp	r4, r3
 800a106:	f4bf ad83 	bcs.w	8009c10 <__strftime.isra.0+0x320>
 800a10a:	69b3      	ldr	r3, [r6, #24]
 800a10c:	f104 0a01 	add.w	sl, r4, #1
 800a110:	3330      	adds	r3, #48	@ 0x30
 800a112:	e6a3      	b.n	8009e5c <__strftime.isra.0+0x56c>
 800a114:	69b2      	ldr	r2, [r6, #24]
 800a116:	b11a      	cbz	r2, 800a120 <__strftime.isra.0+0x830>
 800a118:	3a01      	subs	r2, #1
 800a11a:	69f3      	ldr	r3, [r6, #28]
 800a11c:	3307      	adds	r3, #7
 800a11e:	e78e      	b.n	800a03e <__strftime.isra.0+0x74e>
 800a120:	2206      	movs	r2, #6
 800a122:	e7fa      	b.n	800a11a <__strftime.isra.0+0x82a>
 800a124:	6970      	ldr	r0, [r6, #20]
 800a126:	2800      	cmp	r0, #0
 800a128:	db05      	blt.n	800a136 <__strftime.isra.0+0x846>
 800a12a:	2364      	movs	r3, #100	@ 0x64
 800a12c:	fb90 f2f3 	sdiv	r2, r0, r3
 800a130:	fb02 0313 	mls	r3, r2, r3, r0
 800a134:	e5ba      	b.n	8009cac <__strftime.isra.0+0x3bc>
 800a136:	f200 706c 	addw	r0, r0, #1900	@ 0x76c
 800a13a:	f000 fbce 	bl	800a8da <abs>
 800a13e:	e7f4      	b.n	800a12a <__strftime.isra.0+0x83a>
 800a140:	6971      	ldr	r1, [r6, #20]
 800a142:	4850      	ldr	r0, [pc, #320]	@ (800a284 <__strftime.isra.0+0x994>)
 800a144:	4281      	cmp	r1, r0
 800a146:	da09      	bge.n	800a15c <__strftime.isra.0+0x86c>
 800a148:	eba0 0a01 	sub.w	sl, r0, r1
 800a14c:	212d      	movs	r1, #45	@ 0x2d
 800a14e:	f88d 1018 	strb.w	r1, [sp, #24]
 800a152:	b102      	cbz	r2, 800a156 <__strftime.isra.0+0x866>
 800a154:	3a01      	subs	r2, #1
 800a156:	f10d 0119 	add.w	r1, sp, #25
 800a15a:	e003      	b.n	800a164 <__strftime.isra.0+0x874>
 800a15c:	f201 7a6c 	addw	sl, r1, #1900	@ 0x76c
 800a160:	e614      	b.n	8009d8c <__strftime.isra.0+0x49c>
 800a162:	a906      	add	r1, sp, #24
 800a164:	2025      	movs	r0, #37	@ 0x25
 800a166:	7008      	strb	r0, [r1, #0]
 800a168:	f1b9 0f00 	cmp.w	r9, #0
 800a16c:	f47f ae1b 	bne.w	8009da6 <__strftime.isra.0+0x4b6>
 800a170:	1c48      	adds	r0, r1, #1
 800a172:	4945      	ldr	r1, [pc, #276]	@ (800a288 <__strftime.isra.0+0x998>)
 800a174:	9203      	str	r2, [sp, #12]
 800a176:	f000 fb9a 	bl	800a8ae <strcpy>
 800a17a:	9a03      	ldr	r2, [sp, #12]
 800a17c:	f8cd a000 	str.w	sl, [sp]
 800a180:	4613      	mov	r3, r2
 800a182:	aa06      	add	r2, sp, #24
 800a184:	e6a0      	b.n	8009ec8 <__strftime.isra.0+0x5d8>
 800a186:	6a33      	ldr	r3, [r6, #32]
 800a188:	2b00      	cmp	r3, #0
 800a18a:	da01      	bge.n	800a190 <__strftime.isra.0+0x8a0>
 800a18c:	46a2      	mov	sl, r4
 800a18e:	e45d      	b.n	8009a4c <__strftime.isra.0+0x15c>
 800a190:	f000 f882 	bl	800a298 <__tz_lock>
 800a194:	9b02      	ldr	r3, [sp, #8]
 800a196:	b90b      	cbnz	r3, 800a19c <__strftime.isra.0+0x8ac>
 800a198:	f000 f88a 	bl	800a2b0 <_tzset_unlocked>
 800a19c:	f002 fa7e 	bl	800c69c <__gettzinfo>
 800a1a0:	6a33      	ldr	r3, [r6, #32]
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	bfd4      	ite	le
 800a1a6:	2200      	movle	r2, #0
 800a1a8:	2201      	movgt	r2, #1
 800a1aa:	2328      	movs	r3, #40	@ 0x28
 800a1ac:	fb02 3303 	mla	r3, r2, r3, r3
 800a1b0:	eb07 0a04 	add.w	sl, r7, r4
 800a1b4:	58c3      	ldr	r3, [r0, r3]
 800a1b6:	f1c3 0900 	rsb	r9, r3, #0
 800a1ba:	f000 f873 	bl	800a2a4 <__tz_unlock>
 800a1be:	233c      	movs	r3, #60	@ 0x3c
 800a1c0:	fb99 f0f3 	sdiv	r0, r9, r3
 800a1c4:	f001 fa91 	bl	800b6ea <labs>
 800a1c8:	233c      	movs	r3, #60	@ 0x3c
 800a1ca:	eba5 0b04 	sub.w	fp, r5, r4
 800a1ce:	fb90 f2f3 	sdiv	r2, r0, r3
 800a1d2:	fb02 0013 	mls	r0, r2, r3, r0
 800a1d6:	9000      	str	r0, [sp, #0]
 800a1d8:	4a2c      	ldr	r2, [pc, #176]	@ (800a28c <__strftime.isra.0+0x99c>)
 800a1da:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 800a1de:	4659      	mov	r1, fp
 800a1e0:	4650      	mov	r0, sl
 800a1e2:	fb99 f3f3 	sdiv	r3, r9, r3
 800a1e6:	f002 f937 	bl	800c458 <sniprintf>
 800a1ea:	2800      	cmp	r0, #0
 800a1ec:	f6ff ad10 	blt.w	8009c10 <__strftime.isra.0+0x320>
 800a1f0:	eb00 0a04 	add.w	sl, r0, r4
 800a1f4:	4555      	cmp	r5, sl
 800a1f6:	f67f ad0b 	bls.w	8009c10 <__strftime.isra.0+0x320>
 800a1fa:	2301      	movs	r3, #1
 800a1fc:	9302      	str	r3, [sp, #8]
 800a1fe:	e425      	b.n	8009a4c <__strftime.isra.0+0x15c>
 800a200:	6a33      	ldr	r3, [r6, #32]
 800a202:	2b00      	cmp	r3, #0
 800a204:	dbc2      	blt.n	800a18c <__strftime.isra.0+0x89c>
 800a206:	f000 f847 	bl	800a298 <__tz_lock>
 800a20a:	9b02      	ldr	r3, [sp, #8]
 800a20c:	b90b      	cbnz	r3, 800a212 <__strftime.isra.0+0x922>
 800a20e:	f000 f84f 	bl	800a2b0 <_tzset_unlocked>
 800a212:	6a33      	ldr	r3, [r6, #32]
 800a214:	4a1e      	ldr	r2, [pc, #120]	@ (800a290 <__strftime.isra.0+0x9a0>)
 800a216:	2b00      	cmp	r3, #0
 800a218:	bfd4      	ite	le
 800a21a:	2300      	movle	r3, #0
 800a21c:	2301      	movgt	r3, #1
 800a21e:	46a2      	mov	sl, r4
 800a220:	f852 9023 	ldr.w	r9, [r2, r3, lsl #2]
 800a224:	4648      	mov	r0, r9
 800a226:	f7f6 f853 	bl	80002d0 <strlen>
 800a22a:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
 800a22e:	4420      	add	r0, r4
 800a230:	1e6b      	subs	r3, r5, #1
 800a232:	4550      	cmp	r0, sl
 800a234:	d102      	bne.n	800a23c <__strftime.isra.0+0x94c>
 800a236:	f000 f835 	bl	800a2a4 <__tz_unlock>
 800a23a:	e7de      	b.n	800a1fa <__strftime.isra.0+0x90a>
 800a23c:	4553      	cmp	r3, sl
 800a23e:	d906      	bls.n	800a24e <__strftime.isra.0+0x95e>
 800a240:	f819 2f01 	ldrb.w	r2, [r9, #1]!
 800a244:	f807 200a 	strb.w	r2, [r7, sl]
 800a248:	f10a 0a01 	add.w	sl, sl, #1
 800a24c:	e7f1      	b.n	800a232 <__strftime.isra.0+0x942>
 800a24e:	f000 f829 	bl	800a2a4 <__tz_unlock>
 800a252:	e4dd      	b.n	8009c10 <__strftime.isra.0+0x320>
 800a254:	1e6b      	subs	r3, r5, #1
 800a256:	429c      	cmp	r4, r3
 800a258:	f4bf acda 	bcs.w	8009c10 <__strftime.isra.0+0x320>
 800a25c:	f104 0a01 	add.w	sl, r4, #1
 800a260:	2325      	movs	r3, #37	@ 0x25
 800a262:	e5fb      	b.n	8009e5c <__strftime.isra.0+0x56c>
 800a264:	46a2      	mov	sl, r4
 800a266:	2d00      	cmp	r5, #0
 800a268:	f43f acd4 	beq.w	8009c14 <__strftime.isra.0+0x324>
 800a26c:	2300      	movs	r3, #0
 800a26e:	f807 300a 	strb.w	r3, [r7, sl]
 800a272:	e4cf      	b.n	8009c14 <__strftime.isra.0+0x324>
 800a274:	4649      	mov	r1, r9
 800a276:	e76a      	b.n	800a14e <__strftime.isra.0+0x85e>
 800a278:	0800d867 	.word	0x0800d867
 800a27c:	0800d9c5 	.word	0x0800d9c5
 800a280:	0800d839 	.word	0x0800d839
 800a284:	fffff894 	.word	0xfffff894
 800a288:	0800d845 	.word	0x0800d845
 800a28c:	0800d86f 	.word	0x0800d86f
 800a290:	20000024 	.word	0x20000024

0800a294 <strftime>:
 800a294:	f7ff bb2c 	b.w	80098f0 <__strftime.isra.0>

0800a298 <__tz_lock>:
 800a298:	4801      	ldr	r0, [pc, #4]	@ (800a2a0 <__tz_lock+0x8>)
 800a29a:	f000 bb04 	b.w	800a8a6 <__retarget_lock_acquire>
 800a29e:	bf00      	nop
 800a2a0:	2000554c 	.word	0x2000554c

0800a2a4 <__tz_unlock>:
 800a2a4:	4801      	ldr	r0, [pc, #4]	@ (800a2ac <__tz_unlock+0x8>)
 800a2a6:	f000 bb00 	b.w	800a8aa <__retarget_lock_release>
 800a2aa:	bf00      	nop
 800a2ac:	2000554c 	.word	0x2000554c

0800a2b0 <_tzset_unlocked>:
 800a2b0:	4b01      	ldr	r3, [pc, #4]	@ (800a2b8 <_tzset_unlocked+0x8>)
 800a2b2:	6818      	ldr	r0, [r3, #0]
 800a2b4:	f000 b802 	b.w	800a2bc <_tzset_unlocked_r>
 800a2b8:	2000002c 	.word	0x2000002c

0800a2bc <_tzset_unlocked_r>:
 800a2bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2c0:	b08d      	sub	sp, #52	@ 0x34
 800a2c2:	4607      	mov	r7, r0
 800a2c4:	f002 f9ea 	bl	800c69c <__gettzinfo>
 800a2c8:	49bc      	ldr	r1, [pc, #752]	@ (800a5bc <_tzset_unlocked_r+0x300>)
 800a2ca:	4dbd      	ldr	r5, [pc, #756]	@ (800a5c0 <_tzset_unlocked_r+0x304>)
 800a2cc:	4604      	mov	r4, r0
 800a2ce:	4638      	mov	r0, r7
 800a2d0:	f001 fa04 	bl	800b6dc <_getenv_r>
 800a2d4:	4606      	mov	r6, r0
 800a2d6:	bb10      	cbnz	r0, 800a31e <_tzset_unlocked_r+0x62>
 800a2d8:	4bba      	ldr	r3, [pc, #744]	@ (800a5c4 <_tzset_unlocked_r+0x308>)
 800a2da:	4abb      	ldr	r2, [pc, #748]	@ (800a5c8 <_tzset_unlocked_r+0x30c>)
 800a2dc:	6018      	str	r0, [r3, #0]
 800a2de:	4bbb      	ldr	r3, [pc, #748]	@ (800a5cc <_tzset_unlocked_r+0x310>)
 800a2e0:	62a0      	str	r0, [r4, #40]	@ 0x28
 800a2e2:	6018      	str	r0, [r3, #0]
 800a2e4:	4bba      	ldr	r3, [pc, #744]	@ (800a5d0 <_tzset_unlocked_r+0x314>)
 800a2e6:	6520      	str	r0, [r4, #80]	@ 0x50
 800a2e8:	e9c3 2200 	strd	r2, r2, [r3]
 800a2ec:	214a      	movs	r1, #74	@ 0x4a
 800a2ee:	2200      	movs	r2, #0
 800a2f0:	2300      	movs	r3, #0
 800a2f2:	e9c4 0003 	strd	r0, r0, [r4, #12]
 800a2f6:	e9c4 0005 	strd	r0, r0, [r4, #20]
 800a2fa:	e9c4 000d 	strd	r0, r0, [r4, #52]	@ 0x34
 800a2fe:	e9c4 000f 	strd	r0, r0, [r4, #60]	@ 0x3c
 800a302:	e9c4 2308 	strd	r2, r3, [r4, #32]
 800a306:	e9c4 2312 	strd	r2, r3, [r4, #72]	@ 0x48
 800a30a:	6828      	ldr	r0, [r5, #0]
 800a30c:	7221      	strb	r1, [r4, #8]
 800a30e:	f884 1030 	strb.w	r1, [r4, #48]	@ 0x30
 800a312:	f001 f9f7 	bl	800b704 <free>
 800a316:	602e      	str	r6, [r5, #0]
 800a318:	b00d      	add	sp, #52	@ 0x34
 800a31a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a31e:	6829      	ldr	r1, [r5, #0]
 800a320:	2900      	cmp	r1, #0
 800a322:	f040 808e 	bne.w	800a442 <_tzset_unlocked_r+0x186>
 800a326:	6828      	ldr	r0, [r5, #0]
 800a328:	f001 f9ec 	bl	800b704 <free>
 800a32c:	4630      	mov	r0, r6
 800a32e:	f7f5 ffcf 	bl	80002d0 <strlen>
 800a332:	1c41      	adds	r1, r0, #1
 800a334:	4638      	mov	r0, r7
 800a336:	f001 fa0f 	bl	800b758 <_malloc_r>
 800a33a:	6028      	str	r0, [r5, #0]
 800a33c:	2800      	cmp	r0, #0
 800a33e:	f040 8086 	bne.w	800a44e <_tzset_unlocked_r+0x192>
 800a342:	4aa2      	ldr	r2, [pc, #648]	@ (800a5cc <_tzset_unlocked_r+0x310>)
 800a344:	f8df 8288 	ldr.w	r8, [pc, #648]	@ 800a5d0 <_tzset_unlocked_r+0x314>
 800a348:	f8df a278 	ldr.w	sl, [pc, #632]	@ 800a5c4 <_tzset_unlocked_r+0x308>
 800a34c:	2300      	movs	r3, #0
 800a34e:	6013      	str	r3, [r2, #0]
 800a350:	4aa0      	ldr	r2, [pc, #640]	@ (800a5d4 <_tzset_unlocked_r+0x318>)
 800a352:	f8ca 3000 	str.w	r3, [sl]
 800a356:	2000      	movs	r0, #0
 800a358:	2100      	movs	r1, #0
 800a35a:	e9c8 2200 	strd	r2, r2, [r8]
 800a35e:	e9c4 3303 	strd	r3, r3, [r4, #12]
 800a362:	e9c4 3305 	strd	r3, r3, [r4, #20]
 800a366:	e9c4 0108 	strd	r0, r1, [r4, #32]
 800a36a:	e9c4 330d 	strd	r3, r3, [r4, #52]	@ 0x34
 800a36e:	e9c4 330f 	strd	r3, r3, [r4, #60]	@ 0x3c
 800a372:	e9c4 0112 	strd	r0, r1, [r4, #72]	@ 0x48
 800a376:	224a      	movs	r2, #74	@ 0x4a
 800a378:	7222      	strb	r2, [r4, #8]
 800a37a:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a37c:	f884 2030 	strb.w	r2, [r4, #48]	@ 0x30
 800a380:	6523      	str	r3, [r4, #80]	@ 0x50
 800a382:	7833      	ldrb	r3, [r6, #0]
 800a384:	2b3a      	cmp	r3, #58	@ 0x3a
 800a386:	bf08      	it	eq
 800a388:	3601      	addeq	r6, #1
 800a38a:	7833      	ldrb	r3, [r6, #0]
 800a38c:	2b3c      	cmp	r3, #60	@ 0x3c
 800a38e:	d162      	bne.n	800a456 <_tzset_unlocked_r+0x19a>
 800a390:	1c75      	adds	r5, r6, #1
 800a392:	4a91      	ldr	r2, [pc, #580]	@ (800a5d8 <_tzset_unlocked_r+0x31c>)
 800a394:	4991      	ldr	r1, [pc, #580]	@ (800a5dc <_tzset_unlocked_r+0x320>)
 800a396:	ab0a      	add	r3, sp, #40	@ 0x28
 800a398:	4628      	mov	r0, r5
 800a39a:	f002 f893 	bl	800c4c4 <siscanf>
 800a39e:	2800      	cmp	r0, #0
 800a3a0:	ddba      	ble.n	800a318 <_tzset_unlocked_r+0x5c>
 800a3a2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a3a4:	1eda      	subs	r2, r3, #3
 800a3a6:	2a07      	cmp	r2, #7
 800a3a8:	d8b6      	bhi.n	800a318 <_tzset_unlocked_r+0x5c>
 800a3aa:	5ceb      	ldrb	r3, [r5, r3]
 800a3ac:	2b3e      	cmp	r3, #62	@ 0x3e
 800a3ae:	d1b3      	bne.n	800a318 <_tzset_unlocked_r+0x5c>
 800a3b0:	3602      	adds	r6, #2
 800a3b2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a3b4:	18f5      	adds	r5, r6, r3
 800a3b6:	5cf3      	ldrb	r3, [r6, r3]
 800a3b8:	2b2d      	cmp	r3, #45	@ 0x2d
 800a3ba:	d15a      	bne.n	800a472 <_tzset_unlocked_r+0x1b6>
 800a3bc:	3501      	adds	r5, #1
 800a3be:	f04f 39ff 	mov.w	r9, #4294967295	@ 0xffffffff
 800a3c2:	2300      	movs	r3, #0
 800a3c4:	f8ad 301e 	strh.w	r3, [sp, #30]
 800a3c8:	f8ad 3020 	strh.w	r3, [sp, #32]
 800a3cc:	af08      	add	r7, sp, #32
 800a3ce:	ab0a      	add	r3, sp, #40	@ 0x28
 800a3d0:	e9cd 3701 	strd	r3, r7, [sp, #4]
 800a3d4:	9303      	str	r3, [sp, #12]
 800a3d6:	f10d 031e 	add.w	r3, sp, #30
 800a3da:	9300      	str	r3, [sp, #0]
 800a3dc:	4980      	ldr	r1, [pc, #512]	@ (800a5e0 <_tzset_unlocked_r+0x324>)
 800a3de:	ab0a      	add	r3, sp, #40	@ 0x28
 800a3e0:	aa07      	add	r2, sp, #28
 800a3e2:	4628      	mov	r0, r5
 800a3e4:	f002 f86e 	bl	800c4c4 <siscanf>
 800a3e8:	2800      	cmp	r0, #0
 800a3ea:	dd95      	ble.n	800a318 <_tzset_unlocked_r+0x5c>
 800a3ec:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 800a3f0:	f8bd 6020 	ldrh.w	r6, [sp, #32]
 800a3f4:	223c      	movs	r2, #60	@ 0x3c
 800a3f6:	fb02 6603 	mla	r6, r2, r3, r6
 800a3fa:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 800a3fe:	f44f 6261 	mov.w	r2, #3600	@ 0xe10
 800a402:	fb02 6603 	mla	r6, r2, r3, r6
 800a406:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a408:	fb09 f606 	mul.w	r6, r9, r6
 800a40c:	eb05 0903 	add.w	r9, r5, r3
 800a410:	5ceb      	ldrb	r3, [r5, r3]
 800a412:	2b3c      	cmp	r3, #60	@ 0x3c
 800a414:	f040 80ee 	bne.w	800a5f4 <_tzset_unlocked_r+0x338>
 800a418:	f109 0501 	add.w	r5, r9, #1
 800a41c:	4a71      	ldr	r2, [pc, #452]	@ (800a5e4 <_tzset_unlocked_r+0x328>)
 800a41e:	496f      	ldr	r1, [pc, #444]	@ (800a5dc <_tzset_unlocked_r+0x320>)
 800a420:	ab0a      	add	r3, sp, #40	@ 0x28
 800a422:	4628      	mov	r0, r5
 800a424:	f002 f84e 	bl	800c4c4 <siscanf>
 800a428:	2800      	cmp	r0, #0
 800a42a:	dc28      	bgt.n	800a47e <_tzset_unlocked_r+0x1c2>
 800a42c:	f899 3001 	ldrb.w	r3, [r9, #1]
 800a430:	2b3e      	cmp	r3, #62	@ 0x3e
 800a432:	d124      	bne.n	800a47e <_tzset_unlocked_r+0x1c2>
 800a434:	4b68      	ldr	r3, [pc, #416]	@ (800a5d8 <_tzset_unlocked_r+0x31c>)
 800a436:	62a6      	str	r6, [r4, #40]	@ 0x28
 800a438:	e9c8 3300 	strd	r3, r3, [r8]
 800a43c:	f8ca 6000 	str.w	r6, [sl]
 800a440:	e76a      	b.n	800a318 <_tzset_unlocked_r+0x5c>
 800a442:	f7f5 fee5 	bl	8000210 <strcmp>
 800a446:	2800      	cmp	r0, #0
 800a448:	f47f af6d 	bne.w	800a326 <_tzset_unlocked_r+0x6a>
 800a44c:	e764      	b.n	800a318 <_tzset_unlocked_r+0x5c>
 800a44e:	4631      	mov	r1, r6
 800a450:	f000 fa2d 	bl	800a8ae <strcpy>
 800a454:	e775      	b.n	800a342 <_tzset_unlocked_r+0x86>
 800a456:	4a60      	ldr	r2, [pc, #384]	@ (800a5d8 <_tzset_unlocked_r+0x31c>)
 800a458:	4963      	ldr	r1, [pc, #396]	@ (800a5e8 <_tzset_unlocked_r+0x32c>)
 800a45a:	ab0a      	add	r3, sp, #40	@ 0x28
 800a45c:	4630      	mov	r0, r6
 800a45e:	f002 f831 	bl	800c4c4 <siscanf>
 800a462:	2800      	cmp	r0, #0
 800a464:	f77f af58 	ble.w	800a318 <_tzset_unlocked_r+0x5c>
 800a468:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a46a:	3b03      	subs	r3, #3
 800a46c:	2b07      	cmp	r3, #7
 800a46e:	d9a0      	bls.n	800a3b2 <_tzset_unlocked_r+0xf6>
 800a470:	e752      	b.n	800a318 <_tzset_unlocked_r+0x5c>
 800a472:	2b2b      	cmp	r3, #43	@ 0x2b
 800a474:	bf08      	it	eq
 800a476:	3501      	addeq	r5, #1
 800a478:	f04f 0901 	mov.w	r9, #1
 800a47c:	e7a1      	b.n	800a3c2 <_tzset_unlocked_r+0x106>
 800a47e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a480:	1eda      	subs	r2, r3, #3
 800a482:	2a07      	cmp	r2, #7
 800a484:	f63f af48 	bhi.w	800a318 <_tzset_unlocked_r+0x5c>
 800a488:	5ceb      	ldrb	r3, [r5, r3]
 800a48a:	2b3e      	cmp	r3, #62	@ 0x3e
 800a48c:	f47f af44 	bne.w	800a318 <_tzset_unlocked_r+0x5c>
 800a490:	f109 0902 	add.w	r9, r9, #2
 800a494:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a496:	eb09 0503 	add.w	r5, r9, r3
 800a49a:	f819 3003 	ldrb.w	r3, [r9, r3]
 800a49e:	2b2d      	cmp	r3, #45	@ 0x2d
 800a4a0:	f040 80b7 	bne.w	800a612 <_tzset_unlocked_r+0x356>
 800a4a4:	3501      	adds	r5, #1
 800a4a6:	f04f 39ff 	mov.w	r9, #4294967295	@ 0xffffffff
 800a4aa:	2300      	movs	r3, #0
 800a4ac:	f8ad 301c 	strh.w	r3, [sp, #28]
 800a4b0:	f8ad 301e 	strh.w	r3, [sp, #30]
 800a4b4:	f8ad 3020 	strh.w	r3, [sp, #32]
 800a4b8:	930a      	str	r3, [sp, #40]	@ 0x28
 800a4ba:	ab0a      	add	r3, sp, #40	@ 0x28
 800a4bc:	e9cd 7302 	strd	r7, r3, [sp, #8]
 800a4c0:	9301      	str	r3, [sp, #4]
 800a4c2:	f10d 031e 	add.w	r3, sp, #30
 800a4c6:	9300      	str	r3, [sp, #0]
 800a4c8:	4945      	ldr	r1, [pc, #276]	@ (800a5e0 <_tzset_unlocked_r+0x324>)
 800a4ca:	ab0a      	add	r3, sp, #40	@ 0x28
 800a4cc:	aa07      	add	r2, sp, #28
 800a4ce:	4628      	mov	r0, r5
 800a4d0:	f001 fff8 	bl	800c4c4 <siscanf>
 800a4d4:	2800      	cmp	r0, #0
 800a4d6:	f300 80a2 	bgt.w	800a61e <_tzset_unlocked_r+0x362>
 800a4da:	f5a6 6361 	sub.w	r3, r6, #3600	@ 0xe10
 800a4de:	9304      	str	r3, [sp, #16]
 800a4e0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a4e2:	4627      	mov	r7, r4
 800a4e4:	441d      	add	r5, r3
 800a4e6:	f04f 0b00 	mov.w	fp, #0
 800a4ea:	782b      	ldrb	r3, [r5, #0]
 800a4ec:	2b2c      	cmp	r3, #44	@ 0x2c
 800a4ee:	bf08      	it	eq
 800a4f0:	3501      	addeq	r5, #1
 800a4f2:	f895 9000 	ldrb.w	r9, [r5]
 800a4f6:	f1b9 0f4d 	cmp.w	r9, #77	@ 0x4d
 800a4fa:	f040 80a3 	bne.w	800a644 <_tzset_unlocked_r+0x388>
 800a4fe:	ab0a      	add	r3, sp, #40	@ 0x28
 800a500:	f10d 0226 	add.w	r2, sp, #38	@ 0x26
 800a504:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800a508:	aa09      	add	r2, sp, #36	@ 0x24
 800a50a:	9200      	str	r2, [sp, #0]
 800a50c:	4937      	ldr	r1, [pc, #220]	@ (800a5ec <_tzset_unlocked_r+0x330>)
 800a50e:	9303      	str	r3, [sp, #12]
 800a510:	f10d 0222 	add.w	r2, sp, #34	@ 0x22
 800a514:	4628      	mov	r0, r5
 800a516:	f001 ffd5 	bl	800c4c4 <siscanf>
 800a51a:	2803      	cmp	r0, #3
 800a51c:	f47f aefc 	bne.w	800a318 <_tzset_unlocked_r+0x5c>
 800a520:	f8bd 1022 	ldrh.w	r1, [sp, #34]	@ 0x22
 800a524:	1e4b      	subs	r3, r1, #1
 800a526:	2b0b      	cmp	r3, #11
 800a528:	f63f aef6 	bhi.w	800a318 <_tzset_unlocked_r+0x5c>
 800a52c:	f8bd 2024 	ldrh.w	r2, [sp, #36]	@ 0x24
 800a530:	1e53      	subs	r3, r2, #1
 800a532:	2b04      	cmp	r3, #4
 800a534:	f63f aef0 	bhi.w	800a318 <_tzset_unlocked_r+0x5c>
 800a538:	f8bd 3026 	ldrh.w	r3, [sp, #38]	@ 0x26
 800a53c:	2b06      	cmp	r3, #6
 800a53e:	f63f aeeb 	bhi.w	800a318 <_tzset_unlocked_r+0x5c>
 800a542:	e9c7 1203 	strd	r1, r2, [r7, #12]
 800a546:	f887 9008 	strb.w	r9, [r7, #8]
 800a54a:	617b      	str	r3, [r7, #20]
 800a54c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a54e:	eb05 0903 	add.w	r9, r5, r3
 800a552:	2500      	movs	r5, #0
 800a554:	f04f 0302 	mov.w	r3, #2
 800a558:	f8ad 301c 	strh.w	r3, [sp, #28]
 800a55c:	f8ad 501e 	strh.w	r5, [sp, #30]
 800a560:	f8ad 5020 	strh.w	r5, [sp, #32]
 800a564:	950a      	str	r5, [sp, #40]	@ 0x28
 800a566:	f899 3000 	ldrb.w	r3, [r9]
 800a56a:	2b2f      	cmp	r3, #47	@ 0x2f
 800a56c:	f040 8096 	bne.w	800a69c <_tzset_unlocked_r+0x3e0>
 800a570:	ab0a      	add	r3, sp, #40	@ 0x28
 800a572:	aa08      	add	r2, sp, #32
 800a574:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800a578:	f10d 021e 	add.w	r2, sp, #30
 800a57c:	9200      	str	r2, [sp, #0]
 800a57e:	491c      	ldr	r1, [pc, #112]	@ (800a5f0 <_tzset_unlocked_r+0x334>)
 800a580:	9303      	str	r3, [sp, #12]
 800a582:	aa07      	add	r2, sp, #28
 800a584:	4648      	mov	r0, r9
 800a586:	f001 ff9d 	bl	800c4c4 <siscanf>
 800a58a:	42a8      	cmp	r0, r5
 800a58c:	f300 8086 	bgt.w	800a69c <_tzset_unlocked_r+0x3e0>
 800a590:	214a      	movs	r1, #74	@ 0x4a
 800a592:	2200      	movs	r2, #0
 800a594:	2300      	movs	r3, #0
 800a596:	e9c4 5503 	strd	r5, r5, [r4, #12]
 800a59a:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800a59e:	e9c4 2308 	strd	r2, r3, [r4, #32]
 800a5a2:	e9c4 550d 	strd	r5, r5, [r4, #52]	@ 0x34
 800a5a6:	e9c4 550f 	strd	r5, r5, [r4, #60]	@ 0x3c
 800a5aa:	e9c4 2312 	strd	r2, r3, [r4, #72]	@ 0x48
 800a5ae:	7221      	strb	r1, [r4, #8]
 800a5b0:	62a5      	str	r5, [r4, #40]	@ 0x28
 800a5b2:	f884 1030 	strb.w	r1, [r4, #48]	@ 0x30
 800a5b6:	6525      	str	r5, [r4, #80]	@ 0x50
 800a5b8:	e6ae      	b.n	800a318 <_tzset_unlocked_r+0x5c>
 800a5ba:	bf00      	nop
 800a5bc:	0800d87b 	.word	0x0800d87b
 800a5c0:	20005524 	.word	0x20005524
 800a5c4:	20005540 	.word	0x20005540
 800a5c8:	0800d87e 	.word	0x0800d87e
 800a5cc:	20005544 	.word	0x20005544
 800a5d0:	20000024 	.word	0x20000024
 800a5d4:	0800da2f 	.word	0x0800da2f
 800a5d8:	20005534 	.word	0x20005534
 800a5dc:	0800d882 	.word	0x0800d882
 800a5e0:	0800d8b7 	.word	0x0800d8b7
 800a5e4:	20005528 	.word	0x20005528
 800a5e8:	0800d895 	.word	0x0800d895
 800a5ec:	0800d8a3 	.word	0x0800d8a3
 800a5f0:	0800d8b6 	.word	0x0800d8b6
 800a5f4:	4a3e      	ldr	r2, [pc, #248]	@ (800a6f0 <_tzset_unlocked_r+0x434>)
 800a5f6:	493f      	ldr	r1, [pc, #252]	@ (800a6f4 <_tzset_unlocked_r+0x438>)
 800a5f8:	ab0a      	add	r3, sp, #40	@ 0x28
 800a5fa:	4648      	mov	r0, r9
 800a5fc:	f001 ff62 	bl	800c4c4 <siscanf>
 800a600:	2800      	cmp	r0, #0
 800a602:	f77f af17 	ble.w	800a434 <_tzset_unlocked_r+0x178>
 800a606:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a608:	3b03      	subs	r3, #3
 800a60a:	2b07      	cmp	r3, #7
 800a60c:	f67f af42 	bls.w	800a494 <_tzset_unlocked_r+0x1d8>
 800a610:	e682      	b.n	800a318 <_tzset_unlocked_r+0x5c>
 800a612:	2b2b      	cmp	r3, #43	@ 0x2b
 800a614:	bf08      	it	eq
 800a616:	3501      	addeq	r5, #1
 800a618:	f04f 0901 	mov.w	r9, #1
 800a61c:	e745      	b.n	800a4aa <_tzset_unlocked_r+0x1ee>
 800a61e:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 800a622:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800a626:	213c      	movs	r1, #60	@ 0x3c
 800a628:	fb01 3302 	mla	r3, r1, r2, r3
 800a62c:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 800a630:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 800a634:	fb01 3302 	mla	r3, r1, r2, r3
 800a638:	fb09 f303 	mul.w	r3, r9, r3
 800a63c:	e74f      	b.n	800a4de <_tzset_unlocked_r+0x222>
 800a63e:	f04f 0b01 	mov.w	fp, #1
 800a642:	e752      	b.n	800a4ea <_tzset_unlocked_r+0x22e>
 800a644:	f1b9 0f4a 	cmp.w	r9, #74	@ 0x4a
 800a648:	bf06      	itte	eq
 800a64a:	3501      	addeq	r5, #1
 800a64c:	464b      	moveq	r3, r9
 800a64e:	2344      	movne	r3, #68	@ 0x44
 800a650:	220a      	movs	r2, #10
 800a652:	a90b      	add	r1, sp, #44	@ 0x2c
 800a654:	4628      	mov	r0, r5
 800a656:	9305      	str	r3, [sp, #20]
 800a658:	f001 fcf4 	bl	800c044 <strtoul>
 800a65c:	f8dd 902c 	ldr.w	r9, [sp, #44]	@ 0x2c
 800a660:	9b05      	ldr	r3, [sp, #20]
 800a662:	f8ad 0026 	strh.w	r0, [sp, #38]	@ 0x26
 800a666:	45a9      	cmp	r9, r5
 800a668:	d114      	bne.n	800a694 <_tzset_unlocked_r+0x3d8>
 800a66a:	234d      	movs	r3, #77	@ 0x4d
 800a66c:	f1bb 0f00 	cmp.w	fp, #0
 800a670:	d107      	bne.n	800a682 <_tzset_unlocked_r+0x3c6>
 800a672:	7223      	strb	r3, [r4, #8]
 800a674:	2103      	movs	r1, #3
 800a676:	2302      	movs	r3, #2
 800a678:	e9c4 1303 	strd	r1, r3, [r4, #12]
 800a67c:	f8c4 b014 	str.w	fp, [r4, #20]
 800a680:	e767      	b.n	800a552 <_tzset_unlocked_r+0x296>
 800a682:	f884 3030 	strb.w	r3, [r4, #48]	@ 0x30
 800a686:	220b      	movs	r2, #11
 800a688:	2301      	movs	r3, #1
 800a68a:	e9c4 230d 	strd	r2, r3, [r4, #52]	@ 0x34
 800a68e:	2300      	movs	r3, #0
 800a690:	63e3      	str	r3, [r4, #60]	@ 0x3c
 800a692:	e75e      	b.n	800a552 <_tzset_unlocked_r+0x296>
 800a694:	b280      	uxth	r0, r0
 800a696:	723b      	strb	r3, [r7, #8]
 800a698:	6178      	str	r0, [r7, #20]
 800a69a:	e75a      	b.n	800a552 <_tzset_unlocked_r+0x296>
 800a69c:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 800a6a0:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 800a6a4:	213c      	movs	r1, #60	@ 0x3c
 800a6a6:	fb01 3302 	mla	r3, r1, r2, r3
 800a6aa:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 800a6ae:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 800a6b2:	fb01 3302 	mla	r3, r1, r2, r3
 800a6b6:	61bb      	str	r3, [r7, #24]
 800a6b8:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 800a6ba:	3728      	adds	r7, #40	@ 0x28
 800a6bc:	444d      	add	r5, r9
 800a6be:	f1bb 0f00 	cmp.w	fp, #0
 800a6c2:	d0bc      	beq.n	800a63e <_tzset_unlocked_r+0x382>
 800a6c4:	9b04      	ldr	r3, [sp, #16]
 800a6c6:	6523      	str	r3, [r4, #80]	@ 0x50
 800a6c8:	4b0b      	ldr	r3, [pc, #44]	@ (800a6f8 <_tzset_unlocked_r+0x43c>)
 800a6ca:	f8c8 3000 	str.w	r3, [r8]
 800a6ce:	6860      	ldr	r0, [r4, #4]
 800a6d0:	4b07      	ldr	r3, [pc, #28]	@ (800a6f0 <_tzset_unlocked_r+0x434>)
 800a6d2:	62a6      	str	r6, [r4, #40]	@ 0x28
 800a6d4:	f8c8 3004 	str.w	r3, [r8, #4]
 800a6d8:	f001 ffe4 	bl	800c6a4 <__tzcalc_limits>
 800a6dc:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800a6de:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 800a6e0:	f8ca 2000 	str.w	r2, [sl]
 800a6e4:	1a9b      	subs	r3, r3, r2
 800a6e6:	4a05      	ldr	r2, [pc, #20]	@ (800a6fc <_tzset_unlocked_r+0x440>)
 800a6e8:	bf18      	it	ne
 800a6ea:	2301      	movne	r3, #1
 800a6ec:	6013      	str	r3, [r2, #0]
 800a6ee:	e613      	b.n	800a318 <_tzset_unlocked_r+0x5c>
 800a6f0:	20005528 	.word	0x20005528
 800a6f4:	0800d895 	.word	0x0800d895
 800a6f8:	20005534 	.word	0x20005534
 800a6fc:	20005544 	.word	0x20005544

0800a700 <_localeconv_r>:
 800a700:	4800      	ldr	r0, [pc, #0]	@ (800a704 <_localeconv_r+0x4>)
 800a702:	4770      	bx	lr
 800a704:	200001c8 	.word	0x200001c8

0800a708 <_close_r>:
 800a708:	b538      	push	{r3, r4, r5, lr}
 800a70a:	4d06      	ldr	r5, [pc, #24]	@ (800a724 <_close_r+0x1c>)
 800a70c:	2300      	movs	r3, #0
 800a70e:	4604      	mov	r4, r0
 800a710:	4608      	mov	r0, r1
 800a712:	602b      	str	r3, [r5, #0]
 800a714:	f7f7 f85e 	bl	80017d4 <_close>
 800a718:	1c43      	adds	r3, r0, #1
 800a71a:	d102      	bne.n	800a722 <_close_r+0x1a>
 800a71c:	682b      	ldr	r3, [r5, #0]
 800a71e:	b103      	cbz	r3, 800a722 <_close_r+0x1a>
 800a720:	6023      	str	r3, [r4, #0]
 800a722:	bd38      	pop	{r3, r4, r5, pc}
 800a724:	20005548 	.word	0x20005548

0800a728 <_reclaim_reent>:
 800a728:	4b2d      	ldr	r3, [pc, #180]	@ (800a7e0 <_reclaim_reent+0xb8>)
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	4283      	cmp	r3, r0
 800a72e:	b570      	push	{r4, r5, r6, lr}
 800a730:	4604      	mov	r4, r0
 800a732:	d053      	beq.n	800a7dc <_reclaim_reent+0xb4>
 800a734:	69c3      	ldr	r3, [r0, #28]
 800a736:	b31b      	cbz	r3, 800a780 <_reclaim_reent+0x58>
 800a738:	68db      	ldr	r3, [r3, #12]
 800a73a:	b163      	cbz	r3, 800a756 <_reclaim_reent+0x2e>
 800a73c:	2500      	movs	r5, #0
 800a73e:	69e3      	ldr	r3, [r4, #28]
 800a740:	68db      	ldr	r3, [r3, #12]
 800a742:	5959      	ldr	r1, [r3, r5]
 800a744:	b9b1      	cbnz	r1, 800a774 <_reclaim_reent+0x4c>
 800a746:	3504      	adds	r5, #4
 800a748:	2d80      	cmp	r5, #128	@ 0x80
 800a74a:	d1f8      	bne.n	800a73e <_reclaim_reent+0x16>
 800a74c:	69e3      	ldr	r3, [r4, #28]
 800a74e:	4620      	mov	r0, r4
 800a750:	68d9      	ldr	r1, [r3, #12]
 800a752:	f000 ff3d 	bl	800b5d0 <_free_r>
 800a756:	69e3      	ldr	r3, [r4, #28]
 800a758:	6819      	ldr	r1, [r3, #0]
 800a75a:	b111      	cbz	r1, 800a762 <_reclaim_reent+0x3a>
 800a75c:	4620      	mov	r0, r4
 800a75e:	f000 ff37 	bl	800b5d0 <_free_r>
 800a762:	69e3      	ldr	r3, [r4, #28]
 800a764:	689d      	ldr	r5, [r3, #8]
 800a766:	b15d      	cbz	r5, 800a780 <_reclaim_reent+0x58>
 800a768:	4629      	mov	r1, r5
 800a76a:	4620      	mov	r0, r4
 800a76c:	682d      	ldr	r5, [r5, #0]
 800a76e:	f000 ff2f 	bl	800b5d0 <_free_r>
 800a772:	e7f8      	b.n	800a766 <_reclaim_reent+0x3e>
 800a774:	680e      	ldr	r6, [r1, #0]
 800a776:	4620      	mov	r0, r4
 800a778:	f000 ff2a 	bl	800b5d0 <_free_r>
 800a77c:	4631      	mov	r1, r6
 800a77e:	e7e1      	b.n	800a744 <_reclaim_reent+0x1c>
 800a780:	6961      	ldr	r1, [r4, #20]
 800a782:	b111      	cbz	r1, 800a78a <_reclaim_reent+0x62>
 800a784:	4620      	mov	r0, r4
 800a786:	f000 ff23 	bl	800b5d0 <_free_r>
 800a78a:	69e1      	ldr	r1, [r4, #28]
 800a78c:	b111      	cbz	r1, 800a794 <_reclaim_reent+0x6c>
 800a78e:	4620      	mov	r0, r4
 800a790:	f000 ff1e 	bl	800b5d0 <_free_r>
 800a794:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800a796:	b111      	cbz	r1, 800a79e <_reclaim_reent+0x76>
 800a798:	4620      	mov	r0, r4
 800a79a:	f000 ff19 	bl	800b5d0 <_free_r>
 800a79e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a7a0:	b111      	cbz	r1, 800a7a8 <_reclaim_reent+0x80>
 800a7a2:	4620      	mov	r0, r4
 800a7a4:	f000 ff14 	bl	800b5d0 <_free_r>
 800a7a8:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800a7aa:	b111      	cbz	r1, 800a7b2 <_reclaim_reent+0x8a>
 800a7ac:	4620      	mov	r0, r4
 800a7ae:	f000 ff0f 	bl	800b5d0 <_free_r>
 800a7b2:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800a7b4:	b111      	cbz	r1, 800a7bc <_reclaim_reent+0x94>
 800a7b6:	4620      	mov	r0, r4
 800a7b8:	f000 ff0a 	bl	800b5d0 <_free_r>
 800a7bc:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800a7be:	b111      	cbz	r1, 800a7c6 <_reclaim_reent+0x9e>
 800a7c0:	4620      	mov	r0, r4
 800a7c2:	f000 ff05 	bl	800b5d0 <_free_r>
 800a7c6:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800a7c8:	b111      	cbz	r1, 800a7d0 <_reclaim_reent+0xa8>
 800a7ca:	4620      	mov	r0, r4
 800a7cc:	f000 ff00 	bl	800b5d0 <_free_r>
 800a7d0:	6a23      	ldr	r3, [r4, #32]
 800a7d2:	b11b      	cbz	r3, 800a7dc <_reclaim_reent+0xb4>
 800a7d4:	4620      	mov	r0, r4
 800a7d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a7da:	4718      	bx	r3
 800a7dc:	bd70      	pop	{r4, r5, r6, pc}
 800a7de:	bf00      	nop
 800a7e0:	2000002c 	.word	0x2000002c

0800a7e4 <_lseek_r>:
 800a7e4:	b538      	push	{r3, r4, r5, lr}
 800a7e6:	4d07      	ldr	r5, [pc, #28]	@ (800a804 <_lseek_r+0x20>)
 800a7e8:	4604      	mov	r4, r0
 800a7ea:	4608      	mov	r0, r1
 800a7ec:	4611      	mov	r1, r2
 800a7ee:	2200      	movs	r2, #0
 800a7f0:	602a      	str	r2, [r5, #0]
 800a7f2:	461a      	mov	r2, r3
 800a7f4:	f7f7 f815 	bl	8001822 <_lseek>
 800a7f8:	1c43      	adds	r3, r0, #1
 800a7fa:	d102      	bne.n	800a802 <_lseek_r+0x1e>
 800a7fc:	682b      	ldr	r3, [r5, #0]
 800a7fe:	b103      	cbz	r3, 800a802 <_lseek_r+0x1e>
 800a800:	6023      	str	r3, [r4, #0]
 800a802:	bd38      	pop	{r3, r4, r5, pc}
 800a804:	20005548 	.word	0x20005548

0800a808 <_read_r>:
 800a808:	b538      	push	{r3, r4, r5, lr}
 800a80a:	4d07      	ldr	r5, [pc, #28]	@ (800a828 <_read_r+0x20>)
 800a80c:	4604      	mov	r4, r0
 800a80e:	4608      	mov	r0, r1
 800a810:	4611      	mov	r1, r2
 800a812:	2200      	movs	r2, #0
 800a814:	602a      	str	r2, [r5, #0]
 800a816:	461a      	mov	r2, r3
 800a818:	f7f6 ffbf 	bl	800179a <_read>
 800a81c:	1c43      	adds	r3, r0, #1
 800a81e:	d102      	bne.n	800a826 <_read_r+0x1e>
 800a820:	682b      	ldr	r3, [r5, #0]
 800a822:	b103      	cbz	r3, 800a826 <_read_r+0x1e>
 800a824:	6023      	str	r3, [r4, #0]
 800a826:	bd38      	pop	{r3, r4, r5, pc}
 800a828:	20005548 	.word	0x20005548

0800a82c <_write_r>:
 800a82c:	b538      	push	{r3, r4, r5, lr}
 800a82e:	4d07      	ldr	r5, [pc, #28]	@ (800a84c <_write_r+0x20>)
 800a830:	4604      	mov	r4, r0
 800a832:	4608      	mov	r0, r1
 800a834:	4611      	mov	r1, r2
 800a836:	2200      	movs	r2, #0
 800a838:	602a      	str	r2, [r5, #0]
 800a83a:	461a      	mov	r2, r3
 800a83c:	f7f6 fbca 	bl	8000fd4 <_write>
 800a840:	1c43      	adds	r3, r0, #1
 800a842:	d102      	bne.n	800a84a <_write_r+0x1e>
 800a844:	682b      	ldr	r3, [r5, #0]
 800a846:	b103      	cbz	r3, 800a84a <_write_r+0x1e>
 800a848:	6023      	str	r3, [r4, #0]
 800a84a:	bd38      	pop	{r3, r4, r5, pc}
 800a84c:	20005548 	.word	0x20005548

0800a850 <__errno>:
 800a850:	4b01      	ldr	r3, [pc, #4]	@ (800a858 <__errno+0x8>)
 800a852:	6818      	ldr	r0, [r3, #0]
 800a854:	4770      	bx	lr
 800a856:	bf00      	nop
 800a858:	2000002c 	.word	0x2000002c

0800a85c <__libc_init_array>:
 800a85c:	b570      	push	{r4, r5, r6, lr}
 800a85e:	4d0d      	ldr	r5, [pc, #52]	@ (800a894 <__libc_init_array+0x38>)
 800a860:	4c0d      	ldr	r4, [pc, #52]	@ (800a898 <__libc_init_array+0x3c>)
 800a862:	1b64      	subs	r4, r4, r5
 800a864:	10a4      	asrs	r4, r4, #2
 800a866:	2600      	movs	r6, #0
 800a868:	42a6      	cmp	r6, r4
 800a86a:	d109      	bne.n	800a880 <__libc_init_array+0x24>
 800a86c:	4d0b      	ldr	r5, [pc, #44]	@ (800a89c <__libc_init_array+0x40>)
 800a86e:	4c0c      	ldr	r4, [pc, #48]	@ (800a8a0 <__libc_init_array+0x44>)
 800a870:	f002 fe86 	bl	800d580 <_init>
 800a874:	1b64      	subs	r4, r4, r5
 800a876:	10a4      	asrs	r4, r4, #2
 800a878:	2600      	movs	r6, #0
 800a87a:	42a6      	cmp	r6, r4
 800a87c:	d105      	bne.n	800a88a <__libc_init_array+0x2e>
 800a87e:	bd70      	pop	{r4, r5, r6, pc}
 800a880:	f855 3b04 	ldr.w	r3, [r5], #4
 800a884:	4798      	blx	r3
 800a886:	3601      	adds	r6, #1
 800a888:	e7ee      	b.n	800a868 <__libc_init_array+0xc>
 800a88a:	f855 3b04 	ldr.w	r3, [r5], #4
 800a88e:	4798      	blx	r3
 800a890:	3601      	adds	r6, #1
 800a892:	e7f2      	b.n	800a87a <__libc_init_array+0x1e>
 800a894:	0800de9c 	.word	0x0800de9c
 800a898:	0800de9c 	.word	0x0800de9c
 800a89c:	0800de9c 	.word	0x0800de9c
 800a8a0:	0800dea0 	.word	0x0800dea0

0800a8a4 <__retarget_lock_init_recursive>:
 800a8a4:	4770      	bx	lr

0800a8a6 <__retarget_lock_acquire>:
 800a8a6:	4770      	bx	lr

0800a8a8 <__retarget_lock_acquire_recursive>:
 800a8a8:	4770      	bx	lr

0800a8aa <__retarget_lock_release>:
 800a8aa:	4770      	bx	lr

0800a8ac <__retarget_lock_release_recursive>:
 800a8ac:	4770      	bx	lr

0800a8ae <strcpy>:
 800a8ae:	4603      	mov	r3, r0
 800a8b0:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a8b4:	f803 2b01 	strb.w	r2, [r3], #1
 800a8b8:	2a00      	cmp	r2, #0
 800a8ba:	d1f9      	bne.n	800a8b0 <strcpy+0x2>
 800a8bc:	4770      	bx	lr

0800a8be <memcpy>:
 800a8be:	440a      	add	r2, r1
 800a8c0:	4291      	cmp	r1, r2
 800a8c2:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800a8c6:	d100      	bne.n	800a8ca <memcpy+0xc>
 800a8c8:	4770      	bx	lr
 800a8ca:	b510      	push	{r4, lr}
 800a8cc:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a8d0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a8d4:	4291      	cmp	r1, r2
 800a8d6:	d1f9      	bne.n	800a8cc <memcpy+0xe>
 800a8d8:	bd10      	pop	{r4, pc}

0800a8da <abs>:
 800a8da:	2800      	cmp	r0, #0
 800a8dc:	bfb8      	it	lt
 800a8de:	4240      	neglt	r0, r0
 800a8e0:	4770      	bx	lr
	...

0800a8e4 <__assert_func>:
 800a8e4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a8e6:	4614      	mov	r4, r2
 800a8e8:	461a      	mov	r2, r3
 800a8ea:	4b09      	ldr	r3, [pc, #36]	@ (800a910 <__assert_func+0x2c>)
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	4605      	mov	r5, r0
 800a8f0:	68d8      	ldr	r0, [r3, #12]
 800a8f2:	b14c      	cbz	r4, 800a908 <__assert_func+0x24>
 800a8f4:	4b07      	ldr	r3, [pc, #28]	@ (800a914 <__assert_func+0x30>)
 800a8f6:	9100      	str	r1, [sp, #0]
 800a8f8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a8fc:	4906      	ldr	r1, [pc, #24]	@ (800a918 <__assert_func+0x34>)
 800a8fe:	462b      	mov	r3, r5
 800a900:	f001 fd98 	bl	800c434 <fiprintf>
 800a904:	f001 ff92 	bl	800c82c <abort>
 800a908:	4b04      	ldr	r3, [pc, #16]	@ (800a91c <__assert_func+0x38>)
 800a90a:	461c      	mov	r4, r3
 800a90c:	e7f3      	b.n	800a8f6 <__assert_func+0x12>
 800a90e:	bf00      	nop
 800a910:	2000002c 	.word	0x2000002c
 800a914:	0800d9f4 	.word	0x0800d9f4
 800a918:	0800da01 	.word	0x0800da01
 800a91c:	0800da2f 	.word	0x0800da2f

0800a920 <quorem>:
 800a920:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a924:	6903      	ldr	r3, [r0, #16]
 800a926:	690c      	ldr	r4, [r1, #16]
 800a928:	42a3      	cmp	r3, r4
 800a92a:	4607      	mov	r7, r0
 800a92c:	db7e      	blt.n	800aa2c <quorem+0x10c>
 800a92e:	3c01      	subs	r4, #1
 800a930:	f101 0814 	add.w	r8, r1, #20
 800a934:	00a3      	lsls	r3, r4, #2
 800a936:	f100 0514 	add.w	r5, r0, #20
 800a93a:	9300      	str	r3, [sp, #0]
 800a93c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a940:	9301      	str	r3, [sp, #4]
 800a942:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a946:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a94a:	3301      	adds	r3, #1
 800a94c:	429a      	cmp	r2, r3
 800a94e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a952:	fbb2 f6f3 	udiv	r6, r2, r3
 800a956:	d32e      	bcc.n	800a9b6 <quorem+0x96>
 800a958:	f04f 0a00 	mov.w	sl, #0
 800a95c:	46c4      	mov	ip, r8
 800a95e:	46ae      	mov	lr, r5
 800a960:	46d3      	mov	fp, sl
 800a962:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a966:	b298      	uxth	r0, r3
 800a968:	fb06 a000 	mla	r0, r6, r0, sl
 800a96c:	0c02      	lsrs	r2, r0, #16
 800a96e:	0c1b      	lsrs	r3, r3, #16
 800a970:	fb06 2303 	mla	r3, r6, r3, r2
 800a974:	f8de 2000 	ldr.w	r2, [lr]
 800a978:	b280      	uxth	r0, r0
 800a97a:	b292      	uxth	r2, r2
 800a97c:	1a12      	subs	r2, r2, r0
 800a97e:	445a      	add	r2, fp
 800a980:	f8de 0000 	ldr.w	r0, [lr]
 800a984:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a988:	b29b      	uxth	r3, r3
 800a98a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800a98e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800a992:	b292      	uxth	r2, r2
 800a994:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800a998:	45e1      	cmp	r9, ip
 800a99a:	f84e 2b04 	str.w	r2, [lr], #4
 800a99e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800a9a2:	d2de      	bcs.n	800a962 <quorem+0x42>
 800a9a4:	9b00      	ldr	r3, [sp, #0]
 800a9a6:	58eb      	ldr	r3, [r5, r3]
 800a9a8:	b92b      	cbnz	r3, 800a9b6 <quorem+0x96>
 800a9aa:	9b01      	ldr	r3, [sp, #4]
 800a9ac:	3b04      	subs	r3, #4
 800a9ae:	429d      	cmp	r5, r3
 800a9b0:	461a      	mov	r2, r3
 800a9b2:	d32f      	bcc.n	800aa14 <quorem+0xf4>
 800a9b4:	613c      	str	r4, [r7, #16]
 800a9b6:	4638      	mov	r0, r7
 800a9b8:	f001 f9cc 	bl	800bd54 <__mcmp>
 800a9bc:	2800      	cmp	r0, #0
 800a9be:	db25      	blt.n	800aa0c <quorem+0xec>
 800a9c0:	4629      	mov	r1, r5
 800a9c2:	2000      	movs	r0, #0
 800a9c4:	f858 2b04 	ldr.w	r2, [r8], #4
 800a9c8:	f8d1 c000 	ldr.w	ip, [r1]
 800a9cc:	fa1f fe82 	uxth.w	lr, r2
 800a9d0:	fa1f f38c 	uxth.w	r3, ip
 800a9d4:	eba3 030e 	sub.w	r3, r3, lr
 800a9d8:	4403      	add	r3, r0
 800a9da:	0c12      	lsrs	r2, r2, #16
 800a9dc:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800a9e0:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800a9e4:	b29b      	uxth	r3, r3
 800a9e6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a9ea:	45c1      	cmp	r9, r8
 800a9ec:	f841 3b04 	str.w	r3, [r1], #4
 800a9f0:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a9f4:	d2e6      	bcs.n	800a9c4 <quorem+0xa4>
 800a9f6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a9fa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a9fe:	b922      	cbnz	r2, 800aa0a <quorem+0xea>
 800aa00:	3b04      	subs	r3, #4
 800aa02:	429d      	cmp	r5, r3
 800aa04:	461a      	mov	r2, r3
 800aa06:	d30b      	bcc.n	800aa20 <quorem+0x100>
 800aa08:	613c      	str	r4, [r7, #16]
 800aa0a:	3601      	adds	r6, #1
 800aa0c:	4630      	mov	r0, r6
 800aa0e:	b003      	add	sp, #12
 800aa10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa14:	6812      	ldr	r2, [r2, #0]
 800aa16:	3b04      	subs	r3, #4
 800aa18:	2a00      	cmp	r2, #0
 800aa1a:	d1cb      	bne.n	800a9b4 <quorem+0x94>
 800aa1c:	3c01      	subs	r4, #1
 800aa1e:	e7c6      	b.n	800a9ae <quorem+0x8e>
 800aa20:	6812      	ldr	r2, [r2, #0]
 800aa22:	3b04      	subs	r3, #4
 800aa24:	2a00      	cmp	r2, #0
 800aa26:	d1ef      	bne.n	800aa08 <quorem+0xe8>
 800aa28:	3c01      	subs	r4, #1
 800aa2a:	e7ea      	b.n	800aa02 <quorem+0xe2>
 800aa2c:	2000      	movs	r0, #0
 800aa2e:	e7ee      	b.n	800aa0e <quorem+0xee>

0800aa30 <_dtoa_r>:
 800aa30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa34:	69c7      	ldr	r7, [r0, #28]
 800aa36:	b097      	sub	sp, #92	@ 0x5c
 800aa38:	ed8d 0b04 	vstr	d0, [sp, #16]
 800aa3c:	ec55 4b10 	vmov	r4, r5, d0
 800aa40:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800aa42:	9107      	str	r1, [sp, #28]
 800aa44:	4681      	mov	r9, r0
 800aa46:	920c      	str	r2, [sp, #48]	@ 0x30
 800aa48:	9311      	str	r3, [sp, #68]	@ 0x44
 800aa4a:	b97f      	cbnz	r7, 800aa6c <_dtoa_r+0x3c>
 800aa4c:	2010      	movs	r0, #16
 800aa4e:	f000 fe51 	bl	800b6f4 <malloc>
 800aa52:	4602      	mov	r2, r0
 800aa54:	f8c9 001c 	str.w	r0, [r9, #28]
 800aa58:	b920      	cbnz	r0, 800aa64 <_dtoa_r+0x34>
 800aa5a:	4ba9      	ldr	r3, [pc, #676]	@ (800ad00 <_dtoa_r+0x2d0>)
 800aa5c:	21ef      	movs	r1, #239	@ 0xef
 800aa5e:	48a9      	ldr	r0, [pc, #676]	@ (800ad04 <_dtoa_r+0x2d4>)
 800aa60:	f7ff ff40 	bl	800a8e4 <__assert_func>
 800aa64:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800aa68:	6007      	str	r7, [r0, #0]
 800aa6a:	60c7      	str	r7, [r0, #12]
 800aa6c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800aa70:	6819      	ldr	r1, [r3, #0]
 800aa72:	b159      	cbz	r1, 800aa8c <_dtoa_r+0x5c>
 800aa74:	685a      	ldr	r2, [r3, #4]
 800aa76:	604a      	str	r2, [r1, #4]
 800aa78:	2301      	movs	r3, #1
 800aa7a:	4093      	lsls	r3, r2
 800aa7c:	608b      	str	r3, [r1, #8]
 800aa7e:	4648      	mov	r0, r9
 800aa80:	f000 ff36 	bl	800b8f0 <_Bfree>
 800aa84:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800aa88:	2200      	movs	r2, #0
 800aa8a:	601a      	str	r2, [r3, #0]
 800aa8c:	1e2b      	subs	r3, r5, #0
 800aa8e:	bfb9      	ittee	lt
 800aa90:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800aa94:	9305      	strlt	r3, [sp, #20]
 800aa96:	2300      	movge	r3, #0
 800aa98:	6033      	strge	r3, [r6, #0]
 800aa9a:	9f05      	ldr	r7, [sp, #20]
 800aa9c:	4b9a      	ldr	r3, [pc, #616]	@ (800ad08 <_dtoa_r+0x2d8>)
 800aa9e:	bfbc      	itt	lt
 800aaa0:	2201      	movlt	r2, #1
 800aaa2:	6032      	strlt	r2, [r6, #0]
 800aaa4:	43bb      	bics	r3, r7
 800aaa6:	d112      	bne.n	800aace <_dtoa_r+0x9e>
 800aaa8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800aaaa:	f242 730f 	movw	r3, #9999	@ 0x270f
 800aaae:	6013      	str	r3, [r2, #0]
 800aab0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800aab4:	4323      	orrs	r3, r4
 800aab6:	f000 855a 	beq.w	800b56e <_dtoa_r+0xb3e>
 800aaba:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800aabc:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800ad1c <_dtoa_r+0x2ec>
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	f000 855c 	beq.w	800b57e <_dtoa_r+0xb4e>
 800aac6:	f10a 0303 	add.w	r3, sl, #3
 800aaca:	f000 bd56 	b.w	800b57a <_dtoa_r+0xb4a>
 800aace:	ed9d 7b04 	vldr	d7, [sp, #16]
 800aad2:	2200      	movs	r2, #0
 800aad4:	ec51 0b17 	vmov	r0, r1, d7
 800aad8:	2300      	movs	r3, #0
 800aada:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800aade:	f7f6 f823 	bl	8000b28 <__aeabi_dcmpeq>
 800aae2:	4680      	mov	r8, r0
 800aae4:	b158      	cbz	r0, 800aafe <_dtoa_r+0xce>
 800aae6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800aae8:	2301      	movs	r3, #1
 800aaea:	6013      	str	r3, [r2, #0]
 800aaec:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800aaee:	b113      	cbz	r3, 800aaf6 <_dtoa_r+0xc6>
 800aaf0:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800aaf2:	4b86      	ldr	r3, [pc, #536]	@ (800ad0c <_dtoa_r+0x2dc>)
 800aaf4:	6013      	str	r3, [r2, #0]
 800aaf6:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800ad20 <_dtoa_r+0x2f0>
 800aafa:	f000 bd40 	b.w	800b57e <_dtoa_r+0xb4e>
 800aafe:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800ab02:	aa14      	add	r2, sp, #80	@ 0x50
 800ab04:	a915      	add	r1, sp, #84	@ 0x54
 800ab06:	4648      	mov	r0, r9
 800ab08:	f001 f9d4 	bl	800beb4 <__d2b>
 800ab0c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800ab10:	9002      	str	r0, [sp, #8]
 800ab12:	2e00      	cmp	r6, #0
 800ab14:	d078      	beq.n	800ac08 <_dtoa_r+0x1d8>
 800ab16:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ab18:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800ab1c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ab20:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800ab24:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800ab28:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800ab2c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800ab30:	4619      	mov	r1, r3
 800ab32:	2200      	movs	r2, #0
 800ab34:	4b76      	ldr	r3, [pc, #472]	@ (800ad10 <_dtoa_r+0x2e0>)
 800ab36:	f7f5 fbd7 	bl	80002e8 <__aeabi_dsub>
 800ab3a:	a36b      	add	r3, pc, #428	@ (adr r3, 800ace8 <_dtoa_r+0x2b8>)
 800ab3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab40:	f7f5 fd8a 	bl	8000658 <__aeabi_dmul>
 800ab44:	a36a      	add	r3, pc, #424	@ (adr r3, 800acf0 <_dtoa_r+0x2c0>)
 800ab46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab4a:	f7f5 fbcf 	bl	80002ec <__adddf3>
 800ab4e:	4604      	mov	r4, r0
 800ab50:	4630      	mov	r0, r6
 800ab52:	460d      	mov	r5, r1
 800ab54:	f7f5 fd16 	bl	8000584 <__aeabi_i2d>
 800ab58:	a367      	add	r3, pc, #412	@ (adr r3, 800acf8 <_dtoa_r+0x2c8>)
 800ab5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab5e:	f7f5 fd7b 	bl	8000658 <__aeabi_dmul>
 800ab62:	4602      	mov	r2, r0
 800ab64:	460b      	mov	r3, r1
 800ab66:	4620      	mov	r0, r4
 800ab68:	4629      	mov	r1, r5
 800ab6a:	f7f5 fbbf 	bl	80002ec <__adddf3>
 800ab6e:	4604      	mov	r4, r0
 800ab70:	460d      	mov	r5, r1
 800ab72:	f7f6 f821 	bl	8000bb8 <__aeabi_d2iz>
 800ab76:	2200      	movs	r2, #0
 800ab78:	4607      	mov	r7, r0
 800ab7a:	2300      	movs	r3, #0
 800ab7c:	4620      	mov	r0, r4
 800ab7e:	4629      	mov	r1, r5
 800ab80:	f7f5 ffdc 	bl	8000b3c <__aeabi_dcmplt>
 800ab84:	b140      	cbz	r0, 800ab98 <_dtoa_r+0x168>
 800ab86:	4638      	mov	r0, r7
 800ab88:	f7f5 fcfc 	bl	8000584 <__aeabi_i2d>
 800ab8c:	4622      	mov	r2, r4
 800ab8e:	462b      	mov	r3, r5
 800ab90:	f7f5 ffca 	bl	8000b28 <__aeabi_dcmpeq>
 800ab94:	b900      	cbnz	r0, 800ab98 <_dtoa_r+0x168>
 800ab96:	3f01      	subs	r7, #1
 800ab98:	2f16      	cmp	r7, #22
 800ab9a:	d852      	bhi.n	800ac42 <_dtoa_r+0x212>
 800ab9c:	4b5d      	ldr	r3, [pc, #372]	@ (800ad14 <_dtoa_r+0x2e4>)
 800ab9e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800aba2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aba6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800abaa:	f7f5 ffc7 	bl	8000b3c <__aeabi_dcmplt>
 800abae:	2800      	cmp	r0, #0
 800abb0:	d049      	beq.n	800ac46 <_dtoa_r+0x216>
 800abb2:	3f01      	subs	r7, #1
 800abb4:	2300      	movs	r3, #0
 800abb6:	9310      	str	r3, [sp, #64]	@ 0x40
 800abb8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800abba:	1b9b      	subs	r3, r3, r6
 800abbc:	1e5a      	subs	r2, r3, #1
 800abbe:	bf45      	ittet	mi
 800abc0:	f1c3 0301 	rsbmi	r3, r3, #1
 800abc4:	9300      	strmi	r3, [sp, #0]
 800abc6:	2300      	movpl	r3, #0
 800abc8:	2300      	movmi	r3, #0
 800abca:	9206      	str	r2, [sp, #24]
 800abcc:	bf54      	ite	pl
 800abce:	9300      	strpl	r3, [sp, #0]
 800abd0:	9306      	strmi	r3, [sp, #24]
 800abd2:	2f00      	cmp	r7, #0
 800abd4:	db39      	blt.n	800ac4a <_dtoa_r+0x21a>
 800abd6:	9b06      	ldr	r3, [sp, #24]
 800abd8:	970d      	str	r7, [sp, #52]	@ 0x34
 800abda:	443b      	add	r3, r7
 800abdc:	9306      	str	r3, [sp, #24]
 800abde:	2300      	movs	r3, #0
 800abe0:	9308      	str	r3, [sp, #32]
 800abe2:	9b07      	ldr	r3, [sp, #28]
 800abe4:	2b09      	cmp	r3, #9
 800abe6:	d863      	bhi.n	800acb0 <_dtoa_r+0x280>
 800abe8:	2b05      	cmp	r3, #5
 800abea:	bfc4      	itt	gt
 800abec:	3b04      	subgt	r3, #4
 800abee:	9307      	strgt	r3, [sp, #28]
 800abf0:	9b07      	ldr	r3, [sp, #28]
 800abf2:	f1a3 0302 	sub.w	r3, r3, #2
 800abf6:	bfcc      	ite	gt
 800abf8:	2400      	movgt	r4, #0
 800abfa:	2401      	movle	r4, #1
 800abfc:	2b03      	cmp	r3, #3
 800abfe:	d863      	bhi.n	800acc8 <_dtoa_r+0x298>
 800ac00:	e8df f003 	tbb	[pc, r3]
 800ac04:	2b375452 	.word	0x2b375452
 800ac08:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800ac0c:	441e      	add	r6, r3
 800ac0e:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800ac12:	2b20      	cmp	r3, #32
 800ac14:	bfc1      	itttt	gt
 800ac16:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800ac1a:	409f      	lslgt	r7, r3
 800ac1c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800ac20:	fa24 f303 	lsrgt.w	r3, r4, r3
 800ac24:	bfd6      	itet	le
 800ac26:	f1c3 0320 	rsble	r3, r3, #32
 800ac2a:	ea47 0003 	orrgt.w	r0, r7, r3
 800ac2e:	fa04 f003 	lslle.w	r0, r4, r3
 800ac32:	f7f5 fc97 	bl	8000564 <__aeabi_ui2d>
 800ac36:	2201      	movs	r2, #1
 800ac38:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800ac3c:	3e01      	subs	r6, #1
 800ac3e:	9212      	str	r2, [sp, #72]	@ 0x48
 800ac40:	e776      	b.n	800ab30 <_dtoa_r+0x100>
 800ac42:	2301      	movs	r3, #1
 800ac44:	e7b7      	b.n	800abb6 <_dtoa_r+0x186>
 800ac46:	9010      	str	r0, [sp, #64]	@ 0x40
 800ac48:	e7b6      	b.n	800abb8 <_dtoa_r+0x188>
 800ac4a:	9b00      	ldr	r3, [sp, #0]
 800ac4c:	1bdb      	subs	r3, r3, r7
 800ac4e:	9300      	str	r3, [sp, #0]
 800ac50:	427b      	negs	r3, r7
 800ac52:	9308      	str	r3, [sp, #32]
 800ac54:	2300      	movs	r3, #0
 800ac56:	930d      	str	r3, [sp, #52]	@ 0x34
 800ac58:	e7c3      	b.n	800abe2 <_dtoa_r+0x1b2>
 800ac5a:	2301      	movs	r3, #1
 800ac5c:	9309      	str	r3, [sp, #36]	@ 0x24
 800ac5e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ac60:	eb07 0b03 	add.w	fp, r7, r3
 800ac64:	f10b 0301 	add.w	r3, fp, #1
 800ac68:	2b01      	cmp	r3, #1
 800ac6a:	9303      	str	r3, [sp, #12]
 800ac6c:	bfb8      	it	lt
 800ac6e:	2301      	movlt	r3, #1
 800ac70:	e006      	b.n	800ac80 <_dtoa_r+0x250>
 800ac72:	2301      	movs	r3, #1
 800ac74:	9309      	str	r3, [sp, #36]	@ 0x24
 800ac76:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	dd28      	ble.n	800acce <_dtoa_r+0x29e>
 800ac7c:	469b      	mov	fp, r3
 800ac7e:	9303      	str	r3, [sp, #12]
 800ac80:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800ac84:	2100      	movs	r1, #0
 800ac86:	2204      	movs	r2, #4
 800ac88:	f102 0514 	add.w	r5, r2, #20
 800ac8c:	429d      	cmp	r5, r3
 800ac8e:	d926      	bls.n	800acde <_dtoa_r+0x2ae>
 800ac90:	6041      	str	r1, [r0, #4]
 800ac92:	4648      	mov	r0, r9
 800ac94:	f000 fdec 	bl	800b870 <_Balloc>
 800ac98:	4682      	mov	sl, r0
 800ac9a:	2800      	cmp	r0, #0
 800ac9c:	d142      	bne.n	800ad24 <_dtoa_r+0x2f4>
 800ac9e:	4b1e      	ldr	r3, [pc, #120]	@ (800ad18 <_dtoa_r+0x2e8>)
 800aca0:	4602      	mov	r2, r0
 800aca2:	f240 11af 	movw	r1, #431	@ 0x1af
 800aca6:	e6da      	b.n	800aa5e <_dtoa_r+0x2e>
 800aca8:	2300      	movs	r3, #0
 800acaa:	e7e3      	b.n	800ac74 <_dtoa_r+0x244>
 800acac:	2300      	movs	r3, #0
 800acae:	e7d5      	b.n	800ac5c <_dtoa_r+0x22c>
 800acb0:	2401      	movs	r4, #1
 800acb2:	2300      	movs	r3, #0
 800acb4:	9307      	str	r3, [sp, #28]
 800acb6:	9409      	str	r4, [sp, #36]	@ 0x24
 800acb8:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 800acbc:	2200      	movs	r2, #0
 800acbe:	f8cd b00c 	str.w	fp, [sp, #12]
 800acc2:	2312      	movs	r3, #18
 800acc4:	920c      	str	r2, [sp, #48]	@ 0x30
 800acc6:	e7db      	b.n	800ac80 <_dtoa_r+0x250>
 800acc8:	2301      	movs	r3, #1
 800acca:	9309      	str	r3, [sp, #36]	@ 0x24
 800accc:	e7f4      	b.n	800acb8 <_dtoa_r+0x288>
 800acce:	f04f 0b01 	mov.w	fp, #1
 800acd2:	f8cd b00c 	str.w	fp, [sp, #12]
 800acd6:	465b      	mov	r3, fp
 800acd8:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800acdc:	e7d0      	b.n	800ac80 <_dtoa_r+0x250>
 800acde:	3101      	adds	r1, #1
 800ace0:	0052      	lsls	r2, r2, #1
 800ace2:	e7d1      	b.n	800ac88 <_dtoa_r+0x258>
 800ace4:	f3af 8000 	nop.w
 800ace8:	636f4361 	.word	0x636f4361
 800acec:	3fd287a7 	.word	0x3fd287a7
 800acf0:	8b60c8b3 	.word	0x8b60c8b3
 800acf4:	3fc68a28 	.word	0x3fc68a28
 800acf8:	509f79fb 	.word	0x509f79fb
 800acfc:	3fd34413 	.word	0x3fd34413
 800ad00:	0800d71c 	.word	0x0800d71c
 800ad04:	0800da3d 	.word	0x0800da3d
 800ad08:	7ff00000 	.word	0x7ff00000
 800ad0c:	0800db31 	.word	0x0800db31
 800ad10:	3ff80000 	.word	0x3ff80000
 800ad14:	0800dc68 	.word	0x0800dc68
 800ad18:	0800da95 	.word	0x0800da95
 800ad1c:	0800da39 	.word	0x0800da39
 800ad20:	0800db30 	.word	0x0800db30
 800ad24:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800ad28:	6018      	str	r0, [r3, #0]
 800ad2a:	9b03      	ldr	r3, [sp, #12]
 800ad2c:	2b0e      	cmp	r3, #14
 800ad2e:	f200 80a1 	bhi.w	800ae74 <_dtoa_r+0x444>
 800ad32:	2c00      	cmp	r4, #0
 800ad34:	f000 809e 	beq.w	800ae74 <_dtoa_r+0x444>
 800ad38:	2f00      	cmp	r7, #0
 800ad3a:	dd33      	ble.n	800ada4 <_dtoa_r+0x374>
 800ad3c:	4b9c      	ldr	r3, [pc, #624]	@ (800afb0 <_dtoa_r+0x580>)
 800ad3e:	f007 020f 	and.w	r2, r7, #15
 800ad42:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ad46:	ed93 7b00 	vldr	d7, [r3]
 800ad4a:	05f8      	lsls	r0, r7, #23
 800ad4c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800ad50:	ea4f 1427 	mov.w	r4, r7, asr #4
 800ad54:	d516      	bpl.n	800ad84 <_dtoa_r+0x354>
 800ad56:	4b97      	ldr	r3, [pc, #604]	@ (800afb4 <_dtoa_r+0x584>)
 800ad58:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800ad5c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ad60:	f7f5 fda4 	bl	80008ac <__aeabi_ddiv>
 800ad64:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ad68:	f004 040f 	and.w	r4, r4, #15
 800ad6c:	2603      	movs	r6, #3
 800ad6e:	4d91      	ldr	r5, [pc, #580]	@ (800afb4 <_dtoa_r+0x584>)
 800ad70:	b954      	cbnz	r4, 800ad88 <_dtoa_r+0x358>
 800ad72:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800ad76:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ad7a:	f7f5 fd97 	bl	80008ac <__aeabi_ddiv>
 800ad7e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ad82:	e028      	b.n	800add6 <_dtoa_r+0x3a6>
 800ad84:	2602      	movs	r6, #2
 800ad86:	e7f2      	b.n	800ad6e <_dtoa_r+0x33e>
 800ad88:	07e1      	lsls	r1, r4, #31
 800ad8a:	d508      	bpl.n	800ad9e <_dtoa_r+0x36e>
 800ad8c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800ad90:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ad94:	f7f5 fc60 	bl	8000658 <__aeabi_dmul>
 800ad98:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800ad9c:	3601      	adds	r6, #1
 800ad9e:	1064      	asrs	r4, r4, #1
 800ada0:	3508      	adds	r5, #8
 800ada2:	e7e5      	b.n	800ad70 <_dtoa_r+0x340>
 800ada4:	f000 80af 	beq.w	800af06 <_dtoa_r+0x4d6>
 800ada8:	427c      	negs	r4, r7
 800adaa:	4b81      	ldr	r3, [pc, #516]	@ (800afb0 <_dtoa_r+0x580>)
 800adac:	4d81      	ldr	r5, [pc, #516]	@ (800afb4 <_dtoa_r+0x584>)
 800adae:	f004 020f 	and.w	r2, r4, #15
 800adb2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800adb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adba:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800adbe:	f7f5 fc4b 	bl	8000658 <__aeabi_dmul>
 800adc2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800adc6:	1124      	asrs	r4, r4, #4
 800adc8:	2300      	movs	r3, #0
 800adca:	2602      	movs	r6, #2
 800adcc:	2c00      	cmp	r4, #0
 800adce:	f040 808f 	bne.w	800aef0 <_dtoa_r+0x4c0>
 800add2:	2b00      	cmp	r3, #0
 800add4:	d1d3      	bne.n	800ad7e <_dtoa_r+0x34e>
 800add6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800add8:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800addc:	2b00      	cmp	r3, #0
 800adde:	f000 8094 	beq.w	800af0a <_dtoa_r+0x4da>
 800ade2:	4b75      	ldr	r3, [pc, #468]	@ (800afb8 <_dtoa_r+0x588>)
 800ade4:	2200      	movs	r2, #0
 800ade6:	4620      	mov	r0, r4
 800ade8:	4629      	mov	r1, r5
 800adea:	f7f5 fea7 	bl	8000b3c <__aeabi_dcmplt>
 800adee:	2800      	cmp	r0, #0
 800adf0:	f000 808b 	beq.w	800af0a <_dtoa_r+0x4da>
 800adf4:	9b03      	ldr	r3, [sp, #12]
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	f000 8087 	beq.w	800af0a <_dtoa_r+0x4da>
 800adfc:	f1bb 0f00 	cmp.w	fp, #0
 800ae00:	dd34      	ble.n	800ae6c <_dtoa_r+0x43c>
 800ae02:	4620      	mov	r0, r4
 800ae04:	4b6d      	ldr	r3, [pc, #436]	@ (800afbc <_dtoa_r+0x58c>)
 800ae06:	2200      	movs	r2, #0
 800ae08:	4629      	mov	r1, r5
 800ae0a:	f7f5 fc25 	bl	8000658 <__aeabi_dmul>
 800ae0e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ae12:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 800ae16:	3601      	adds	r6, #1
 800ae18:	465c      	mov	r4, fp
 800ae1a:	4630      	mov	r0, r6
 800ae1c:	f7f5 fbb2 	bl	8000584 <__aeabi_i2d>
 800ae20:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ae24:	f7f5 fc18 	bl	8000658 <__aeabi_dmul>
 800ae28:	4b65      	ldr	r3, [pc, #404]	@ (800afc0 <_dtoa_r+0x590>)
 800ae2a:	2200      	movs	r2, #0
 800ae2c:	f7f5 fa5e 	bl	80002ec <__adddf3>
 800ae30:	4605      	mov	r5, r0
 800ae32:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800ae36:	2c00      	cmp	r4, #0
 800ae38:	d16a      	bne.n	800af10 <_dtoa_r+0x4e0>
 800ae3a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ae3e:	4b61      	ldr	r3, [pc, #388]	@ (800afc4 <_dtoa_r+0x594>)
 800ae40:	2200      	movs	r2, #0
 800ae42:	f7f5 fa51 	bl	80002e8 <__aeabi_dsub>
 800ae46:	4602      	mov	r2, r0
 800ae48:	460b      	mov	r3, r1
 800ae4a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ae4e:	462a      	mov	r2, r5
 800ae50:	4633      	mov	r3, r6
 800ae52:	f7f5 fe91 	bl	8000b78 <__aeabi_dcmpgt>
 800ae56:	2800      	cmp	r0, #0
 800ae58:	f040 8298 	bne.w	800b38c <_dtoa_r+0x95c>
 800ae5c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ae60:	462a      	mov	r2, r5
 800ae62:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800ae66:	f7f5 fe69 	bl	8000b3c <__aeabi_dcmplt>
 800ae6a:	bb38      	cbnz	r0, 800aebc <_dtoa_r+0x48c>
 800ae6c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800ae70:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800ae74:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	f2c0 8157 	blt.w	800b12a <_dtoa_r+0x6fa>
 800ae7c:	2f0e      	cmp	r7, #14
 800ae7e:	f300 8154 	bgt.w	800b12a <_dtoa_r+0x6fa>
 800ae82:	4b4b      	ldr	r3, [pc, #300]	@ (800afb0 <_dtoa_r+0x580>)
 800ae84:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800ae88:	ed93 7b00 	vldr	d7, [r3]
 800ae8c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	ed8d 7b00 	vstr	d7, [sp]
 800ae94:	f280 80e5 	bge.w	800b062 <_dtoa_r+0x632>
 800ae98:	9b03      	ldr	r3, [sp, #12]
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	f300 80e1 	bgt.w	800b062 <_dtoa_r+0x632>
 800aea0:	d10c      	bne.n	800aebc <_dtoa_r+0x48c>
 800aea2:	4b48      	ldr	r3, [pc, #288]	@ (800afc4 <_dtoa_r+0x594>)
 800aea4:	2200      	movs	r2, #0
 800aea6:	ec51 0b17 	vmov	r0, r1, d7
 800aeaa:	f7f5 fbd5 	bl	8000658 <__aeabi_dmul>
 800aeae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800aeb2:	f7f5 fe57 	bl	8000b64 <__aeabi_dcmpge>
 800aeb6:	2800      	cmp	r0, #0
 800aeb8:	f000 8266 	beq.w	800b388 <_dtoa_r+0x958>
 800aebc:	2400      	movs	r4, #0
 800aebe:	4625      	mov	r5, r4
 800aec0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800aec2:	4656      	mov	r6, sl
 800aec4:	ea6f 0803 	mvn.w	r8, r3
 800aec8:	2700      	movs	r7, #0
 800aeca:	4621      	mov	r1, r4
 800aecc:	4648      	mov	r0, r9
 800aece:	f000 fd0f 	bl	800b8f0 <_Bfree>
 800aed2:	2d00      	cmp	r5, #0
 800aed4:	f000 80bd 	beq.w	800b052 <_dtoa_r+0x622>
 800aed8:	b12f      	cbz	r7, 800aee6 <_dtoa_r+0x4b6>
 800aeda:	42af      	cmp	r7, r5
 800aedc:	d003      	beq.n	800aee6 <_dtoa_r+0x4b6>
 800aede:	4639      	mov	r1, r7
 800aee0:	4648      	mov	r0, r9
 800aee2:	f000 fd05 	bl	800b8f0 <_Bfree>
 800aee6:	4629      	mov	r1, r5
 800aee8:	4648      	mov	r0, r9
 800aeea:	f000 fd01 	bl	800b8f0 <_Bfree>
 800aeee:	e0b0      	b.n	800b052 <_dtoa_r+0x622>
 800aef0:	07e2      	lsls	r2, r4, #31
 800aef2:	d505      	bpl.n	800af00 <_dtoa_r+0x4d0>
 800aef4:	e9d5 2300 	ldrd	r2, r3, [r5]
 800aef8:	f7f5 fbae 	bl	8000658 <__aeabi_dmul>
 800aefc:	3601      	adds	r6, #1
 800aefe:	2301      	movs	r3, #1
 800af00:	1064      	asrs	r4, r4, #1
 800af02:	3508      	adds	r5, #8
 800af04:	e762      	b.n	800adcc <_dtoa_r+0x39c>
 800af06:	2602      	movs	r6, #2
 800af08:	e765      	b.n	800add6 <_dtoa_r+0x3a6>
 800af0a:	9c03      	ldr	r4, [sp, #12]
 800af0c:	46b8      	mov	r8, r7
 800af0e:	e784      	b.n	800ae1a <_dtoa_r+0x3ea>
 800af10:	4b27      	ldr	r3, [pc, #156]	@ (800afb0 <_dtoa_r+0x580>)
 800af12:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800af14:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800af18:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800af1c:	4454      	add	r4, sl
 800af1e:	2900      	cmp	r1, #0
 800af20:	d054      	beq.n	800afcc <_dtoa_r+0x59c>
 800af22:	4929      	ldr	r1, [pc, #164]	@ (800afc8 <_dtoa_r+0x598>)
 800af24:	2000      	movs	r0, #0
 800af26:	f7f5 fcc1 	bl	80008ac <__aeabi_ddiv>
 800af2a:	4633      	mov	r3, r6
 800af2c:	462a      	mov	r2, r5
 800af2e:	f7f5 f9db 	bl	80002e8 <__aeabi_dsub>
 800af32:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800af36:	4656      	mov	r6, sl
 800af38:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800af3c:	f7f5 fe3c 	bl	8000bb8 <__aeabi_d2iz>
 800af40:	4605      	mov	r5, r0
 800af42:	f7f5 fb1f 	bl	8000584 <__aeabi_i2d>
 800af46:	4602      	mov	r2, r0
 800af48:	460b      	mov	r3, r1
 800af4a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800af4e:	f7f5 f9cb 	bl	80002e8 <__aeabi_dsub>
 800af52:	3530      	adds	r5, #48	@ 0x30
 800af54:	4602      	mov	r2, r0
 800af56:	460b      	mov	r3, r1
 800af58:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800af5c:	f806 5b01 	strb.w	r5, [r6], #1
 800af60:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800af64:	f7f5 fdea 	bl	8000b3c <__aeabi_dcmplt>
 800af68:	2800      	cmp	r0, #0
 800af6a:	d172      	bne.n	800b052 <_dtoa_r+0x622>
 800af6c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800af70:	4911      	ldr	r1, [pc, #68]	@ (800afb8 <_dtoa_r+0x588>)
 800af72:	2000      	movs	r0, #0
 800af74:	f7f5 f9b8 	bl	80002e8 <__aeabi_dsub>
 800af78:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800af7c:	f7f5 fdde 	bl	8000b3c <__aeabi_dcmplt>
 800af80:	2800      	cmp	r0, #0
 800af82:	f040 80b4 	bne.w	800b0ee <_dtoa_r+0x6be>
 800af86:	42a6      	cmp	r6, r4
 800af88:	f43f af70 	beq.w	800ae6c <_dtoa_r+0x43c>
 800af8c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800af90:	4b0a      	ldr	r3, [pc, #40]	@ (800afbc <_dtoa_r+0x58c>)
 800af92:	2200      	movs	r2, #0
 800af94:	f7f5 fb60 	bl	8000658 <__aeabi_dmul>
 800af98:	4b08      	ldr	r3, [pc, #32]	@ (800afbc <_dtoa_r+0x58c>)
 800af9a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800af9e:	2200      	movs	r2, #0
 800afa0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800afa4:	f7f5 fb58 	bl	8000658 <__aeabi_dmul>
 800afa8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800afac:	e7c4      	b.n	800af38 <_dtoa_r+0x508>
 800afae:	bf00      	nop
 800afb0:	0800dc68 	.word	0x0800dc68
 800afb4:	0800dc40 	.word	0x0800dc40
 800afb8:	3ff00000 	.word	0x3ff00000
 800afbc:	40240000 	.word	0x40240000
 800afc0:	401c0000 	.word	0x401c0000
 800afc4:	40140000 	.word	0x40140000
 800afc8:	3fe00000 	.word	0x3fe00000
 800afcc:	4631      	mov	r1, r6
 800afce:	4628      	mov	r0, r5
 800afd0:	f7f5 fb42 	bl	8000658 <__aeabi_dmul>
 800afd4:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800afd8:	9413      	str	r4, [sp, #76]	@ 0x4c
 800afda:	4656      	mov	r6, sl
 800afdc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800afe0:	f7f5 fdea 	bl	8000bb8 <__aeabi_d2iz>
 800afe4:	4605      	mov	r5, r0
 800afe6:	f7f5 facd 	bl	8000584 <__aeabi_i2d>
 800afea:	4602      	mov	r2, r0
 800afec:	460b      	mov	r3, r1
 800afee:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800aff2:	f7f5 f979 	bl	80002e8 <__aeabi_dsub>
 800aff6:	3530      	adds	r5, #48	@ 0x30
 800aff8:	f806 5b01 	strb.w	r5, [r6], #1
 800affc:	4602      	mov	r2, r0
 800affe:	460b      	mov	r3, r1
 800b000:	42a6      	cmp	r6, r4
 800b002:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b006:	f04f 0200 	mov.w	r2, #0
 800b00a:	d124      	bne.n	800b056 <_dtoa_r+0x626>
 800b00c:	4baf      	ldr	r3, [pc, #700]	@ (800b2cc <_dtoa_r+0x89c>)
 800b00e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800b012:	f7f5 f96b 	bl	80002ec <__adddf3>
 800b016:	4602      	mov	r2, r0
 800b018:	460b      	mov	r3, r1
 800b01a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b01e:	f7f5 fdab 	bl	8000b78 <__aeabi_dcmpgt>
 800b022:	2800      	cmp	r0, #0
 800b024:	d163      	bne.n	800b0ee <_dtoa_r+0x6be>
 800b026:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800b02a:	49a8      	ldr	r1, [pc, #672]	@ (800b2cc <_dtoa_r+0x89c>)
 800b02c:	2000      	movs	r0, #0
 800b02e:	f7f5 f95b 	bl	80002e8 <__aeabi_dsub>
 800b032:	4602      	mov	r2, r0
 800b034:	460b      	mov	r3, r1
 800b036:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b03a:	f7f5 fd7f 	bl	8000b3c <__aeabi_dcmplt>
 800b03e:	2800      	cmp	r0, #0
 800b040:	f43f af14 	beq.w	800ae6c <_dtoa_r+0x43c>
 800b044:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800b046:	1e73      	subs	r3, r6, #1
 800b048:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b04a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b04e:	2b30      	cmp	r3, #48	@ 0x30
 800b050:	d0f8      	beq.n	800b044 <_dtoa_r+0x614>
 800b052:	4647      	mov	r7, r8
 800b054:	e03b      	b.n	800b0ce <_dtoa_r+0x69e>
 800b056:	4b9e      	ldr	r3, [pc, #632]	@ (800b2d0 <_dtoa_r+0x8a0>)
 800b058:	f7f5 fafe 	bl	8000658 <__aeabi_dmul>
 800b05c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b060:	e7bc      	b.n	800afdc <_dtoa_r+0x5ac>
 800b062:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800b066:	4656      	mov	r6, sl
 800b068:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b06c:	4620      	mov	r0, r4
 800b06e:	4629      	mov	r1, r5
 800b070:	f7f5 fc1c 	bl	80008ac <__aeabi_ddiv>
 800b074:	f7f5 fda0 	bl	8000bb8 <__aeabi_d2iz>
 800b078:	4680      	mov	r8, r0
 800b07a:	f7f5 fa83 	bl	8000584 <__aeabi_i2d>
 800b07e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b082:	f7f5 fae9 	bl	8000658 <__aeabi_dmul>
 800b086:	4602      	mov	r2, r0
 800b088:	460b      	mov	r3, r1
 800b08a:	4620      	mov	r0, r4
 800b08c:	4629      	mov	r1, r5
 800b08e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800b092:	f7f5 f929 	bl	80002e8 <__aeabi_dsub>
 800b096:	f806 4b01 	strb.w	r4, [r6], #1
 800b09a:	9d03      	ldr	r5, [sp, #12]
 800b09c:	eba6 040a 	sub.w	r4, r6, sl
 800b0a0:	42a5      	cmp	r5, r4
 800b0a2:	4602      	mov	r2, r0
 800b0a4:	460b      	mov	r3, r1
 800b0a6:	d133      	bne.n	800b110 <_dtoa_r+0x6e0>
 800b0a8:	f7f5 f920 	bl	80002ec <__adddf3>
 800b0ac:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b0b0:	4604      	mov	r4, r0
 800b0b2:	460d      	mov	r5, r1
 800b0b4:	f7f5 fd60 	bl	8000b78 <__aeabi_dcmpgt>
 800b0b8:	b9c0      	cbnz	r0, 800b0ec <_dtoa_r+0x6bc>
 800b0ba:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b0be:	4620      	mov	r0, r4
 800b0c0:	4629      	mov	r1, r5
 800b0c2:	f7f5 fd31 	bl	8000b28 <__aeabi_dcmpeq>
 800b0c6:	b110      	cbz	r0, 800b0ce <_dtoa_r+0x69e>
 800b0c8:	f018 0f01 	tst.w	r8, #1
 800b0cc:	d10e      	bne.n	800b0ec <_dtoa_r+0x6bc>
 800b0ce:	9902      	ldr	r1, [sp, #8]
 800b0d0:	4648      	mov	r0, r9
 800b0d2:	f000 fc0d 	bl	800b8f0 <_Bfree>
 800b0d6:	2300      	movs	r3, #0
 800b0d8:	7033      	strb	r3, [r6, #0]
 800b0da:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b0dc:	3701      	adds	r7, #1
 800b0de:	601f      	str	r7, [r3, #0]
 800b0e0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	f000 824b 	beq.w	800b57e <_dtoa_r+0xb4e>
 800b0e8:	601e      	str	r6, [r3, #0]
 800b0ea:	e248      	b.n	800b57e <_dtoa_r+0xb4e>
 800b0ec:	46b8      	mov	r8, r7
 800b0ee:	4633      	mov	r3, r6
 800b0f0:	461e      	mov	r6, r3
 800b0f2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b0f6:	2a39      	cmp	r2, #57	@ 0x39
 800b0f8:	d106      	bne.n	800b108 <_dtoa_r+0x6d8>
 800b0fa:	459a      	cmp	sl, r3
 800b0fc:	d1f8      	bne.n	800b0f0 <_dtoa_r+0x6c0>
 800b0fe:	2230      	movs	r2, #48	@ 0x30
 800b100:	f108 0801 	add.w	r8, r8, #1
 800b104:	f88a 2000 	strb.w	r2, [sl]
 800b108:	781a      	ldrb	r2, [r3, #0]
 800b10a:	3201      	adds	r2, #1
 800b10c:	701a      	strb	r2, [r3, #0]
 800b10e:	e7a0      	b.n	800b052 <_dtoa_r+0x622>
 800b110:	4b6f      	ldr	r3, [pc, #444]	@ (800b2d0 <_dtoa_r+0x8a0>)
 800b112:	2200      	movs	r2, #0
 800b114:	f7f5 faa0 	bl	8000658 <__aeabi_dmul>
 800b118:	2200      	movs	r2, #0
 800b11a:	2300      	movs	r3, #0
 800b11c:	4604      	mov	r4, r0
 800b11e:	460d      	mov	r5, r1
 800b120:	f7f5 fd02 	bl	8000b28 <__aeabi_dcmpeq>
 800b124:	2800      	cmp	r0, #0
 800b126:	d09f      	beq.n	800b068 <_dtoa_r+0x638>
 800b128:	e7d1      	b.n	800b0ce <_dtoa_r+0x69e>
 800b12a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b12c:	2a00      	cmp	r2, #0
 800b12e:	f000 80ea 	beq.w	800b306 <_dtoa_r+0x8d6>
 800b132:	9a07      	ldr	r2, [sp, #28]
 800b134:	2a01      	cmp	r2, #1
 800b136:	f300 80cd 	bgt.w	800b2d4 <_dtoa_r+0x8a4>
 800b13a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800b13c:	2a00      	cmp	r2, #0
 800b13e:	f000 80c1 	beq.w	800b2c4 <_dtoa_r+0x894>
 800b142:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800b146:	9c08      	ldr	r4, [sp, #32]
 800b148:	9e00      	ldr	r6, [sp, #0]
 800b14a:	9a00      	ldr	r2, [sp, #0]
 800b14c:	441a      	add	r2, r3
 800b14e:	9200      	str	r2, [sp, #0]
 800b150:	9a06      	ldr	r2, [sp, #24]
 800b152:	2101      	movs	r1, #1
 800b154:	441a      	add	r2, r3
 800b156:	4648      	mov	r0, r9
 800b158:	9206      	str	r2, [sp, #24]
 800b15a:	f000 fc7d 	bl	800ba58 <__i2b>
 800b15e:	4605      	mov	r5, r0
 800b160:	b166      	cbz	r6, 800b17c <_dtoa_r+0x74c>
 800b162:	9b06      	ldr	r3, [sp, #24]
 800b164:	2b00      	cmp	r3, #0
 800b166:	dd09      	ble.n	800b17c <_dtoa_r+0x74c>
 800b168:	42b3      	cmp	r3, r6
 800b16a:	9a00      	ldr	r2, [sp, #0]
 800b16c:	bfa8      	it	ge
 800b16e:	4633      	movge	r3, r6
 800b170:	1ad2      	subs	r2, r2, r3
 800b172:	9200      	str	r2, [sp, #0]
 800b174:	9a06      	ldr	r2, [sp, #24]
 800b176:	1af6      	subs	r6, r6, r3
 800b178:	1ad3      	subs	r3, r2, r3
 800b17a:	9306      	str	r3, [sp, #24]
 800b17c:	9b08      	ldr	r3, [sp, #32]
 800b17e:	b30b      	cbz	r3, 800b1c4 <_dtoa_r+0x794>
 800b180:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b182:	2b00      	cmp	r3, #0
 800b184:	f000 80c6 	beq.w	800b314 <_dtoa_r+0x8e4>
 800b188:	2c00      	cmp	r4, #0
 800b18a:	f000 80c0 	beq.w	800b30e <_dtoa_r+0x8de>
 800b18e:	4629      	mov	r1, r5
 800b190:	4622      	mov	r2, r4
 800b192:	4648      	mov	r0, r9
 800b194:	f000 fd18 	bl	800bbc8 <__pow5mult>
 800b198:	9a02      	ldr	r2, [sp, #8]
 800b19a:	4601      	mov	r1, r0
 800b19c:	4605      	mov	r5, r0
 800b19e:	4648      	mov	r0, r9
 800b1a0:	f000 fc70 	bl	800ba84 <__multiply>
 800b1a4:	9902      	ldr	r1, [sp, #8]
 800b1a6:	4680      	mov	r8, r0
 800b1a8:	4648      	mov	r0, r9
 800b1aa:	f000 fba1 	bl	800b8f0 <_Bfree>
 800b1ae:	9b08      	ldr	r3, [sp, #32]
 800b1b0:	1b1b      	subs	r3, r3, r4
 800b1b2:	9308      	str	r3, [sp, #32]
 800b1b4:	f000 80b1 	beq.w	800b31a <_dtoa_r+0x8ea>
 800b1b8:	9a08      	ldr	r2, [sp, #32]
 800b1ba:	4641      	mov	r1, r8
 800b1bc:	4648      	mov	r0, r9
 800b1be:	f000 fd03 	bl	800bbc8 <__pow5mult>
 800b1c2:	9002      	str	r0, [sp, #8]
 800b1c4:	2101      	movs	r1, #1
 800b1c6:	4648      	mov	r0, r9
 800b1c8:	f000 fc46 	bl	800ba58 <__i2b>
 800b1cc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b1ce:	4604      	mov	r4, r0
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	f000 81d8 	beq.w	800b586 <_dtoa_r+0xb56>
 800b1d6:	461a      	mov	r2, r3
 800b1d8:	4601      	mov	r1, r0
 800b1da:	4648      	mov	r0, r9
 800b1dc:	f000 fcf4 	bl	800bbc8 <__pow5mult>
 800b1e0:	9b07      	ldr	r3, [sp, #28]
 800b1e2:	2b01      	cmp	r3, #1
 800b1e4:	4604      	mov	r4, r0
 800b1e6:	f300 809f 	bgt.w	800b328 <_dtoa_r+0x8f8>
 800b1ea:	9b04      	ldr	r3, [sp, #16]
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	f040 8097 	bne.w	800b320 <_dtoa_r+0x8f0>
 800b1f2:	9b05      	ldr	r3, [sp, #20]
 800b1f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	f040 8093 	bne.w	800b324 <_dtoa_r+0x8f4>
 800b1fe:	9b05      	ldr	r3, [sp, #20]
 800b200:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b204:	0d1b      	lsrs	r3, r3, #20
 800b206:	051b      	lsls	r3, r3, #20
 800b208:	b133      	cbz	r3, 800b218 <_dtoa_r+0x7e8>
 800b20a:	9b00      	ldr	r3, [sp, #0]
 800b20c:	3301      	adds	r3, #1
 800b20e:	9300      	str	r3, [sp, #0]
 800b210:	9b06      	ldr	r3, [sp, #24]
 800b212:	3301      	adds	r3, #1
 800b214:	9306      	str	r3, [sp, #24]
 800b216:	2301      	movs	r3, #1
 800b218:	9308      	str	r3, [sp, #32]
 800b21a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	f000 81b8 	beq.w	800b592 <_dtoa_r+0xb62>
 800b222:	6923      	ldr	r3, [r4, #16]
 800b224:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b228:	6918      	ldr	r0, [r3, #16]
 800b22a:	f000 fbc9 	bl	800b9c0 <__hi0bits>
 800b22e:	f1c0 0020 	rsb	r0, r0, #32
 800b232:	9b06      	ldr	r3, [sp, #24]
 800b234:	4418      	add	r0, r3
 800b236:	f010 001f 	ands.w	r0, r0, #31
 800b23a:	f000 8082 	beq.w	800b342 <_dtoa_r+0x912>
 800b23e:	f1c0 0320 	rsb	r3, r0, #32
 800b242:	2b04      	cmp	r3, #4
 800b244:	dd73      	ble.n	800b32e <_dtoa_r+0x8fe>
 800b246:	9b00      	ldr	r3, [sp, #0]
 800b248:	f1c0 001c 	rsb	r0, r0, #28
 800b24c:	4403      	add	r3, r0
 800b24e:	9300      	str	r3, [sp, #0]
 800b250:	9b06      	ldr	r3, [sp, #24]
 800b252:	4403      	add	r3, r0
 800b254:	4406      	add	r6, r0
 800b256:	9306      	str	r3, [sp, #24]
 800b258:	9b00      	ldr	r3, [sp, #0]
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	dd05      	ble.n	800b26a <_dtoa_r+0x83a>
 800b25e:	9902      	ldr	r1, [sp, #8]
 800b260:	461a      	mov	r2, r3
 800b262:	4648      	mov	r0, r9
 800b264:	f000 fd0a 	bl	800bc7c <__lshift>
 800b268:	9002      	str	r0, [sp, #8]
 800b26a:	9b06      	ldr	r3, [sp, #24]
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	dd05      	ble.n	800b27c <_dtoa_r+0x84c>
 800b270:	4621      	mov	r1, r4
 800b272:	461a      	mov	r2, r3
 800b274:	4648      	mov	r0, r9
 800b276:	f000 fd01 	bl	800bc7c <__lshift>
 800b27a:	4604      	mov	r4, r0
 800b27c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b27e:	2b00      	cmp	r3, #0
 800b280:	d061      	beq.n	800b346 <_dtoa_r+0x916>
 800b282:	9802      	ldr	r0, [sp, #8]
 800b284:	4621      	mov	r1, r4
 800b286:	f000 fd65 	bl	800bd54 <__mcmp>
 800b28a:	2800      	cmp	r0, #0
 800b28c:	da5b      	bge.n	800b346 <_dtoa_r+0x916>
 800b28e:	2300      	movs	r3, #0
 800b290:	9902      	ldr	r1, [sp, #8]
 800b292:	220a      	movs	r2, #10
 800b294:	4648      	mov	r0, r9
 800b296:	f000 fb4d 	bl	800b934 <__multadd>
 800b29a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b29c:	9002      	str	r0, [sp, #8]
 800b29e:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	f000 8177 	beq.w	800b596 <_dtoa_r+0xb66>
 800b2a8:	4629      	mov	r1, r5
 800b2aa:	2300      	movs	r3, #0
 800b2ac:	220a      	movs	r2, #10
 800b2ae:	4648      	mov	r0, r9
 800b2b0:	f000 fb40 	bl	800b934 <__multadd>
 800b2b4:	f1bb 0f00 	cmp.w	fp, #0
 800b2b8:	4605      	mov	r5, r0
 800b2ba:	dc6f      	bgt.n	800b39c <_dtoa_r+0x96c>
 800b2bc:	9b07      	ldr	r3, [sp, #28]
 800b2be:	2b02      	cmp	r3, #2
 800b2c0:	dc49      	bgt.n	800b356 <_dtoa_r+0x926>
 800b2c2:	e06b      	b.n	800b39c <_dtoa_r+0x96c>
 800b2c4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800b2c6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800b2ca:	e73c      	b.n	800b146 <_dtoa_r+0x716>
 800b2cc:	3fe00000 	.word	0x3fe00000
 800b2d0:	40240000 	.word	0x40240000
 800b2d4:	9b03      	ldr	r3, [sp, #12]
 800b2d6:	1e5c      	subs	r4, r3, #1
 800b2d8:	9b08      	ldr	r3, [sp, #32]
 800b2da:	42a3      	cmp	r3, r4
 800b2dc:	db09      	blt.n	800b2f2 <_dtoa_r+0x8c2>
 800b2de:	1b1c      	subs	r4, r3, r4
 800b2e0:	9b03      	ldr	r3, [sp, #12]
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	f6bf af30 	bge.w	800b148 <_dtoa_r+0x718>
 800b2e8:	9b00      	ldr	r3, [sp, #0]
 800b2ea:	9a03      	ldr	r2, [sp, #12]
 800b2ec:	1a9e      	subs	r6, r3, r2
 800b2ee:	2300      	movs	r3, #0
 800b2f0:	e72b      	b.n	800b14a <_dtoa_r+0x71a>
 800b2f2:	9b08      	ldr	r3, [sp, #32]
 800b2f4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b2f6:	9408      	str	r4, [sp, #32]
 800b2f8:	1ae3      	subs	r3, r4, r3
 800b2fa:	441a      	add	r2, r3
 800b2fc:	9e00      	ldr	r6, [sp, #0]
 800b2fe:	9b03      	ldr	r3, [sp, #12]
 800b300:	920d      	str	r2, [sp, #52]	@ 0x34
 800b302:	2400      	movs	r4, #0
 800b304:	e721      	b.n	800b14a <_dtoa_r+0x71a>
 800b306:	9c08      	ldr	r4, [sp, #32]
 800b308:	9e00      	ldr	r6, [sp, #0]
 800b30a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800b30c:	e728      	b.n	800b160 <_dtoa_r+0x730>
 800b30e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800b312:	e751      	b.n	800b1b8 <_dtoa_r+0x788>
 800b314:	9a08      	ldr	r2, [sp, #32]
 800b316:	9902      	ldr	r1, [sp, #8]
 800b318:	e750      	b.n	800b1bc <_dtoa_r+0x78c>
 800b31a:	f8cd 8008 	str.w	r8, [sp, #8]
 800b31e:	e751      	b.n	800b1c4 <_dtoa_r+0x794>
 800b320:	2300      	movs	r3, #0
 800b322:	e779      	b.n	800b218 <_dtoa_r+0x7e8>
 800b324:	9b04      	ldr	r3, [sp, #16]
 800b326:	e777      	b.n	800b218 <_dtoa_r+0x7e8>
 800b328:	2300      	movs	r3, #0
 800b32a:	9308      	str	r3, [sp, #32]
 800b32c:	e779      	b.n	800b222 <_dtoa_r+0x7f2>
 800b32e:	d093      	beq.n	800b258 <_dtoa_r+0x828>
 800b330:	9a00      	ldr	r2, [sp, #0]
 800b332:	331c      	adds	r3, #28
 800b334:	441a      	add	r2, r3
 800b336:	9200      	str	r2, [sp, #0]
 800b338:	9a06      	ldr	r2, [sp, #24]
 800b33a:	441a      	add	r2, r3
 800b33c:	441e      	add	r6, r3
 800b33e:	9206      	str	r2, [sp, #24]
 800b340:	e78a      	b.n	800b258 <_dtoa_r+0x828>
 800b342:	4603      	mov	r3, r0
 800b344:	e7f4      	b.n	800b330 <_dtoa_r+0x900>
 800b346:	9b03      	ldr	r3, [sp, #12]
 800b348:	2b00      	cmp	r3, #0
 800b34a:	46b8      	mov	r8, r7
 800b34c:	dc20      	bgt.n	800b390 <_dtoa_r+0x960>
 800b34e:	469b      	mov	fp, r3
 800b350:	9b07      	ldr	r3, [sp, #28]
 800b352:	2b02      	cmp	r3, #2
 800b354:	dd1e      	ble.n	800b394 <_dtoa_r+0x964>
 800b356:	f1bb 0f00 	cmp.w	fp, #0
 800b35a:	f47f adb1 	bne.w	800aec0 <_dtoa_r+0x490>
 800b35e:	4621      	mov	r1, r4
 800b360:	465b      	mov	r3, fp
 800b362:	2205      	movs	r2, #5
 800b364:	4648      	mov	r0, r9
 800b366:	f000 fae5 	bl	800b934 <__multadd>
 800b36a:	4601      	mov	r1, r0
 800b36c:	4604      	mov	r4, r0
 800b36e:	9802      	ldr	r0, [sp, #8]
 800b370:	f000 fcf0 	bl	800bd54 <__mcmp>
 800b374:	2800      	cmp	r0, #0
 800b376:	f77f ada3 	ble.w	800aec0 <_dtoa_r+0x490>
 800b37a:	4656      	mov	r6, sl
 800b37c:	2331      	movs	r3, #49	@ 0x31
 800b37e:	f806 3b01 	strb.w	r3, [r6], #1
 800b382:	f108 0801 	add.w	r8, r8, #1
 800b386:	e59f      	b.n	800aec8 <_dtoa_r+0x498>
 800b388:	9c03      	ldr	r4, [sp, #12]
 800b38a:	46b8      	mov	r8, r7
 800b38c:	4625      	mov	r5, r4
 800b38e:	e7f4      	b.n	800b37a <_dtoa_r+0x94a>
 800b390:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800b394:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b396:	2b00      	cmp	r3, #0
 800b398:	f000 8101 	beq.w	800b59e <_dtoa_r+0xb6e>
 800b39c:	2e00      	cmp	r6, #0
 800b39e:	dd05      	ble.n	800b3ac <_dtoa_r+0x97c>
 800b3a0:	4629      	mov	r1, r5
 800b3a2:	4632      	mov	r2, r6
 800b3a4:	4648      	mov	r0, r9
 800b3a6:	f000 fc69 	bl	800bc7c <__lshift>
 800b3aa:	4605      	mov	r5, r0
 800b3ac:	9b08      	ldr	r3, [sp, #32]
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d05c      	beq.n	800b46c <_dtoa_r+0xa3c>
 800b3b2:	6869      	ldr	r1, [r5, #4]
 800b3b4:	4648      	mov	r0, r9
 800b3b6:	f000 fa5b 	bl	800b870 <_Balloc>
 800b3ba:	4606      	mov	r6, r0
 800b3bc:	b928      	cbnz	r0, 800b3ca <_dtoa_r+0x99a>
 800b3be:	4b82      	ldr	r3, [pc, #520]	@ (800b5c8 <_dtoa_r+0xb98>)
 800b3c0:	4602      	mov	r2, r0
 800b3c2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800b3c6:	f7ff bb4a 	b.w	800aa5e <_dtoa_r+0x2e>
 800b3ca:	692a      	ldr	r2, [r5, #16]
 800b3cc:	3202      	adds	r2, #2
 800b3ce:	0092      	lsls	r2, r2, #2
 800b3d0:	f105 010c 	add.w	r1, r5, #12
 800b3d4:	300c      	adds	r0, #12
 800b3d6:	f7ff fa72 	bl	800a8be <memcpy>
 800b3da:	2201      	movs	r2, #1
 800b3dc:	4631      	mov	r1, r6
 800b3de:	4648      	mov	r0, r9
 800b3e0:	f000 fc4c 	bl	800bc7c <__lshift>
 800b3e4:	f10a 0301 	add.w	r3, sl, #1
 800b3e8:	9300      	str	r3, [sp, #0]
 800b3ea:	eb0a 030b 	add.w	r3, sl, fp
 800b3ee:	9308      	str	r3, [sp, #32]
 800b3f0:	9b04      	ldr	r3, [sp, #16]
 800b3f2:	f003 0301 	and.w	r3, r3, #1
 800b3f6:	462f      	mov	r7, r5
 800b3f8:	9306      	str	r3, [sp, #24]
 800b3fa:	4605      	mov	r5, r0
 800b3fc:	9b00      	ldr	r3, [sp, #0]
 800b3fe:	9802      	ldr	r0, [sp, #8]
 800b400:	4621      	mov	r1, r4
 800b402:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 800b406:	f7ff fa8b 	bl	800a920 <quorem>
 800b40a:	4603      	mov	r3, r0
 800b40c:	3330      	adds	r3, #48	@ 0x30
 800b40e:	9003      	str	r0, [sp, #12]
 800b410:	4639      	mov	r1, r7
 800b412:	9802      	ldr	r0, [sp, #8]
 800b414:	9309      	str	r3, [sp, #36]	@ 0x24
 800b416:	f000 fc9d 	bl	800bd54 <__mcmp>
 800b41a:	462a      	mov	r2, r5
 800b41c:	9004      	str	r0, [sp, #16]
 800b41e:	4621      	mov	r1, r4
 800b420:	4648      	mov	r0, r9
 800b422:	f000 fcb3 	bl	800bd8c <__mdiff>
 800b426:	68c2      	ldr	r2, [r0, #12]
 800b428:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b42a:	4606      	mov	r6, r0
 800b42c:	bb02      	cbnz	r2, 800b470 <_dtoa_r+0xa40>
 800b42e:	4601      	mov	r1, r0
 800b430:	9802      	ldr	r0, [sp, #8]
 800b432:	f000 fc8f 	bl	800bd54 <__mcmp>
 800b436:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b438:	4602      	mov	r2, r0
 800b43a:	4631      	mov	r1, r6
 800b43c:	4648      	mov	r0, r9
 800b43e:	920c      	str	r2, [sp, #48]	@ 0x30
 800b440:	9309      	str	r3, [sp, #36]	@ 0x24
 800b442:	f000 fa55 	bl	800b8f0 <_Bfree>
 800b446:	9b07      	ldr	r3, [sp, #28]
 800b448:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800b44a:	9e00      	ldr	r6, [sp, #0]
 800b44c:	ea42 0103 	orr.w	r1, r2, r3
 800b450:	9b06      	ldr	r3, [sp, #24]
 800b452:	4319      	orrs	r1, r3
 800b454:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b456:	d10d      	bne.n	800b474 <_dtoa_r+0xa44>
 800b458:	2b39      	cmp	r3, #57	@ 0x39
 800b45a:	d027      	beq.n	800b4ac <_dtoa_r+0xa7c>
 800b45c:	9a04      	ldr	r2, [sp, #16]
 800b45e:	2a00      	cmp	r2, #0
 800b460:	dd01      	ble.n	800b466 <_dtoa_r+0xa36>
 800b462:	9b03      	ldr	r3, [sp, #12]
 800b464:	3331      	adds	r3, #49	@ 0x31
 800b466:	f88b 3000 	strb.w	r3, [fp]
 800b46a:	e52e      	b.n	800aeca <_dtoa_r+0x49a>
 800b46c:	4628      	mov	r0, r5
 800b46e:	e7b9      	b.n	800b3e4 <_dtoa_r+0x9b4>
 800b470:	2201      	movs	r2, #1
 800b472:	e7e2      	b.n	800b43a <_dtoa_r+0xa0a>
 800b474:	9904      	ldr	r1, [sp, #16]
 800b476:	2900      	cmp	r1, #0
 800b478:	db04      	blt.n	800b484 <_dtoa_r+0xa54>
 800b47a:	9807      	ldr	r0, [sp, #28]
 800b47c:	4301      	orrs	r1, r0
 800b47e:	9806      	ldr	r0, [sp, #24]
 800b480:	4301      	orrs	r1, r0
 800b482:	d120      	bne.n	800b4c6 <_dtoa_r+0xa96>
 800b484:	2a00      	cmp	r2, #0
 800b486:	ddee      	ble.n	800b466 <_dtoa_r+0xa36>
 800b488:	9902      	ldr	r1, [sp, #8]
 800b48a:	9300      	str	r3, [sp, #0]
 800b48c:	2201      	movs	r2, #1
 800b48e:	4648      	mov	r0, r9
 800b490:	f000 fbf4 	bl	800bc7c <__lshift>
 800b494:	4621      	mov	r1, r4
 800b496:	9002      	str	r0, [sp, #8]
 800b498:	f000 fc5c 	bl	800bd54 <__mcmp>
 800b49c:	2800      	cmp	r0, #0
 800b49e:	9b00      	ldr	r3, [sp, #0]
 800b4a0:	dc02      	bgt.n	800b4a8 <_dtoa_r+0xa78>
 800b4a2:	d1e0      	bne.n	800b466 <_dtoa_r+0xa36>
 800b4a4:	07da      	lsls	r2, r3, #31
 800b4a6:	d5de      	bpl.n	800b466 <_dtoa_r+0xa36>
 800b4a8:	2b39      	cmp	r3, #57	@ 0x39
 800b4aa:	d1da      	bne.n	800b462 <_dtoa_r+0xa32>
 800b4ac:	2339      	movs	r3, #57	@ 0x39
 800b4ae:	f88b 3000 	strb.w	r3, [fp]
 800b4b2:	4633      	mov	r3, r6
 800b4b4:	461e      	mov	r6, r3
 800b4b6:	3b01      	subs	r3, #1
 800b4b8:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800b4bc:	2a39      	cmp	r2, #57	@ 0x39
 800b4be:	d04e      	beq.n	800b55e <_dtoa_r+0xb2e>
 800b4c0:	3201      	adds	r2, #1
 800b4c2:	701a      	strb	r2, [r3, #0]
 800b4c4:	e501      	b.n	800aeca <_dtoa_r+0x49a>
 800b4c6:	2a00      	cmp	r2, #0
 800b4c8:	dd03      	ble.n	800b4d2 <_dtoa_r+0xaa2>
 800b4ca:	2b39      	cmp	r3, #57	@ 0x39
 800b4cc:	d0ee      	beq.n	800b4ac <_dtoa_r+0xa7c>
 800b4ce:	3301      	adds	r3, #1
 800b4d0:	e7c9      	b.n	800b466 <_dtoa_r+0xa36>
 800b4d2:	9a00      	ldr	r2, [sp, #0]
 800b4d4:	9908      	ldr	r1, [sp, #32]
 800b4d6:	f802 3c01 	strb.w	r3, [r2, #-1]
 800b4da:	428a      	cmp	r2, r1
 800b4dc:	d028      	beq.n	800b530 <_dtoa_r+0xb00>
 800b4de:	9902      	ldr	r1, [sp, #8]
 800b4e0:	2300      	movs	r3, #0
 800b4e2:	220a      	movs	r2, #10
 800b4e4:	4648      	mov	r0, r9
 800b4e6:	f000 fa25 	bl	800b934 <__multadd>
 800b4ea:	42af      	cmp	r7, r5
 800b4ec:	9002      	str	r0, [sp, #8]
 800b4ee:	f04f 0300 	mov.w	r3, #0
 800b4f2:	f04f 020a 	mov.w	r2, #10
 800b4f6:	4639      	mov	r1, r7
 800b4f8:	4648      	mov	r0, r9
 800b4fa:	d107      	bne.n	800b50c <_dtoa_r+0xadc>
 800b4fc:	f000 fa1a 	bl	800b934 <__multadd>
 800b500:	4607      	mov	r7, r0
 800b502:	4605      	mov	r5, r0
 800b504:	9b00      	ldr	r3, [sp, #0]
 800b506:	3301      	adds	r3, #1
 800b508:	9300      	str	r3, [sp, #0]
 800b50a:	e777      	b.n	800b3fc <_dtoa_r+0x9cc>
 800b50c:	f000 fa12 	bl	800b934 <__multadd>
 800b510:	4629      	mov	r1, r5
 800b512:	4607      	mov	r7, r0
 800b514:	2300      	movs	r3, #0
 800b516:	220a      	movs	r2, #10
 800b518:	4648      	mov	r0, r9
 800b51a:	f000 fa0b 	bl	800b934 <__multadd>
 800b51e:	4605      	mov	r5, r0
 800b520:	e7f0      	b.n	800b504 <_dtoa_r+0xad4>
 800b522:	f1bb 0f00 	cmp.w	fp, #0
 800b526:	bfcc      	ite	gt
 800b528:	465e      	movgt	r6, fp
 800b52a:	2601      	movle	r6, #1
 800b52c:	4456      	add	r6, sl
 800b52e:	2700      	movs	r7, #0
 800b530:	9902      	ldr	r1, [sp, #8]
 800b532:	9300      	str	r3, [sp, #0]
 800b534:	2201      	movs	r2, #1
 800b536:	4648      	mov	r0, r9
 800b538:	f000 fba0 	bl	800bc7c <__lshift>
 800b53c:	4621      	mov	r1, r4
 800b53e:	9002      	str	r0, [sp, #8]
 800b540:	f000 fc08 	bl	800bd54 <__mcmp>
 800b544:	2800      	cmp	r0, #0
 800b546:	dcb4      	bgt.n	800b4b2 <_dtoa_r+0xa82>
 800b548:	d102      	bne.n	800b550 <_dtoa_r+0xb20>
 800b54a:	9b00      	ldr	r3, [sp, #0]
 800b54c:	07db      	lsls	r3, r3, #31
 800b54e:	d4b0      	bmi.n	800b4b2 <_dtoa_r+0xa82>
 800b550:	4633      	mov	r3, r6
 800b552:	461e      	mov	r6, r3
 800b554:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b558:	2a30      	cmp	r2, #48	@ 0x30
 800b55a:	d0fa      	beq.n	800b552 <_dtoa_r+0xb22>
 800b55c:	e4b5      	b.n	800aeca <_dtoa_r+0x49a>
 800b55e:	459a      	cmp	sl, r3
 800b560:	d1a8      	bne.n	800b4b4 <_dtoa_r+0xa84>
 800b562:	2331      	movs	r3, #49	@ 0x31
 800b564:	f108 0801 	add.w	r8, r8, #1
 800b568:	f88a 3000 	strb.w	r3, [sl]
 800b56c:	e4ad      	b.n	800aeca <_dtoa_r+0x49a>
 800b56e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b570:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800b5cc <_dtoa_r+0xb9c>
 800b574:	b11b      	cbz	r3, 800b57e <_dtoa_r+0xb4e>
 800b576:	f10a 0308 	add.w	r3, sl, #8
 800b57a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800b57c:	6013      	str	r3, [r2, #0]
 800b57e:	4650      	mov	r0, sl
 800b580:	b017      	add	sp, #92	@ 0x5c
 800b582:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b586:	9b07      	ldr	r3, [sp, #28]
 800b588:	2b01      	cmp	r3, #1
 800b58a:	f77f ae2e 	ble.w	800b1ea <_dtoa_r+0x7ba>
 800b58e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b590:	9308      	str	r3, [sp, #32]
 800b592:	2001      	movs	r0, #1
 800b594:	e64d      	b.n	800b232 <_dtoa_r+0x802>
 800b596:	f1bb 0f00 	cmp.w	fp, #0
 800b59a:	f77f aed9 	ble.w	800b350 <_dtoa_r+0x920>
 800b59e:	4656      	mov	r6, sl
 800b5a0:	9802      	ldr	r0, [sp, #8]
 800b5a2:	4621      	mov	r1, r4
 800b5a4:	f7ff f9bc 	bl	800a920 <quorem>
 800b5a8:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800b5ac:	f806 3b01 	strb.w	r3, [r6], #1
 800b5b0:	eba6 020a 	sub.w	r2, r6, sl
 800b5b4:	4593      	cmp	fp, r2
 800b5b6:	ddb4      	ble.n	800b522 <_dtoa_r+0xaf2>
 800b5b8:	9902      	ldr	r1, [sp, #8]
 800b5ba:	2300      	movs	r3, #0
 800b5bc:	220a      	movs	r2, #10
 800b5be:	4648      	mov	r0, r9
 800b5c0:	f000 f9b8 	bl	800b934 <__multadd>
 800b5c4:	9002      	str	r0, [sp, #8]
 800b5c6:	e7eb      	b.n	800b5a0 <_dtoa_r+0xb70>
 800b5c8:	0800da95 	.word	0x0800da95
 800b5cc:	0800da30 	.word	0x0800da30

0800b5d0 <_free_r>:
 800b5d0:	b538      	push	{r3, r4, r5, lr}
 800b5d2:	4605      	mov	r5, r0
 800b5d4:	2900      	cmp	r1, #0
 800b5d6:	d041      	beq.n	800b65c <_free_r+0x8c>
 800b5d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b5dc:	1f0c      	subs	r4, r1, #4
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	bfb8      	it	lt
 800b5e2:	18e4      	addlt	r4, r4, r3
 800b5e4:	f000 f938 	bl	800b858 <__malloc_lock>
 800b5e8:	4a1d      	ldr	r2, [pc, #116]	@ (800b660 <_free_r+0x90>)
 800b5ea:	6813      	ldr	r3, [r2, #0]
 800b5ec:	b933      	cbnz	r3, 800b5fc <_free_r+0x2c>
 800b5ee:	6063      	str	r3, [r4, #4]
 800b5f0:	6014      	str	r4, [r2, #0]
 800b5f2:	4628      	mov	r0, r5
 800b5f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b5f8:	f000 b934 	b.w	800b864 <__malloc_unlock>
 800b5fc:	42a3      	cmp	r3, r4
 800b5fe:	d908      	bls.n	800b612 <_free_r+0x42>
 800b600:	6820      	ldr	r0, [r4, #0]
 800b602:	1821      	adds	r1, r4, r0
 800b604:	428b      	cmp	r3, r1
 800b606:	bf01      	itttt	eq
 800b608:	6819      	ldreq	r1, [r3, #0]
 800b60a:	685b      	ldreq	r3, [r3, #4]
 800b60c:	1809      	addeq	r1, r1, r0
 800b60e:	6021      	streq	r1, [r4, #0]
 800b610:	e7ed      	b.n	800b5ee <_free_r+0x1e>
 800b612:	461a      	mov	r2, r3
 800b614:	685b      	ldr	r3, [r3, #4]
 800b616:	b10b      	cbz	r3, 800b61c <_free_r+0x4c>
 800b618:	42a3      	cmp	r3, r4
 800b61a:	d9fa      	bls.n	800b612 <_free_r+0x42>
 800b61c:	6811      	ldr	r1, [r2, #0]
 800b61e:	1850      	adds	r0, r2, r1
 800b620:	42a0      	cmp	r0, r4
 800b622:	d10b      	bne.n	800b63c <_free_r+0x6c>
 800b624:	6820      	ldr	r0, [r4, #0]
 800b626:	4401      	add	r1, r0
 800b628:	1850      	adds	r0, r2, r1
 800b62a:	4283      	cmp	r3, r0
 800b62c:	6011      	str	r1, [r2, #0]
 800b62e:	d1e0      	bne.n	800b5f2 <_free_r+0x22>
 800b630:	6818      	ldr	r0, [r3, #0]
 800b632:	685b      	ldr	r3, [r3, #4]
 800b634:	6053      	str	r3, [r2, #4]
 800b636:	4408      	add	r0, r1
 800b638:	6010      	str	r0, [r2, #0]
 800b63a:	e7da      	b.n	800b5f2 <_free_r+0x22>
 800b63c:	d902      	bls.n	800b644 <_free_r+0x74>
 800b63e:	230c      	movs	r3, #12
 800b640:	602b      	str	r3, [r5, #0]
 800b642:	e7d6      	b.n	800b5f2 <_free_r+0x22>
 800b644:	6820      	ldr	r0, [r4, #0]
 800b646:	1821      	adds	r1, r4, r0
 800b648:	428b      	cmp	r3, r1
 800b64a:	bf04      	itt	eq
 800b64c:	6819      	ldreq	r1, [r3, #0]
 800b64e:	685b      	ldreq	r3, [r3, #4]
 800b650:	6063      	str	r3, [r4, #4]
 800b652:	bf04      	itt	eq
 800b654:	1809      	addeq	r1, r1, r0
 800b656:	6021      	streq	r1, [r4, #0]
 800b658:	6054      	str	r4, [r2, #4]
 800b65a:	e7ca      	b.n	800b5f2 <_free_r+0x22>
 800b65c:	bd38      	pop	{r3, r4, r5, pc}
 800b65e:	bf00      	nop
 800b660:	20005554 	.word	0x20005554

0800b664 <_findenv_r>:
 800b664:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b668:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 800b6d8 <_findenv_r+0x74>
 800b66c:	4606      	mov	r6, r0
 800b66e:	4689      	mov	r9, r1
 800b670:	4617      	mov	r7, r2
 800b672:	f001 f8f7 	bl	800c864 <__env_lock>
 800b676:	f8da 4000 	ldr.w	r4, [sl]
 800b67a:	b134      	cbz	r4, 800b68a <_findenv_r+0x26>
 800b67c:	464b      	mov	r3, r9
 800b67e:	4698      	mov	r8, r3
 800b680:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b684:	b13a      	cbz	r2, 800b696 <_findenv_r+0x32>
 800b686:	2a3d      	cmp	r2, #61	@ 0x3d
 800b688:	d1f9      	bne.n	800b67e <_findenv_r+0x1a>
 800b68a:	4630      	mov	r0, r6
 800b68c:	f001 f8f0 	bl	800c870 <__env_unlock>
 800b690:	2000      	movs	r0, #0
 800b692:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b696:	eba8 0809 	sub.w	r8, r8, r9
 800b69a:	46a3      	mov	fp, r4
 800b69c:	f854 0b04 	ldr.w	r0, [r4], #4
 800b6a0:	2800      	cmp	r0, #0
 800b6a2:	d0f2      	beq.n	800b68a <_findenv_r+0x26>
 800b6a4:	4642      	mov	r2, r8
 800b6a6:	4649      	mov	r1, r9
 800b6a8:	f000 ffe6 	bl	800c678 <strncmp>
 800b6ac:	2800      	cmp	r0, #0
 800b6ae:	d1f4      	bne.n	800b69a <_findenv_r+0x36>
 800b6b0:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800b6b4:	eb03 0508 	add.w	r5, r3, r8
 800b6b8:	f813 3008 	ldrb.w	r3, [r3, r8]
 800b6bc:	2b3d      	cmp	r3, #61	@ 0x3d
 800b6be:	d1ec      	bne.n	800b69a <_findenv_r+0x36>
 800b6c0:	f8da 3000 	ldr.w	r3, [sl]
 800b6c4:	ebab 0303 	sub.w	r3, fp, r3
 800b6c8:	109b      	asrs	r3, r3, #2
 800b6ca:	4630      	mov	r0, r6
 800b6cc:	603b      	str	r3, [r7, #0]
 800b6ce:	f001 f8cf 	bl	800c870 <__env_unlock>
 800b6d2:	1c68      	adds	r0, r5, #1
 800b6d4:	e7dd      	b.n	800b692 <_findenv_r+0x2e>
 800b6d6:	bf00      	nop
 800b6d8:	20000000 	.word	0x20000000

0800b6dc <_getenv_r>:
 800b6dc:	b507      	push	{r0, r1, r2, lr}
 800b6de:	aa01      	add	r2, sp, #4
 800b6e0:	f7ff ffc0 	bl	800b664 <_findenv_r>
 800b6e4:	b003      	add	sp, #12
 800b6e6:	f85d fb04 	ldr.w	pc, [sp], #4

0800b6ea <labs>:
 800b6ea:	2800      	cmp	r0, #0
 800b6ec:	bfb8      	it	lt
 800b6ee:	4240      	neglt	r0, r0
 800b6f0:	4770      	bx	lr
	...

0800b6f4 <malloc>:
 800b6f4:	4b02      	ldr	r3, [pc, #8]	@ (800b700 <malloc+0xc>)
 800b6f6:	4601      	mov	r1, r0
 800b6f8:	6818      	ldr	r0, [r3, #0]
 800b6fa:	f000 b82d 	b.w	800b758 <_malloc_r>
 800b6fe:	bf00      	nop
 800b700:	2000002c 	.word	0x2000002c

0800b704 <free>:
 800b704:	4b02      	ldr	r3, [pc, #8]	@ (800b710 <free+0xc>)
 800b706:	4601      	mov	r1, r0
 800b708:	6818      	ldr	r0, [r3, #0]
 800b70a:	f7ff bf61 	b.w	800b5d0 <_free_r>
 800b70e:	bf00      	nop
 800b710:	2000002c 	.word	0x2000002c

0800b714 <sbrk_aligned>:
 800b714:	b570      	push	{r4, r5, r6, lr}
 800b716:	4e0f      	ldr	r6, [pc, #60]	@ (800b754 <sbrk_aligned+0x40>)
 800b718:	460c      	mov	r4, r1
 800b71a:	6831      	ldr	r1, [r6, #0]
 800b71c:	4605      	mov	r5, r0
 800b71e:	b911      	cbnz	r1, 800b726 <sbrk_aligned+0x12>
 800b720:	f001 f874 	bl	800c80c <_sbrk_r>
 800b724:	6030      	str	r0, [r6, #0]
 800b726:	4621      	mov	r1, r4
 800b728:	4628      	mov	r0, r5
 800b72a:	f001 f86f 	bl	800c80c <_sbrk_r>
 800b72e:	1c43      	adds	r3, r0, #1
 800b730:	d103      	bne.n	800b73a <sbrk_aligned+0x26>
 800b732:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800b736:	4620      	mov	r0, r4
 800b738:	bd70      	pop	{r4, r5, r6, pc}
 800b73a:	1cc4      	adds	r4, r0, #3
 800b73c:	f024 0403 	bic.w	r4, r4, #3
 800b740:	42a0      	cmp	r0, r4
 800b742:	d0f8      	beq.n	800b736 <sbrk_aligned+0x22>
 800b744:	1a21      	subs	r1, r4, r0
 800b746:	4628      	mov	r0, r5
 800b748:	f001 f860 	bl	800c80c <_sbrk_r>
 800b74c:	3001      	adds	r0, #1
 800b74e:	d1f2      	bne.n	800b736 <sbrk_aligned+0x22>
 800b750:	e7ef      	b.n	800b732 <sbrk_aligned+0x1e>
 800b752:	bf00      	nop
 800b754:	20005550 	.word	0x20005550

0800b758 <_malloc_r>:
 800b758:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b75c:	1ccd      	adds	r5, r1, #3
 800b75e:	f025 0503 	bic.w	r5, r5, #3
 800b762:	3508      	adds	r5, #8
 800b764:	2d0c      	cmp	r5, #12
 800b766:	bf38      	it	cc
 800b768:	250c      	movcc	r5, #12
 800b76a:	2d00      	cmp	r5, #0
 800b76c:	4606      	mov	r6, r0
 800b76e:	db01      	blt.n	800b774 <_malloc_r+0x1c>
 800b770:	42a9      	cmp	r1, r5
 800b772:	d904      	bls.n	800b77e <_malloc_r+0x26>
 800b774:	230c      	movs	r3, #12
 800b776:	6033      	str	r3, [r6, #0]
 800b778:	2000      	movs	r0, #0
 800b77a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b77e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b854 <_malloc_r+0xfc>
 800b782:	f000 f869 	bl	800b858 <__malloc_lock>
 800b786:	f8d8 3000 	ldr.w	r3, [r8]
 800b78a:	461c      	mov	r4, r3
 800b78c:	bb44      	cbnz	r4, 800b7e0 <_malloc_r+0x88>
 800b78e:	4629      	mov	r1, r5
 800b790:	4630      	mov	r0, r6
 800b792:	f7ff ffbf 	bl	800b714 <sbrk_aligned>
 800b796:	1c43      	adds	r3, r0, #1
 800b798:	4604      	mov	r4, r0
 800b79a:	d158      	bne.n	800b84e <_malloc_r+0xf6>
 800b79c:	f8d8 4000 	ldr.w	r4, [r8]
 800b7a0:	4627      	mov	r7, r4
 800b7a2:	2f00      	cmp	r7, #0
 800b7a4:	d143      	bne.n	800b82e <_malloc_r+0xd6>
 800b7a6:	2c00      	cmp	r4, #0
 800b7a8:	d04b      	beq.n	800b842 <_malloc_r+0xea>
 800b7aa:	6823      	ldr	r3, [r4, #0]
 800b7ac:	4639      	mov	r1, r7
 800b7ae:	4630      	mov	r0, r6
 800b7b0:	eb04 0903 	add.w	r9, r4, r3
 800b7b4:	f001 f82a 	bl	800c80c <_sbrk_r>
 800b7b8:	4581      	cmp	r9, r0
 800b7ba:	d142      	bne.n	800b842 <_malloc_r+0xea>
 800b7bc:	6821      	ldr	r1, [r4, #0]
 800b7be:	1a6d      	subs	r5, r5, r1
 800b7c0:	4629      	mov	r1, r5
 800b7c2:	4630      	mov	r0, r6
 800b7c4:	f7ff ffa6 	bl	800b714 <sbrk_aligned>
 800b7c8:	3001      	adds	r0, #1
 800b7ca:	d03a      	beq.n	800b842 <_malloc_r+0xea>
 800b7cc:	6823      	ldr	r3, [r4, #0]
 800b7ce:	442b      	add	r3, r5
 800b7d0:	6023      	str	r3, [r4, #0]
 800b7d2:	f8d8 3000 	ldr.w	r3, [r8]
 800b7d6:	685a      	ldr	r2, [r3, #4]
 800b7d8:	bb62      	cbnz	r2, 800b834 <_malloc_r+0xdc>
 800b7da:	f8c8 7000 	str.w	r7, [r8]
 800b7de:	e00f      	b.n	800b800 <_malloc_r+0xa8>
 800b7e0:	6822      	ldr	r2, [r4, #0]
 800b7e2:	1b52      	subs	r2, r2, r5
 800b7e4:	d420      	bmi.n	800b828 <_malloc_r+0xd0>
 800b7e6:	2a0b      	cmp	r2, #11
 800b7e8:	d917      	bls.n	800b81a <_malloc_r+0xc2>
 800b7ea:	1961      	adds	r1, r4, r5
 800b7ec:	42a3      	cmp	r3, r4
 800b7ee:	6025      	str	r5, [r4, #0]
 800b7f0:	bf18      	it	ne
 800b7f2:	6059      	strne	r1, [r3, #4]
 800b7f4:	6863      	ldr	r3, [r4, #4]
 800b7f6:	bf08      	it	eq
 800b7f8:	f8c8 1000 	streq.w	r1, [r8]
 800b7fc:	5162      	str	r2, [r4, r5]
 800b7fe:	604b      	str	r3, [r1, #4]
 800b800:	4630      	mov	r0, r6
 800b802:	f000 f82f 	bl	800b864 <__malloc_unlock>
 800b806:	f104 000b 	add.w	r0, r4, #11
 800b80a:	1d23      	adds	r3, r4, #4
 800b80c:	f020 0007 	bic.w	r0, r0, #7
 800b810:	1ac2      	subs	r2, r0, r3
 800b812:	bf1c      	itt	ne
 800b814:	1a1b      	subne	r3, r3, r0
 800b816:	50a3      	strne	r3, [r4, r2]
 800b818:	e7af      	b.n	800b77a <_malloc_r+0x22>
 800b81a:	6862      	ldr	r2, [r4, #4]
 800b81c:	42a3      	cmp	r3, r4
 800b81e:	bf0c      	ite	eq
 800b820:	f8c8 2000 	streq.w	r2, [r8]
 800b824:	605a      	strne	r2, [r3, #4]
 800b826:	e7eb      	b.n	800b800 <_malloc_r+0xa8>
 800b828:	4623      	mov	r3, r4
 800b82a:	6864      	ldr	r4, [r4, #4]
 800b82c:	e7ae      	b.n	800b78c <_malloc_r+0x34>
 800b82e:	463c      	mov	r4, r7
 800b830:	687f      	ldr	r7, [r7, #4]
 800b832:	e7b6      	b.n	800b7a2 <_malloc_r+0x4a>
 800b834:	461a      	mov	r2, r3
 800b836:	685b      	ldr	r3, [r3, #4]
 800b838:	42a3      	cmp	r3, r4
 800b83a:	d1fb      	bne.n	800b834 <_malloc_r+0xdc>
 800b83c:	2300      	movs	r3, #0
 800b83e:	6053      	str	r3, [r2, #4]
 800b840:	e7de      	b.n	800b800 <_malloc_r+0xa8>
 800b842:	230c      	movs	r3, #12
 800b844:	6033      	str	r3, [r6, #0]
 800b846:	4630      	mov	r0, r6
 800b848:	f000 f80c 	bl	800b864 <__malloc_unlock>
 800b84c:	e794      	b.n	800b778 <_malloc_r+0x20>
 800b84e:	6005      	str	r5, [r0, #0]
 800b850:	e7d6      	b.n	800b800 <_malloc_r+0xa8>
 800b852:	bf00      	nop
 800b854:	20005554 	.word	0x20005554

0800b858 <__malloc_lock>:
 800b858:	4801      	ldr	r0, [pc, #4]	@ (800b860 <__malloc_lock+0x8>)
 800b85a:	f7ff b825 	b.w	800a8a8 <__retarget_lock_acquire_recursive>
 800b85e:	bf00      	nop
 800b860:	2000554e 	.word	0x2000554e

0800b864 <__malloc_unlock>:
 800b864:	4801      	ldr	r0, [pc, #4]	@ (800b86c <__malloc_unlock+0x8>)
 800b866:	f7ff b821 	b.w	800a8ac <__retarget_lock_release_recursive>
 800b86a:	bf00      	nop
 800b86c:	2000554e 	.word	0x2000554e

0800b870 <_Balloc>:
 800b870:	b570      	push	{r4, r5, r6, lr}
 800b872:	69c6      	ldr	r6, [r0, #28]
 800b874:	4604      	mov	r4, r0
 800b876:	460d      	mov	r5, r1
 800b878:	b976      	cbnz	r6, 800b898 <_Balloc+0x28>
 800b87a:	2010      	movs	r0, #16
 800b87c:	f7ff ff3a 	bl	800b6f4 <malloc>
 800b880:	4602      	mov	r2, r0
 800b882:	61e0      	str	r0, [r4, #28]
 800b884:	b920      	cbnz	r0, 800b890 <_Balloc+0x20>
 800b886:	4b18      	ldr	r3, [pc, #96]	@ (800b8e8 <_Balloc+0x78>)
 800b888:	4818      	ldr	r0, [pc, #96]	@ (800b8ec <_Balloc+0x7c>)
 800b88a:	216b      	movs	r1, #107	@ 0x6b
 800b88c:	f7ff f82a 	bl	800a8e4 <__assert_func>
 800b890:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b894:	6006      	str	r6, [r0, #0]
 800b896:	60c6      	str	r6, [r0, #12]
 800b898:	69e6      	ldr	r6, [r4, #28]
 800b89a:	68f3      	ldr	r3, [r6, #12]
 800b89c:	b183      	cbz	r3, 800b8c0 <_Balloc+0x50>
 800b89e:	69e3      	ldr	r3, [r4, #28]
 800b8a0:	68db      	ldr	r3, [r3, #12]
 800b8a2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b8a6:	b9b8      	cbnz	r0, 800b8d8 <_Balloc+0x68>
 800b8a8:	2101      	movs	r1, #1
 800b8aa:	fa01 f605 	lsl.w	r6, r1, r5
 800b8ae:	1d72      	adds	r2, r6, #5
 800b8b0:	0092      	lsls	r2, r2, #2
 800b8b2:	4620      	mov	r0, r4
 800b8b4:	f000 ffc1 	bl	800c83a <_calloc_r>
 800b8b8:	b160      	cbz	r0, 800b8d4 <_Balloc+0x64>
 800b8ba:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b8be:	e00e      	b.n	800b8de <_Balloc+0x6e>
 800b8c0:	2221      	movs	r2, #33	@ 0x21
 800b8c2:	2104      	movs	r1, #4
 800b8c4:	4620      	mov	r0, r4
 800b8c6:	f000 ffb8 	bl	800c83a <_calloc_r>
 800b8ca:	69e3      	ldr	r3, [r4, #28]
 800b8cc:	60f0      	str	r0, [r6, #12]
 800b8ce:	68db      	ldr	r3, [r3, #12]
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	d1e4      	bne.n	800b89e <_Balloc+0x2e>
 800b8d4:	2000      	movs	r0, #0
 800b8d6:	bd70      	pop	{r4, r5, r6, pc}
 800b8d8:	6802      	ldr	r2, [r0, #0]
 800b8da:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b8de:	2300      	movs	r3, #0
 800b8e0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b8e4:	e7f7      	b.n	800b8d6 <_Balloc+0x66>
 800b8e6:	bf00      	nop
 800b8e8:	0800d71c 	.word	0x0800d71c
 800b8ec:	0800daa6 	.word	0x0800daa6

0800b8f0 <_Bfree>:
 800b8f0:	b570      	push	{r4, r5, r6, lr}
 800b8f2:	69c6      	ldr	r6, [r0, #28]
 800b8f4:	4605      	mov	r5, r0
 800b8f6:	460c      	mov	r4, r1
 800b8f8:	b976      	cbnz	r6, 800b918 <_Bfree+0x28>
 800b8fa:	2010      	movs	r0, #16
 800b8fc:	f7ff fefa 	bl	800b6f4 <malloc>
 800b900:	4602      	mov	r2, r0
 800b902:	61e8      	str	r0, [r5, #28]
 800b904:	b920      	cbnz	r0, 800b910 <_Bfree+0x20>
 800b906:	4b09      	ldr	r3, [pc, #36]	@ (800b92c <_Bfree+0x3c>)
 800b908:	4809      	ldr	r0, [pc, #36]	@ (800b930 <_Bfree+0x40>)
 800b90a:	218f      	movs	r1, #143	@ 0x8f
 800b90c:	f7fe ffea 	bl	800a8e4 <__assert_func>
 800b910:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b914:	6006      	str	r6, [r0, #0]
 800b916:	60c6      	str	r6, [r0, #12]
 800b918:	b13c      	cbz	r4, 800b92a <_Bfree+0x3a>
 800b91a:	69eb      	ldr	r3, [r5, #28]
 800b91c:	6862      	ldr	r2, [r4, #4]
 800b91e:	68db      	ldr	r3, [r3, #12]
 800b920:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b924:	6021      	str	r1, [r4, #0]
 800b926:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b92a:	bd70      	pop	{r4, r5, r6, pc}
 800b92c:	0800d71c 	.word	0x0800d71c
 800b930:	0800daa6 	.word	0x0800daa6

0800b934 <__multadd>:
 800b934:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b938:	690d      	ldr	r5, [r1, #16]
 800b93a:	4607      	mov	r7, r0
 800b93c:	460c      	mov	r4, r1
 800b93e:	461e      	mov	r6, r3
 800b940:	f101 0c14 	add.w	ip, r1, #20
 800b944:	2000      	movs	r0, #0
 800b946:	f8dc 3000 	ldr.w	r3, [ip]
 800b94a:	b299      	uxth	r1, r3
 800b94c:	fb02 6101 	mla	r1, r2, r1, r6
 800b950:	0c1e      	lsrs	r6, r3, #16
 800b952:	0c0b      	lsrs	r3, r1, #16
 800b954:	fb02 3306 	mla	r3, r2, r6, r3
 800b958:	b289      	uxth	r1, r1
 800b95a:	3001      	adds	r0, #1
 800b95c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b960:	4285      	cmp	r5, r0
 800b962:	f84c 1b04 	str.w	r1, [ip], #4
 800b966:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b96a:	dcec      	bgt.n	800b946 <__multadd+0x12>
 800b96c:	b30e      	cbz	r6, 800b9b2 <__multadd+0x7e>
 800b96e:	68a3      	ldr	r3, [r4, #8]
 800b970:	42ab      	cmp	r3, r5
 800b972:	dc19      	bgt.n	800b9a8 <__multadd+0x74>
 800b974:	6861      	ldr	r1, [r4, #4]
 800b976:	4638      	mov	r0, r7
 800b978:	3101      	adds	r1, #1
 800b97a:	f7ff ff79 	bl	800b870 <_Balloc>
 800b97e:	4680      	mov	r8, r0
 800b980:	b928      	cbnz	r0, 800b98e <__multadd+0x5a>
 800b982:	4602      	mov	r2, r0
 800b984:	4b0c      	ldr	r3, [pc, #48]	@ (800b9b8 <__multadd+0x84>)
 800b986:	480d      	ldr	r0, [pc, #52]	@ (800b9bc <__multadd+0x88>)
 800b988:	21ba      	movs	r1, #186	@ 0xba
 800b98a:	f7fe ffab 	bl	800a8e4 <__assert_func>
 800b98e:	6922      	ldr	r2, [r4, #16]
 800b990:	3202      	adds	r2, #2
 800b992:	f104 010c 	add.w	r1, r4, #12
 800b996:	0092      	lsls	r2, r2, #2
 800b998:	300c      	adds	r0, #12
 800b99a:	f7fe ff90 	bl	800a8be <memcpy>
 800b99e:	4621      	mov	r1, r4
 800b9a0:	4638      	mov	r0, r7
 800b9a2:	f7ff ffa5 	bl	800b8f0 <_Bfree>
 800b9a6:	4644      	mov	r4, r8
 800b9a8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b9ac:	3501      	adds	r5, #1
 800b9ae:	615e      	str	r6, [r3, #20]
 800b9b0:	6125      	str	r5, [r4, #16]
 800b9b2:	4620      	mov	r0, r4
 800b9b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b9b8:	0800da95 	.word	0x0800da95
 800b9bc:	0800daa6 	.word	0x0800daa6

0800b9c0 <__hi0bits>:
 800b9c0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800b9c4:	4603      	mov	r3, r0
 800b9c6:	bf36      	itet	cc
 800b9c8:	0403      	lslcc	r3, r0, #16
 800b9ca:	2000      	movcs	r0, #0
 800b9cc:	2010      	movcc	r0, #16
 800b9ce:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b9d2:	bf3c      	itt	cc
 800b9d4:	021b      	lslcc	r3, r3, #8
 800b9d6:	3008      	addcc	r0, #8
 800b9d8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b9dc:	bf3c      	itt	cc
 800b9de:	011b      	lslcc	r3, r3, #4
 800b9e0:	3004      	addcc	r0, #4
 800b9e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b9e6:	bf3c      	itt	cc
 800b9e8:	009b      	lslcc	r3, r3, #2
 800b9ea:	3002      	addcc	r0, #2
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	db05      	blt.n	800b9fc <__hi0bits+0x3c>
 800b9f0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800b9f4:	f100 0001 	add.w	r0, r0, #1
 800b9f8:	bf08      	it	eq
 800b9fa:	2020      	moveq	r0, #32
 800b9fc:	4770      	bx	lr

0800b9fe <__lo0bits>:
 800b9fe:	6803      	ldr	r3, [r0, #0]
 800ba00:	4602      	mov	r2, r0
 800ba02:	f013 0007 	ands.w	r0, r3, #7
 800ba06:	d00b      	beq.n	800ba20 <__lo0bits+0x22>
 800ba08:	07d9      	lsls	r1, r3, #31
 800ba0a:	d421      	bmi.n	800ba50 <__lo0bits+0x52>
 800ba0c:	0798      	lsls	r0, r3, #30
 800ba0e:	bf49      	itett	mi
 800ba10:	085b      	lsrmi	r3, r3, #1
 800ba12:	089b      	lsrpl	r3, r3, #2
 800ba14:	2001      	movmi	r0, #1
 800ba16:	6013      	strmi	r3, [r2, #0]
 800ba18:	bf5c      	itt	pl
 800ba1a:	6013      	strpl	r3, [r2, #0]
 800ba1c:	2002      	movpl	r0, #2
 800ba1e:	4770      	bx	lr
 800ba20:	b299      	uxth	r1, r3
 800ba22:	b909      	cbnz	r1, 800ba28 <__lo0bits+0x2a>
 800ba24:	0c1b      	lsrs	r3, r3, #16
 800ba26:	2010      	movs	r0, #16
 800ba28:	b2d9      	uxtb	r1, r3
 800ba2a:	b909      	cbnz	r1, 800ba30 <__lo0bits+0x32>
 800ba2c:	3008      	adds	r0, #8
 800ba2e:	0a1b      	lsrs	r3, r3, #8
 800ba30:	0719      	lsls	r1, r3, #28
 800ba32:	bf04      	itt	eq
 800ba34:	091b      	lsreq	r3, r3, #4
 800ba36:	3004      	addeq	r0, #4
 800ba38:	0799      	lsls	r1, r3, #30
 800ba3a:	bf04      	itt	eq
 800ba3c:	089b      	lsreq	r3, r3, #2
 800ba3e:	3002      	addeq	r0, #2
 800ba40:	07d9      	lsls	r1, r3, #31
 800ba42:	d403      	bmi.n	800ba4c <__lo0bits+0x4e>
 800ba44:	085b      	lsrs	r3, r3, #1
 800ba46:	f100 0001 	add.w	r0, r0, #1
 800ba4a:	d003      	beq.n	800ba54 <__lo0bits+0x56>
 800ba4c:	6013      	str	r3, [r2, #0]
 800ba4e:	4770      	bx	lr
 800ba50:	2000      	movs	r0, #0
 800ba52:	4770      	bx	lr
 800ba54:	2020      	movs	r0, #32
 800ba56:	4770      	bx	lr

0800ba58 <__i2b>:
 800ba58:	b510      	push	{r4, lr}
 800ba5a:	460c      	mov	r4, r1
 800ba5c:	2101      	movs	r1, #1
 800ba5e:	f7ff ff07 	bl	800b870 <_Balloc>
 800ba62:	4602      	mov	r2, r0
 800ba64:	b928      	cbnz	r0, 800ba72 <__i2b+0x1a>
 800ba66:	4b05      	ldr	r3, [pc, #20]	@ (800ba7c <__i2b+0x24>)
 800ba68:	4805      	ldr	r0, [pc, #20]	@ (800ba80 <__i2b+0x28>)
 800ba6a:	f240 1145 	movw	r1, #325	@ 0x145
 800ba6e:	f7fe ff39 	bl	800a8e4 <__assert_func>
 800ba72:	2301      	movs	r3, #1
 800ba74:	6144      	str	r4, [r0, #20]
 800ba76:	6103      	str	r3, [r0, #16]
 800ba78:	bd10      	pop	{r4, pc}
 800ba7a:	bf00      	nop
 800ba7c:	0800da95 	.word	0x0800da95
 800ba80:	0800daa6 	.word	0x0800daa6

0800ba84 <__multiply>:
 800ba84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba88:	4617      	mov	r7, r2
 800ba8a:	690a      	ldr	r2, [r1, #16]
 800ba8c:	693b      	ldr	r3, [r7, #16]
 800ba8e:	429a      	cmp	r2, r3
 800ba90:	bfa8      	it	ge
 800ba92:	463b      	movge	r3, r7
 800ba94:	4689      	mov	r9, r1
 800ba96:	bfa4      	itt	ge
 800ba98:	460f      	movge	r7, r1
 800ba9a:	4699      	movge	r9, r3
 800ba9c:	693d      	ldr	r5, [r7, #16]
 800ba9e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800baa2:	68bb      	ldr	r3, [r7, #8]
 800baa4:	6879      	ldr	r1, [r7, #4]
 800baa6:	eb05 060a 	add.w	r6, r5, sl
 800baaa:	42b3      	cmp	r3, r6
 800baac:	b085      	sub	sp, #20
 800baae:	bfb8      	it	lt
 800bab0:	3101      	addlt	r1, #1
 800bab2:	f7ff fedd 	bl	800b870 <_Balloc>
 800bab6:	b930      	cbnz	r0, 800bac6 <__multiply+0x42>
 800bab8:	4602      	mov	r2, r0
 800baba:	4b41      	ldr	r3, [pc, #260]	@ (800bbc0 <__multiply+0x13c>)
 800babc:	4841      	ldr	r0, [pc, #260]	@ (800bbc4 <__multiply+0x140>)
 800babe:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800bac2:	f7fe ff0f 	bl	800a8e4 <__assert_func>
 800bac6:	f100 0414 	add.w	r4, r0, #20
 800baca:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800bace:	4623      	mov	r3, r4
 800bad0:	2200      	movs	r2, #0
 800bad2:	4573      	cmp	r3, lr
 800bad4:	d320      	bcc.n	800bb18 <__multiply+0x94>
 800bad6:	f107 0814 	add.w	r8, r7, #20
 800bada:	f109 0114 	add.w	r1, r9, #20
 800bade:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800bae2:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800bae6:	9302      	str	r3, [sp, #8]
 800bae8:	1beb      	subs	r3, r5, r7
 800baea:	3b15      	subs	r3, #21
 800baec:	f023 0303 	bic.w	r3, r3, #3
 800baf0:	3304      	adds	r3, #4
 800baf2:	3715      	adds	r7, #21
 800baf4:	42bd      	cmp	r5, r7
 800baf6:	bf38      	it	cc
 800baf8:	2304      	movcc	r3, #4
 800bafa:	9301      	str	r3, [sp, #4]
 800bafc:	9b02      	ldr	r3, [sp, #8]
 800bafe:	9103      	str	r1, [sp, #12]
 800bb00:	428b      	cmp	r3, r1
 800bb02:	d80c      	bhi.n	800bb1e <__multiply+0x9a>
 800bb04:	2e00      	cmp	r6, #0
 800bb06:	dd03      	ble.n	800bb10 <__multiply+0x8c>
 800bb08:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	d055      	beq.n	800bbbc <__multiply+0x138>
 800bb10:	6106      	str	r6, [r0, #16]
 800bb12:	b005      	add	sp, #20
 800bb14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb18:	f843 2b04 	str.w	r2, [r3], #4
 800bb1c:	e7d9      	b.n	800bad2 <__multiply+0x4e>
 800bb1e:	f8b1 a000 	ldrh.w	sl, [r1]
 800bb22:	f1ba 0f00 	cmp.w	sl, #0
 800bb26:	d01f      	beq.n	800bb68 <__multiply+0xe4>
 800bb28:	46c4      	mov	ip, r8
 800bb2a:	46a1      	mov	r9, r4
 800bb2c:	2700      	movs	r7, #0
 800bb2e:	f85c 2b04 	ldr.w	r2, [ip], #4
 800bb32:	f8d9 3000 	ldr.w	r3, [r9]
 800bb36:	fa1f fb82 	uxth.w	fp, r2
 800bb3a:	b29b      	uxth	r3, r3
 800bb3c:	fb0a 330b 	mla	r3, sl, fp, r3
 800bb40:	443b      	add	r3, r7
 800bb42:	f8d9 7000 	ldr.w	r7, [r9]
 800bb46:	0c12      	lsrs	r2, r2, #16
 800bb48:	0c3f      	lsrs	r7, r7, #16
 800bb4a:	fb0a 7202 	mla	r2, sl, r2, r7
 800bb4e:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800bb52:	b29b      	uxth	r3, r3
 800bb54:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bb58:	4565      	cmp	r5, ip
 800bb5a:	f849 3b04 	str.w	r3, [r9], #4
 800bb5e:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800bb62:	d8e4      	bhi.n	800bb2e <__multiply+0xaa>
 800bb64:	9b01      	ldr	r3, [sp, #4]
 800bb66:	50e7      	str	r7, [r4, r3]
 800bb68:	9b03      	ldr	r3, [sp, #12]
 800bb6a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800bb6e:	3104      	adds	r1, #4
 800bb70:	f1b9 0f00 	cmp.w	r9, #0
 800bb74:	d020      	beq.n	800bbb8 <__multiply+0x134>
 800bb76:	6823      	ldr	r3, [r4, #0]
 800bb78:	4647      	mov	r7, r8
 800bb7a:	46a4      	mov	ip, r4
 800bb7c:	f04f 0a00 	mov.w	sl, #0
 800bb80:	f8b7 b000 	ldrh.w	fp, [r7]
 800bb84:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800bb88:	fb09 220b 	mla	r2, r9, fp, r2
 800bb8c:	4452      	add	r2, sl
 800bb8e:	b29b      	uxth	r3, r3
 800bb90:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bb94:	f84c 3b04 	str.w	r3, [ip], #4
 800bb98:	f857 3b04 	ldr.w	r3, [r7], #4
 800bb9c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bba0:	f8bc 3000 	ldrh.w	r3, [ip]
 800bba4:	fb09 330a 	mla	r3, r9, sl, r3
 800bba8:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800bbac:	42bd      	cmp	r5, r7
 800bbae:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bbb2:	d8e5      	bhi.n	800bb80 <__multiply+0xfc>
 800bbb4:	9a01      	ldr	r2, [sp, #4]
 800bbb6:	50a3      	str	r3, [r4, r2]
 800bbb8:	3404      	adds	r4, #4
 800bbba:	e79f      	b.n	800bafc <__multiply+0x78>
 800bbbc:	3e01      	subs	r6, #1
 800bbbe:	e7a1      	b.n	800bb04 <__multiply+0x80>
 800bbc0:	0800da95 	.word	0x0800da95
 800bbc4:	0800daa6 	.word	0x0800daa6

0800bbc8 <__pow5mult>:
 800bbc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bbcc:	4615      	mov	r5, r2
 800bbce:	f012 0203 	ands.w	r2, r2, #3
 800bbd2:	4607      	mov	r7, r0
 800bbd4:	460e      	mov	r6, r1
 800bbd6:	d007      	beq.n	800bbe8 <__pow5mult+0x20>
 800bbd8:	4c25      	ldr	r4, [pc, #148]	@ (800bc70 <__pow5mult+0xa8>)
 800bbda:	3a01      	subs	r2, #1
 800bbdc:	2300      	movs	r3, #0
 800bbde:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800bbe2:	f7ff fea7 	bl	800b934 <__multadd>
 800bbe6:	4606      	mov	r6, r0
 800bbe8:	10ad      	asrs	r5, r5, #2
 800bbea:	d03d      	beq.n	800bc68 <__pow5mult+0xa0>
 800bbec:	69fc      	ldr	r4, [r7, #28]
 800bbee:	b97c      	cbnz	r4, 800bc10 <__pow5mult+0x48>
 800bbf0:	2010      	movs	r0, #16
 800bbf2:	f7ff fd7f 	bl	800b6f4 <malloc>
 800bbf6:	4602      	mov	r2, r0
 800bbf8:	61f8      	str	r0, [r7, #28]
 800bbfa:	b928      	cbnz	r0, 800bc08 <__pow5mult+0x40>
 800bbfc:	4b1d      	ldr	r3, [pc, #116]	@ (800bc74 <__pow5mult+0xac>)
 800bbfe:	481e      	ldr	r0, [pc, #120]	@ (800bc78 <__pow5mult+0xb0>)
 800bc00:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800bc04:	f7fe fe6e 	bl	800a8e4 <__assert_func>
 800bc08:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bc0c:	6004      	str	r4, [r0, #0]
 800bc0e:	60c4      	str	r4, [r0, #12]
 800bc10:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800bc14:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800bc18:	b94c      	cbnz	r4, 800bc2e <__pow5mult+0x66>
 800bc1a:	f240 2171 	movw	r1, #625	@ 0x271
 800bc1e:	4638      	mov	r0, r7
 800bc20:	f7ff ff1a 	bl	800ba58 <__i2b>
 800bc24:	2300      	movs	r3, #0
 800bc26:	f8c8 0008 	str.w	r0, [r8, #8]
 800bc2a:	4604      	mov	r4, r0
 800bc2c:	6003      	str	r3, [r0, #0]
 800bc2e:	f04f 0900 	mov.w	r9, #0
 800bc32:	07eb      	lsls	r3, r5, #31
 800bc34:	d50a      	bpl.n	800bc4c <__pow5mult+0x84>
 800bc36:	4631      	mov	r1, r6
 800bc38:	4622      	mov	r2, r4
 800bc3a:	4638      	mov	r0, r7
 800bc3c:	f7ff ff22 	bl	800ba84 <__multiply>
 800bc40:	4631      	mov	r1, r6
 800bc42:	4680      	mov	r8, r0
 800bc44:	4638      	mov	r0, r7
 800bc46:	f7ff fe53 	bl	800b8f0 <_Bfree>
 800bc4a:	4646      	mov	r6, r8
 800bc4c:	106d      	asrs	r5, r5, #1
 800bc4e:	d00b      	beq.n	800bc68 <__pow5mult+0xa0>
 800bc50:	6820      	ldr	r0, [r4, #0]
 800bc52:	b938      	cbnz	r0, 800bc64 <__pow5mult+0x9c>
 800bc54:	4622      	mov	r2, r4
 800bc56:	4621      	mov	r1, r4
 800bc58:	4638      	mov	r0, r7
 800bc5a:	f7ff ff13 	bl	800ba84 <__multiply>
 800bc5e:	6020      	str	r0, [r4, #0]
 800bc60:	f8c0 9000 	str.w	r9, [r0]
 800bc64:	4604      	mov	r4, r0
 800bc66:	e7e4      	b.n	800bc32 <__pow5mult+0x6a>
 800bc68:	4630      	mov	r0, r6
 800bc6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bc6e:	bf00      	nop
 800bc70:	0800dc34 	.word	0x0800dc34
 800bc74:	0800d71c 	.word	0x0800d71c
 800bc78:	0800daa6 	.word	0x0800daa6

0800bc7c <__lshift>:
 800bc7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bc80:	460c      	mov	r4, r1
 800bc82:	6849      	ldr	r1, [r1, #4]
 800bc84:	6923      	ldr	r3, [r4, #16]
 800bc86:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800bc8a:	68a3      	ldr	r3, [r4, #8]
 800bc8c:	4607      	mov	r7, r0
 800bc8e:	4691      	mov	r9, r2
 800bc90:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800bc94:	f108 0601 	add.w	r6, r8, #1
 800bc98:	42b3      	cmp	r3, r6
 800bc9a:	db0b      	blt.n	800bcb4 <__lshift+0x38>
 800bc9c:	4638      	mov	r0, r7
 800bc9e:	f7ff fde7 	bl	800b870 <_Balloc>
 800bca2:	4605      	mov	r5, r0
 800bca4:	b948      	cbnz	r0, 800bcba <__lshift+0x3e>
 800bca6:	4602      	mov	r2, r0
 800bca8:	4b28      	ldr	r3, [pc, #160]	@ (800bd4c <__lshift+0xd0>)
 800bcaa:	4829      	ldr	r0, [pc, #164]	@ (800bd50 <__lshift+0xd4>)
 800bcac:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800bcb0:	f7fe fe18 	bl	800a8e4 <__assert_func>
 800bcb4:	3101      	adds	r1, #1
 800bcb6:	005b      	lsls	r3, r3, #1
 800bcb8:	e7ee      	b.n	800bc98 <__lshift+0x1c>
 800bcba:	2300      	movs	r3, #0
 800bcbc:	f100 0114 	add.w	r1, r0, #20
 800bcc0:	f100 0210 	add.w	r2, r0, #16
 800bcc4:	4618      	mov	r0, r3
 800bcc6:	4553      	cmp	r3, sl
 800bcc8:	db33      	blt.n	800bd32 <__lshift+0xb6>
 800bcca:	6920      	ldr	r0, [r4, #16]
 800bccc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bcd0:	f104 0314 	add.w	r3, r4, #20
 800bcd4:	f019 091f 	ands.w	r9, r9, #31
 800bcd8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bcdc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800bce0:	d02b      	beq.n	800bd3a <__lshift+0xbe>
 800bce2:	f1c9 0e20 	rsb	lr, r9, #32
 800bce6:	468a      	mov	sl, r1
 800bce8:	2200      	movs	r2, #0
 800bcea:	6818      	ldr	r0, [r3, #0]
 800bcec:	fa00 f009 	lsl.w	r0, r0, r9
 800bcf0:	4310      	orrs	r0, r2
 800bcf2:	f84a 0b04 	str.w	r0, [sl], #4
 800bcf6:	f853 2b04 	ldr.w	r2, [r3], #4
 800bcfa:	459c      	cmp	ip, r3
 800bcfc:	fa22 f20e 	lsr.w	r2, r2, lr
 800bd00:	d8f3      	bhi.n	800bcea <__lshift+0x6e>
 800bd02:	ebac 0304 	sub.w	r3, ip, r4
 800bd06:	3b15      	subs	r3, #21
 800bd08:	f023 0303 	bic.w	r3, r3, #3
 800bd0c:	3304      	adds	r3, #4
 800bd0e:	f104 0015 	add.w	r0, r4, #21
 800bd12:	4560      	cmp	r0, ip
 800bd14:	bf88      	it	hi
 800bd16:	2304      	movhi	r3, #4
 800bd18:	50ca      	str	r2, [r1, r3]
 800bd1a:	b10a      	cbz	r2, 800bd20 <__lshift+0xa4>
 800bd1c:	f108 0602 	add.w	r6, r8, #2
 800bd20:	3e01      	subs	r6, #1
 800bd22:	4638      	mov	r0, r7
 800bd24:	612e      	str	r6, [r5, #16]
 800bd26:	4621      	mov	r1, r4
 800bd28:	f7ff fde2 	bl	800b8f0 <_Bfree>
 800bd2c:	4628      	mov	r0, r5
 800bd2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd32:	f842 0f04 	str.w	r0, [r2, #4]!
 800bd36:	3301      	adds	r3, #1
 800bd38:	e7c5      	b.n	800bcc6 <__lshift+0x4a>
 800bd3a:	3904      	subs	r1, #4
 800bd3c:	f853 2b04 	ldr.w	r2, [r3], #4
 800bd40:	f841 2f04 	str.w	r2, [r1, #4]!
 800bd44:	459c      	cmp	ip, r3
 800bd46:	d8f9      	bhi.n	800bd3c <__lshift+0xc0>
 800bd48:	e7ea      	b.n	800bd20 <__lshift+0xa4>
 800bd4a:	bf00      	nop
 800bd4c:	0800da95 	.word	0x0800da95
 800bd50:	0800daa6 	.word	0x0800daa6

0800bd54 <__mcmp>:
 800bd54:	690a      	ldr	r2, [r1, #16]
 800bd56:	4603      	mov	r3, r0
 800bd58:	6900      	ldr	r0, [r0, #16]
 800bd5a:	1a80      	subs	r0, r0, r2
 800bd5c:	b530      	push	{r4, r5, lr}
 800bd5e:	d10e      	bne.n	800bd7e <__mcmp+0x2a>
 800bd60:	3314      	adds	r3, #20
 800bd62:	3114      	adds	r1, #20
 800bd64:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800bd68:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800bd6c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800bd70:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800bd74:	4295      	cmp	r5, r2
 800bd76:	d003      	beq.n	800bd80 <__mcmp+0x2c>
 800bd78:	d205      	bcs.n	800bd86 <__mcmp+0x32>
 800bd7a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800bd7e:	bd30      	pop	{r4, r5, pc}
 800bd80:	42a3      	cmp	r3, r4
 800bd82:	d3f3      	bcc.n	800bd6c <__mcmp+0x18>
 800bd84:	e7fb      	b.n	800bd7e <__mcmp+0x2a>
 800bd86:	2001      	movs	r0, #1
 800bd88:	e7f9      	b.n	800bd7e <__mcmp+0x2a>
	...

0800bd8c <__mdiff>:
 800bd8c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd90:	4689      	mov	r9, r1
 800bd92:	4606      	mov	r6, r0
 800bd94:	4611      	mov	r1, r2
 800bd96:	4648      	mov	r0, r9
 800bd98:	4614      	mov	r4, r2
 800bd9a:	f7ff ffdb 	bl	800bd54 <__mcmp>
 800bd9e:	1e05      	subs	r5, r0, #0
 800bda0:	d112      	bne.n	800bdc8 <__mdiff+0x3c>
 800bda2:	4629      	mov	r1, r5
 800bda4:	4630      	mov	r0, r6
 800bda6:	f7ff fd63 	bl	800b870 <_Balloc>
 800bdaa:	4602      	mov	r2, r0
 800bdac:	b928      	cbnz	r0, 800bdba <__mdiff+0x2e>
 800bdae:	4b3f      	ldr	r3, [pc, #252]	@ (800beac <__mdiff+0x120>)
 800bdb0:	f240 2137 	movw	r1, #567	@ 0x237
 800bdb4:	483e      	ldr	r0, [pc, #248]	@ (800beb0 <__mdiff+0x124>)
 800bdb6:	f7fe fd95 	bl	800a8e4 <__assert_func>
 800bdba:	2301      	movs	r3, #1
 800bdbc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800bdc0:	4610      	mov	r0, r2
 800bdc2:	b003      	add	sp, #12
 800bdc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bdc8:	bfbc      	itt	lt
 800bdca:	464b      	movlt	r3, r9
 800bdcc:	46a1      	movlt	r9, r4
 800bdce:	4630      	mov	r0, r6
 800bdd0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800bdd4:	bfba      	itte	lt
 800bdd6:	461c      	movlt	r4, r3
 800bdd8:	2501      	movlt	r5, #1
 800bdda:	2500      	movge	r5, #0
 800bddc:	f7ff fd48 	bl	800b870 <_Balloc>
 800bde0:	4602      	mov	r2, r0
 800bde2:	b918      	cbnz	r0, 800bdec <__mdiff+0x60>
 800bde4:	4b31      	ldr	r3, [pc, #196]	@ (800beac <__mdiff+0x120>)
 800bde6:	f240 2145 	movw	r1, #581	@ 0x245
 800bdea:	e7e3      	b.n	800bdb4 <__mdiff+0x28>
 800bdec:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800bdf0:	6926      	ldr	r6, [r4, #16]
 800bdf2:	60c5      	str	r5, [r0, #12]
 800bdf4:	f109 0310 	add.w	r3, r9, #16
 800bdf8:	f109 0514 	add.w	r5, r9, #20
 800bdfc:	f104 0e14 	add.w	lr, r4, #20
 800be00:	f100 0b14 	add.w	fp, r0, #20
 800be04:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800be08:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800be0c:	9301      	str	r3, [sp, #4]
 800be0e:	46d9      	mov	r9, fp
 800be10:	f04f 0c00 	mov.w	ip, #0
 800be14:	9b01      	ldr	r3, [sp, #4]
 800be16:	f85e 0b04 	ldr.w	r0, [lr], #4
 800be1a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800be1e:	9301      	str	r3, [sp, #4]
 800be20:	fa1f f38a 	uxth.w	r3, sl
 800be24:	4619      	mov	r1, r3
 800be26:	b283      	uxth	r3, r0
 800be28:	1acb      	subs	r3, r1, r3
 800be2a:	0c00      	lsrs	r0, r0, #16
 800be2c:	4463      	add	r3, ip
 800be2e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800be32:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800be36:	b29b      	uxth	r3, r3
 800be38:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800be3c:	4576      	cmp	r6, lr
 800be3e:	f849 3b04 	str.w	r3, [r9], #4
 800be42:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800be46:	d8e5      	bhi.n	800be14 <__mdiff+0x88>
 800be48:	1b33      	subs	r3, r6, r4
 800be4a:	3b15      	subs	r3, #21
 800be4c:	f023 0303 	bic.w	r3, r3, #3
 800be50:	3415      	adds	r4, #21
 800be52:	3304      	adds	r3, #4
 800be54:	42a6      	cmp	r6, r4
 800be56:	bf38      	it	cc
 800be58:	2304      	movcc	r3, #4
 800be5a:	441d      	add	r5, r3
 800be5c:	445b      	add	r3, fp
 800be5e:	461e      	mov	r6, r3
 800be60:	462c      	mov	r4, r5
 800be62:	4544      	cmp	r4, r8
 800be64:	d30e      	bcc.n	800be84 <__mdiff+0xf8>
 800be66:	f108 0103 	add.w	r1, r8, #3
 800be6a:	1b49      	subs	r1, r1, r5
 800be6c:	f021 0103 	bic.w	r1, r1, #3
 800be70:	3d03      	subs	r5, #3
 800be72:	45a8      	cmp	r8, r5
 800be74:	bf38      	it	cc
 800be76:	2100      	movcc	r1, #0
 800be78:	440b      	add	r3, r1
 800be7a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800be7e:	b191      	cbz	r1, 800bea6 <__mdiff+0x11a>
 800be80:	6117      	str	r7, [r2, #16]
 800be82:	e79d      	b.n	800bdc0 <__mdiff+0x34>
 800be84:	f854 1b04 	ldr.w	r1, [r4], #4
 800be88:	46e6      	mov	lr, ip
 800be8a:	0c08      	lsrs	r0, r1, #16
 800be8c:	fa1c fc81 	uxtah	ip, ip, r1
 800be90:	4471      	add	r1, lr
 800be92:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800be96:	b289      	uxth	r1, r1
 800be98:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800be9c:	f846 1b04 	str.w	r1, [r6], #4
 800bea0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800bea4:	e7dd      	b.n	800be62 <__mdiff+0xd6>
 800bea6:	3f01      	subs	r7, #1
 800bea8:	e7e7      	b.n	800be7a <__mdiff+0xee>
 800beaa:	bf00      	nop
 800beac:	0800da95 	.word	0x0800da95
 800beb0:	0800daa6 	.word	0x0800daa6

0800beb4 <__d2b>:
 800beb4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800beb8:	460f      	mov	r7, r1
 800beba:	2101      	movs	r1, #1
 800bebc:	ec59 8b10 	vmov	r8, r9, d0
 800bec0:	4616      	mov	r6, r2
 800bec2:	f7ff fcd5 	bl	800b870 <_Balloc>
 800bec6:	4604      	mov	r4, r0
 800bec8:	b930      	cbnz	r0, 800bed8 <__d2b+0x24>
 800beca:	4602      	mov	r2, r0
 800becc:	4b23      	ldr	r3, [pc, #140]	@ (800bf5c <__d2b+0xa8>)
 800bece:	4824      	ldr	r0, [pc, #144]	@ (800bf60 <__d2b+0xac>)
 800bed0:	f240 310f 	movw	r1, #783	@ 0x30f
 800bed4:	f7fe fd06 	bl	800a8e4 <__assert_func>
 800bed8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800bedc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800bee0:	b10d      	cbz	r5, 800bee6 <__d2b+0x32>
 800bee2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800bee6:	9301      	str	r3, [sp, #4]
 800bee8:	f1b8 0300 	subs.w	r3, r8, #0
 800beec:	d023      	beq.n	800bf36 <__d2b+0x82>
 800beee:	4668      	mov	r0, sp
 800bef0:	9300      	str	r3, [sp, #0]
 800bef2:	f7ff fd84 	bl	800b9fe <__lo0bits>
 800bef6:	e9dd 1200 	ldrd	r1, r2, [sp]
 800befa:	b1d0      	cbz	r0, 800bf32 <__d2b+0x7e>
 800befc:	f1c0 0320 	rsb	r3, r0, #32
 800bf00:	fa02 f303 	lsl.w	r3, r2, r3
 800bf04:	430b      	orrs	r3, r1
 800bf06:	40c2      	lsrs	r2, r0
 800bf08:	6163      	str	r3, [r4, #20]
 800bf0a:	9201      	str	r2, [sp, #4]
 800bf0c:	9b01      	ldr	r3, [sp, #4]
 800bf0e:	61a3      	str	r3, [r4, #24]
 800bf10:	2b00      	cmp	r3, #0
 800bf12:	bf0c      	ite	eq
 800bf14:	2201      	moveq	r2, #1
 800bf16:	2202      	movne	r2, #2
 800bf18:	6122      	str	r2, [r4, #16]
 800bf1a:	b1a5      	cbz	r5, 800bf46 <__d2b+0x92>
 800bf1c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800bf20:	4405      	add	r5, r0
 800bf22:	603d      	str	r5, [r7, #0]
 800bf24:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800bf28:	6030      	str	r0, [r6, #0]
 800bf2a:	4620      	mov	r0, r4
 800bf2c:	b003      	add	sp, #12
 800bf2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bf32:	6161      	str	r1, [r4, #20]
 800bf34:	e7ea      	b.n	800bf0c <__d2b+0x58>
 800bf36:	a801      	add	r0, sp, #4
 800bf38:	f7ff fd61 	bl	800b9fe <__lo0bits>
 800bf3c:	9b01      	ldr	r3, [sp, #4]
 800bf3e:	6163      	str	r3, [r4, #20]
 800bf40:	3020      	adds	r0, #32
 800bf42:	2201      	movs	r2, #1
 800bf44:	e7e8      	b.n	800bf18 <__d2b+0x64>
 800bf46:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800bf4a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800bf4e:	6038      	str	r0, [r7, #0]
 800bf50:	6918      	ldr	r0, [r3, #16]
 800bf52:	f7ff fd35 	bl	800b9c0 <__hi0bits>
 800bf56:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800bf5a:	e7e5      	b.n	800bf28 <__d2b+0x74>
 800bf5c:	0800da95 	.word	0x0800da95
 800bf60:	0800daa6 	.word	0x0800daa6

0800bf64 <_strtoul_l.isra.0>:
 800bf64:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bf68:	4e34      	ldr	r6, [pc, #208]	@ (800c03c <_strtoul_l.isra.0+0xd8>)
 800bf6a:	4686      	mov	lr, r0
 800bf6c:	460d      	mov	r5, r1
 800bf6e:	4628      	mov	r0, r5
 800bf70:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bf74:	5d37      	ldrb	r7, [r6, r4]
 800bf76:	f017 0708 	ands.w	r7, r7, #8
 800bf7a:	d1f8      	bne.n	800bf6e <_strtoul_l.isra.0+0xa>
 800bf7c:	2c2d      	cmp	r4, #45	@ 0x2d
 800bf7e:	d110      	bne.n	800bfa2 <_strtoul_l.isra.0+0x3e>
 800bf80:	782c      	ldrb	r4, [r5, #0]
 800bf82:	2701      	movs	r7, #1
 800bf84:	1c85      	adds	r5, r0, #2
 800bf86:	f033 0010 	bics.w	r0, r3, #16
 800bf8a:	d115      	bne.n	800bfb8 <_strtoul_l.isra.0+0x54>
 800bf8c:	2c30      	cmp	r4, #48	@ 0x30
 800bf8e:	d10d      	bne.n	800bfac <_strtoul_l.isra.0+0x48>
 800bf90:	7828      	ldrb	r0, [r5, #0]
 800bf92:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800bf96:	2858      	cmp	r0, #88	@ 0x58
 800bf98:	d108      	bne.n	800bfac <_strtoul_l.isra.0+0x48>
 800bf9a:	786c      	ldrb	r4, [r5, #1]
 800bf9c:	3502      	adds	r5, #2
 800bf9e:	2310      	movs	r3, #16
 800bfa0:	e00a      	b.n	800bfb8 <_strtoul_l.isra.0+0x54>
 800bfa2:	2c2b      	cmp	r4, #43	@ 0x2b
 800bfa4:	bf04      	itt	eq
 800bfa6:	782c      	ldrbeq	r4, [r5, #0]
 800bfa8:	1c85      	addeq	r5, r0, #2
 800bfaa:	e7ec      	b.n	800bf86 <_strtoul_l.isra.0+0x22>
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	d1f6      	bne.n	800bf9e <_strtoul_l.isra.0+0x3a>
 800bfb0:	2c30      	cmp	r4, #48	@ 0x30
 800bfb2:	bf14      	ite	ne
 800bfb4:	230a      	movne	r3, #10
 800bfb6:	2308      	moveq	r3, #8
 800bfb8:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 800bfbc:	2600      	movs	r6, #0
 800bfbe:	fbb8 f8f3 	udiv	r8, r8, r3
 800bfc2:	fb03 f908 	mul.w	r9, r3, r8
 800bfc6:	ea6f 0909 	mvn.w	r9, r9
 800bfca:	4630      	mov	r0, r6
 800bfcc:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800bfd0:	f1bc 0f09 	cmp.w	ip, #9
 800bfd4:	d810      	bhi.n	800bff8 <_strtoul_l.isra.0+0x94>
 800bfd6:	4664      	mov	r4, ip
 800bfd8:	42a3      	cmp	r3, r4
 800bfda:	dd1e      	ble.n	800c01a <_strtoul_l.isra.0+0xb6>
 800bfdc:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 800bfe0:	d007      	beq.n	800bff2 <_strtoul_l.isra.0+0x8e>
 800bfe2:	4580      	cmp	r8, r0
 800bfe4:	d316      	bcc.n	800c014 <_strtoul_l.isra.0+0xb0>
 800bfe6:	d101      	bne.n	800bfec <_strtoul_l.isra.0+0x88>
 800bfe8:	45a1      	cmp	r9, r4
 800bfea:	db13      	blt.n	800c014 <_strtoul_l.isra.0+0xb0>
 800bfec:	fb00 4003 	mla	r0, r0, r3, r4
 800bff0:	2601      	movs	r6, #1
 800bff2:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bff6:	e7e9      	b.n	800bfcc <_strtoul_l.isra.0+0x68>
 800bff8:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 800bffc:	f1bc 0f19 	cmp.w	ip, #25
 800c000:	d801      	bhi.n	800c006 <_strtoul_l.isra.0+0xa2>
 800c002:	3c37      	subs	r4, #55	@ 0x37
 800c004:	e7e8      	b.n	800bfd8 <_strtoul_l.isra.0+0x74>
 800c006:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800c00a:	f1bc 0f19 	cmp.w	ip, #25
 800c00e:	d804      	bhi.n	800c01a <_strtoul_l.isra.0+0xb6>
 800c010:	3c57      	subs	r4, #87	@ 0x57
 800c012:	e7e1      	b.n	800bfd8 <_strtoul_l.isra.0+0x74>
 800c014:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 800c018:	e7eb      	b.n	800bff2 <_strtoul_l.isra.0+0x8e>
 800c01a:	1c73      	adds	r3, r6, #1
 800c01c:	d106      	bne.n	800c02c <_strtoul_l.isra.0+0xc8>
 800c01e:	2322      	movs	r3, #34	@ 0x22
 800c020:	f8ce 3000 	str.w	r3, [lr]
 800c024:	4630      	mov	r0, r6
 800c026:	b932      	cbnz	r2, 800c036 <_strtoul_l.isra.0+0xd2>
 800c028:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c02c:	b107      	cbz	r7, 800c030 <_strtoul_l.isra.0+0xcc>
 800c02e:	4240      	negs	r0, r0
 800c030:	2a00      	cmp	r2, #0
 800c032:	d0f9      	beq.n	800c028 <_strtoul_l.isra.0+0xc4>
 800c034:	b106      	cbz	r6, 800c038 <_strtoul_l.isra.0+0xd4>
 800c036:	1e69      	subs	r1, r5, #1
 800c038:	6011      	str	r1, [r2, #0]
 800c03a:	e7f5      	b.n	800c028 <_strtoul_l.isra.0+0xc4>
 800c03c:	0800dd31 	.word	0x0800dd31

0800c040 <_strtoul_r>:
 800c040:	f7ff bf90 	b.w	800bf64 <_strtoul_l.isra.0>

0800c044 <strtoul>:
 800c044:	4613      	mov	r3, r2
 800c046:	460a      	mov	r2, r1
 800c048:	4601      	mov	r1, r0
 800c04a:	4802      	ldr	r0, [pc, #8]	@ (800c054 <strtoul+0x10>)
 800c04c:	6800      	ldr	r0, [r0, #0]
 800c04e:	f7ff bf89 	b.w	800bf64 <_strtoul_l.isra.0>
 800c052:	bf00      	nop
 800c054:	2000002c 	.word	0x2000002c

0800c058 <__sfputc_r>:
 800c058:	6893      	ldr	r3, [r2, #8]
 800c05a:	3b01      	subs	r3, #1
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	b410      	push	{r4}
 800c060:	6093      	str	r3, [r2, #8]
 800c062:	da08      	bge.n	800c076 <__sfputc_r+0x1e>
 800c064:	6994      	ldr	r4, [r2, #24]
 800c066:	42a3      	cmp	r3, r4
 800c068:	db01      	blt.n	800c06e <__sfputc_r+0x16>
 800c06a:	290a      	cmp	r1, #10
 800c06c:	d103      	bne.n	800c076 <__sfputc_r+0x1e>
 800c06e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c072:	f000 ba53 	b.w	800c51c <__swbuf_r>
 800c076:	6813      	ldr	r3, [r2, #0]
 800c078:	1c58      	adds	r0, r3, #1
 800c07a:	6010      	str	r0, [r2, #0]
 800c07c:	7019      	strb	r1, [r3, #0]
 800c07e:	4608      	mov	r0, r1
 800c080:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c084:	4770      	bx	lr

0800c086 <__sfputs_r>:
 800c086:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c088:	4606      	mov	r6, r0
 800c08a:	460f      	mov	r7, r1
 800c08c:	4614      	mov	r4, r2
 800c08e:	18d5      	adds	r5, r2, r3
 800c090:	42ac      	cmp	r4, r5
 800c092:	d101      	bne.n	800c098 <__sfputs_r+0x12>
 800c094:	2000      	movs	r0, #0
 800c096:	e007      	b.n	800c0a8 <__sfputs_r+0x22>
 800c098:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c09c:	463a      	mov	r2, r7
 800c09e:	4630      	mov	r0, r6
 800c0a0:	f7ff ffda 	bl	800c058 <__sfputc_r>
 800c0a4:	1c43      	adds	r3, r0, #1
 800c0a6:	d1f3      	bne.n	800c090 <__sfputs_r+0xa>
 800c0a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c0ac <_vfiprintf_r>:
 800c0ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0b0:	460d      	mov	r5, r1
 800c0b2:	b09d      	sub	sp, #116	@ 0x74
 800c0b4:	4614      	mov	r4, r2
 800c0b6:	4698      	mov	r8, r3
 800c0b8:	4606      	mov	r6, r0
 800c0ba:	b118      	cbz	r0, 800c0c4 <_vfiprintf_r+0x18>
 800c0bc:	6a03      	ldr	r3, [r0, #32]
 800c0be:	b90b      	cbnz	r3, 800c0c4 <_vfiprintf_r+0x18>
 800c0c0:	f7fd fa6a 	bl	8009598 <__sinit>
 800c0c4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c0c6:	07d9      	lsls	r1, r3, #31
 800c0c8:	d405      	bmi.n	800c0d6 <_vfiprintf_r+0x2a>
 800c0ca:	89ab      	ldrh	r3, [r5, #12]
 800c0cc:	059a      	lsls	r2, r3, #22
 800c0ce:	d402      	bmi.n	800c0d6 <_vfiprintf_r+0x2a>
 800c0d0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c0d2:	f7fe fbe9 	bl	800a8a8 <__retarget_lock_acquire_recursive>
 800c0d6:	89ab      	ldrh	r3, [r5, #12]
 800c0d8:	071b      	lsls	r3, r3, #28
 800c0da:	d501      	bpl.n	800c0e0 <_vfiprintf_r+0x34>
 800c0dc:	692b      	ldr	r3, [r5, #16]
 800c0de:	b99b      	cbnz	r3, 800c108 <_vfiprintf_r+0x5c>
 800c0e0:	4629      	mov	r1, r5
 800c0e2:	4630      	mov	r0, r6
 800c0e4:	f000 fa58 	bl	800c598 <__swsetup_r>
 800c0e8:	b170      	cbz	r0, 800c108 <_vfiprintf_r+0x5c>
 800c0ea:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c0ec:	07dc      	lsls	r4, r3, #31
 800c0ee:	d504      	bpl.n	800c0fa <_vfiprintf_r+0x4e>
 800c0f0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c0f4:	b01d      	add	sp, #116	@ 0x74
 800c0f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c0fa:	89ab      	ldrh	r3, [r5, #12]
 800c0fc:	0598      	lsls	r0, r3, #22
 800c0fe:	d4f7      	bmi.n	800c0f0 <_vfiprintf_r+0x44>
 800c100:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c102:	f7fe fbd3 	bl	800a8ac <__retarget_lock_release_recursive>
 800c106:	e7f3      	b.n	800c0f0 <_vfiprintf_r+0x44>
 800c108:	2300      	movs	r3, #0
 800c10a:	9309      	str	r3, [sp, #36]	@ 0x24
 800c10c:	2320      	movs	r3, #32
 800c10e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c112:	f8cd 800c 	str.w	r8, [sp, #12]
 800c116:	2330      	movs	r3, #48	@ 0x30
 800c118:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800c2c8 <_vfiprintf_r+0x21c>
 800c11c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c120:	f04f 0901 	mov.w	r9, #1
 800c124:	4623      	mov	r3, r4
 800c126:	469a      	mov	sl, r3
 800c128:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c12c:	b10a      	cbz	r2, 800c132 <_vfiprintf_r+0x86>
 800c12e:	2a25      	cmp	r2, #37	@ 0x25
 800c130:	d1f9      	bne.n	800c126 <_vfiprintf_r+0x7a>
 800c132:	ebba 0b04 	subs.w	fp, sl, r4
 800c136:	d00b      	beq.n	800c150 <_vfiprintf_r+0xa4>
 800c138:	465b      	mov	r3, fp
 800c13a:	4622      	mov	r2, r4
 800c13c:	4629      	mov	r1, r5
 800c13e:	4630      	mov	r0, r6
 800c140:	f7ff ffa1 	bl	800c086 <__sfputs_r>
 800c144:	3001      	adds	r0, #1
 800c146:	f000 80a7 	beq.w	800c298 <_vfiprintf_r+0x1ec>
 800c14a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c14c:	445a      	add	r2, fp
 800c14e:	9209      	str	r2, [sp, #36]	@ 0x24
 800c150:	f89a 3000 	ldrb.w	r3, [sl]
 800c154:	2b00      	cmp	r3, #0
 800c156:	f000 809f 	beq.w	800c298 <_vfiprintf_r+0x1ec>
 800c15a:	2300      	movs	r3, #0
 800c15c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c160:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c164:	f10a 0a01 	add.w	sl, sl, #1
 800c168:	9304      	str	r3, [sp, #16]
 800c16a:	9307      	str	r3, [sp, #28]
 800c16c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c170:	931a      	str	r3, [sp, #104]	@ 0x68
 800c172:	4654      	mov	r4, sl
 800c174:	2205      	movs	r2, #5
 800c176:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c17a:	4853      	ldr	r0, [pc, #332]	@ (800c2c8 <_vfiprintf_r+0x21c>)
 800c17c:	f7f4 f858 	bl	8000230 <memchr>
 800c180:	9a04      	ldr	r2, [sp, #16]
 800c182:	b9d8      	cbnz	r0, 800c1bc <_vfiprintf_r+0x110>
 800c184:	06d1      	lsls	r1, r2, #27
 800c186:	bf44      	itt	mi
 800c188:	2320      	movmi	r3, #32
 800c18a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c18e:	0713      	lsls	r3, r2, #28
 800c190:	bf44      	itt	mi
 800c192:	232b      	movmi	r3, #43	@ 0x2b
 800c194:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c198:	f89a 3000 	ldrb.w	r3, [sl]
 800c19c:	2b2a      	cmp	r3, #42	@ 0x2a
 800c19e:	d015      	beq.n	800c1cc <_vfiprintf_r+0x120>
 800c1a0:	9a07      	ldr	r2, [sp, #28]
 800c1a2:	4654      	mov	r4, sl
 800c1a4:	2000      	movs	r0, #0
 800c1a6:	f04f 0c0a 	mov.w	ip, #10
 800c1aa:	4621      	mov	r1, r4
 800c1ac:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c1b0:	3b30      	subs	r3, #48	@ 0x30
 800c1b2:	2b09      	cmp	r3, #9
 800c1b4:	d94b      	bls.n	800c24e <_vfiprintf_r+0x1a2>
 800c1b6:	b1b0      	cbz	r0, 800c1e6 <_vfiprintf_r+0x13a>
 800c1b8:	9207      	str	r2, [sp, #28]
 800c1ba:	e014      	b.n	800c1e6 <_vfiprintf_r+0x13a>
 800c1bc:	eba0 0308 	sub.w	r3, r0, r8
 800c1c0:	fa09 f303 	lsl.w	r3, r9, r3
 800c1c4:	4313      	orrs	r3, r2
 800c1c6:	9304      	str	r3, [sp, #16]
 800c1c8:	46a2      	mov	sl, r4
 800c1ca:	e7d2      	b.n	800c172 <_vfiprintf_r+0xc6>
 800c1cc:	9b03      	ldr	r3, [sp, #12]
 800c1ce:	1d19      	adds	r1, r3, #4
 800c1d0:	681b      	ldr	r3, [r3, #0]
 800c1d2:	9103      	str	r1, [sp, #12]
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	bfbb      	ittet	lt
 800c1d8:	425b      	neglt	r3, r3
 800c1da:	f042 0202 	orrlt.w	r2, r2, #2
 800c1de:	9307      	strge	r3, [sp, #28]
 800c1e0:	9307      	strlt	r3, [sp, #28]
 800c1e2:	bfb8      	it	lt
 800c1e4:	9204      	strlt	r2, [sp, #16]
 800c1e6:	7823      	ldrb	r3, [r4, #0]
 800c1e8:	2b2e      	cmp	r3, #46	@ 0x2e
 800c1ea:	d10a      	bne.n	800c202 <_vfiprintf_r+0x156>
 800c1ec:	7863      	ldrb	r3, [r4, #1]
 800c1ee:	2b2a      	cmp	r3, #42	@ 0x2a
 800c1f0:	d132      	bne.n	800c258 <_vfiprintf_r+0x1ac>
 800c1f2:	9b03      	ldr	r3, [sp, #12]
 800c1f4:	1d1a      	adds	r2, r3, #4
 800c1f6:	681b      	ldr	r3, [r3, #0]
 800c1f8:	9203      	str	r2, [sp, #12]
 800c1fa:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c1fe:	3402      	adds	r4, #2
 800c200:	9305      	str	r3, [sp, #20]
 800c202:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800c2d8 <_vfiprintf_r+0x22c>
 800c206:	7821      	ldrb	r1, [r4, #0]
 800c208:	2203      	movs	r2, #3
 800c20a:	4650      	mov	r0, sl
 800c20c:	f7f4 f810 	bl	8000230 <memchr>
 800c210:	b138      	cbz	r0, 800c222 <_vfiprintf_r+0x176>
 800c212:	9b04      	ldr	r3, [sp, #16]
 800c214:	eba0 000a 	sub.w	r0, r0, sl
 800c218:	2240      	movs	r2, #64	@ 0x40
 800c21a:	4082      	lsls	r2, r0
 800c21c:	4313      	orrs	r3, r2
 800c21e:	3401      	adds	r4, #1
 800c220:	9304      	str	r3, [sp, #16]
 800c222:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c226:	4829      	ldr	r0, [pc, #164]	@ (800c2cc <_vfiprintf_r+0x220>)
 800c228:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c22c:	2206      	movs	r2, #6
 800c22e:	f7f3 ffff 	bl	8000230 <memchr>
 800c232:	2800      	cmp	r0, #0
 800c234:	d03f      	beq.n	800c2b6 <_vfiprintf_r+0x20a>
 800c236:	4b26      	ldr	r3, [pc, #152]	@ (800c2d0 <_vfiprintf_r+0x224>)
 800c238:	bb1b      	cbnz	r3, 800c282 <_vfiprintf_r+0x1d6>
 800c23a:	9b03      	ldr	r3, [sp, #12]
 800c23c:	3307      	adds	r3, #7
 800c23e:	f023 0307 	bic.w	r3, r3, #7
 800c242:	3308      	adds	r3, #8
 800c244:	9303      	str	r3, [sp, #12]
 800c246:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c248:	443b      	add	r3, r7
 800c24a:	9309      	str	r3, [sp, #36]	@ 0x24
 800c24c:	e76a      	b.n	800c124 <_vfiprintf_r+0x78>
 800c24e:	fb0c 3202 	mla	r2, ip, r2, r3
 800c252:	460c      	mov	r4, r1
 800c254:	2001      	movs	r0, #1
 800c256:	e7a8      	b.n	800c1aa <_vfiprintf_r+0xfe>
 800c258:	2300      	movs	r3, #0
 800c25a:	3401      	adds	r4, #1
 800c25c:	9305      	str	r3, [sp, #20]
 800c25e:	4619      	mov	r1, r3
 800c260:	f04f 0c0a 	mov.w	ip, #10
 800c264:	4620      	mov	r0, r4
 800c266:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c26a:	3a30      	subs	r2, #48	@ 0x30
 800c26c:	2a09      	cmp	r2, #9
 800c26e:	d903      	bls.n	800c278 <_vfiprintf_r+0x1cc>
 800c270:	2b00      	cmp	r3, #0
 800c272:	d0c6      	beq.n	800c202 <_vfiprintf_r+0x156>
 800c274:	9105      	str	r1, [sp, #20]
 800c276:	e7c4      	b.n	800c202 <_vfiprintf_r+0x156>
 800c278:	fb0c 2101 	mla	r1, ip, r1, r2
 800c27c:	4604      	mov	r4, r0
 800c27e:	2301      	movs	r3, #1
 800c280:	e7f0      	b.n	800c264 <_vfiprintf_r+0x1b8>
 800c282:	ab03      	add	r3, sp, #12
 800c284:	9300      	str	r3, [sp, #0]
 800c286:	462a      	mov	r2, r5
 800c288:	4b12      	ldr	r3, [pc, #72]	@ (800c2d4 <_vfiprintf_r+0x228>)
 800c28a:	a904      	add	r1, sp, #16
 800c28c:	4630      	mov	r0, r6
 800c28e:	f7fc fd41 	bl	8008d14 <_printf_float>
 800c292:	4607      	mov	r7, r0
 800c294:	1c78      	adds	r0, r7, #1
 800c296:	d1d6      	bne.n	800c246 <_vfiprintf_r+0x19a>
 800c298:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c29a:	07d9      	lsls	r1, r3, #31
 800c29c:	d405      	bmi.n	800c2aa <_vfiprintf_r+0x1fe>
 800c29e:	89ab      	ldrh	r3, [r5, #12]
 800c2a0:	059a      	lsls	r2, r3, #22
 800c2a2:	d402      	bmi.n	800c2aa <_vfiprintf_r+0x1fe>
 800c2a4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c2a6:	f7fe fb01 	bl	800a8ac <__retarget_lock_release_recursive>
 800c2aa:	89ab      	ldrh	r3, [r5, #12]
 800c2ac:	065b      	lsls	r3, r3, #25
 800c2ae:	f53f af1f 	bmi.w	800c0f0 <_vfiprintf_r+0x44>
 800c2b2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c2b4:	e71e      	b.n	800c0f4 <_vfiprintf_r+0x48>
 800c2b6:	ab03      	add	r3, sp, #12
 800c2b8:	9300      	str	r3, [sp, #0]
 800c2ba:	462a      	mov	r2, r5
 800c2bc:	4b05      	ldr	r3, [pc, #20]	@ (800c2d4 <_vfiprintf_r+0x228>)
 800c2be:	a904      	add	r1, sp, #16
 800c2c0:	4630      	mov	r0, r6
 800c2c2:	f7fc ffbf 	bl	8009244 <_printf_i>
 800c2c6:	e7e4      	b.n	800c292 <_vfiprintf_r+0x1e6>
 800c2c8:	0800daff 	.word	0x0800daff
 800c2cc:	0800db09 	.word	0x0800db09
 800c2d0:	08008d15 	.word	0x08008d15
 800c2d4:	0800c087 	.word	0x0800c087
 800c2d8:	0800db05 	.word	0x0800db05

0800c2dc <__sflush_r>:
 800c2dc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c2e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c2e4:	0716      	lsls	r6, r2, #28
 800c2e6:	4605      	mov	r5, r0
 800c2e8:	460c      	mov	r4, r1
 800c2ea:	d454      	bmi.n	800c396 <__sflush_r+0xba>
 800c2ec:	684b      	ldr	r3, [r1, #4]
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	dc02      	bgt.n	800c2f8 <__sflush_r+0x1c>
 800c2f2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c2f4:	2b00      	cmp	r3, #0
 800c2f6:	dd48      	ble.n	800c38a <__sflush_r+0xae>
 800c2f8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c2fa:	2e00      	cmp	r6, #0
 800c2fc:	d045      	beq.n	800c38a <__sflush_r+0xae>
 800c2fe:	2300      	movs	r3, #0
 800c300:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800c304:	682f      	ldr	r7, [r5, #0]
 800c306:	6a21      	ldr	r1, [r4, #32]
 800c308:	602b      	str	r3, [r5, #0]
 800c30a:	d030      	beq.n	800c36e <__sflush_r+0x92>
 800c30c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c30e:	89a3      	ldrh	r3, [r4, #12]
 800c310:	0759      	lsls	r1, r3, #29
 800c312:	d505      	bpl.n	800c320 <__sflush_r+0x44>
 800c314:	6863      	ldr	r3, [r4, #4]
 800c316:	1ad2      	subs	r2, r2, r3
 800c318:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c31a:	b10b      	cbz	r3, 800c320 <__sflush_r+0x44>
 800c31c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c31e:	1ad2      	subs	r2, r2, r3
 800c320:	2300      	movs	r3, #0
 800c322:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c324:	6a21      	ldr	r1, [r4, #32]
 800c326:	4628      	mov	r0, r5
 800c328:	47b0      	blx	r6
 800c32a:	1c43      	adds	r3, r0, #1
 800c32c:	89a3      	ldrh	r3, [r4, #12]
 800c32e:	d106      	bne.n	800c33e <__sflush_r+0x62>
 800c330:	6829      	ldr	r1, [r5, #0]
 800c332:	291d      	cmp	r1, #29
 800c334:	d82b      	bhi.n	800c38e <__sflush_r+0xb2>
 800c336:	4a2a      	ldr	r2, [pc, #168]	@ (800c3e0 <__sflush_r+0x104>)
 800c338:	40ca      	lsrs	r2, r1
 800c33a:	07d6      	lsls	r6, r2, #31
 800c33c:	d527      	bpl.n	800c38e <__sflush_r+0xb2>
 800c33e:	2200      	movs	r2, #0
 800c340:	6062      	str	r2, [r4, #4]
 800c342:	04d9      	lsls	r1, r3, #19
 800c344:	6922      	ldr	r2, [r4, #16]
 800c346:	6022      	str	r2, [r4, #0]
 800c348:	d504      	bpl.n	800c354 <__sflush_r+0x78>
 800c34a:	1c42      	adds	r2, r0, #1
 800c34c:	d101      	bne.n	800c352 <__sflush_r+0x76>
 800c34e:	682b      	ldr	r3, [r5, #0]
 800c350:	b903      	cbnz	r3, 800c354 <__sflush_r+0x78>
 800c352:	6560      	str	r0, [r4, #84]	@ 0x54
 800c354:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c356:	602f      	str	r7, [r5, #0]
 800c358:	b1b9      	cbz	r1, 800c38a <__sflush_r+0xae>
 800c35a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c35e:	4299      	cmp	r1, r3
 800c360:	d002      	beq.n	800c368 <__sflush_r+0x8c>
 800c362:	4628      	mov	r0, r5
 800c364:	f7ff f934 	bl	800b5d0 <_free_r>
 800c368:	2300      	movs	r3, #0
 800c36a:	6363      	str	r3, [r4, #52]	@ 0x34
 800c36c:	e00d      	b.n	800c38a <__sflush_r+0xae>
 800c36e:	2301      	movs	r3, #1
 800c370:	4628      	mov	r0, r5
 800c372:	47b0      	blx	r6
 800c374:	4602      	mov	r2, r0
 800c376:	1c50      	adds	r0, r2, #1
 800c378:	d1c9      	bne.n	800c30e <__sflush_r+0x32>
 800c37a:	682b      	ldr	r3, [r5, #0]
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	d0c6      	beq.n	800c30e <__sflush_r+0x32>
 800c380:	2b1d      	cmp	r3, #29
 800c382:	d001      	beq.n	800c388 <__sflush_r+0xac>
 800c384:	2b16      	cmp	r3, #22
 800c386:	d11e      	bne.n	800c3c6 <__sflush_r+0xea>
 800c388:	602f      	str	r7, [r5, #0]
 800c38a:	2000      	movs	r0, #0
 800c38c:	e022      	b.n	800c3d4 <__sflush_r+0xf8>
 800c38e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c392:	b21b      	sxth	r3, r3
 800c394:	e01b      	b.n	800c3ce <__sflush_r+0xf2>
 800c396:	690f      	ldr	r7, [r1, #16]
 800c398:	2f00      	cmp	r7, #0
 800c39a:	d0f6      	beq.n	800c38a <__sflush_r+0xae>
 800c39c:	0793      	lsls	r3, r2, #30
 800c39e:	680e      	ldr	r6, [r1, #0]
 800c3a0:	bf08      	it	eq
 800c3a2:	694b      	ldreq	r3, [r1, #20]
 800c3a4:	600f      	str	r7, [r1, #0]
 800c3a6:	bf18      	it	ne
 800c3a8:	2300      	movne	r3, #0
 800c3aa:	eba6 0807 	sub.w	r8, r6, r7
 800c3ae:	608b      	str	r3, [r1, #8]
 800c3b0:	f1b8 0f00 	cmp.w	r8, #0
 800c3b4:	dde9      	ble.n	800c38a <__sflush_r+0xae>
 800c3b6:	6a21      	ldr	r1, [r4, #32]
 800c3b8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800c3ba:	4643      	mov	r3, r8
 800c3bc:	463a      	mov	r2, r7
 800c3be:	4628      	mov	r0, r5
 800c3c0:	47b0      	blx	r6
 800c3c2:	2800      	cmp	r0, #0
 800c3c4:	dc08      	bgt.n	800c3d8 <__sflush_r+0xfc>
 800c3c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c3ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c3ce:	81a3      	strh	r3, [r4, #12]
 800c3d0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c3d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c3d8:	4407      	add	r7, r0
 800c3da:	eba8 0800 	sub.w	r8, r8, r0
 800c3de:	e7e7      	b.n	800c3b0 <__sflush_r+0xd4>
 800c3e0:	20400001 	.word	0x20400001

0800c3e4 <_fflush_r>:
 800c3e4:	b538      	push	{r3, r4, r5, lr}
 800c3e6:	690b      	ldr	r3, [r1, #16]
 800c3e8:	4605      	mov	r5, r0
 800c3ea:	460c      	mov	r4, r1
 800c3ec:	b913      	cbnz	r3, 800c3f4 <_fflush_r+0x10>
 800c3ee:	2500      	movs	r5, #0
 800c3f0:	4628      	mov	r0, r5
 800c3f2:	bd38      	pop	{r3, r4, r5, pc}
 800c3f4:	b118      	cbz	r0, 800c3fe <_fflush_r+0x1a>
 800c3f6:	6a03      	ldr	r3, [r0, #32]
 800c3f8:	b90b      	cbnz	r3, 800c3fe <_fflush_r+0x1a>
 800c3fa:	f7fd f8cd 	bl	8009598 <__sinit>
 800c3fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c402:	2b00      	cmp	r3, #0
 800c404:	d0f3      	beq.n	800c3ee <_fflush_r+0xa>
 800c406:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c408:	07d0      	lsls	r0, r2, #31
 800c40a:	d404      	bmi.n	800c416 <_fflush_r+0x32>
 800c40c:	0599      	lsls	r1, r3, #22
 800c40e:	d402      	bmi.n	800c416 <_fflush_r+0x32>
 800c410:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c412:	f7fe fa49 	bl	800a8a8 <__retarget_lock_acquire_recursive>
 800c416:	4628      	mov	r0, r5
 800c418:	4621      	mov	r1, r4
 800c41a:	f7ff ff5f 	bl	800c2dc <__sflush_r>
 800c41e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c420:	07da      	lsls	r2, r3, #31
 800c422:	4605      	mov	r5, r0
 800c424:	d4e4      	bmi.n	800c3f0 <_fflush_r+0xc>
 800c426:	89a3      	ldrh	r3, [r4, #12]
 800c428:	059b      	lsls	r3, r3, #22
 800c42a:	d4e1      	bmi.n	800c3f0 <_fflush_r+0xc>
 800c42c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c42e:	f7fe fa3d 	bl	800a8ac <__retarget_lock_release_recursive>
 800c432:	e7dd      	b.n	800c3f0 <_fflush_r+0xc>

0800c434 <fiprintf>:
 800c434:	b40e      	push	{r1, r2, r3}
 800c436:	b503      	push	{r0, r1, lr}
 800c438:	4601      	mov	r1, r0
 800c43a:	ab03      	add	r3, sp, #12
 800c43c:	4805      	ldr	r0, [pc, #20]	@ (800c454 <fiprintf+0x20>)
 800c43e:	f853 2b04 	ldr.w	r2, [r3], #4
 800c442:	6800      	ldr	r0, [r0, #0]
 800c444:	9301      	str	r3, [sp, #4]
 800c446:	f7ff fe31 	bl	800c0ac <_vfiprintf_r>
 800c44a:	b002      	add	sp, #8
 800c44c:	f85d eb04 	ldr.w	lr, [sp], #4
 800c450:	b003      	add	sp, #12
 800c452:	4770      	bx	lr
 800c454:	2000002c 	.word	0x2000002c

0800c458 <sniprintf>:
 800c458:	b40c      	push	{r2, r3}
 800c45a:	b530      	push	{r4, r5, lr}
 800c45c:	4b18      	ldr	r3, [pc, #96]	@ (800c4c0 <sniprintf+0x68>)
 800c45e:	1e0c      	subs	r4, r1, #0
 800c460:	681d      	ldr	r5, [r3, #0]
 800c462:	b09d      	sub	sp, #116	@ 0x74
 800c464:	da08      	bge.n	800c478 <sniprintf+0x20>
 800c466:	238b      	movs	r3, #139	@ 0x8b
 800c468:	602b      	str	r3, [r5, #0]
 800c46a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c46e:	b01d      	add	sp, #116	@ 0x74
 800c470:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c474:	b002      	add	sp, #8
 800c476:	4770      	bx	lr
 800c478:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800c47c:	f8ad 3014 	strh.w	r3, [sp, #20]
 800c480:	f04f 0300 	mov.w	r3, #0
 800c484:	931b      	str	r3, [sp, #108]	@ 0x6c
 800c486:	bf14      	ite	ne
 800c488:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 800c48c:	4623      	moveq	r3, r4
 800c48e:	9304      	str	r3, [sp, #16]
 800c490:	9307      	str	r3, [sp, #28]
 800c492:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800c496:	9002      	str	r0, [sp, #8]
 800c498:	9006      	str	r0, [sp, #24]
 800c49a:	f8ad 3016 	strh.w	r3, [sp, #22]
 800c49e:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800c4a0:	ab21      	add	r3, sp, #132	@ 0x84
 800c4a2:	a902      	add	r1, sp, #8
 800c4a4:	4628      	mov	r0, r5
 800c4a6:	9301      	str	r3, [sp, #4]
 800c4a8:	f000 fa90 	bl	800c9cc <_svfiprintf_r>
 800c4ac:	1c43      	adds	r3, r0, #1
 800c4ae:	bfbc      	itt	lt
 800c4b0:	238b      	movlt	r3, #139	@ 0x8b
 800c4b2:	602b      	strlt	r3, [r5, #0]
 800c4b4:	2c00      	cmp	r4, #0
 800c4b6:	d0da      	beq.n	800c46e <sniprintf+0x16>
 800c4b8:	9b02      	ldr	r3, [sp, #8]
 800c4ba:	2200      	movs	r2, #0
 800c4bc:	701a      	strb	r2, [r3, #0]
 800c4be:	e7d6      	b.n	800c46e <sniprintf+0x16>
 800c4c0:	2000002c 	.word	0x2000002c

0800c4c4 <siscanf>:
 800c4c4:	b40e      	push	{r1, r2, r3}
 800c4c6:	b570      	push	{r4, r5, r6, lr}
 800c4c8:	b09d      	sub	sp, #116	@ 0x74
 800c4ca:	ac21      	add	r4, sp, #132	@ 0x84
 800c4cc:	2500      	movs	r5, #0
 800c4ce:	f44f 7201 	mov.w	r2, #516	@ 0x204
 800c4d2:	f854 6b04 	ldr.w	r6, [r4], #4
 800c4d6:	f8ad 2014 	strh.w	r2, [sp, #20]
 800c4da:	951b      	str	r5, [sp, #108]	@ 0x6c
 800c4dc:	9002      	str	r0, [sp, #8]
 800c4de:	9006      	str	r0, [sp, #24]
 800c4e0:	f7f3 fef6 	bl	80002d0 <strlen>
 800c4e4:	4b0b      	ldr	r3, [pc, #44]	@ (800c514 <siscanf+0x50>)
 800c4e6:	9003      	str	r0, [sp, #12]
 800c4e8:	9007      	str	r0, [sp, #28]
 800c4ea:	480b      	ldr	r0, [pc, #44]	@ (800c518 <siscanf+0x54>)
 800c4ec:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c4ee:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800c4f2:	f8ad 3016 	strh.w	r3, [sp, #22]
 800c4f6:	4632      	mov	r2, r6
 800c4f8:	4623      	mov	r3, r4
 800c4fa:	a902      	add	r1, sp, #8
 800c4fc:	6800      	ldr	r0, [r0, #0]
 800c4fe:	950f      	str	r5, [sp, #60]	@ 0x3c
 800c500:	9514      	str	r5, [sp, #80]	@ 0x50
 800c502:	9401      	str	r4, [sp, #4]
 800c504:	f000 fbb8 	bl	800cc78 <__ssvfiscanf_r>
 800c508:	b01d      	add	sp, #116	@ 0x74
 800c50a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c50e:	b003      	add	sp, #12
 800c510:	4770      	bx	lr
 800c512:	bf00      	nop
 800c514:	0800964b 	.word	0x0800964b
 800c518:	2000002c 	.word	0x2000002c

0800c51c <__swbuf_r>:
 800c51c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c51e:	460e      	mov	r6, r1
 800c520:	4614      	mov	r4, r2
 800c522:	4605      	mov	r5, r0
 800c524:	b118      	cbz	r0, 800c52e <__swbuf_r+0x12>
 800c526:	6a03      	ldr	r3, [r0, #32]
 800c528:	b90b      	cbnz	r3, 800c52e <__swbuf_r+0x12>
 800c52a:	f7fd f835 	bl	8009598 <__sinit>
 800c52e:	69a3      	ldr	r3, [r4, #24]
 800c530:	60a3      	str	r3, [r4, #8]
 800c532:	89a3      	ldrh	r3, [r4, #12]
 800c534:	071a      	lsls	r2, r3, #28
 800c536:	d501      	bpl.n	800c53c <__swbuf_r+0x20>
 800c538:	6923      	ldr	r3, [r4, #16]
 800c53a:	b943      	cbnz	r3, 800c54e <__swbuf_r+0x32>
 800c53c:	4621      	mov	r1, r4
 800c53e:	4628      	mov	r0, r5
 800c540:	f000 f82a 	bl	800c598 <__swsetup_r>
 800c544:	b118      	cbz	r0, 800c54e <__swbuf_r+0x32>
 800c546:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800c54a:	4638      	mov	r0, r7
 800c54c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c54e:	6823      	ldr	r3, [r4, #0]
 800c550:	6922      	ldr	r2, [r4, #16]
 800c552:	1a98      	subs	r0, r3, r2
 800c554:	6963      	ldr	r3, [r4, #20]
 800c556:	b2f6      	uxtb	r6, r6
 800c558:	4283      	cmp	r3, r0
 800c55a:	4637      	mov	r7, r6
 800c55c:	dc05      	bgt.n	800c56a <__swbuf_r+0x4e>
 800c55e:	4621      	mov	r1, r4
 800c560:	4628      	mov	r0, r5
 800c562:	f7ff ff3f 	bl	800c3e4 <_fflush_r>
 800c566:	2800      	cmp	r0, #0
 800c568:	d1ed      	bne.n	800c546 <__swbuf_r+0x2a>
 800c56a:	68a3      	ldr	r3, [r4, #8]
 800c56c:	3b01      	subs	r3, #1
 800c56e:	60a3      	str	r3, [r4, #8]
 800c570:	6823      	ldr	r3, [r4, #0]
 800c572:	1c5a      	adds	r2, r3, #1
 800c574:	6022      	str	r2, [r4, #0]
 800c576:	701e      	strb	r6, [r3, #0]
 800c578:	6962      	ldr	r2, [r4, #20]
 800c57a:	1c43      	adds	r3, r0, #1
 800c57c:	429a      	cmp	r2, r3
 800c57e:	d004      	beq.n	800c58a <__swbuf_r+0x6e>
 800c580:	89a3      	ldrh	r3, [r4, #12]
 800c582:	07db      	lsls	r3, r3, #31
 800c584:	d5e1      	bpl.n	800c54a <__swbuf_r+0x2e>
 800c586:	2e0a      	cmp	r6, #10
 800c588:	d1df      	bne.n	800c54a <__swbuf_r+0x2e>
 800c58a:	4621      	mov	r1, r4
 800c58c:	4628      	mov	r0, r5
 800c58e:	f7ff ff29 	bl	800c3e4 <_fflush_r>
 800c592:	2800      	cmp	r0, #0
 800c594:	d0d9      	beq.n	800c54a <__swbuf_r+0x2e>
 800c596:	e7d6      	b.n	800c546 <__swbuf_r+0x2a>

0800c598 <__swsetup_r>:
 800c598:	b538      	push	{r3, r4, r5, lr}
 800c59a:	4b29      	ldr	r3, [pc, #164]	@ (800c640 <__swsetup_r+0xa8>)
 800c59c:	4605      	mov	r5, r0
 800c59e:	6818      	ldr	r0, [r3, #0]
 800c5a0:	460c      	mov	r4, r1
 800c5a2:	b118      	cbz	r0, 800c5ac <__swsetup_r+0x14>
 800c5a4:	6a03      	ldr	r3, [r0, #32]
 800c5a6:	b90b      	cbnz	r3, 800c5ac <__swsetup_r+0x14>
 800c5a8:	f7fc fff6 	bl	8009598 <__sinit>
 800c5ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c5b0:	0719      	lsls	r1, r3, #28
 800c5b2:	d422      	bmi.n	800c5fa <__swsetup_r+0x62>
 800c5b4:	06da      	lsls	r2, r3, #27
 800c5b6:	d407      	bmi.n	800c5c8 <__swsetup_r+0x30>
 800c5b8:	2209      	movs	r2, #9
 800c5ba:	602a      	str	r2, [r5, #0]
 800c5bc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c5c0:	81a3      	strh	r3, [r4, #12]
 800c5c2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c5c6:	e033      	b.n	800c630 <__swsetup_r+0x98>
 800c5c8:	0758      	lsls	r0, r3, #29
 800c5ca:	d512      	bpl.n	800c5f2 <__swsetup_r+0x5a>
 800c5cc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c5ce:	b141      	cbz	r1, 800c5e2 <__swsetup_r+0x4a>
 800c5d0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c5d4:	4299      	cmp	r1, r3
 800c5d6:	d002      	beq.n	800c5de <__swsetup_r+0x46>
 800c5d8:	4628      	mov	r0, r5
 800c5da:	f7fe fff9 	bl	800b5d0 <_free_r>
 800c5de:	2300      	movs	r3, #0
 800c5e0:	6363      	str	r3, [r4, #52]	@ 0x34
 800c5e2:	89a3      	ldrh	r3, [r4, #12]
 800c5e4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800c5e8:	81a3      	strh	r3, [r4, #12]
 800c5ea:	2300      	movs	r3, #0
 800c5ec:	6063      	str	r3, [r4, #4]
 800c5ee:	6923      	ldr	r3, [r4, #16]
 800c5f0:	6023      	str	r3, [r4, #0]
 800c5f2:	89a3      	ldrh	r3, [r4, #12]
 800c5f4:	f043 0308 	orr.w	r3, r3, #8
 800c5f8:	81a3      	strh	r3, [r4, #12]
 800c5fa:	6923      	ldr	r3, [r4, #16]
 800c5fc:	b94b      	cbnz	r3, 800c612 <__swsetup_r+0x7a>
 800c5fe:	89a3      	ldrh	r3, [r4, #12]
 800c600:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800c604:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c608:	d003      	beq.n	800c612 <__swsetup_r+0x7a>
 800c60a:	4621      	mov	r1, r4
 800c60c:	4628      	mov	r0, r5
 800c60e:	f000 fe1d 	bl	800d24c <__smakebuf_r>
 800c612:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c616:	f013 0201 	ands.w	r2, r3, #1
 800c61a:	d00a      	beq.n	800c632 <__swsetup_r+0x9a>
 800c61c:	2200      	movs	r2, #0
 800c61e:	60a2      	str	r2, [r4, #8]
 800c620:	6962      	ldr	r2, [r4, #20]
 800c622:	4252      	negs	r2, r2
 800c624:	61a2      	str	r2, [r4, #24]
 800c626:	6922      	ldr	r2, [r4, #16]
 800c628:	b942      	cbnz	r2, 800c63c <__swsetup_r+0xa4>
 800c62a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800c62e:	d1c5      	bne.n	800c5bc <__swsetup_r+0x24>
 800c630:	bd38      	pop	{r3, r4, r5, pc}
 800c632:	0799      	lsls	r1, r3, #30
 800c634:	bf58      	it	pl
 800c636:	6962      	ldrpl	r2, [r4, #20]
 800c638:	60a2      	str	r2, [r4, #8]
 800c63a:	e7f4      	b.n	800c626 <__swsetup_r+0x8e>
 800c63c:	2000      	movs	r0, #0
 800c63e:	e7f7      	b.n	800c630 <__swsetup_r+0x98>
 800c640:	2000002c 	.word	0x2000002c

0800c644 <memmove>:
 800c644:	4288      	cmp	r0, r1
 800c646:	b510      	push	{r4, lr}
 800c648:	eb01 0402 	add.w	r4, r1, r2
 800c64c:	d902      	bls.n	800c654 <memmove+0x10>
 800c64e:	4284      	cmp	r4, r0
 800c650:	4623      	mov	r3, r4
 800c652:	d807      	bhi.n	800c664 <memmove+0x20>
 800c654:	1e43      	subs	r3, r0, #1
 800c656:	42a1      	cmp	r1, r4
 800c658:	d008      	beq.n	800c66c <memmove+0x28>
 800c65a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c65e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c662:	e7f8      	b.n	800c656 <memmove+0x12>
 800c664:	4402      	add	r2, r0
 800c666:	4601      	mov	r1, r0
 800c668:	428a      	cmp	r2, r1
 800c66a:	d100      	bne.n	800c66e <memmove+0x2a>
 800c66c:	bd10      	pop	{r4, pc}
 800c66e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c672:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c676:	e7f7      	b.n	800c668 <memmove+0x24>

0800c678 <strncmp>:
 800c678:	b510      	push	{r4, lr}
 800c67a:	b16a      	cbz	r2, 800c698 <strncmp+0x20>
 800c67c:	3901      	subs	r1, #1
 800c67e:	1884      	adds	r4, r0, r2
 800c680:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c684:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800c688:	429a      	cmp	r2, r3
 800c68a:	d103      	bne.n	800c694 <strncmp+0x1c>
 800c68c:	42a0      	cmp	r0, r4
 800c68e:	d001      	beq.n	800c694 <strncmp+0x1c>
 800c690:	2a00      	cmp	r2, #0
 800c692:	d1f5      	bne.n	800c680 <strncmp+0x8>
 800c694:	1ad0      	subs	r0, r2, r3
 800c696:	bd10      	pop	{r4, pc}
 800c698:	4610      	mov	r0, r2
 800c69a:	e7fc      	b.n	800c696 <strncmp+0x1e>

0800c69c <__gettzinfo>:
 800c69c:	4800      	ldr	r0, [pc, #0]	@ (800c6a0 <__gettzinfo+0x4>)
 800c69e:	4770      	bx	lr
 800c6a0:	20000080 	.word	0x20000080

0800c6a4 <__tzcalc_limits>:
 800c6a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c6a8:	4604      	mov	r4, r0
 800c6aa:	f7ff fff7 	bl	800c69c <__gettzinfo>
 800c6ae:	f240 73b1 	movw	r3, #1969	@ 0x7b1
 800c6b2:	429c      	cmp	r4, r3
 800c6b4:	f340 80a3 	ble.w	800c7fe <__tzcalc_limits+0x15a>
 800c6b8:	f46f 61f6 	mvn.w	r1, #1968	@ 0x7b0
 800c6bc:	1865      	adds	r5, r4, r1
 800c6be:	f2a4 73b2 	subw	r3, r4, #1970	@ 0x7b2
 800c6c2:	f240 126d 	movw	r2, #365	@ 0x16d
 800c6c6:	10ad      	asrs	r5, r5, #2
 800c6c8:	fb02 5503 	mla	r5, r2, r3, r5
 800c6cc:	f46f 66c8 	mvn.w	r6, #1600	@ 0x640
 800c6d0:	f06f 0263 	mvn.w	r2, #99	@ 0x63
 800c6d4:	f2a4 736d 	subw	r3, r4, #1901	@ 0x76d
 800c6d8:	fb93 f3f2 	sdiv	r3, r3, r2
 800c6dc:	441d      	add	r5, r3
 800c6de:	19a3      	adds	r3, r4, r6
 800c6e0:	4e48      	ldr	r6, [pc, #288]	@ (800c804 <__tzcalc_limits+0x160>)
 800c6e2:	6044      	str	r4, [r0, #4]
 800c6e4:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800c6e8:	4601      	mov	r1, r0
 800c6ea:	fbb3 f3f2 	udiv	r3, r3, r2
 800c6ee:	f100 0750 	add.w	r7, r0, #80	@ 0x50
 800c6f2:	441d      	add	r5, r3
 800c6f4:	7a0b      	ldrb	r3, [r1, #8]
 800c6f6:	f8d1 c014 	ldr.w	ip, [r1, #20]
 800c6fa:	2b4a      	cmp	r3, #74	@ 0x4a
 800c6fc:	d138      	bne.n	800c770 <__tzcalc_limits+0xcc>
 800c6fe:	07a2      	lsls	r2, r4, #30
 800c700:	eb05 030c 	add.w	r3, r5, ip
 800c704:	d106      	bne.n	800c714 <__tzcalc_limits+0x70>
 800c706:	f04f 0e64 	mov.w	lr, #100	@ 0x64
 800c70a:	fb94 f2fe 	sdiv	r2, r4, lr
 800c70e:	fb0e 4212 	mls	r2, lr, r2, r4
 800c712:	b932      	cbnz	r2, 800c722 <__tzcalc_limits+0x7e>
 800c714:	f44f 7ec8 	mov.w	lr, #400	@ 0x190
 800c718:	fb94 f2fe 	sdiv	r2, r4, lr
 800c71c:	fb0e 4212 	mls	r2, lr, r2, r4
 800c720:	bb1a      	cbnz	r2, 800c76a <__tzcalc_limits+0xc6>
 800c722:	f1bc 0f3b 	cmp.w	ip, #59	@ 0x3b
 800c726:	bfd4      	ite	le
 800c728:	f04f 0c00 	movle.w	ip, #0
 800c72c:	f04f 0c01 	movgt.w	ip, #1
 800c730:	4463      	add	r3, ip
 800c732:	3b01      	subs	r3, #1
 800c734:	698a      	ldr	r2, [r1, #24]
 800c736:	ea4f 7ce2 	mov.w	ip, r2, asr #31
 800c73a:	fbc3 2c06 	smlal	r2, ip, r3, r6
 800c73e:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
 800c740:	18d2      	adds	r2, r2, r3
 800c742:	eb4c 73e3 	adc.w	r3, ip, r3, asr #31
 800c746:	e9c1 2308 	strd	r2, r3, [r1, #32]
 800c74a:	3128      	adds	r1, #40	@ 0x28
 800c74c:	428f      	cmp	r7, r1
 800c74e:	d1d1      	bne.n	800c6f4 <__tzcalc_limits+0x50>
 800c750:	e9d0 4308 	ldrd	r4, r3, [r0, #32]
 800c754:	e9d0 1212 	ldrd	r1, r2, [r0, #72]	@ 0x48
 800c758:	428c      	cmp	r4, r1
 800c75a:	4193      	sbcs	r3, r2
 800c75c:	bfb4      	ite	lt
 800c75e:	2301      	movlt	r3, #1
 800c760:	2300      	movge	r3, #0
 800c762:	6003      	str	r3, [r0, #0]
 800c764:	2001      	movs	r0, #1
 800c766:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c76a:	f04f 0c00 	mov.w	ip, #0
 800c76e:	e7df      	b.n	800c730 <__tzcalc_limits+0x8c>
 800c770:	2b44      	cmp	r3, #68	@ 0x44
 800c772:	d102      	bne.n	800c77a <__tzcalc_limits+0xd6>
 800c774:	eb05 030c 	add.w	r3, r5, ip
 800c778:	e7dc      	b.n	800c734 <__tzcalc_limits+0x90>
 800c77a:	07a3      	lsls	r3, r4, #30
 800c77c:	d105      	bne.n	800c78a <__tzcalc_limits+0xe6>
 800c77e:	2264      	movs	r2, #100	@ 0x64
 800c780:	fb94 f3f2 	sdiv	r3, r4, r2
 800c784:	fb02 4313 	mls	r3, r2, r3, r4
 800c788:	bb93      	cbnz	r3, 800c7f0 <__tzcalc_limits+0x14c>
 800c78a:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800c78e:	fb94 f3f2 	sdiv	r3, r4, r2
 800c792:	fb02 4313 	mls	r3, r2, r3, r4
 800c796:	fab3 f383 	clz	r3, r3
 800c79a:	095b      	lsrs	r3, r3, #5
 800c79c:	f8df e068 	ldr.w	lr, [pc, #104]	@ 800c808 <__tzcalc_limits+0x164>
 800c7a0:	f8d1 900c 	ldr.w	r9, [r1, #12]
 800c7a4:	425b      	negs	r3, r3
 800c7a6:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800c7aa:	462a      	mov	r2, r5
 800c7ac:	f04f 0800 	mov.w	r8, #0
 800c7b0:	4473      	add	r3, lr
 800c7b2:	f108 0801 	add.w	r8, r8, #1
 800c7b6:	45c1      	cmp	r9, r8
 800c7b8:	f853 e028 	ldr.w	lr, [r3, r8, lsl #2]
 800c7bc:	dc1a      	bgt.n	800c7f4 <__tzcalc_limits+0x150>
 800c7be:	f102 0804 	add.w	r8, r2, #4
 800c7c2:	2307      	movs	r3, #7
 800c7c4:	fb98 f3f3 	sdiv	r3, r8, r3
 800c7c8:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800c7cc:	eba8 0303 	sub.w	r3, r8, r3
 800c7d0:	ebbc 0c03 	subs.w	ip, ip, r3
 800c7d4:	690b      	ldr	r3, [r1, #16]
 800c7d6:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800c7da:	bf48      	it	mi
 800c7dc:	f10c 0c07 	addmi.w	ip, ip, #7
 800c7e0:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800c7e4:	449c      	add	ip, r3
 800c7e6:	45f4      	cmp	ip, lr
 800c7e8:	da06      	bge.n	800c7f8 <__tzcalc_limits+0x154>
 800c7ea:	eb02 030c 	add.w	r3, r2, ip
 800c7ee:	e7a1      	b.n	800c734 <__tzcalc_limits+0x90>
 800c7f0:	2301      	movs	r3, #1
 800c7f2:	e7d3      	b.n	800c79c <__tzcalc_limits+0xf8>
 800c7f4:	4472      	add	r2, lr
 800c7f6:	e7dc      	b.n	800c7b2 <__tzcalc_limits+0x10e>
 800c7f8:	f1ac 0c07 	sub.w	ip, ip, #7
 800c7fc:	e7f3      	b.n	800c7e6 <__tzcalc_limits+0x142>
 800c7fe:	2000      	movs	r0, #0
 800c800:	e7b1      	b.n	800c766 <__tzcalc_limits+0xc2>
 800c802:	bf00      	nop
 800c804:	00015180 	.word	0x00015180
 800c808:	0800de30 	.word	0x0800de30

0800c80c <_sbrk_r>:
 800c80c:	b538      	push	{r3, r4, r5, lr}
 800c80e:	4d06      	ldr	r5, [pc, #24]	@ (800c828 <_sbrk_r+0x1c>)
 800c810:	2300      	movs	r3, #0
 800c812:	4604      	mov	r4, r0
 800c814:	4608      	mov	r0, r1
 800c816:	602b      	str	r3, [r5, #0]
 800c818:	f7f5 f810 	bl	800183c <_sbrk>
 800c81c:	1c43      	adds	r3, r0, #1
 800c81e:	d102      	bne.n	800c826 <_sbrk_r+0x1a>
 800c820:	682b      	ldr	r3, [r5, #0]
 800c822:	b103      	cbz	r3, 800c826 <_sbrk_r+0x1a>
 800c824:	6023      	str	r3, [r4, #0]
 800c826:	bd38      	pop	{r3, r4, r5, pc}
 800c828:	20005548 	.word	0x20005548

0800c82c <abort>:
 800c82c:	b508      	push	{r3, lr}
 800c82e:	2006      	movs	r0, #6
 800c830:	f000 fde4 	bl	800d3fc <raise>
 800c834:	2001      	movs	r0, #1
 800c836:	f7f4 ffa5 	bl	8001784 <_exit>

0800c83a <_calloc_r>:
 800c83a:	b570      	push	{r4, r5, r6, lr}
 800c83c:	fba1 5402 	umull	r5, r4, r1, r2
 800c840:	b934      	cbnz	r4, 800c850 <_calloc_r+0x16>
 800c842:	4629      	mov	r1, r5
 800c844:	f7fe ff88 	bl	800b758 <_malloc_r>
 800c848:	4606      	mov	r6, r0
 800c84a:	b928      	cbnz	r0, 800c858 <_calloc_r+0x1e>
 800c84c:	4630      	mov	r0, r6
 800c84e:	bd70      	pop	{r4, r5, r6, pc}
 800c850:	220c      	movs	r2, #12
 800c852:	6002      	str	r2, [r0, #0]
 800c854:	2600      	movs	r6, #0
 800c856:	e7f9      	b.n	800c84c <_calloc_r+0x12>
 800c858:	462a      	mov	r2, r5
 800c85a:	4621      	mov	r1, r4
 800c85c:	f7fc ff29 	bl	80096b2 <memset>
 800c860:	e7f4      	b.n	800c84c <_calloc_r+0x12>
	...

0800c864 <__env_lock>:
 800c864:	4801      	ldr	r0, [pc, #4]	@ (800c86c <__env_lock+0x8>)
 800c866:	f7fe b81f 	b.w	800a8a8 <__retarget_lock_acquire_recursive>
 800c86a:	bf00      	nop
 800c86c:	2000554d 	.word	0x2000554d

0800c870 <__env_unlock>:
 800c870:	4801      	ldr	r0, [pc, #4]	@ (800c878 <__env_unlock+0x8>)
 800c872:	f7fe b81b 	b.w	800a8ac <__retarget_lock_release_recursive>
 800c876:	bf00      	nop
 800c878:	2000554d 	.word	0x2000554d

0800c87c <__ascii_mbtowc>:
 800c87c:	b082      	sub	sp, #8
 800c87e:	b901      	cbnz	r1, 800c882 <__ascii_mbtowc+0x6>
 800c880:	a901      	add	r1, sp, #4
 800c882:	b142      	cbz	r2, 800c896 <__ascii_mbtowc+0x1a>
 800c884:	b14b      	cbz	r3, 800c89a <__ascii_mbtowc+0x1e>
 800c886:	7813      	ldrb	r3, [r2, #0]
 800c888:	600b      	str	r3, [r1, #0]
 800c88a:	7812      	ldrb	r2, [r2, #0]
 800c88c:	1e10      	subs	r0, r2, #0
 800c88e:	bf18      	it	ne
 800c890:	2001      	movne	r0, #1
 800c892:	b002      	add	sp, #8
 800c894:	4770      	bx	lr
 800c896:	4610      	mov	r0, r2
 800c898:	e7fb      	b.n	800c892 <__ascii_mbtowc+0x16>
 800c89a:	f06f 0001 	mvn.w	r0, #1
 800c89e:	e7f8      	b.n	800c892 <__ascii_mbtowc+0x16>

0800c8a0 <_realloc_r>:
 800c8a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c8a4:	4607      	mov	r7, r0
 800c8a6:	4614      	mov	r4, r2
 800c8a8:	460d      	mov	r5, r1
 800c8aa:	b921      	cbnz	r1, 800c8b6 <_realloc_r+0x16>
 800c8ac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c8b0:	4611      	mov	r1, r2
 800c8b2:	f7fe bf51 	b.w	800b758 <_malloc_r>
 800c8b6:	b92a      	cbnz	r2, 800c8c4 <_realloc_r+0x24>
 800c8b8:	f7fe fe8a 	bl	800b5d0 <_free_r>
 800c8bc:	4625      	mov	r5, r4
 800c8be:	4628      	mov	r0, r5
 800c8c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c8c4:	f000 fdd8 	bl	800d478 <_malloc_usable_size_r>
 800c8c8:	4284      	cmp	r4, r0
 800c8ca:	4606      	mov	r6, r0
 800c8cc:	d802      	bhi.n	800c8d4 <_realloc_r+0x34>
 800c8ce:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c8d2:	d8f4      	bhi.n	800c8be <_realloc_r+0x1e>
 800c8d4:	4621      	mov	r1, r4
 800c8d6:	4638      	mov	r0, r7
 800c8d8:	f7fe ff3e 	bl	800b758 <_malloc_r>
 800c8dc:	4680      	mov	r8, r0
 800c8de:	b908      	cbnz	r0, 800c8e4 <_realloc_r+0x44>
 800c8e0:	4645      	mov	r5, r8
 800c8e2:	e7ec      	b.n	800c8be <_realloc_r+0x1e>
 800c8e4:	42b4      	cmp	r4, r6
 800c8e6:	4622      	mov	r2, r4
 800c8e8:	4629      	mov	r1, r5
 800c8ea:	bf28      	it	cs
 800c8ec:	4632      	movcs	r2, r6
 800c8ee:	f7fd ffe6 	bl	800a8be <memcpy>
 800c8f2:	4629      	mov	r1, r5
 800c8f4:	4638      	mov	r0, r7
 800c8f6:	f7fe fe6b 	bl	800b5d0 <_free_r>
 800c8fa:	e7f1      	b.n	800c8e0 <_realloc_r+0x40>

0800c8fc <__ascii_wctomb>:
 800c8fc:	4603      	mov	r3, r0
 800c8fe:	4608      	mov	r0, r1
 800c900:	b141      	cbz	r1, 800c914 <__ascii_wctomb+0x18>
 800c902:	2aff      	cmp	r2, #255	@ 0xff
 800c904:	d904      	bls.n	800c910 <__ascii_wctomb+0x14>
 800c906:	228a      	movs	r2, #138	@ 0x8a
 800c908:	601a      	str	r2, [r3, #0]
 800c90a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c90e:	4770      	bx	lr
 800c910:	700a      	strb	r2, [r1, #0]
 800c912:	2001      	movs	r0, #1
 800c914:	4770      	bx	lr

0800c916 <__ssputs_r>:
 800c916:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c91a:	688e      	ldr	r6, [r1, #8]
 800c91c:	461f      	mov	r7, r3
 800c91e:	42be      	cmp	r6, r7
 800c920:	680b      	ldr	r3, [r1, #0]
 800c922:	4682      	mov	sl, r0
 800c924:	460c      	mov	r4, r1
 800c926:	4690      	mov	r8, r2
 800c928:	d82d      	bhi.n	800c986 <__ssputs_r+0x70>
 800c92a:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c92e:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800c932:	d026      	beq.n	800c982 <__ssputs_r+0x6c>
 800c934:	6965      	ldr	r5, [r4, #20]
 800c936:	6909      	ldr	r1, [r1, #16]
 800c938:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c93c:	eba3 0901 	sub.w	r9, r3, r1
 800c940:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c944:	1c7b      	adds	r3, r7, #1
 800c946:	444b      	add	r3, r9
 800c948:	106d      	asrs	r5, r5, #1
 800c94a:	429d      	cmp	r5, r3
 800c94c:	bf38      	it	cc
 800c94e:	461d      	movcc	r5, r3
 800c950:	0553      	lsls	r3, r2, #21
 800c952:	d527      	bpl.n	800c9a4 <__ssputs_r+0x8e>
 800c954:	4629      	mov	r1, r5
 800c956:	f7fe feff 	bl	800b758 <_malloc_r>
 800c95a:	4606      	mov	r6, r0
 800c95c:	b360      	cbz	r0, 800c9b8 <__ssputs_r+0xa2>
 800c95e:	6921      	ldr	r1, [r4, #16]
 800c960:	464a      	mov	r2, r9
 800c962:	f7fd ffac 	bl	800a8be <memcpy>
 800c966:	89a3      	ldrh	r3, [r4, #12]
 800c968:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800c96c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c970:	81a3      	strh	r3, [r4, #12]
 800c972:	6126      	str	r6, [r4, #16]
 800c974:	6165      	str	r5, [r4, #20]
 800c976:	444e      	add	r6, r9
 800c978:	eba5 0509 	sub.w	r5, r5, r9
 800c97c:	6026      	str	r6, [r4, #0]
 800c97e:	60a5      	str	r5, [r4, #8]
 800c980:	463e      	mov	r6, r7
 800c982:	42be      	cmp	r6, r7
 800c984:	d900      	bls.n	800c988 <__ssputs_r+0x72>
 800c986:	463e      	mov	r6, r7
 800c988:	6820      	ldr	r0, [r4, #0]
 800c98a:	4632      	mov	r2, r6
 800c98c:	4641      	mov	r1, r8
 800c98e:	f7ff fe59 	bl	800c644 <memmove>
 800c992:	68a3      	ldr	r3, [r4, #8]
 800c994:	1b9b      	subs	r3, r3, r6
 800c996:	60a3      	str	r3, [r4, #8]
 800c998:	6823      	ldr	r3, [r4, #0]
 800c99a:	4433      	add	r3, r6
 800c99c:	6023      	str	r3, [r4, #0]
 800c99e:	2000      	movs	r0, #0
 800c9a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c9a4:	462a      	mov	r2, r5
 800c9a6:	f7ff ff7b 	bl	800c8a0 <_realloc_r>
 800c9aa:	4606      	mov	r6, r0
 800c9ac:	2800      	cmp	r0, #0
 800c9ae:	d1e0      	bne.n	800c972 <__ssputs_r+0x5c>
 800c9b0:	6921      	ldr	r1, [r4, #16]
 800c9b2:	4650      	mov	r0, sl
 800c9b4:	f7fe fe0c 	bl	800b5d0 <_free_r>
 800c9b8:	230c      	movs	r3, #12
 800c9ba:	f8ca 3000 	str.w	r3, [sl]
 800c9be:	89a3      	ldrh	r3, [r4, #12]
 800c9c0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c9c4:	81a3      	strh	r3, [r4, #12]
 800c9c6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c9ca:	e7e9      	b.n	800c9a0 <__ssputs_r+0x8a>

0800c9cc <_svfiprintf_r>:
 800c9cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c9d0:	4698      	mov	r8, r3
 800c9d2:	898b      	ldrh	r3, [r1, #12]
 800c9d4:	061b      	lsls	r3, r3, #24
 800c9d6:	b09d      	sub	sp, #116	@ 0x74
 800c9d8:	4607      	mov	r7, r0
 800c9da:	460d      	mov	r5, r1
 800c9dc:	4614      	mov	r4, r2
 800c9de:	d510      	bpl.n	800ca02 <_svfiprintf_r+0x36>
 800c9e0:	690b      	ldr	r3, [r1, #16]
 800c9e2:	b973      	cbnz	r3, 800ca02 <_svfiprintf_r+0x36>
 800c9e4:	2140      	movs	r1, #64	@ 0x40
 800c9e6:	f7fe feb7 	bl	800b758 <_malloc_r>
 800c9ea:	6028      	str	r0, [r5, #0]
 800c9ec:	6128      	str	r0, [r5, #16]
 800c9ee:	b930      	cbnz	r0, 800c9fe <_svfiprintf_r+0x32>
 800c9f0:	230c      	movs	r3, #12
 800c9f2:	603b      	str	r3, [r7, #0]
 800c9f4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c9f8:	b01d      	add	sp, #116	@ 0x74
 800c9fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c9fe:	2340      	movs	r3, #64	@ 0x40
 800ca00:	616b      	str	r3, [r5, #20]
 800ca02:	2300      	movs	r3, #0
 800ca04:	9309      	str	r3, [sp, #36]	@ 0x24
 800ca06:	2320      	movs	r3, #32
 800ca08:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ca0c:	f8cd 800c 	str.w	r8, [sp, #12]
 800ca10:	2330      	movs	r3, #48	@ 0x30
 800ca12:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800cbb0 <_svfiprintf_r+0x1e4>
 800ca16:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ca1a:	f04f 0901 	mov.w	r9, #1
 800ca1e:	4623      	mov	r3, r4
 800ca20:	469a      	mov	sl, r3
 800ca22:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ca26:	b10a      	cbz	r2, 800ca2c <_svfiprintf_r+0x60>
 800ca28:	2a25      	cmp	r2, #37	@ 0x25
 800ca2a:	d1f9      	bne.n	800ca20 <_svfiprintf_r+0x54>
 800ca2c:	ebba 0b04 	subs.w	fp, sl, r4
 800ca30:	d00b      	beq.n	800ca4a <_svfiprintf_r+0x7e>
 800ca32:	465b      	mov	r3, fp
 800ca34:	4622      	mov	r2, r4
 800ca36:	4629      	mov	r1, r5
 800ca38:	4638      	mov	r0, r7
 800ca3a:	f7ff ff6c 	bl	800c916 <__ssputs_r>
 800ca3e:	3001      	adds	r0, #1
 800ca40:	f000 80a7 	beq.w	800cb92 <_svfiprintf_r+0x1c6>
 800ca44:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ca46:	445a      	add	r2, fp
 800ca48:	9209      	str	r2, [sp, #36]	@ 0x24
 800ca4a:	f89a 3000 	ldrb.w	r3, [sl]
 800ca4e:	2b00      	cmp	r3, #0
 800ca50:	f000 809f 	beq.w	800cb92 <_svfiprintf_r+0x1c6>
 800ca54:	2300      	movs	r3, #0
 800ca56:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ca5a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ca5e:	f10a 0a01 	add.w	sl, sl, #1
 800ca62:	9304      	str	r3, [sp, #16]
 800ca64:	9307      	str	r3, [sp, #28]
 800ca66:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ca6a:	931a      	str	r3, [sp, #104]	@ 0x68
 800ca6c:	4654      	mov	r4, sl
 800ca6e:	2205      	movs	r2, #5
 800ca70:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ca74:	484e      	ldr	r0, [pc, #312]	@ (800cbb0 <_svfiprintf_r+0x1e4>)
 800ca76:	f7f3 fbdb 	bl	8000230 <memchr>
 800ca7a:	9a04      	ldr	r2, [sp, #16]
 800ca7c:	b9d8      	cbnz	r0, 800cab6 <_svfiprintf_r+0xea>
 800ca7e:	06d0      	lsls	r0, r2, #27
 800ca80:	bf44      	itt	mi
 800ca82:	2320      	movmi	r3, #32
 800ca84:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ca88:	0711      	lsls	r1, r2, #28
 800ca8a:	bf44      	itt	mi
 800ca8c:	232b      	movmi	r3, #43	@ 0x2b
 800ca8e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ca92:	f89a 3000 	ldrb.w	r3, [sl]
 800ca96:	2b2a      	cmp	r3, #42	@ 0x2a
 800ca98:	d015      	beq.n	800cac6 <_svfiprintf_r+0xfa>
 800ca9a:	9a07      	ldr	r2, [sp, #28]
 800ca9c:	4654      	mov	r4, sl
 800ca9e:	2000      	movs	r0, #0
 800caa0:	f04f 0c0a 	mov.w	ip, #10
 800caa4:	4621      	mov	r1, r4
 800caa6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800caaa:	3b30      	subs	r3, #48	@ 0x30
 800caac:	2b09      	cmp	r3, #9
 800caae:	d94b      	bls.n	800cb48 <_svfiprintf_r+0x17c>
 800cab0:	b1b0      	cbz	r0, 800cae0 <_svfiprintf_r+0x114>
 800cab2:	9207      	str	r2, [sp, #28]
 800cab4:	e014      	b.n	800cae0 <_svfiprintf_r+0x114>
 800cab6:	eba0 0308 	sub.w	r3, r0, r8
 800caba:	fa09 f303 	lsl.w	r3, r9, r3
 800cabe:	4313      	orrs	r3, r2
 800cac0:	9304      	str	r3, [sp, #16]
 800cac2:	46a2      	mov	sl, r4
 800cac4:	e7d2      	b.n	800ca6c <_svfiprintf_r+0xa0>
 800cac6:	9b03      	ldr	r3, [sp, #12]
 800cac8:	1d19      	adds	r1, r3, #4
 800caca:	681b      	ldr	r3, [r3, #0]
 800cacc:	9103      	str	r1, [sp, #12]
 800cace:	2b00      	cmp	r3, #0
 800cad0:	bfbb      	ittet	lt
 800cad2:	425b      	neglt	r3, r3
 800cad4:	f042 0202 	orrlt.w	r2, r2, #2
 800cad8:	9307      	strge	r3, [sp, #28]
 800cada:	9307      	strlt	r3, [sp, #28]
 800cadc:	bfb8      	it	lt
 800cade:	9204      	strlt	r2, [sp, #16]
 800cae0:	7823      	ldrb	r3, [r4, #0]
 800cae2:	2b2e      	cmp	r3, #46	@ 0x2e
 800cae4:	d10a      	bne.n	800cafc <_svfiprintf_r+0x130>
 800cae6:	7863      	ldrb	r3, [r4, #1]
 800cae8:	2b2a      	cmp	r3, #42	@ 0x2a
 800caea:	d132      	bne.n	800cb52 <_svfiprintf_r+0x186>
 800caec:	9b03      	ldr	r3, [sp, #12]
 800caee:	1d1a      	adds	r2, r3, #4
 800caf0:	681b      	ldr	r3, [r3, #0]
 800caf2:	9203      	str	r2, [sp, #12]
 800caf4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800caf8:	3402      	adds	r4, #2
 800cafa:	9305      	str	r3, [sp, #20]
 800cafc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800cbc0 <_svfiprintf_r+0x1f4>
 800cb00:	7821      	ldrb	r1, [r4, #0]
 800cb02:	2203      	movs	r2, #3
 800cb04:	4650      	mov	r0, sl
 800cb06:	f7f3 fb93 	bl	8000230 <memchr>
 800cb0a:	b138      	cbz	r0, 800cb1c <_svfiprintf_r+0x150>
 800cb0c:	9b04      	ldr	r3, [sp, #16]
 800cb0e:	eba0 000a 	sub.w	r0, r0, sl
 800cb12:	2240      	movs	r2, #64	@ 0x40
 800cb14:	4082      	lsls	r2, r0
 800cb16:	4313      	orrs	r3, r2
 800cb18:	3401      	adds	r4, #1
 800cb1a:	9304      	str	r3, [sp, #16]
 800cb1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cb20:	4824      	ldr	r0, [pc, #144]	@ (800cbb4 <_svfiprintf_r+0x1e8>)
 800cb22:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800cb26:	2206      	movs	r2, #6
 800cb28:	f7f3 fb82 	bl	8000230 <memchr>
 800cb2c:	2800      	cmp	r0, #0
 800cb2e:	d036      	beq.n	800cb9e <_svfiprintf_r+0x1d2>
 800cb30:	4b21      	ldr	r3, [pc, #132]	@ (800cbb8 <_svfiprintf_r+0x1ec>)
 800cb32:	bb1b      	cbnz	r3, 800cb7c <_svfiprintf_r+0x1b0>
 800cb34:	9b03      	ldr	r3, [sp, #12]
 800cb36:	3307      	adds	r3, #7
 800cb38:	f023 0307 	bic.w	r3, r3, #7
 800cb3c:	3308      	adds	r3, #8
 800cb3e:	9303      	str	r3, [sp, #12]
 800cb40:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cb42:	4433      	add	r3, r6
 800cb44:	9309      	str	r3, [sp, #36]	@ 0x24
 800cb46:	e76a      	b.n	800ca1e <_svfiprintf_r+0x52>
 800cb48:	fb0c 3202 	mla	r2, ip, r2, r3
 800cb4c:	460c      	mov	r4, r1
 800cb4e:	2001      	movs	r0, #1
 800cb50:	e7a8      	b.n	800caa4 <_svfiprintf_r+0xd8>
 800cb52:	2300      	movs	r3, #0
 800cb54:	3401      	adds	r4, #1
 800cb56:	9305      	str	r3, [sp, #20]
 800cb58:	4619      	mov	r1, r3
 800cb5a:	f04f 0c0a 	mov.w	ip, #10
 800cb5e:	4620      	mov	r0, r4
 800cb60:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cb64:	3a30      	subs	r2, #48	@ 0x30
 800cb66:	2a09      	cmp	r2, #9
 800cb68:	d903      	bls.n	800cb72 <_svfiprintf_r+0x1a6>
 800cb6a:	2b00      	cmp	r3, #0
 800cb6c:	d0c6      	beq.n	800cafc <_svfiprintf_r+0x130>
 800cb6e:	9105      	str	r1, [sp, #20]
 800cb70:	e7c4      	b.n	800cafc <_svfiprintf_r+0x130>
 800cb72:	fb0c 2101 	mla	r1, ip, r1, r2
 800cb76:	4604      	mov	r4, r0
 800cb78:	2301      	movs	r3, #1
 800cb7a:	e7f0      	b.n	800cb5e <_svfiprintf_r+0x192>
 800cb7c:	ab03      	add	r3, sp, #12
 800cb7e:	9300      	str	r3, [sp, #0]
 800cb80:	462a      	mov	r2, r5
 800cb82:	4b0e      	ldr	r3, [pc, #56]	@ (800cbbc <_svfiprintf_r+0x1f0>)
 800cb84:	a904      	add	r1, sp, #16
 800cb86:	4638      	mov	r0, r7
 800cb88:	f7fc f8c4 	bl	8008d14 <_printf_float>
 800cb8c:	1c42      	adds	r2, r0, #1
 800cb8e:	4606      	mov	r6, r0
 800cb90:	d1d6      	bne.n	800cb40 <_svfiprintf_r+0x174>
 800cb92:	89ab      	ldrh	r3, [r5, #12]
 800cb94:	065b      	lsls	r3, r3, #25
 800cb96:	f53f af2d 	bmi.w	800c9f4 <_svfiprintf_r+0x28>
 800cb9a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800cb9c:	e72c      	b.n	800c9f8 <_svfiprintf_r+0x2c>
 800cb9e:	ab03      	add	r3, sp, #12
 800cba0:	9300      	str	r3, [sp, #0]
 800cba2:	462a      	mov	r2, r5
 800cba4:	4b05      	ldr	r3, [pc, #20]	@ (800cbbc <_svfiprintf_r+0x1f0>)
 800cba6:	a904      	add	r1, sp, #16
 800cba8:	4638      	mov	r0, r7
 800cbaa:	f7fc fb4b 	bl	8009244 <_printf_i>
 800cbae:	e7ed      	b.n	800cb8c <_svfiprintf_r+0x1c0>
 800cbb0:	0800daff 	.word	0x0800daff
 800cbb4:	0800db09 	.word	0x0800db09
 800cbb8:	08008d15 	.word	0x08008d15
 800cbbc:	0800c917 	.word	0x0800c917
 800cbc0:	0800db05 	.word	0x0800db05

0800cbc4 <_sungetc_r>:
 800cbc4:	b538      	push	{r3, r4, r5, lr}
 800cbc6:	1c4b      	adds	r3, r1, #1
 800cbc8:	4614      	mov	r4, r2
 800cbca:	d103      	bne.n	800cbd4 <_sungetc_r+0x10>
 800cbcc:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800cbd0:	4628      	mov	r0, r5
 800cbd2:	bd38      	pop	{r3, r4, r5, pc}
 800cbd4:	8993      	ldrh	r3, [r2, #12]
 800cbd6:	f023 0320 	bic.w	r3, r3, #32
 800cbda:	8193      	strh	r3, [r2, #12]
 800cbdc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800cbde:	6852      	ldr	r2, [r2, #4]
 800cbe0:	b2cd      	uxtb	r5, r1
 800cbe2:	b18b      	cbz	r3, 800cc08 <_sungetc_r+0x44>
 800cbe4:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800cbe6:	4293      	cmp	r3, r2
 800cbe8:	dd08      	ble.n	800cbfc <_sungetc_r+0x38>
 800cbea:	6823      	ldr	r3, [r4, #0]
 800cbec:	1e5a      	subs	r2, r3, #1
 800cbee:	6022      	str	r2, [r4, #0]
 800cbf0:	f803 5c01 	strb.w	r5, [r3, #-1]
 800cbf4:	6863      	ldr	r3, [r4, #4]
 800cbf6:	3301      	adds	r3, #1
 800cbf8:	6063      	str	r3, [r4, #4]
 800cbfa:	e7e9      	b.n	800cbd0 <_sungetc_r+0xc>
 800cbfc:	4621      	mov	r1, r4
 800cbfe:	f000 fb9a 	bl	800d336 <__submore>
 800cc02:	2800      	cmp	r0, #0
 800cc04:	d0f1      	beq.n	800cbea <_sungetc_r+0x26>
 800cc06:	e7e1      	b.n	800cbcc <_sungetc_r+0x8>
 800cc08:	6921      	ldr	r1, [r4, #16]
 800cc0a:	6823      	ldr	r3, [r4, #0]
 800cc0c:	b151      	cbz	r1, 800cc24 <_sungetc_r+0x60>
 800cc0e:	4299      	cmp	r1, r3
 800cc10:	d208      	bcs.n	800cc24 <_sungetc_r+0x60>
 800cc12:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800cc16:	42a9      	cmp	r1, r5
 800cc18:	d104      	bne.n	800cc24 <_sungetc_r+0x60>
 800cc1a:	3b01      	subs	r3, #1
 800cc1c:	3201      	adds	r2, #1
 800cc1e:	6023      	str	r3, [r4, #0]
 800cc20:	6062      	str	r2, [r4, #4]
 800cc22:	e7d5      	b.n	800cbd0 <_sungetc_r+0xc>
 800cc24:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 800cc28:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800cc2c:	6363      	str	r3, [r4, #52]	@ 0x34
 800cc2e:	2303      	movs	r3, #3
 800cc30:	63a3      	str	r3, [r4, #56]	@ 0x38
 800cc32:	4623      	mov	r3, r4
 800cc34:	f803 5f46 	strb.w	r5, [r3, #70]!
 800cc38:	6023      	str	r3, [r4, #0]
 800cc3a:	2301      	movs	r3, #1
 800cc3c:	e7dc      	b.n	800cbf8 <_sungetc_r+0x34>

0800cc3e <__ssrefill_r>:
 800cc3e:	b510      	push	{r4, lr}
 800cc40:	460c      	mov	r4, r1
 800cc42:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800cc44:	b169      	cbz	r1, 800cc62 <__ssrefill_r+0x24>
 800cc46:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800cc4a:	4299      	cmp	r1, r3
 800cc4c:	d001      	beq.n	800cc52 <__ssrefill_r+0x14>
 800cc4e:	f7fe fcbf 	bl	800b5d0 <_free_r>
 800cc52:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800cc54:	6063      	str	r3, [r4, #4]
 800cc56:	2000      	movs	r0, #0
 800cc58:	6360      	str	r0, [r4, #52]	@ 0x34
 800cc5a:	b113      	cbz	r3, 800cc62 <__ssrefill_r+0x24>
 800cc5c:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800cc5e:	6023      	str	r3, [r4, #0]
 800cc60:	bd10      	pop	{r4, pc}
 800cc62:	6923      	ldr	r3, [r4, #16]
 800cc64:	6023      	str	r3, [r4, #0]
 800cc66:	2300      	movs	r3, #0
 800cc68:	6063      	str	r3, [r4, #4]
 800cc6a:	89a3      	ldrh	r3, [r4, #12]
 800cc6c:	f043 0320 	orr.w	r3, r3, #32
 800cc70:	81a3      	strh	r3, [r4, #12]
 800cc72:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800cc76:	e7f3      	b.n	800cc60 <__ssrefill_r+0x22>

0800cc78 <__ssvfiscanf_r>:
 800cc78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc7c:	460c      	mov	r4, r1
 800cc7e:	f5ad 7d23 	sub.w	sp, sp, #652	@ 0x28c
 800cc82:	2100      	movs	r1, #0
 800cc84:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 800cc88:	49a6      	ldr	r1, [pc, #664]	@ (800cf24 <__ssvfiscanf_r+0x2ac>)
 800cc8a:	91a0      	str	r1, [sp, #640]	@ 0x280
 800cc8c:	f10d 0804 	add.w	r8, sp, #4
 800cc90:	49a5      	ldr	r1, [pc, #660]	@ (800cf28 <__ssvfiscanf_r+0x2b0>)
 800cc92:	4fa6      	ldr	r7, [pc, #664]	@ (800cf2c <__ssvfiscanf_r+0x2b4>)
 800cc94:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 800cc98:	4606      	mov	r6, r0
 800cc9a:	91a1      	str	r1, [sp, #644]	@ 0x284
 800cc9c:	9300      	str	r3, [sp, #0]
 800cc9e:	f892 9000 	ldrb.w	r9, [r2]
 800cca2:	f1b9 0f00 	cmp.w	r9, #0
 800cca6:	f000 8158 	beq.w	800cf5a <__ssvfiscanf_r+0x2e2>
 800ccaa:	f817 3009 	ldrb.w	r3, [r7, r9]
 800ccae:	f013 0308 	ands.w	r3, r3, #8
 800ccb2:	f102 0501 	add.w	r5, r2, #1
 800ccb6:	d019      	beq.n	800ccec <__ssvfiscanf_r+0x74>
 800ccb8:	6863      	ldr	r3, [r4, #4]
 800ccba:	2b00      	cmp	r3, #0
 800ccbc:	dd0f      	ble.n	800ccde <__ssvfiscanf_r+0x66>
 800ccbe:	6823      	ldr	r3, [r4, #0]
 800ccc0:	781a      	ldrb	r2, [r3, #0]
 800ccc2:	5cba      	ldrb	r2, [r7, r2]
 800ccc4:	0712      	lsls	r2, r2, #28
 800ccc6:	d401      	bmi.n	800cccc <__ssvfiscanf_r+0x54>
 800ccc8:	462a      	mov	r2, r5
 800ccca:	e7e8      	b.n	800cc9e <__ssvfiscanf_r+0x26>
 800cccc:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800ccce:	3201      	adds	r2, #1
 800ccd0:	9245      	str	r2, [sp, #276]	@ 0x114
 800ccd2:	6862      	ldr	r2, [r4, #4]
 800ccd4:	3301      	adds	r3, #1
 800ccd6:	3a01      	subs	r2, #1
 800ccd8:	6062      	str	r2, [r4, #4]
 800ccda:	6023      	str	r3, [r4, #0]
 800ccdc:	e7ec      	b.n	800ccb8 <__ssvfiscanf_r+0x40>
 800ccde:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800cce0:	4621      	mov	r1, r4
 800cce2:	4630      	mov	r0, r6
 800cce4:	4798      	blx	r3
 800cce6:	2800      	cmp	r0, #0
 800cce8:	d0e9      	beq.n	800ccbe <__ssvfiscanf_r+0x46>
 800ccea:	e7ed      	b.n	800ccc8 <__ssvfiscanf_r+0x50>
 800ccec:	f1b9 0f25 	cmp.w	r9, #37	@ 0x25
 800ccf0:	f040 8085 	bne.w	800cdfe <__ssvfiscanf_r+0x186>
 800ccf4:	9341      	str	r3, [sp, #260]	@ 0x104
 800ccf6:	9343      	str	r3, [sp, #268]	@ 0x10c
 800ccf8:	7853      	ldrb	r3, [r2, #1]
 800ccfa:	2b2a      	cmp	r3, #42	@ 0x2a
 800ccfc:	bf02      	ittt	eq
 800ccfe:	2310      	moveq	r3, #16
 800cd00:	1c95      	addeq	r5, r2, #2
 800cd02:	9341      	streq	r3, [sp, #260]	@ 0x104
 800cd04:	220a      	movs	r2, #10
 800cd06:	46aa      	mov	sl, r5
 800cd08:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800cd0c:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 800cd10:	2b09      	cmp	r3, #9
 800cd12:	d91e      	bls.n	800cd52 <__ssvfiscanf_r+0xda>
 800cd14:	f8df b218 	ldr.w	fp, [pc, #536]	@ 800cf30 <__ssvfiscanf_r+0x2b8>
 800cd18:	2203      	movs	r2, #3
 800cd1a:	4658      	mov	r0, fp
 800cd1c:	f7f3 fa88 	bl	8000230 <memchr>
 800cd20:	b138      	cbz	r0, 800cd32 <__ssvfiscanf_r+0xba>
 800cd22:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800cd24:	eba0 000b 	sub.w	r0, r0, fp
 800cd28:	2301      	movs	r3, #1
 800cd2a:	4083      	lsls	r3, r0
 800cd2c:	4313      	orrs	r3, r2
 800cd2e:	9341      	str	r3, [sp, #260]	@ 0x104
 800cd30:	4655      	mov	r5, sl
 800cd32:	f815 3b01 	ldrb.w	r3, [r5], #1
 800cd36:	2b78      	cmp	r3, #120	@ 0x78
 800cd38:	d806      	bhi.n	800cd48 <__ssvfiscanf_r+0xd0>
 800cd3a:	2b57      	cmp	r3, #87	@ 0x57
 800cd3c:	d810      	bhi.n	800cd60 <__ssvfiscanf_r+0xe8>
 800cd3e:	2b25      	cmp	r3, #37	@ 0x25
 800cd40:	d05d      	beq.n	800cdfe <__ssvfiscanf_r+0x186>
 800cd42:	d857      	bhi.n	800cdf4 <__ssvfiscanf_r+0x17c>
 800cd44:	2b00      	cmp	r3, #0
 800cd46:	d075      	beq.n	800ce34 <__ssvfiscanf_r+0x1bc>
 800cd48:	2303      	movs	r3, #3
 800cd4a:	9347      	str	r3, [sp, #284]	@ 0x11c
 800cd4c:	230a      	movs	r3, #10
 800cd4e:	9342      	str	r3, [sp, #264]	@ 0x108
 800cd50:	e088      	b.n	800ce64 <__ssvfiscanf_r+0x1ec>
 800cd52:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 800cd54:	fb02 1103 	mla	r1, r2, r3, r1
 800cd58:	3930      	subs	r1, #48	@ 0x30
 800cd5a:	9143      	str	r1, [sp, #268]	@ 0x10c
 800cd5c:	4655      	mov	r5, sl
 800cd5e:	e7d2      	b.n	800cd06 <__ssvfiscanf_r+0x8e>
 800cd60:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 800cd64:	2a20      	cmp	r2, #32
 800cd66:	d8ef      	bhi.n	800cd48 <__ssvfiscanf_r+0xd0>
 800cd68:	a101      	add	r1, pc, #4	@ (adr r1, 800cd70 <__ssvfiscanf_r+0xf8>)
 800cd6a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800cd6e:	bf00      	nop
 800cd70:	0800ce43 	.word	0x0800ce43
 800cd74:	0800cd49 	.word	0x0800cd49
 800cd78:	0800cd49 	.word	0x0800cd49
 800cd7c:	0800ce9d 	.word	0x0800ce9d
 800cd80:	0800cd49 	.word	0x0800cd49
 800cd84:	0800cd49 	.word	0x0800cd49
 800cd88:	0800cd49 	.word	0x0800cd49
 800cd8c:	0800cd49 	.word	0x0800cd49
 800cd90:	0800cd49 	.word	0x0800cd49
 800cd94:	0800cd49 	.word	0x0800cd49
 800cd98:	0800cd49 	.word	0x0800cd49
 800cd9c:	0800ceb3 	.word	0x0800ceb3
 800cda0:	0800ce99 	.word	0x0800ce99
 800cda4:	0800cdfb 	.word	0x0800cdfb
 800cda8:	0800cdfb 	.word	0x0800cdfb
 800cdac:	0800cdfb 	.word	0x0800cdfb
 800cdb0:	0800cd49 	.word	0x0800cd49
 800cdb4:	0800ce55 	.word	0x0800ce55
 800cdb8:	0800cd49 	.word	0x0800cd49
 800cdbc:	0800cd49 	.word	0x0800cd49
 800cdc0:	0800cd49 	.word	0x0800cd49
 800cdc4:	0800cd49 	.word	0x0800cd49
 800cdc8:	0800cec3 	.word	0x0800cec3
 800cdcc:	0800ce5d 	.word	0x0800ce5d
 800cdd0:	0800ce3b 	.word	0x0800ce3b
 800cdd4:	0800cd49 	.word	0x0800cd49
 800cdd8:	0800cd49 	.word	0x0800cd49
 800cddc:	0800cebf 	.word	0x0800cebf
 800cde0:	0800cd49 	.word	0x0800cd49
 800cde4:	0800ce99 	.word	0x0800ce99
 800cde8:	0800cd49 	.word	0x0800cd49
 800cdec:	0800cd49 	.word	0x0800cd49
 800cdf0:	0800ce43 	.word	0x0800ce43
 800cdf4:	3b45      	subs	r3, #69	@ 0x45
 800cdf6:	2b02      	cmp	r3, #2
 800cdf8:	d8a6      	bhi.n	800cd48 <__ssvfiscanf_r+0xd0>
 800cdfa:	2305      	movs	r3, #5
 800cdfc:	e031      	b.n	800ce62 <__ssvfiscanf_r+0x1ea>
 800cdfe:	6863      	ldr	r3, [r4, #4]
 800ce00:	2b00      	cmp	r3, #0
 800ce02:	dd0d      	ble.n	800ce20 <__ssvfiscanf_r+0x1a8>
 800ce04:	6823      	ldr	r3, [r4, #0]
 800ce06:	781a      	ldrb	r2, [r3, #0]
 800ce08:	454a      	cmp	r2, r9
 800ce0a:	f040 80a6 	bne.w	800cf5a <__ssvfiscanf_r+0x2e2>
 800ce0e:	3301      	adds	r3, #1
 800ce10:	6862      	ldr	r2, [r4, #4]
 800ce12:	6023      	str	r3, [r4, #0]
 800ce14:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 800ce16:	3a01      	subs	r2, #1
 800ce18:	3301      	adds	r3, #1
 800ce1a:	6062      	str	r2, [r4, #4]
 800ce1c:	9345      	str	r3, [sp, #276]	@ 0x114
 800ce1e:	e753      	b.n	800ccc8 <__ssvfiscanf_r+0x50>
 800ce20:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800ce22:	4621      	mov	r1, r4
 800ce24:	4630      	mov	r0, r6
 800ce26:	4798      	blx	r3
 800ce28:	2800      	cmp	r0, #0
 800ce2a:	d0eb      	beq.n	800ce04 <__ssvfiscanf_r+0x18c>
 800ce2c:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800ce2e:	2800      	cmp	r0, #0
 800ce30:	f040 808b 	bne.w	800cf4a <__ssvfiscanf_r+0x2d2>
 800ce34:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ce38:	e08b      	b.n	800cf52 <__ssvfiscanf_r+0x2da>
 800ce3a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800ce3c:	f042 0220 	orr.w	r2, r2, #32
 800ce40:	9241      	str	r2, [sp, #260]	@ 0x104
 800ce42:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800ce44:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800ce48:	9241      	str	r2, [sp, #260]	@ 0x104
 800ce4a:	2210      	movs	r2, #16
 800ce4c:	2b6e      	cmp	r3, #110	@ 0x6e
 800ce4e:	9242      	str	r2, [sp, #264]	@ 0x108
 800ce50:	d902      	bls.n	800ce58 <__ssvfiscanf_r+0x1e0>
 800ce52:	e005      	b.n	800ce60 <__ssvfiscanf_r+0x1e8>
 800ce54:	2300      	movs	r3, #0
 800ce56:	9342      	str	r3, [sp, #264]	@ 0x108
 800ce58:	2303      	movs	r3, #3
 800ce5a:	e002      	b.n	800ce62 <__ssvfiscanf_r+0x1ea>
 800ce5c:	2308      	movs	r3, #8
 800ce5e:	9342      	str	r3, [sp, #264]	@ 0x108
 800ce60:	2304      	movs	r3, #4
 800ce62:	9347      	str	r3, [sp, #284]	@ 0x11c
 800ce64:	6863      	ldr	r3, [r4, #4]
 800ce66:	2b00      	cmp	r3, #0
 800ce68:	dd39      	ble.n	800cede <__ssvfiscanf_r+0x266>
 800ce6a:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800ce6c:	0659      	lsls	r1, r3, #25
 800ce6e:	d404      	bmi.n	800ce7a <__ssvfiscanf_r+0x202>
 800ce70:	6823      	ldr	r3, [r4, #0]
 800ce72:	781a      	ldrb	r2, [r3, #0]
 800ce74:	5cba      	ldrb	r2, [r7, r2]
 800ce76:	0712      	lsls	r2, r2, #28
 800ce78:	d438      	bmi.n	800ceec <__ssvfiscanf_r+0x274>
 800ce7a:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 800ce7c:	2b02      	cmp	r3, #2
 800ce7e:	dc47      	bgt.n	800cf10 <__ssvfiscanf_r+0x298>
 800ce80:	466b      	mov	r3, sp
 800ce82:	4622      	mov	r2, r4
 800ce84:	a941      	add	r1, sp, #260	@ 0x104
 800ce86:	4630      	mov	r0, r6
 800ce88:	f000 f86c 	bl	800cf64 <_scanf_chars>
 800ce8c:	2801      	cmp	r0, #1
 800ce8e:	d064      	beq.n	800cf5a <__ssvfiscanf_r+0x2e2>
 800ce90:	2802      	cmp	r0, #2
 800ce92:	f47f af19 	bne.w	800ccc8 <__ssvfiscanf_r+0x50>
 800ce96:	e7c9      	b.n	800ce2c <__ssvfiscanf_r+0x1b4>
 800ce98:	220a      	movs	r2, #10
 800ce9a:	e7d7      	b.n	800ce4c <__ssvfiscanf_r+0x1d4>
 800ce9c:	4629      	mov	r1, r5
 800ce9e:	4640      	mov	r0, r8
 800cea0:	f000 fa10 	bl	800d2c4 <__sccl>
 800cea4:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800cea6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ceaa:	9341      	str	r3, [sp, #260]	@ 0x104
 800ceac:	4605      	mov	r5, r0
 800ceae:	2301      	movs	r3, #1
 800ceb0:	e7d7      	b.n	800ce62 <__ssvfiscanf_r+0x1ea>
 800ceb2:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800ceb4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ceb8:	9341      	str	r3, [sp, #260]	@ 0x104
 800ceba:	2300      	movs	r3, #0
 800cebc:	e7d1      	b.n	800ce62 <__ssvfiscanf_r+0x1ea>
 800cebe:	2302      	movs	r3, #2
 800cec0:	e7cf      	b.n	800ce62 <__ssvfiscanf_r+0x1ea>
 800cec2:	9841      	ldr	r0, [sp, #260]	@ 0x104
 800cec4:	06c3      	lsls	r3, r0, #27
 800cec6:	f53f aeff 	bmi.w	800ccc8 <__ssvfiscanf_r+0x50>
 800ceca:	9b00      	ldr	r3, [sp, #0]
 800cecc:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800cece:	1d19      	adds	r1, r3, #4
 800ced0:	9100      	str	r1, [sp, #0]
 800ced2:	681b      	ldr	r3, [r3, #0]
 800ced4:	07c0      	lsls	r0, r0, #31
 800ced6:	bf4c      	ite	mi
 800ced8:	801a      	strhmi	r2, [r3, #0]
 800ceda:	601a      	strpl	r2, [r3, #0]
 800cedc:	e6f4      	b.n	800ccc8 <__ssvfiscanf_r+0x50>
 800cede:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800cee0:	4621      	mov	r1, r4
 800cee2:	4630      	mov	r0, r6
 800cee4:	4798      	blx	r3
 800cee6:	2800      	cmp	r0, #0
 800cee8:	d0bf      	beq.n	800ce6a <__ssvfiscanf_r+0x1f2>
 800ceea:	e79f      	b.n	800ce2c <__ssvfiscanf_r+0x1b4>
 800ceec:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800ceee:	3201      	adds	r2, #1
 800cef0:	9245      	str	r2, [sp, #276]	@ 0x114
 800cef2:	6862      	ldr	r2, [r4, #4]
 800cef4:	3a01      	subs	r2, #1
 800cef6:	2a00      	cmp	r2, #0
 800cef8:	6062      	str	r2, [r4, #4]
 800cefa:	dd02      	ble.n	800cf02 <__ssvfiscanf_r+0x28a>
 800cefc:	3301      	adds	r3, #1
 800cefe:	6023      	str	r3, [r4, #0]
 800cf00:	e7b6      	b.n	800ce70 <__ssvfiscanf_r+0x1f8>
 800cf02:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800cf04:	4621      	mov	r1, r4
 800cf06:	4630      	mov	r0, r6
 800cf08:	4798      	blx	r3
 800cf0a:	2800      	cmp	r0, #0
 800cf0c:	d0b0      	beq.n	800ce70 <__ssvfiscanf_r+0x1f8>
 800cf0e:	e78d      	b.n	800ce2c <__ssvfiscanf_r+0x1b4>
 800cf10:	2b04      	cmp	r3, #4
 800cf12:	dc0f      	bgt.n	800cf34 <__ssvfiscanf_r+0x2bc>
 800cf14:	466b      	mov	r3, sp
 800cf16:	4622      	mov	r2, r4
 800cf18:	a941      	add	r1, sp, #260	@ 0x104
 800cf1a:	4630      	mov	r0, r6
 800cf1c:	f000 f87c 	bl	800d018 <_scanf_i>
 800cf20:	e7b4      	b.n	800ce8c <__ssvfiscanf_r+0x214>
 800cf22:	bf00      	nop
 800cf24:	0800cbc5 	.word	0x0800cbc5
 800cf28:	0800cc3f 	.word	0x0800cc3f
 800cf2c:	0800dd31 	.word	0x0800dd31
 800cf30:	0800db05 	.word	0x0800db05
 800cf34:	4b0a      	ldr	r3, [pc, #40]	@ (800cf60 <__ssvfiscanf_r+0x2e8>)
 800cf36:	2b00      	cmp	r3, #0
 800cf38:	f43f aec6 	beq.w	800ccc8 <__ssvfiscanf_r+0x50>
 800cf3c:	466b      	mov	r3, sp
 800cf3e:	4622      	mov	r2, r4
 800cf40:	a941      	add	r1, sp, #260	@ 0x104
 800cf42:	4630      	mov	r0, r6
 800cf44:	f3af 8000 	nop.w
 800cf48:	e7a0      	b.n	800ce8c <__ssvfiscanf_r+0x214>
 800cf4a:	89a3      	ldrh	r3, [r4, #12]
 800cf4c:	065b      	lsls	r3, r3, #25
 800cf4e:	f53f af71 	bmi.w	800ce34 <__ssvfiscanf_r+0x1bc>
 800cf52:	f50d 7d23 	add.w	sp, sp, #652	@ 0x28c
 800cf56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf5a:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800cf5c:	e7f9      	b.n	800cf52 <__ssvfiscanf_r+0x2da>
 800cf5e:	bf00      	nop
 800cf60:	00000000 	.word	0x00000000

0800cf64 <_scanf_chars>:
 800cf64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cf68:	4615      	mov	r5, r2
 800cf6a:	688a      	ldr	r2, [r1, #8]
 800cf6c:	4680      	mov	r8, r0
 800cf6e:	460c      	mov	r4, r1
 800cf70:	b932      	cbnz	r2, 800cf80 <_scanf_chars+0x1c>
 800cf72:	698a      	ldr	r2, [r1, #24]
 800cf74:	2a00      	cmp	r2, #0
 800cf76:	bf14      	ite	ne
 800cf78:	f04f 32ff 	movne.w	r2, #4294967295	@ 0xffffffff
 800cf7c:	2201      	moveq	r2, #1
 800cf7e:	608a      	str	r2, [r1, #8]
 800cf80:	6822      	ldr	r2, [r4, #0]
 800cf82:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 800d014 <_scanf_chars+0xb0>
 800cf86:	06d1      	lsls	r1, r2, #27
 800cf88:	bf5f      	itttt	pl
 800cf8a:	681a      	ldrpl	r2, [r3, #0]
 800cf8c:	1d11      	addpl	r1, r2, #4
 800cf8e:	6019      	strpl	r1, [r3, #0]
 800cf90:	6816      	ldrpl	r6, [r2, #0]
 800cf92:	2700      	movs	r7, #0
 800cf94:	69a0      	ldr	r0, [r4, #24]
 800cf96:	b188      	cbz	r0, 800cfbc <_scanf_chars+0x58>
 800cf98:	2801      	cmp	r0, #1
 800cf9a:	d107      	bne.n	800cfac <_scanf_chars+0x48>
 800cf9c:	682b      	ldr	r3, [r5, #0]
 800cf9e:	781a      	ldrb	r2, [r3, #0]
 800cfa0:	6963      	ldr	r3, [r4, #20]
 800cfa2:	5c9b      	ldrb	r3, [r3, r2]
 800cfa4:	b953      	cbnz	r3, 800cfbc <_scanf_chars+0x58>
 800cfa6:	2f00      	cmp	r7, #0
 800cfa8:	d031      	beq.n	800d00e <_scanf_chars+0xaa>
 800cfaa:	e022      	b.n	800cff2 <_scanf_chars+0x8e>
 800cfac:	2802      	cmp	r0, #2
 800cfae:	d120      	bne.n	800cff2 <_scanf_chars+0x8e>
 800cfb0:	682b      	ldr	r3, [r5, #0]
 800cfb2:	781b      	ldrb	r3, [r3, #0]
 800cfb4:	f819 3003 	ldrb.w	r3, [r9, r3]
 800cfb8:	071b      	lsls	r3, r3, #28
 800cfba:	d41a      	bmi.n	800cff2 <_scanf_chars+0x8e>
 800cfbc:	6823      	ldr	r3, [r4, #0]
 800cfbe:	06da      	lsls	r2, r3, #27
 800cfc0:	bf5e      	ittt	pl
 800cfc2:	682b      	ldrpl	r3, [r5, #0]
 800cfc4:	781b      	ldrbpl	r3, [r3, #0]
 800cfc6:	f806 3b01 	strbpl.w	r3, [r6], #1
 800cfca:	682a      	ldr	r2, [r5, #0]
 800cfcc:	686b      	ldr	r3, [r5, #4]
 800cfce:	3201      	adds	r2, #1
 800cfd0:	602a      	str	r2, [r5, #0]
 800cfd2:	68a2      	ldr	r2, [r4, #8]
 800cfd4:	3b01      	subs	r3, #1
 800cfd6:	3a01      	subs	r2, #1
 800cfd8:	606b      	str	r3, [r5, #4]
 800cfda:	3701      	adds	r7, #1
 800cfdc:	60a2      	str	r2, [r4, #8]
 800cfde:	b142      	cbz	r2, 800cff2 <_scanf_chars+0x8e>
 800cfe0:	2b00      	cmp	r3, #0
 800cfe2:	dcd7      	bgt.n	800cf94 <_scanf_chars+0x30>
 800cfe4:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800cfe8:	4629      	mov	r1, r5
 800cfea:	4640      	mov	r0, r8
 800cfec:	4798      	blx	r3
 800cfee:	2800      	cmp	r0, #0
 800cff0:	d0d0      	beq.n	800cf94 <_scanf_chars+0x30>
 800cff2:	6823      	ldr	r3, [r4, #0]
 800cff4:	f013 0310 	ands.w	r3, r3, #16
 800cff8:	d105      	bne.n	800d006 <_scanf_chars+0xa2>
 800cffa:	68e2      	ldr	r2, [r4, #12]
 800cffc:	3201      	adds	r2, #1
 800cffe:	60e2      	str	r2, [r4, #12]
 800d000:	69a2      	ldr	r2, [r4, #24]
 800d002:	b102      	cbz	r2, 800d006 <_scanf_chars+0xa2>
 800d004:	7033      	strb	r3, [r6, #0]
 800d006:	6923      	ldr	r3, [r4, #16]
 800d008:	443b      	add	r3, r7
 800d00a:	6123      	str	r3, [r4, #16]
 800d00c:	2000      	movs	r0, #0
 800d00e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d012:	bf00      	nop
 800d014:	0800dd31 	.word	0x0800dd31

0800d018 <_scanf_i>:
 800d018:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d01c:	4698      	mov	r8, r3
 800d01e:	4b74      	ldr	r3, [pc, #464]	@ (800d1f0 <_scanf_i+0x1d8>)
 800d020:	460c      	mov	r4, r1
 800d022:	4682      	mov	sl, r0
 800d024:	4616      	mov	r6, r2
 800d026:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800d02a:	b087      	sub	sp, #28
 800d02c:	ab03      	add	r3, sp, #12
 800d02e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800d032:	4b70      	ldr	r3, [pc, #448]	@ (800d1f4 <_scanf_i+0x1dc>)
 800d034:	69a1      	ldr	r1, [r4, #24]
 800d036:	4a70      	ldr	r2, [pc, #448]	@ (800d1f8 <_scanf_i+0x1e0>)
 800d038:	2903      	cmp	r1, #3
 800d03a:	bf08      	it	eq
 800d03c:	461a      	moveq	r2, r3
 800d03e:	68a3      	ldr	r3, [r4, #8]
 800d040:	9201      	str	r2, [sp, #4]
 800d042:	1e5a      	subs	r2, r3, #1
 800d044:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800d048:	bf88      	it	hi
 800d04a:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800d04e:	4627      	mov	r7, r4
 800d050:	bf82      	ittt	hi
 800d052:	eb03 0905 	addhi.w	r9, r3, r5
 800d056:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800d05a:	60a3      	strhi	r3, [r4, #8]
 800d05c:	f857 3b1c 	ldr.w	r3, [r7], #28
 800d060:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 800d064:	bf98      	it	ls
 800d066:	f04f 0900 	movls.w	r9, #0
 800d06a:	6023      	str	r3, [r4, #0]
 800d06c:	463d      	mov	r5, r7
 800d06e:	f04f 0b00 	mov.w	fp, #0
 800d072:	6831      	ldr	r1, [r6, #0]
 800d074:	ab03      	add	r3, sp, #12
 800d076:	7809      	ldrb	r1, [r1, #0]
 800d078:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800d07c:	2202      	movs	r2, #2
 800d07e:	f7f3 f8d7 	bl	8000230 <memchr>
 800d082:	b328      	cbz	r0, 800d0d0 <_scanf_i+0xb8>
 800d084:	f1bb 0f01 	cmp.w	fp, #1
 800d088:	d159      	bne.n	800d13e <_scanf_i+0x126>
 800d08a:	6862      	ldr	r2, [r4, #4]
 800d08c:	b92a      	cbnz	r2, 800d09a <_scanf_i+0x82>
 800d08e:	6822      	ldr	r2, [r4, #0]
 800d090:	2108      	movs	r1, #8
 800d092:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800d096:	6061      	str	r1, [r4, #4]
 800d098:	6022      	str	r2, [r4, #0]
 800d09a:	6822      	ldr	r2, [r4, #0]
 800d09c:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 800d0a0:	6022      	str	r2, [r4, #0]
 800d0a2:	68a2      	ldr	r2, [r4, #8]
 800d0a4:	1e51      	subs	r1, r2, #1
 800d0a6:	60a1      	str	r1, [r4, #8]
 800d0a8:	b192      	cbz	r2, 800d0d0 <_scanf_i+0xb8>
 800d0aa:	6832      	ldr	r2, [r6, #0]
 800d0ac:	1c51      	adds	r1, r2, #1
 800d0ae:	6031      	str	r1, [r6, #0]
 800d0b0:	7812      	ldrb	r2, [r2, #0]
 800d0b2:	f805 2b01 	strb.w	r2, [r5], #1
 800d0b6:	6872      	ldr	r2, [r6, #4]
 800d0b8:	3a01      	subs	r2, #1
 800d0ba:	2a00      	cmp	r2, #0
 800d0bc:	6072      	str	r2, [r6, #4]
 800d0be:	dc07      	bgt.n	800d0d0 <_scanf_i+0xb8>
 800d0c0:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 800d0c4:	4631      	mov	r1, r6
 800d0c6:	4650      	mov	r0, sl
 800d0c8:	4790      	blx	r2
 800d0ca:	2800      	cmp	r0, #0
 800d0cc:	f040 8085 	bne.w	800d1da <_scanf_i+0x1c2>
 800d0d0:	f10b 0b01 	add.w	fp, fp, #1
 800d0d4:	f1bb 0f03 	cmp.w	fp, #3
 800d0d8:	d1cb      	bne.n	800d072 <_scanf_i+0x5a>
 800d0da:	6863      	ldr	r3, [r4, #4]
 800d0dc:	b90b      	cbnz	r3, 800d0e2 <_scanf_i+0xca>
 800d0de:	230a      	movs	r3, #10
 800d0e0:	6063      	str	r3, [r4, #4]
 800d0e2:	6863      	ldr	r3, [r4, #4]
 800d0e4:	4945      	ldr	r1, [pc, #276]	@ (800d1fc <_scanf_i+0x1e4>)
 800d0e6:	6960      	ldr	r0, [r4, #20]
 800d0e8:	1ac9      	subs	r1, r1, r3
 800d0ea:	f000 f8eb 	bl	800d2c4 <__sccl>
 800d0ee:	f04f 0b00 	mov.w	fp, #0
 800d0f2:	68a3      	ldr	r3, [r4, #8]
 800d0f4:	6822      	ldr	r2, [r4, #0]
 800d0f6:	2b00      	cmp	r3, #0
 800d0f8:	d03d      	beq.n	800d176 <_scanf_i+0x15e>
 800d0fa:	6831      	ldr	r1, [r6, #0]
 800d0fc:	6960      	ldr	r0, [r4, #20]
 800d0fe:	f891 c000 	ldrb.w	ip, [r1]
 800d102:	f810 000c 	ldrb.w	r0, [r0, ip]
 800d106:	2800      	cmp	r0, #0
 800d108:	d035      	beq.n	800d176 <_scanf_i+0x15e>
 800d10a:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 800d10e:	d124      	bne.n	800d15a <_scanf_i+0x142>
 800d110:	0510      	lsls	r0, r2, #20
 800d112:	d522      	bpl.n	800d15a <_scanf_i+0x142>
 800d114:	f10b 0b01 	add.w	fp, fp, #1
 800d118:	f1b9 0f00 	cmp.w	r9, #0
 800d11c:	d003      	beq.n	800d126 <_scanf_i+0x10e>
 800d11e:	3301      	adds	r3, #1
 800d120:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
 800d124:	60a3      	str	r3, [r4, #8]
 800d126:	6873      	ldr	r3, [r6, #4]
 800d128:	3b01      	subs	r3, #1
 800d12a:	2b00      	cmp	r3, #0
 800d12c:	6073      	str	r3, [r6, #4]
 800d12e:	dd1b      	ble.n	800d168 <_scanf_i+0x150>
 800d130:	6833      	ldr	r3, [r6, #0]
 800d132:	3301      	adds	r3, #1
 800d134:	6033      	str	r3, [r6, #0]
 800d136:	68a3      	ldr	r3, [r4, #8]
 800d138:	3b01      	subs	r3, #1
 800d13a:	60a3      	str	r3, [r4, #8]
 800d13c:	e7d9      	b.n	800d0f2 <_scanf_i+0xda>
 800d13e:	f1bb 0f02 	cmp.w	fp, #2
 800d142:	d1ae      	bne.n	800d0a2 <_scanf_i+0x8a>
 800d144:	6822      	ldr	r2, [r4, #0]
 800d146:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 800d14a:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800d14e:	d1c4      	bne.n	800d0da <_scanf_i+0xc2>
 800d150:	2110      	movs	r1, #16
 800d152:	6061      	str	r1, [r4, #4]
 800d154:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800d158:	e7a2      	b.n	800d0a0 <_scanf_i+0x88>
 800d15a:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 800d15e:	6022      	str	r2, [r4, #0]
 800d160:	780b      	ldrb	r3, [r1, #0]
 800d162:	f805 3b01 	strb.w	r3, [r5], #1
 800d166:	e7de      	b.n	800d126 <_scanf_i+0x10e>
 800d168:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800d16c:	4631      	mov	r1, r6
 800d16e:	4650      	mov	r0, sl
 800d170:	4798      	blx	r3
 800d172:	2800      	cmp	r0, #0
 800d174:	d0df      	beq.n	800d136 <_scanf_i+0x11e>
 800d176:	6823      	ldr	r3, [r4, #0]
 800d178:	05d9      	lsls	r1, r3, #23
 800d17a:	d50d      	bpl.n	800d198 <_scanf_i+0x180>
 800d17c:	42bd      	cmp	r5, r7
 800d17e:	d909      	bls.n	800d194 <_scanf_i+0x17c>
 800d180:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800d184:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800d188:	4632      	mov	r2, r6
 800d18a:	4650      	mov	r0, sl
 800d18c:	4798      	blx	r3
 800d18e:	f105 39ff 	add.w	r9, r5, #4294967295	@ 0xffffffff
 800d192:	464d      	mov	r5, r9
 800d194:	42bd      	cmp	r5, r7
 800d196:	d028      	beq.n	800d1ea <_scanf_i+0x1d2>
 800d198:	6822      	ldr	r2, [r4, #0]
 800d19a:	f012 0210 	ands.w	r2, r2, #16
 800d19e:	d113      	bne.n	800d1c8 <_scanf_i+0x1b0>
 800d1a0:	702a      	strb	r2, [r5, #0]
 800d1a2:	6863      	ldr	r3, [r4, #4]
 800d1a4:	9e01      	ldr	r6, [sp, #4]
 800d1a6:	4639      	mov	r1, r7
 800d1a8:	4650      	mov	r0, sl
 800d1aa:	47b0      	blx	r6
 800d1ac:	f8d8 3000 	ldr.w	r3, [r8]
 800d1b0:	6821      	ldr	r1, [r4, #0]
 800d1b2:	1d1a      	adds	r2, r3, #4
 800d1b4:	f8c8 2000 	str.w	r2, [r8]
 800d1b8:	f011 0f20 	tst.w	r1, #32
 800d1bc:	681b      	ldr	r3, [r3, #0]
 800d1be:	d00f      	beq.n	800d1e0 <_scanf_i+0x1c8>
 800d1c0:	6018      	str	r0, [r3, #0]
 800d1c2:	68e3      	ldr	r3, [r4, #12]
 800d1c4:	3301      	adds	r3, #1
 800d1c6:	60e3      	str	r3, [r4, #12]
 800d1c8:	6923      	ldr	r3, [r4, #16]
 800d1ca:	1bed      	subs	r5, r5, r7
 800d1cc:	445d      	add	r5, fp
 800d1ce:	442b      	add	r3, r5
 800d1d0:	6123      	str	r3, [r4, #16]
 800d1d2:	2000      	movs	r0, #0
 800d1d4:	b007      	add	sp, #28
 800d1d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d1da:	f04f 0b00 	mov.w	fp, #0
 800d1de:	e7ca      	b.n	800d176 <_scanf_i+0x15e>
 800d1e0:	07ca      	lsls	r2, r1, #31
 800d1e2:	bf4c      	ite	mi
 800d1e4:	8018      	strhmi	r0, [r3, #0]
 800d1e6:	6018      	strpl	r0, [r3, #0]
 800d1e8:	e7eb      	b.n	800d1c2 <_scanf_i+0x1aa>
 800d1ea:	2001      	movs	r0, #1
 800d1ec:	e7f2      	b.n	800d1d4 <_scanf_i+0x1bc>
 800d1ee:	bf00      	nop
 800d1f0:	0800d674 	.word	0x0800d674
 800d1f4:	0800d57d 	.word	0x0800d57d
 800d1f8:	0800c041 	.word	0x0800c041
 800d1fc:	0800db2a 	.word	0x0800db2a

0800d200 <__swhatbuf_r>:
 800d200:	b570      	push	{r4, r5, r6, lr}
 800d202:	460c      	mov	r4, r1
 800d204:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d208:	2900      	cmp	r1, #0
 800d20a:	b096      	sub	sp, #88	@ 0x58
 800d20c:	4615      	mov	r5, r2
 800d20e:	461e      	mov	r6, r3
 800d210:	da0d      	bge.n	800d22e <__swhatbuf_r+0x2e>
 800d212:	89a3      	ldrh	r3, [r4, #12]
 800d214:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800d218:	f04f 0100 	mov.w	r1, #0
 800d21c:	bf14      	ite	ne
 800d21e:	2340      	movne	r3, #64	@ 0x40
 800d220:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800d224:	2000      	movs	r0, #0
 800d226:	6031      	str	r1, [r6, #0]
 800d228:	602b      	str	r3, [r5, #0]
 800d22a:	b016      	add	sp, #88	@ 0x58
 800d22c:	bd70      	pop	{r4, r5, r6, pc}
 800d22e:	466a      	mov	r2, sp
 800d230:	f000 f8ec 	bl	800d40c <_fstat_r>
 800d234:	2800      	cmp	r0, #0
 800d236:	dbec      	blt.n	800d212 <__swhatbuf_r+0x12>
 800d238:	9901      	ldr	r1, [sp, #4]
 800d23a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800d23e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800d242:	4259      	negs	r1, r3
 800d244:	4159      	adcs	r1, r3
 800d246:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d24a:	e7eb      	b.n	800d224 <__swhatbuf_r+0x24>

0800d24c <__smakebuf_r>:
 800d24c:	898b      	ldrh	r3, [r1, #12]
 800d24e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d250:	079d      	lsls	r5, r3, #30
 800d252:	4606      	mov	r6, r0
 800d254:	460c      	mov	r4, r1
 800d256:	d507      	bpl.n	800d268 <__smakebuf_r+0x1c>
 800d258:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800d25c:	6023      	str	r3, [r4, #0]
 800d25e:	6123      	str	r3, [r4, #16]
 800d260:	2301      	movs	r3, #1
 800d262:	6163      	str	r3, [r4, #20]
 800d264:	b003      	add	sp, #12
 800d266:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d268:	ab01      	add	r3, sp, #4
 800d26a:	466a      	mov	r2, sp
 800d26c:	f7ff ffc8 	bl	800d200 <__swhatbuf_r>
 800d270:	9f00      	ldr	r7, [sp, #0]
 800d272:	4605      	mov	r5, r0
 800d274:	4639      	mov	r1, r7
 800d276:	4630      	mov	r0, r6
 800d278:	f7fe fa6e 	bl	800b758 <_malloc_r>
 800d27c:	b948      	cbnz	r0, 800d292 <__smakebuf_r+0x46>
 800d27e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d282:	059a      	lsls	r2, r3, #22
 800d284:	d4ee      	bmi.n	800d264 <__smakebuf_r+0x18>
 800d286:	f023 0303 	bic.w	r3, r3, #3
 800d28a:	f043 0302 	orr.w	r3, r3, #2
 800d28e:	81a3      	strh	r3, [r4, #12]
 800d290:	e7e2      	b.n	800d258 <__smakebuf_r+0xc>
 800d292:	89a3      	ldrh	r3, [r4, #12]
 800d294:	6020      	str	r0, [r4, #0]
 800d296:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d29a:	81a3      	strh	r3, [r4, #12]
 800d29c:	9b01      	ldr	r3, [sp, #4]
 800d29e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800d2a2:	b15b      	cbz	r3, 800d2bc <__smakebuf_r+0x70>
 800d2a4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d2a8:	4630      	mov	r0, r6
 800d2aa:	f000 f8c1 	bl	800d430 <_isatty_r>
 800d2ae:	b128      	cbz	r0, 800d2bc <__smakebuf_r+0x70>
 800d2b0:	89a3      	ldrh	r3, [r4, #12]
 800d2b2:	f023 0303 	bic.w	r3, r3, #3
 800d2b6:	f043 0301 	orr.w	r3, r3, #1
 800d2ba:	81a3      	strh	r3, [r4, #12]
 800d2bc:	89a3      	ldrh	r3, [r4, #12]
 800d2be:	431d      	orrs	r5, r3
 800d2c0:	81a5      	strh	r5, [r4, #12]
 800d2c2:	e7cf      	b.n	800d264 <__smakebuf_r+0x18>

0800d2c4 <__sccl>:
 800d2c4:	b570      	push	{r4, r5, r6, lr}
 800d2c6:	780b      	ldrb	r3, [r1, #0]
 800d2c8:	4604      	mov	r4, r0
 800d2ca:	2b5e      	cmp	r3, #94	@ 0x5e
 800d2cc:	bf0b      	itete	eq
 800d2ce:	784b      	ldrbeq	r3, [r1, #1]
 800d2d0:	1c4a      	addne	r2, r1, #1
 800d2d2:	1c8a      	addeq	r2, r1, #2
 800d2d4:	2100      	movne	r1, #0
 800d2d6:	bf08      	it	eq
 800d2d8:	2101      	moveq	r1, #1
 800d2da:	3801      	subs	r0, #1
 800d2dc:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 800d2e0:	f800 1f01 	strb.w	r1, [r0, #1]!
 800d2e4:	42a8      	cmp	r0, r5
 800d2e6:	d1fb      	bne.n	800d2e0 <__sccl+0x1c>
 800d2e8:	b90b      	cbnz	r3, 800d2ee <__sccl+0x2a>
 800d2ea:	1e50      	subs	r0, r2, #1
 800d2ec:	bd70      	pop	{r4, r5, r6, pc}
 800d2ee:	f081 0101 	eor.w	r1, r1, #1
 800d2f2:	54e1      	strb	r1, [r4, r3]
 800d2f4:	4610      	mov	r0, r2
 800d2f6:	4602      	mov	r2, r0
 800d2f8:	f812 5b01 	ldrb.w	r5, [r2], #1
 800d2fc:	2d2d      	cmp	r5, #45	@ 0x2d
 800d2fe:	d005      	beq.n	800d30c <__sccl+0x48>
 800d300:	2d5d      	cmp	r5, #93	@ 0x5d
 800d302:	d016      	beq.n	800d332 <__sccl+0x6e>
 800d304:	2d00      	cmp	r5, #0
 800d306:	d0f1      	beq.n	800d2ec <__sccl+0x28>
 800d308:	462b      	mov	r3, r5
 800d30a:	e7f2      	b.n	800d2f2 <__sccl+0x2e>
 800d30c:	7846      	ldrb	r6, [r0, #1]
 800d30e:	2e5d      	cmp	r6, #93	@ 0x5d
 800d310:	d0fa      	beq.n	800d308 <__sccl+0x44>
 800d312:	42b3      	cmp	r3, r6
 800d314:	dcf8      	bgt.n	800d308 <__sccl+0x44>
 800d316:	3002      	adds	r0, #2
 800d318:	461a      	mov	r2, r3
 800d31a:	3201      	adds	r2, #1
 800d31c:	4296      	cmp	r6, r2
 800d31e:	54a1      	strb	r1, [r4, r2]
 800d320:	dcfb      	bgt.n	800d31a <__sccl+0x56>
 800d322:	1af2      	subs	r2, r6, r3
 800d324:	3a01      	subs	r2, #1
 800d326:	1c5d      	adds	r5, r3, #1
 800d328:	42b3      	cmp	r3, r6
 800d32a:	bfa8      	it	ge
 800d32c:	2200      	movge	r2, #0
 800d32e:	18ab      	adds	r3, r5, r2
 800d330:	e7e1      	b.n	800d2f6 <__sccl+0x32>
 800d332:	4610      	mov	r0, r2
 800d334:	e7da      	b.n	800d2ec <__sccl+0x28>

0800d336 <__submore>:
 800d336:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d33a:	460c      	mov	r4, r1
 800d33c:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800d33e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d342:	4299      	cmp	r1, r3
 800d344:	d11d      	bne.n	800d382 <__submore+0x4c>
 800d346:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800d34a:	f7fe fa05 	bl	800b758 <_malloc_r>
 800d34e:	b918      	cbnz	r0, 800d358 <__submore+0x22>
 800d350:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d354:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d358:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d35c:	63a3      	str	r3, [r4, #56]	@ 0x38
 800d35e:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 800d362:	6360      	str	r0, [r4, #52]	@ 0x34
 800d364:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 800d368:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800d36c:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 800d370:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800d374:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 800d378:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 800d37c:	6020      	str	r0, [r4, #0]
 800d37e:	2000      	movs	r0, #0
 800d380:	e7e8      	b.n	800d354 <__submore+0x1e>
 800d382:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 800d384:	0077      	lsls	r7, r6, #1
 800d386:	463a      	mov	r2, r7
 800d388:	f7ff fa8a 	bl	800c8a0 <_realloc_r>
 800d38c:	4605      	mov	r5, r0
 800d38e:	2800      	cmp	r0, #0
 800d390:	d0de      	beq.n	800d350 <__submore+0x1a>
 800d392:	eb00 0806 	add.w	r8, r0, r6
 800d396:	4601      	mov	r1, r0
 800d398:	4632      	mov	r2, r6
 800d39a:	4640      	mov	r0, r8
 800d39c:	f7fd fa8f 	bl	800a8be <memcpy>
 800d3a0:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 800d3a4:	f8c4 8000 	str.w	r8, [r4]
 800d3a8:	e7e9      	b.n	800d37e <__submore+0x48>

0800d3aa <_raise_r>:
 800d3aa:	291f      	cmp	r1, #31
 800d3ac:	b538      	push	{r3, r4, r5, lr}
 800d3ae:	4605      	mov	r5, r0
 800d3b0:	460c      	mov	r4, r1
 800d3b2:	d904      	bls.n	800d3be <_raise_r+0x14>
 800d3b4:	2316      	movs	r3, #22
 800d3b6:	6003      	str	r3, [r0, #0]
 800d3b8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d3bc:	bd38      	pop	{r3, r4, r5, pc}
 800d3be:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800d3c0:	b112      	cbz	r2, 800d3c8 <_raise_r+0x1e>
 800d3c2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d3c6:	b94b      	cbnz	r3, 800d3dc <_raise_r+0x32>
 800d3c8:	4628      	mov	r0, r5
 800d3ca:	f000 f853 	bl	800d474 <_getpid_r>
 800d3ce:	4622      	mov	r2, r4
 800d3d0:	4601      	mov	r1, r0
 800d3d2:	4628      	mov	r0, r5
 800d3d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d3d8:	f000 b83a 	b.w	800d450 <_kill_r>
 800d3dc:	2b01      	cmp	r3, #1
 800d3de:	d00a      	beq.n	800d3f6 <_raise_r+0x4c>
 800d3e0:	1c59      	adds	r1, r3, #1
 800d3e2:	d103      	bne.n	800d3ec <_raise_r+0x42>
 800d3e4:	2316      	movs	r3, #22
 800d3e6:	6003      	str	r3, [r0, #0]
 800d3e8:	2001      	movs	r0, #1
 800d3ea:	e7e7      	b.n	800d3bc <_raise_r+0x12>
 800d3ec:	2100      	movs	r1, #0
 800d3ee:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800d3f2:	4620      	mov	r0, r4
 800d3f4:	4798      	blx	r3
 800d3f6:	2000      	movs	r0, #0
 800d3f8:	e7e0      	b.n	800d3bc <_raise_r+0x12>
	...

0800d3fc <raise>:
 800d3fc:	4b02      	ldr	r3, [pc, #8]	@ (800d408 <raise+0xc>)
 800d3fe:	4601      	mov	r1, r0
 800d400:	6818      	ldr	r0, [r3, #0]
 800d402:	f7ff bfd2 	b.w	800d3aa <_raise_r>
 800d406:	bf00      	nop
 800d408:	2000002c 	.word	0x2000002c

0800d40c <_fstat_r>:
 800d40c:	b538      	push	{r3, r4, r5, lr}
 800d40e:	4d07      	ldr	r5, [pc, #28]	@ (800d42c <_fstat_r+0x20>)
 800d410:	2300      	movs	r3, #0
 800d412:	4604      	mov	r4, r0
 800d414:	4608      	mov	r0, r1
 800d416:	4611      	mov	r1, r2
 800d418:	602b      	str	r3, [r5, #0]
 800d41a:	f7f4 f9e7 	bl	80017ec <_fstat>
 800d41e:	1c43      	adds	r3, r0, #1
 800d420:	d102      	bne.n	800d428 <_fstat_r+0x1c>
 800d422:	682b      	ldr	r3, [r5, #0]
 800d424:	b103      	cbz	r3, 800d428 <_fstat_r+0x1c>
 800d426:	6023      	str	r3, [r4, #0]
 800d428:	bd38      	pop	{r3, r4, r5, pc}
 800d42a:	bf00      	nop
 800d42c:	20005548 	.word	0x20005548

0800d430 <_isatty_r>:
 800d430:	b538      	push	{r3, r4, r5, lr}
 800d432:	4d06      	ldr	r5, [pc, #24]	@ (800d44c <_isatty_r+0x1c>)
 800d434:	2300      	movs	r3, #0
 800d436:	4604      	mov	r4, r0
 800d438:	4608      	mov	r0, r1
 800d43a:	602b      	str	r3, [r5, #0]
 800d43c:	f7f4 f9e6 	bl	800180c <_isatty>
 800d440:	1c43      	adds	r3, r0, #1
 800d442:	d102      	bne.n	800d44a <_isatty_r+0x1a>
 800d444:	682b      	ldr	r3, [r5, #0]
 800d446:	b103      	cbz	r3, 800d44a <_isatty_r+0x1a>
 800d448:	6023      	str	r3, [r4, #0]
 800d44a:	bd38      	pop	{r3, r4, r5, pc}
 800d44c:	20005548 	.word	0x20005548

0800d450 <_kill_r>:
 800d450:	b538      	push	{r3, r4, r5, lr}
 800d452:	4d07      	ldr	r5, [pc, #28]	@ (800d470 <_kill_r+0x20>)
 800d454:	2300      	movs	r3, #0
 800d456:	4604      	mov	r4, r0
 800d458:	4608      	mov	r0, r1
 800d45a:	4611      	mov	r1, r2
 800d45c:	602b      	str	r3, [r5, #0]
 800d45e:	f7f4 f981 	bl	8001764 <_kill>
 800d462:	1c43      	adds	r3, r0, #1
 800d464:	d102      	bne.n	800d46c <_kill_r+0x1c>
 800d466:	682b      	ldr	r3, [r5, #0]
 800d468:	b103      	cbz	r3, 800d46c <_kill_r+0x1c>
 800d46a:	6023      	str	r3, [r4, #0]
 800d46c:	bd38      	pop	{r3, r4, r5, pc}
 800d46e:	bf00      	nop
 800d470:	20005548 	.word	0x20005548

0800d474 <_getpid_r>:
 800d474:	f7f4 b96e 	b.w	8001754 <_getpid>

0800d478 <_malloc_usable_size_r>:
 800d478:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d47c:	1f18      	subs	r0, r3, #4
 800d47e:	2b00      	cmp	r3, #0
 800d480:	bfbc      	itt	lt
 800d482:	580b      	ldrlt	r3, [r1, r0]
 800d484:	18c0      	addlt	r0, r0, r3
 800d486:	4770      	bx	lr

0800d488 <_strtol_l.isra.0>:
 800d488:	2b24      	cmp	r3, #36	@ 0x24
 800d48a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d48e:	4686      	mov	lr, r0
 800d490:	4690      	mov	r8, r2
 800d492:	d801      	bhi.n	800d498 <_strtol_l.isra.0+0x10>
 800d494:	2b01      	cmp	r3, #1
 800d496:	d106      	bne.n	800d4a6 <_strtol_l.isra.0+0x1e>
 800d498:	f7fd f9da 	bl	800a850 <__errno>
 800d49c:	2316      	movs	r3, #22
 800d49e:	6003      	str	r3, [r0, #0]
 800d4a0:	2000      	movs	r0, #0
 800d4a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d4a6:	4834      	ldr	r0, [pc, #208]	@ (800d578 <_strtol_l.isra.0+0xf0>)
 800d4a8:	460d      	mov	r5, r1
 800d4aa:	462a      	mov	r2, r5
 800d4ac:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d4b0:	5d06      	ldrb	r6, [r0, r4]
 800d4b2:	f016 0608 	ands.w	r6, r6, #8
 800d4b6:	d1f8      	bne.n	800d4aa <_strtol_l.isra.0+0x22>
 800d4b8:	2c2d      	cmp	r4, #45	@ 0x2d
 800d4ba:	d110      	bne.n	800d4de <_strtol_l.isra.0+0x56>
 800d4bc:	782c      	ldrb	r4, [r5, #0]
 800d4be:	2601      	movs	r6, #1
 800d4c0:	1c95      	adds	r5, r2, #2
 800d4c2:	f033 0210 	bics.w	r2, r3, #16
 800d4c6:	d115      	bne.n	800d4f4 <_strtol_l.isra.0+0x6c>
 800d4c8:	2c30      	cmp	r4, #48	@ 0x30
 800d4ca:	d10d      	bne.n	800d4e8 <_strtol_l.isra.0+0x60>
 800d4cc:	782a      	ldrb	r2, [r5, #0]
 800d4ce:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800d4d2:	2a58      	cmp	r2, #88	@ 0x58
 800d4d4:	d108      	bne.n	800d4e8 <_strtol_l.isra.0+0x60>
 800d4d6:	786c      	ldrb	r4, [r5, #1]
 800d4d8:	3502      	adds	r5, #2
 800d4da:	2310      	movs	r3, #16
 800d4dc:	e00a      	b.n	800d4f4 <_strtol_l.isra.0+0x6c>
 800d4de:	2c2b      	cmp	r4, #43	@ 0x2b
 800d4e0:	bf04      	itt	eq
 800d4e2:	782c      	ldrbeq	r4, [r5, #0]
 800d4e4:	1c95      	addeq	r5, r2, #2
 800d4e6:	e7ec      	b.n	800d4c2 <_strtol_l.isra.0+0x3a>
 800d4e8:	2b00      	cmp	r3, #0
 800d4ea:	d1f6      	bne.n	800d4da <_strtol_l.isra.0+0x52>
 800d4ec:	2c30      	cmp	r4, #48	@ 0x30
 800d4ee:	bf14      	ite	ne
 800d4f0:	230a      	movne	r3, #10
 800d4f2:	2308      	moveq	r3, #8
 800d4f4:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800d4f8:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 800d4fc:	2200      	movs	r2, #0
 800d4fe:	fbbc f9f3 	udiv	r9, ip, r3
 800d502:	4610      	mov	r0, r2
 800d504:	fb03 ca19 	mls	sl, r3, r9, ip
 800d508:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800d50c:	2f09      	cmp	r7, #9
 800d50e:	d80f      	bhi.n	800d530 <_strtol_l.isra.0+0xa8>
 800d510:	463c      	mov	r4, r7
 800d512:	42a3      	cmp	r3, r4
 800d514:	dd1b      	ble.n	800d54e <_strtol_l.isra.0+0xc6>
 800d516:	1c57      	adds	r7, r2, #1
 800d518:	d007      	beq.n	800d52a <_strtol_l.isra.0+0xa2>
 800d51a:	4581      	cmp	r9, r0
 800d51c:	d314      	bcc.n	800d548 <_strtol_l.isra.0+0xc0>
 800d51e:	d101      	bne.n	800d524 <_strtol_l.isra.0+0x9c>
 800d520:	45a2      	cmp	sl, r4
 800d522:	db11      	blt.n	800d548 <_strtol_l.isra.0+0xc0>
 800d524:	fb00 4003 	mla	r0, r0, r3, r4
 800d528:	2201      	movs	r2, #1
 800d52a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d52e:	e7eb      	b.n	800d508 <_strtol_l.isra.0+0x80>
 800d530:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800d534:	2f19      	cmp	r7, #25
 800d536:	d801      	bhi.n	800d53c <_strtol_l.isra.0+0xb4>
 800d538:	3c37      	subs	r4, #55	@ 0x37
 800d53a:	e7ea      	b.n	800d512 <_strtol_l.isra.0+0x8a>
 800d53c:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800d540:	2f19      	cmp	r7, #25
 800d542:	d804      	bhi.n	800d54e <_strtol_l.isra.0+0xc6>
 800d544:	3c57      	subs	r4, #87	@ 0x57
 800d546:	e7e4      	b.n	800d512 <_strtol_l.isra.0+0x8a>
 800d548:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d54c:	e7ed      	b.n	800d52a <_strtol_l.isra.0+0xa2>
 800d54e:	1c53      	adds	r3, r2, #1
 800d550:	d108      	bne.n	800d564 <_strtol_l.isra.0+0xdc>
 800d552:	2322      	movs	r3, #34	@ 0x22
 800d554:	f8ce 3000 	str.w	r3, [lr]
 800d558:	4660      	mov	r0, ip
 800d55a:	f1b8 0f00 	cmp.w	r8, #0
 800d55e:	d0a0      	beq.n	800d4a2 <_strtol_l.isra.0+0x1a>
 800d560:	1e69      	subs	r1, r5, #1
 800d562:	e006      	b.n	800d572 <_strtol_l.isra.0+0xea>
 800d564:	b106      	cbz	r6, 800d568 <_strtol_l.isra.0+0xe0>
 800d566:	4240      	negs	r0, r0
 800d568:	f1b8 0f00 	cmp.w	r8, #0
 800d56c:	d099      	beq.n	800d4a2 <_strtol_l.isra.0+0x1a>
 800d56e:	2a00      	cmp	r2, #0
 800d570:	d1f6      	bne.n	800d560 <_strtol_l.isra.0+0xd8>
 800d572:	f8c8 1000 	str.w	r1, [r8]
 800d576:	e794      	b.n	800d4a2 <_strtol_l.isra.0+0x1a>
 800d578:	0800dd31 	.word	0x0800dd31

0800d57c <_strtol_r>:
 800d57c:	f7ff bf84 	b.w	800d488 <_strtol_l.isra.0>

0800d580 <_init>:
 800d580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d582:	bf00      	nop
 800d584:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d586:	bc08      	pop	{r3}
 800d588:	469e      	mov	lr, r3
 800d58a:	4770      	bx	lr

0800d58c <_fini>:
 800d58c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d58e:	bf00      	nop
 800d590:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d592:	bc08      	pop	{r3}
 800d594:	469e      	mov	lr, r3
 800d596:	4770      	bx	lr
