
GPS_Simulator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b2e0  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000053c  0800b4b0  0800b4b0  0000c4b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b9ec  0800b9ec  0000d1d8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800b9ec  0800b9ec  0000c9ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b9f4  0800b9f4  0000d1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b9f4  0800b9f4  0000c9f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b9f8  0800b9f8  0000c9f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  0800b9fc  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000052f0  200001d8  0800bbd4  0000d1d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200054c8  0800bbd4  0000d4c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d1d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f17c  00000000  00000000  0000d208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000040e9  00000000  00000000  0002c384  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001910  00000000  00000000  00030470  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001391  00000000  00000000  00031d80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00005229  00000000  00000000  00033111  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e597  00000000  00000000  0003833a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ffbf7  00000000  00000000  000568d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001564c8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000079c0  00000000  00000000  0015650c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000085  00000000  00000000  0015decc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001d8 	.word	0x200001d8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800b498 	.word	0x0800b498

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001dc 	.word	0x200001dc
 800020c:	0800b498 	.word	0x0800b498

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000bfc:	f000 b988 	b.w	8000f10 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	468e      	mov	lr, r1
 8000c20:	4604      	mov	r4, r0
 8000c22:	4688      	mov	r8, r1
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d14a      	bne.n	8000cbe <__udivmoddi4+0xa6>
 8000c28:	428a      	cmp	r2, r1
 8000c2a:	4617      	mov	r7, r2
 8000c2c:	d962      	bls.n	8000cf4 <__udivmoddi4+0xdc>
 8000c2e:	fab2 f682 	clz	r6, r2
 8000c32:	b14e      	cbz	r6, 8000c48 <__udivmoddi4+0x30>
 8000c34:	f1c6 0320 	rsb	r3, r6, #32
 8000c38:	fa01 f806 	lsl.w	r8, r1, r6
 8000c3c:	fa20 f303 	lsr.w	r3, r0, r3
 8000c40:	40b7      	lsls	r7, r6
 8000c42:	ea43 0808 	orr.w	r8, r3, r8
 8000c46:	40b4      	lsls	r4, r6
 8000c48:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c4c:	fa1f fc87 	uxth.w	ip, r7
 8000c50:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c54:	0c23      	lsrs	r3, r4, #16
 8000c56:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c5a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c5e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c62:	429a      	cmp	r2, r3
 8000c64:	d909      	bls.n	8000c7a <__udivmoddi4+0x62>
 8000c66:	18fb      	adds	r3, r7, r3
 8000c68:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000c6c:	f080 80ea 	bcs.w	8000e44 <__udivmoddi4+0x22c>
 8000c70:	429a      	cmp	r2, r3
 8000c72:	f240 80e7 	bls.w	8000e44 <__udivmoddi4+0x22c>
 8000c76:	3902      	subs	r1, #2
 8000c78:	443b      	add	r3, r7
 8000c7a:	1a9a      	subs	r2, r3, r2
 8000c7c:	b2a3      	uxth	r3, r4
 8000c7e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c82:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c86:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c8a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c8e:	459c      	cmp	ip, r3
 8000c90:	d909      	bls.n	8000ca6 <__udivmoddi4+0x8e>
 8000c92:	18fb      	adds	r3, r7, r3
 8000c94:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000c98:	f080 80d6 	bcs.w	8000e48 <__udivmoddi4+0x230>
 8000c9c:	459c      	cmp	ip, r3
 8000c9e:	f240 80d3 	bls.w	8000e48 <__udivmoddi4+0x230>
 8000ca2:	443b      	add	r3, r7
 8000ca4:	3802      	subs	r0, #2
 8000ca6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000caa:	eba3 030c 	sub.w	r3, r3, ip
 8000cae:	2100      	movs	r1, #0
 8000cb0:	b11d      	cbz	r5, 8000cba <__udivmoddi4+0xa2>
 8000cb2:	40f3      	lsrs	r3, r6
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	e9c5 3200 	strd	r3, r2, [r5]
 8000cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbe:	428b      	cmp	r3, r1
 8000cc0:	d905      	bls.n	8000cce <__udivmoddi4+0xb6>
 8000cc2:	b10d      	cbz	r5, 8000cc8 <__udivmoddi4+0xb0>
 8000cc4:	e9c5 0100 	strd	r0, r1, [r5]
 8000cc8:	2100      	movs	r1, #0
 8000cca:	4608      	mov	r0, r1
 8000ccc:	e7f5      	b.n	8000cba <__udivmoddi4+0xa2>
 8000cce:	fab3 f183 	clz	r1, r3
 8000cd2:	2900      	cmp	r1, #0
 8000cd4:	d146      	bne.n	8000d64 <__udivmoddi4+0x14c>
 8000cd6:	4573      	cmp	r3, lr
 8000cd8:	d302      	bcc.n	8000ce0 <__udivmoddi4+0xc8>
 8000cda:	4282      	cmp	r2, r0
 8000cdc:	f200 8105 	bhi.w	8000eea <__udivmoddi4+0x2d2>
 8000ce0:	1a84      	subs	r4, r0, r2
 8000ce2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000ce6:	2001      	movs	r0, #1
 8000ce8:	4690      	mov	r8, r2
 8000cea:	2d00      	cmp	r5, #0
 8000cec:	d0e5      	beq.n	8000cba <__udivmoddi4+0xa2>
 8000cee:	e9c5 4800 	strd	r4, r8, [r5]
 8000cf2:	e7e2      	b.n	8000cba <__udivmoddi4+0xa2>
 8000cf4:	2a00      	cmp	r2, #0
 8000cf6:	f000 8090 	beq.w	8000e1a <__udivmoddi4+0x202>
 8000cfa:	fab2 f682 	clz	r6, r2
 8000cfe:	2e00      	cmp	r6, #0
 8000d00:	f040 80a4 	bne.w	8000e4c <__udivmoddi4+0x234>
 8000d04:	1a8a      	subs	r2, r1, r2
 8000d06:	0c03      	lsrs	r3, r0, #16
 8000d08:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d0c:	b280      	uxth	r0, r0
 8000d0e:	b2bc      	uxth	r4, r7
 8000d10:	2101      	movs	r1, #1
 8000d12:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d16:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d1a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d1e:	fb04 f20c 	mul.w	r2, r4, ip
 8000d22:	429a      	cmp	r2, r3
 8000d24:	d907      	bls.n	8000d36 <__udivmoddi4+0x11e>
 8000d26:	18fb      	adds	r3, r7, r3
 8000d28:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000d2c:	d202      	bcs.n	8000d34 <__udivmoddi4+0x11c>
 8000d2e:	429a      	cmp	r2, r3
 8000d30:	f200 80e0 	bhi.w	8000ef4 <__udivmoddi4+0x2dc>
 8000d34:	46c4      	mov	ip, r8
 8000d36:	1a9b      	subs	r3, r3, r2
 8000d38:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d3c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d40:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d44:	fb02 f404 	mul.w	r4, r2, r4
 8000d48:	429c      	cmp	r4, r3
 8000d4a:	d907      	bls.n	8000d5c <__udivmoddi4+0x144>
 8000d4c:	18fb      	adds	r3, r7, r3
 8000d4e:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000d52:	d202      	bcs.n	8000d5a <__udivmoddi4+0x142>
 8000d54:	429c      	cmp	r4, r3
 8000d56:	f200 80ca 	bhi.w	8000eee <__udivmoddi4+0x2d6>
 8000d5a:	4602      	mov	r2, r0
 8000d5c:	1b1b      	subs	r3, r3, r4
 8000d5e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d62:	e7a5      	b.n	8000cb0 <__udivmoddi4+0x98>
 8000d64:	f1c1 0620 	rsb	r6, r1, #32
 8000d68:	408b      	lsls	r3, r1
 8000d6a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d6e:	431f      	orrs	r7, r3
 8000d70:	fa0e f401 	lsl.w	r4, lr, r1
 8000d74:	fa20 f306 	lsr.w	r3, r0, r6
 8000d78:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d7c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d80:	4323      	orrs	r3, r4
 8000d82:	fa00 f801 	lsl.w	r8, r0, r1
 8000d86:	fa1f fc87 	uxth.w	ip, r7
 8000d8a:	fbbe f0f9 	udiv	r0, lr, r9
 8000d8e:	0c1c      	lsrs	r4, r3, #16
 8000d90:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d94:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d98:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d9c:	45a6      	cmp	lr, r4
 8000d9e:	fa02 f201 	lsl.w	r2, r2, r1
 8000da2:	d909      	bls.n	8000db8 <__udivmoddi4+0x1a0>
 8000da4:	193c      	adds	r4, r7, r4
 8000da6:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000daa:	f080 809c 	bcs.w	8000ee6 <__udivmoddi4+0x2ce>
 8000dae:	45a6      	cmp	lr, r4
 8000db0:	f240 8099 	bls.w	8000ee6 <__udivmoddi4+0x2ce>
 8000db4:	3802      	subs	r0, #2
 8000db6:	443c      	add	r4, r7
 8000db8:	eba4 040e 	sub.w	r4, r4, lr
 8000dbc:	fa1f fe83 	uxth.w	lr, r3
 8000dc0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000dc4:	fb09 4413 	mls	r4, r9, r3, r4
 8000dc8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000dcc:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dd0:	45a4      	cmp	ip, r4
 8000dd2:	d908      	bls.n	8000de6 <__udivmoddi4+0x1ce>
 8000dd4:	193c      	adds	r4, r7, r4
 8000dd6:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000dda:	f080 8082 	bcs.w	8000ee2 <__udivmoddi4+0x2ca>
 8000dde:	45a4      	cmp	ip, r4
 8000de0:	d97f      	bls.n	8000ee2 <__udivmoddi4+0x2ca>
 8000de2:	3b02      	subs	r3, #2
 8000de4:	443c      	add	r4, r7
 8000de6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000dea:	eba4 040c 	sub.w	r4, r4, ip
 8000dee:	fba0 ec02 	umull	lr, ip, r0, r2
 8000df2:	4564      	cmp	r4, ip
 8000df4:	4673      	mov	r3, lr
 8000df6:	46e1      	mov	r9, ip
 8000df8:	d362      	bcc.n	8000ec0 <__udivmoddi4+0x2a8>
 8000dfa:	d05f      	beq.n	8000ebc <__udivmoddi4+0x2a4>
 8000dfc:	b15d      	cbz	r5, 8000e16 <__udivmoddi4+0x1fe>
 8000dfe:	ebb8 0203 	subs.w	r2, r8, r3
 8000e02:	eb64 0409 	sbc.w	r4, r4, r9
 8000e06:	fa04 f606 	lsl.w	r6, r4, r6
 8000e0a:	fa22 f301 	lsr.w	r3, r2, r1
 8000e0e:	431e      	orrs	r6, r3
 8000e10:	40cc      	lsrs	r4, r1
 8000e12:	e9c5 6400 	strd	r6, r4, [r5]
 8000e16:	2100      	movs	r1, #0
 8000e18:	e74f      	b.n	8000cba <__udivmoddi4+0xa2>
 8000e1a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e1e:	0c01      	lsrs	r1, r0, #16
 8000e20:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e24:	b280      	uxth	r0, r0
 8000e26:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e2a:	463b      	mov	r3, r7
 8000e2c:	4638      	mov	r0, r7
 8000e2e:	463c      	mov	r4, r7
 8000e30:	46b8      	mov	r8, r7
 8000e32:	46be      	mov	lr, r7
 8000e34:	2620      	movs	r6, #32
 8000e36:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e3a:	eba2 0208 	sub.w	r2, r2, r8
 8000e3e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e42:	e766      	b.n	8000d12 <__udivmoddi4+0xfa>
 8000e44:	4601      	mov	r1, r0
 8000e46:	e718      	b.n	8000c7a <__udivmoddi4+0x62>
 8000e48:	4610      	mov	r0, r2
 8000e4a:	e72c      	b.n	8000ca6 <__udivmoddi4+0x8e>
 8000e4c:	f1c6 0220 	rsb	r2, r6, #32
 8000e50:	fa2e f302 	lsr.w	r3, lr, r2
 8000e54:	40b7      	lsls	r7, r6
 8000e56:	40b1      	lsls	r1, r6
 8000e58:	fa20 f202 	lsr.w	r2, r0, r2
 8000e5c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e60:	430a      	orrs	r2, r1
 8000e62:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e66:	b2bc      	uxth	r4, r7
 8000e68:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e6c:	0c11      	lsrs	r1, r2, #16
 8000e6e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e72:	fb08 f904 	mul.w	r9, r8, r4
 8000e76:	40b0      	lsls	r0, r6
 8000e78:	4589      	cmp	r9, r1
 8000e7a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e7e:	b280      	uxth	r0, r0
 8000e80:	d93e      	bls.n	8000f00 <__udivmoddi4+0x2e8>
 8000e82:	1879      	adds	r1, r7, r1
 8000e84:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000e88:	d201      	bcs.n	8000e8e <__udivmoddi4+0x276>
 8000e8a:	4589      	cmp	r9, r1
 8000e8c:	d81f      	bhi.n	8000ece <__udivmoddi4+0x2b6>
 8000e8e:	eba1 0109 	sub.w	r1, r1, r9
 8000e92:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e96:	fb09 f804 	mul.w	r8, r9, r4
 8000e9a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e9e:	b292      	uxth	r2, r2
 8000ea0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ea4:	4542      	cmp	r2, r8
 8000ea6:	d229      	bcs.n	8000efc <__udivmoddi4+0x2e4>
 8000ea8:	18ba      	adds	r2, r7, r2
 8000eaa:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000eae:	d2c4      	bcs.n	8000e3a <__udivmoddi4+0x222>
 8000eb0:	4542      	cmp	r2, r8
 8000eb2:	d2c2      	bcs.n	8000e3a <__udivmoddi4+0x222>
 8000eb4:	f1a9 0102 	sub.w	r1, r9, #2
 8000eb8:	443a      	add	r2, r7
 8000eba:	e7be      	b.n	8000e3a <__udivmoddi4+0x222>
 8000ebc:	45f0      	cmp	r8, lr
 8000ebe:	d29d      	bcs.n	8000dfc <__udivmoddi4+0x1e4>
 8000ec0:	ebbe 0302 	subs.w	r3, lr, r2
 8000ec4:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000ec8:	3801      	subs	r0, #1
 8000eca:	46e1      	mov	r9, ip
 8000ecc:	e796      	b.n	8000dfc <__udivmoddi4+0x1e4>
 8000ece:	eba7 0909 	sub.w	r9, r7, r9
 8000ed2:	4449      	add	r1, r9
 8000ed4:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ed8:	fbb1 f9fe 	udiv	r9, r1, lr
 8000edc:	fb09 f804 	mul.w	r8, r9, r4
 8000ee0:	e7db      	b.n	8000e9a <__udivmoddi4+0x282>
 8000ee2:	4673      	mov	r3, lr
 8000ee4:	e77f      	b.n	8000de6 <__udivmoddi4+0x1ce>
 8000ee6:	4650      	mov	r0, sl
 8000ee8:	e766      	b.n	8000db8 <__udivmoddi4+0x1a0>
 8000eea:	4608      	mov	r0, r1
 8000eec:	e6fd      	b.n	8000cea <__udivmoddi4+0xd2>
 8000eee:	443b      	add	r3, r7
 8000ef0:	3a02      	subs	r2, #2
 8000ef2:	e733      	b.n	8000d5c <__udivmoddi4+0x144>
 8000ef4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ef8:	443b      	add	r3, r7
 8000efa:	e71c      	b.n	8000d36 <__udivmoddi4+0x11e>
 8000efc:	4649      	mov	r1, r9
 8000efe:	e79c      	b.n	8000e3a <__udivmoddi4+0x222>
 8000f00:	eba1 0109 	sub.w	r1, r1, r9
 8000f04:	46c4      	mov	ip, r8
 8000f06:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f0a:	fb09 f804 	mul.w	r8, r9, r4
 8000f0e:	e7c4      	b.n	8000e9a <__udivmoddi4+0x282>

08000f10 <__aeabi_idiv0>:
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop

08000f14 <_write>:
int __io_putchar(int ch) {
	HAL_UART_Transmit(&huart3, (uint8_t*) &ch, 1, 0xFFFF);
	return ch;
}

int _write(int file, char *ptr, int len) {
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b086      	sub	sp, #24
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	60f8      	str	r0, [r7, #12]
 8000f1c:	60b9      	str	r1, [r7, #8]
 8000f1e:	607a      	str	r2, [r7, #4]
	char *cr = "\r";
 8000f20:	4b0b      	ldr	r3, [pc, #44]	@ (8000f50 <_write+0x3c>)
 8000f22:	617b      	str	r3, [r7, #20]
	HAL_UART_Transmit(&huart3, (uint8_t*) ptr, len, 0xFFFF);
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	b29a      	uxth	r2, r3
 8000f28:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000f2c:	68b9      	ldr	r1, [r7, #8]
 8000f2e:	4809      	ldr	r0, [pc, #36]	@ (8000f54 <_write+0x40>)
 8000f30:	f003 fe78 	bl	8004c24 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart3, (uint8_t*) cr, 1, 0xFFFF);
 8000f34:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000f38:	2201      	movs	r2, #1
 8000f3a:	6979      	ldr	r1, [r7, #20]
 8000f3c:	4805      	ldr	r0, [pc, #20]	@ (8000f54 <_write+0x40>)
 8000f3e:	f003 fe71 	bl	8004c24 <HAL_UART_Transmit>
	return len + 1;
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	3301      	adds	r3, #1
}
 8000f46:	4618      	mov	r0, r3
 8000f48:	3718      	adds	r7, #24
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	0800b4e0 	.word	0x0800b4e0
 8000f54:	20000294 	.word	0x20000294

08000f58 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f5c:	f000 fc7f 	bl	800185e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f60:	f000 f84a 	bl	8000ff8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f64:	f000 f95c 	bl	8001220 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000f68:	f000 f8b2 	bl	80010d0 <MX_I2C1_Init>
  MX_USART3_UART_Init();
 8000f6c:	f000 f928 	bl	80011c0 <MX_USART3_UART_Init>
  MX_TIM7_Init();
 8000f70:	f000 f8ee 	bl	8001150 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim7);
 8000f74:	4814      	ldr	r0, [pc, #80]	@ (8000fc8 <main+0x70>)
 8000f76:	f003 fb0d 	bl	8004594 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000f7a:	f004 fccd 	bl	8005918 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of gpsMsgQueue */
  gpsMsgQueueHandle = osMessageQueueNew (16, sizeof(gps_msg_t), &gpsMsgQueue_attributes);
 8000f7e:	4a13      	ldr	r2, [pc, #76]	@ (8000fcc <main+0x74>)
 8000f80:	2111      	movs	r1, #17
 8000f82:	2010      	movs	r0, #16
 8000f84:	f004 fe06 	bl	8005b94 <osMessageQueueNew>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	4a11      	ldr	r2, [pc, #68]	@ (8000fd0 <main+0x78>)
 8000f8c:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000f8e:	4a11      	ldr	r2, [pc, #68]	@ (8000fd4 <main+0x7c>)
 8000f90:	2100      	movs	r1, #0
 8000f92:	4811      	ldr	r0, [pc, #68]	@ (8000fd8 <main+0x80>)
 8000f94:	f004 fd2a 	bl	80059ec <osThreadNew>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	4a10      	ldr	r2, [pc, #64]	@ (8000fdc <main+0x84>)
 8000f9c:	6013      	str	r3, [r2, #0]

  /* creation of GPSTask */
  GPSTaskHandle = osThreadNew(StartGPSTask, NULL, &GPSTask_attributes);
 8000f9e:	4a10      	ldr	r2, [pc, #64]	@ (8000fe0 <main+0x88>)
 8000fa0:	2100      	movs	r1, #0
 8000fa2:	4810      	ldr	r0, [pc, #64]	@ (8000fe4 <main+0x8c>)
 8000fa4:	f004 fd22 	bl	80059ec <osThreadNew>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	4a0f      	ldr	r2, [pc, #60]	@ (8000fe8 <main+0x90>)
 8000fac:	6013      	str	r3, [r2, #0]

  /* creation of I2CSenderTask */
  I2CSenderTaskHandle = osThreadNew(StartI2CSenderTask, NULL, &I2CSenderTask_attributes);
 8000fae:	4a0f      	ldr	r2, [pc, #60]	@ (8000fec <main+0x94>)
 8000fb0:	2100      	movs	r1, #0
 8000fb2:	480f      	ldr	r0, [pc, #60]	@ (8000ff0 <main+0x98>)
 8000fb4:	f004 fd1a 	bl	80059ec <osThreadNew>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	4a0e      	ldr	r2, [pc, #56]	@ (8000ff4 <main+0x9c>)
 8000fbc:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000fbe:	f004 fcdf 	bl	8005980 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000fc2:	bf00      	nop
 8000fc4:	e7fd      	b.n	8000fc2 <main+0x6a>
 8000fc6:	bf00      	nop
 8000fc8:	20000248 	.word	0x20000248
 8000fcc:	0800b5ec 	.word	0x0800b5ec
 8000fd0:	20000328 	.word	0x20000328
 8000fd4:	0800b580 	.word	0x0800b580
 8000fd8:	08001281 	.word	0x08001281
 8000fdc:	2000031c 	.word	0x2000031c
 8000fe0:	0800b5a4 	.word	0x0800b5a4
 8000fe4:	08005595 	.word	0x08005595
 8000fe8:	20000320 	.word	0x20000320
 8000fec:	0800b5c8 	.word	0x0800b5c8
 8000ff0:	08005849 	.word	0x08005849
 8000ff4:	20000324 	.word	0x20000324

08000ff8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b094      	sub	sp, #80	@ 0x50
 8000ffc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ffe:	f107 0320 	add.w	r3, r7, #32
 8001002:	2230      	movs	r2, #48	@ 0x30
 8001004:	2100      	movs	r1, #0
 8001006:	4618      	mov	r0, r3
 8001008:	f008 fac1 	bl	800958e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800100c:	f107 030c 	add.w	r3, r7, #12
 8001010:	2200      	movs	r2, #0
 8001012:	601a      	str	r2, [r3, #0]
 8001014:	605a      	str	r2, [r3, #4]
 8001016:	609a      	str	r2, [r3, #8]
 8001018:	60da      	str	r2, [r3, #12]
 800101a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800101c:	4b2a      	ldr	r3, [pc, #168]	@ (80010c8 <SystemClock_Config+0xd0>)
 800101e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001020:	4a29      	ldr	r2, [pc, #164]	@ (80010c8 <SystemClock_Config+0xd0>)
 8001022:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001026:	6413      	str	r3, [r2, #64]	@ 0x40
 8001028:	4b27      	ldr	r3, [pc, #156]	@ (80010c8 <SystemClock_Config+0xd0>)
 800102a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800102c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001030:	60bb      	str	r3, [r7, #8]
 8001032:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001034:	4b25      	ldr	r3, [pc, #148]	@ (80010cc <SystemClock_Config+0xd4>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	4a24      	ldr	r2, [pc, #144]	@ (80010cc <SystemClock_Config+0xd4>)
 800103a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800103e:	6013      	str	r3, [r2, #0]
 8001040:	4b22      	ldr	r3, [pc, #136]	@ (80010cc <SystemClock_Config+0xd4>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001048:	607b      	str	r3, [r7, #4]
 800104a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800104c:	2302      	movs	r3, #2
 800104e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001050:	2301      	movs	r3, #1
 8001052:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001054:	2310      	movs	r3, #16
 8001056:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001058:	2302      	movs	r3, #2
 800105a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800105c:	2300      	movs	r3, #0
 800105e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001060:	2308      	movs	r3, #8
 8001062:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 8001064:	23d8      	movs	r3, #216	@ 0xd8
 8001066:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001068:	2302      	movs	r3, #2
 800106a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800106c:	2302      	movs	r3, #2
 800106e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001070:	f107 0320 	add.w	r3, r7, #32
 8001074:	4618      	mov	r0, r3
 8001076:	f002 f989 	bl	800338c <HAL_RCC_OscConfig>
 800107a:	4603      	mov	r3, r0
 800107c:	2b00      	cmp	r3, #0
 800107e:	d001      	beq.n	8001084 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8001080:	f000 f926 	bl	80012d0 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001084:	f002 f932 	bl	80032ec <HAL_PWREx_EnableOverDrive>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d001      	beq.n	8001092 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800108e:	f000 f91f 	bl	80012d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001092:	230f      	movs	r3, #15
 8001094:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001096:	2302      	movs	r3, #2
 8001098:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800109a:	2300      	movs	r3, #0
 800109c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800109e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80010a2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80010a4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80010a8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80010aa:	f107 030c 	add.w	r3, r7, #12
 80010ae:	2107      	movs	r1, #7
 80010b0:	4618      	mov	r0, r3
 80010b2:	f002 fc0f 	bl	80038d4 <HAL_RCC_ClockConfig>
 80010b6:	4603      	mov	r3, r0
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d001      	beq.n	80010c0 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 80010bc:	f000 f908 	bl	80012d0 <Error_Handler>
  }
}
 80010c0:	bf00      	nop
 80010c2:	3750      	adds	r7, #80	@ 0x50
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	40023800 	.word	0x40023800
 80010cc:	40007000 	.word	0x40007000

080010d0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80010d4:	4b1b      	ldr	r3, [pc, #108]	@ (8001144 <MX_I2C1_Init+0x74>)
 80010d6:	4a1c      	ldr	r2, [pc, #112]	@ (8001148 <MX_I2C1_Init+0x78>)
 80010d8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20404768;
 80010da:	4b1a      	ldr	r3, [pc, #104]	@ (8001144 <MX_I2C1_Init+0x74>)
 80010dc:	4a1b      	ldr	r2, [pc, #108]	@ (800114c <MX_I2C1_Init+0x7c>)
 80010de:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 32;
 80010e0:	4b18      	ldr	r3, [pc, #96]	@ (8001144 <MX_I2C1_Init+0x74>)
 80010e2:	2220      	movs	r2, #32
 80010e4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010e6:	4b17      	ldr	r3, [pc, #92]	@ (8001144 <MX_I2C1_Init+0x74>)
 80010e8:	2201      	movs	r2, #1
 80010ea:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010ec:	4b15      	ldr	r3, [pc, #84]	@ (8001144 <MX_I2C1_Init+0x74>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80010f2:	4b14      	ldr	r3, [pc, #80]	@ (8001144 <MX_I2C1_Init+0x74>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80010f8:	4b12      	ldr	r3, [pc, #72]	@ (8001144 <MX_I2C1_Init+0x74>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010fe:	4b11      	ldr	r3, [pc, #68]	@ (8001144 <MX_I2C1_Init+0x74>)
 8001100:	2200      	movs	r2, #0
 8001102:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001104:	4b0f      	ldr	r3, [pc, #60]	@ (8001144 <MX_I2C1_Init+0x74>)
 8001106:	2200      	movs	r2, #0
 8001108:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800110a:	480e      	ldr	r0, [pc, #56]	@ (8001144 <MX_I2C1_Init+0x74>)
 800110c:	f000 fe92 	bl	8001e34 <HAL_I2C_Init>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	d001      	beq.n	800111a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001116:	f000 f8db 	bl	80012d0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800111a:	2100      	movs	r1, #0
 800111c:	4809      	ldr	r0, [pc, #36]	@ (8001144 <MX_I2C1_Init+0x74>)
 800111e:	f002 f84d 	bl	80031bc <HAL_I2CEx_ConfigAnalogFilter>
 8001122:	4603      	mov	r3, r0
 8001124:	2b00      	cmp	r3, #0
 8001126:	d001      	beq.n	800112c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001128:	f000 f8d2 	bl	80012d0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800112c:	2100      	movs	r1, #0
 800112e:	4805      	ldr	r0, [pc, #20]	@ (8001144 <MX_I2C1_Init+0x74>)
 8001130:	f002 f88f 	bl	8003252 <HAL_I2CEx_ConfigDigitalFilter>
 8001134:	4603      	mov	r3, r0
 8001136:	2b00      	cmp	r3, #0
 8001138:	d001      	beq.n	800113e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800113a:	f000 f8c9 	bl	80012d0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800113e:	bf00      	nop
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	200001f4 	.word	0x200001f4
 8001148:	40005400 	.word	0x40005400
 800114c:	20404768 	.word	0x20404768

08001150 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b084      	sub	sp, #16
 8001154:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001156:	1d3b      	adds	r3, r7, #4
 8001158:	2200      	movs	r2, #0
 800115a:	601a      	str	r2, [r3, #0]
 800115c:	605a      	str	r2, [r3, #4]
 800115e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001160:	4b15      	ldr	r3, [pc, #84]	@ (80011b8 <MX_TIM7_Init+0x68>)
 8001162:	4a16      	ldr	r2, [pc, #88]	@ (80011bc <MX_TIM7_Init+0x6c>)
 8001164:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 10800-1;
 8001166:	4b14      	ldr	r3, [pc, #80]	@ (80011b8 <MX_TIM7_Init+0x68>)
 8001168:	f642 222f 	movw	r2, #10799	@ 0x2a2f
 800116c:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800116e:	4b12      	ldr	r3, [pc, #72]	@ (80011b8 <MX_TIM7_Init+0x68>)
 8001170:	2200      	movs	r2, #0
 8001172:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 10000-1;
 8001174:	4b10      	ldr	r3, [pc, #64]	@ (80011b8 <MX_TIM7_Init+0x68>)
 8001176:	f242 720f 	movw	r2, #9999	@ 0x270f
 800117a:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800117c:	4b0e      	ldr	r3, [pc, #56]	@ (80011b8 <MX_TIM7_Init+0x68>)
 800117e:	2200      	movs	r2, #0
 8001180:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001182:	480d      	ldr	r0, [pc, #52]	@ (80011b8 <MX_TIM7_Init+0x68>)
 8001184:	f003 f9ae 	bl	80044e4 <HAL_TIM_Base_Init>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	d001      	beq.n	8001192 <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 800118e:	f000 f89f 	bl	80012d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001192:	2320      	movs	r3, #32
 8001194:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001196:	2300      	movs	r3, #0
 8001198:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800119a:	1d3b      	adds	r3, r7, #4
 800119c:	4619      	mov	r1, r3
 800119e:	4806      	ldr	r0, [pc, #24]	@ (80011b8 <MX_TIM7_Init+0x68>)
 80011a0:	f003 fc46 	bl	8004a30 <HAL_TIMEx_MasterConfigSynchronization>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d001      	beq.n	80011ae <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 80011aa:	f000 f891 	bl	80012d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80011ae:	bf00      	nop
 80011b0:	3710      	adds	r7, #16
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	20000248 	.word	0x20000248
 80011bc:	40001400 	.word	0x40001400

080011c0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80011c4:	4b14      	ldr	r3, [pc, #80]	@ (8001218 <MX_USART3_UART_Init+0x58>)
 80011c6:	4a15      	ldr	r2, [pc, #84]	@ (800121c <MX_USART3_UART_Init+0x5c>)
 80011c8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80011ca:	4b13      	ldr	r3, [pc, #76]	@ (8001218 <MX_USART3_UART_Init+0x58>)
 80011cc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80011d0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80011d2:	4b11      	ldr	r3, [pc, #68]	@ (8001218 <MX_USART3_UART_Init+0x58>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80011d8:	4b0f      	ldr	r3, [pc, #60]	@ (8001218 <MX_USART3_UART_Init+0x58>)
 80011da:	2200      	movs	r2, #0
 80011dc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80011de:	4b0e      	ldr	r3, [pc, #56]	@ (8001218 <MX_USART3_UART_Init+0x58>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80011e4:	4b0c      	ldr	r3, [pc, #48]	@ (8001218 <MX_USART3_UART_Init+0x58>)
 80011e6:	220c      	movs	r2, #12
 80011e8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011ea:	4b0b      	ldr	r3, [pc, #44]	@ (8001218 <MX_USART3_UART_Init+0x58>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80011f0:	4b09      	ldr	r3, [pc, #36]	@ (8001218 <MX_USART3_UART_Init+0x58>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80011f6:	4b08      	ldr	r3, [pc, #32]	@ (8001218 <MX_USART3_UART_Init+0x58>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80011fc:	4b06      	ldr	r3, [pc, #24]	@ (8001218 <MX_USART3_UART_Init+0x58>)
 80011fe:	2200      	movs	r2, #0
 8001200:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001202:	4805      	ldr	r0, [pc, #20]	@ (8001218 <MX_USART3_UART_Init+0x58>)
 8001204:	f003 fcc0 	bl	8004b88 <HAL_UART_Init>
 8001208:	4603      	mov	r3, r0
 800120a:	2b00      	cmp	r3, #0
 800120c:	d001      	beq.n	8001212 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800120e:	f000 f85f 	bl	80012d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001212:	bf00      	nop
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	20000294 	.word	0x20000294
 800121c:	40004800 	.word	0x40004800

08001220 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001220:	b480      	push	{r7}
 8001222:	b085      	sub	sp, #20
 8001224:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001226:	4b15      	ldr	r3, [pc, #84]	@ (800127c <MX_GPIO_Init+0x5c>)
 8001228:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800122a:	4a14      	ldr	r2, [pc, #80]	@ (800127c <MX_GPIO_Init+0x5c>)
 800122c:	f043 0308 	orr.w	r3, r3, #8
 8001230:	6313      	str	r3, [r2, #48]	@ 0x30
 8001232:	4b12      	ldr	r3, [pc, #72]	@ (800127c <MX_GPIO_Init+0x5c>)
 8001234:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001236:	f003 0308 	and.w	r3, r3, #8
 800123a:	60fb      	str	r3, [r7, #12]
 800123c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800123e:	4b0f      	ldr	r3, [pc, #60]	@ (800127c <MX_GPIO_Init+0x5c>)
 8001240:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001242:	4a0e      	ldr	r2, [pc, #56]	@ (800127c <MX_GPIO_Init+0x5c>)
 8001244:	f043 0301 	orr.w	r3, r3, #1
 8001248:	6313      	str	r3, [r2, #48]	@ 0x30
 800124a:	4b0c      	ldr	r3, [pc, #48]	@ (800127c <MX_GPIO_Init+0x5c>)
 800124c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800124e:	f003 0301 	and.w	r3, r3, #1
 8001252:	60bb      	str	r3, [r7, #8]
 8001254:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001256:	4b09      	ldr	r3, [pc, #36]	@ (800127c <MX_GPIO_Init+0x5c>)
 8001258:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800125a:	4a08      	ldr	r2, [pc, #32]	@ (800127c <MX_GPIO_Init+0x5c>)
 800125c:	f043 0302 	orr.w	r3, r3, #2
 8001260:	6313      	str	r3, [r2, #48]	@ 0x30
 8001262:	4b06      	ldr	r3, [pc, #24]	@ (800127c <MX_GPIO_Init+0x5c>)
 8001264:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001266:	f003 0302 	and.w	r3, r3, #2
 800126a:	607b      	str	r3, [r7, #4]
 800126c:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800126e:	bf00      	nop
 8001270:	3714      	adds	r7, #20
 8001272:	46bd      	mov	sp, r7
 8001274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001278:	4770      	bx	lr
 800127a:	bf00      	nop
 800127c:	40023800 	.word	0x40023800

08001280 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b082      	sub	sp, #8
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001288:	2001      	movs	r0, #1
 800128a:	f004 fc55 	bl	8005b38 <osDelay>
 800128e:	e7fb      	b.n	8001288 <StartDefaultTask+0x8>

08001290 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b082      	sub	sp, #8
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	4a09      	ldr	r2, [pc, #36]	@ (80012c4 <HAL_TIM_PeriodElapsedCallback+0x34>)
 800129e:	4293      	cmp	r3, r2
 80012a0:	d101      	bne.n	80012a6 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 80012a2:	f000 fae9 	bl	8001878 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  if (htim->Instance == TIM7)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	4a07      	ldr	r2, [pc, #28]	@ (80012c8 <HAL_TIM_PeriodElapsedCallback+0x38>)
 80012ac:	4293      	cmp	r3, r2
 80012ae:	d104      	bne.n	80012ba <HAL_TIM_PeriodElapsedCallback+0x2a>
  {
    utc_seconds++;
 80012b0:	4b06      	ldr	r3, [pc, #24]	@ (80012cc <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	3301      	adds	r3, #1
 80012b6:	4a05      	ldr	r2, [pc, #20]	@ (80012cc <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80012b8:	6013      	str	r3, [r2, #0]
  }
  /* USER CODE END Callback 1 */
}
 80012ba:	bf00      	nop
 80012bc:	3708      	adds	r7, #8
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	40001000 	.word	0x40001000
 80012c8:	40001400 	.word	0x40001400
 80012cc:	20000380 	.word	0x20000380

080012d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012d0:	b480      	push	{r7}
 80012d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012d4:	b672      	cpsid	i
}
 80012d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012d8:	bf00      	nop
 80012da:	e7fd      	b.n	80012d8 <Error_Handler+0x8>

080012dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b082      	sub	sp, #8
 80012e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80012e2:	4b11      	ldr	r3, [pc, #68]	@ (8001328 <HAL_MspInit+0x4c>)
 80012e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012e6:	4a10      	ldr	r2, [pc, #64]	@ (8001328 <HAL_MspInit+0x4c>)
 80012e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80012ee:	4b0e      	ldr	r3, [pc, #56]	@ (8001328 <HAL_MspInit+0x4c>)
 80012f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012f6:	607b      	str	r3, [r7, #4]
 80012f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012fa:	4b0b      	ldr	r3, [pc, #44]	@ (8001328 <HAL_MspInit+0x4c>)
 80012fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012fe:	4a0a      	ldr	r2, [pc, #40]	@ (8001328 <HAL_MspInit+0x4c>)
 8001300:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001304:	6453      	str	r3, [r2, #68]	@ 0x44
 8001306:	4b08      	ldr	r3, [pc, #32]	@ (8001328 <HAL_MspInit+0x4c>)
 8001308:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800130a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800130e:	603b      	str	r3, [r7, #0]
 8001310:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001312:	2200      	movs	r2, #0
 8001314:	210f      	movs	r1, #15
 8001316:	f06f 0001 	mvn.w	r0, #1
 800131a:	f000 fb85 	bl	8001a28 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800131e:	bf00      	nop
 8001320:	3708      	adds	r7, #8
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	40023800 	.word	0x40023800

0800132c <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b0aa      	sub	sp, #168	@ 0xa8
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001334:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8001338:	2200      	movs	r2, #0
 800133a:	601a      	str	r2, [r3, #0]
 800133c:	605a      	str	r2, [r3, #4]
 800133e:	609a      	str	r2, [r3, #8]
 8001340:	60da      	str	r2, [r3, #12]
 8001342:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001344:	f107 0310 	add.w	r3, r7, #16
 8001348:	2284      	movs	r2, #132	@ 0x84
 800134a:	2100      	movs	r1, #0
 800134c:	4618      	mov	r0, r3
 800134e:	f008 f91e 	bl	800958e <memset>
  if(hi2c->Instance==I2C1)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	4a2a      	ldr	r2, [pc, #168]	@ (8001400 <HAL_I2C_MspInit+0xd4>)
 8001358:	4293      	cmp	r3, r2
 800135a:	d14c      	bne.n	80013f6 <HAL_I2C_MspInit+0xca>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800135c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001360:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001362:	2300      	movs	r3, #0
 8001364:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001366:	f107 0310 	add.w	r3, r7, #16
 800136a:	4618      	mov	r0, r3
 800136c:	f002 fcca 	bl	8003d04 <HAL_RCCEx_PeriphCLKConfig>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d001      	beq.n	800137a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001376:	f7ff ffab 	bl	80012d0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800137a:	4b22      	ldr	r3, [pc, #136]	@ (8001404 <HAL_I2C_MspInit+0xd8>)
 800137c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800137e:	4a21      	ldr	r2, [pc, #132]	@ (8001404 <HAL_I2C_MspInit+0xd8>)
 8001380:	f043 0302 	orr.w	r3, r3, #2
 8001384:	6313      	str	r3, [r2, #48]	@ 0x30
 8001386:	4b1f      	ldr	r3, [pc, #124]	@ (8001404 <HAL_I2C_MspInit+0xd8>)
 8001388:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800138a:	f003 0302 	and.w	r3, r3, #2
 800138e:	60fb      	str	r3, [r7, #12]
 8001390:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8001392:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001396:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800139a:	2312      	movs	r3, #18
 800139c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013a0:	2301      	movs	r3, #1
 80013a2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013a6:	2303      	movs	r3, #3
 80013a8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80013ac:	2304      	movs	r3, #4
 80013ae:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013b2:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80013b6:	4619      	mov	r1, r3
 80013b8:	4813      	ldr	r0, [pc, #76]	@ (8001408 <HAL_I2C_MspInit+0xdc>)
 80013ba:	f000 fb8f 	bl	8001adc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80013be:	4b11      	ldr	r3, [pc, #68]	@ (8001404 <HAL_I2C_MspInit+0xd8>)
 80013c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013c2:	4a10      	ldr	r2, [pc, #64]	@ (8001404 <HAL_I2C_MspInit+0xd8>)
 80013c4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80013c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80013ca:	4b0e      	ldr	r3, [pc, #56]	@ (8001404 <HAL_I2C_MspInit+0xd8>)
 80013cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013ce:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80013d2:	60bb      	str	r3, [r7, #8]
 80013d4:	68bb      	ldr	r3, [r7, #8]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 80013d6:	2200      	movs	r2, #0
 80013d8:	2105      	movs	r1, #5
 80013da:	201f      	movs	r0, #31
 80013dc:	f000 fb24 	bl	8001a28 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80013e0:	201f      	movs	r0, #31
 80013e2:	f000 fb3d 	bl	8001a60 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 80013e6:	2200      	movs	r2, #0
 80013e8:	2105      	movs	r1, #5
 80013ea:	2020      	movs	r0, #32
 80013ec:	f000 fb1c 	bl	8001a28 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80013f0:	2020      	movs	r0, #32
 80013f2:	f000 fb35 	bl	8001a60 <HAL_NVIC_EnableIRQ>

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 80013f6:	bf00      	nop
 80013f8:	37a8      	adds	r7, #168	@ 0xa8
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	40005400 	.word	0x40005400
 8001404:	40023800 	.word	0x40023800
 8001408:	40020400 	.word	0x40020400

0800140c <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b084      	sub	sp, #16
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4a0d      	ldr	r2, [pc, #52]	@ (8001450 <HAL_TIM_Base_MspInit+0x44>)
 800141a:	4293      	cmp	r3, r2
 800141c:	d113      	bne.n	8001446 <HAL_TIM_Base_MspInit+0x3a>
  {
    /* USER CODE BEGIN TIM7_MspInit 0 */

    /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 800141e:	4b0d      	ldr	r3, [pc, #52]	@ (8001454 <HAL_TIM_Base_MspInit+0x48>)
 8001420:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001422:	4a0c      	ldr	r2, [pc, #48]	@ (8001454 <HAL_TIM_Base_MspInit+0x48>)
 8001424:	f043 0320 	orr.w	r3, r3, #32
 8001428:	6413      	str	r3, [r2, #64]	@ 0x40
 800142a:	4b0a      	ldr	r3, [pc, #40]	@ (8001454 <HAL_TIM_Base_MspInit+0x48>)
 800142c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800142e:	f003 0320 	and.w	r3, r3, #32
 8001432:	60fb      	str	r3, [r7, #12]
 8001434:	68fb      	ldr	r3, [r7, #12]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 5, 0);
 8001436:	2200      	movs	r2, #0
 8001438:	2105      	movs	r1, #5
 800143a:	2037      	movs	r0, #55	@ 0x37
 800143c:	f000 faf4 	bl	8001a28 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001440:	2037      	movs	r0, #55	@ 0x37
 8001442:	f000 fb0d 	bl	8001a60 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM7_MspInit 1 */

  }

}
 8001446:	bf00      	nop
 8001448:	3710      	adds	r7, #16
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	40001400 	.word	0x40001400
 8001454:	40023800 	.word	0x40023800

08001458 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b0aa      	sub	sp, #168	@ 0xa8
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001460:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8001464:	2200      	movs	r2, #0
 8001466:	601a      	str	r2, [r3, #0]
 8001468:	605a      	str	r2, [r3, #4]
 800146a:	609a      	str	r2, [r3, #8]
 800146c:	60da      	str	r2, [r3, #12]
 800146e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001470:	f107 0310 	add.w	r3, r7, #16
 8001474:	2284      	movs	r2, #132	@ 0x84
 8001476:	2100      	movs	r1, #0
 8001478:	4618      	mov	r0, r3
 800147a:	f008 f888 	bl	800958e <memset>
  if(huart->Instance==USART3)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	4a22      	ldr	r2, [pc, #136]	@ (800150c <HAL_UART_MspInit+0xb4>)
 8001484:	4293      	cmp	r3, r2
 8001486:	d13c      	bne.n	8001502 <HAL_UART_MspInit+0xaa>

    /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001488:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800148c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800148e:	2300      	movs	r3, #0
 8001490:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001492:	f107 0310 	add.w	r3, r7, #16
 8001496:	4618      	mov	r0, r3
 8001498:	f002 fc34 	bl	8003d04 <HAL_RCCEx_PeriphCLKConfig>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d001      	beq.n	80014a6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80014a2:	f7ff ff15 	bl	80012d0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80014a6:	4b1a      	ldr	r3, [pc, #104]	@ (8001510 <HAL_UART_MspInit+0xb8>)
 80014a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014aa:	4a19      	ldr	r2, [pc, #100]	@ (8001510 <HAL_UART_MspInit+0xb8>)
 80014ac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80014b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80014b2:	4b17      	ldr	r3, [pc, #92]	@ (8001510 <HAL_UART_MspInit+0xb8>)
 80014b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014b6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80014ba:	60fb      	str	r3, [r7, #12]
 80014bc:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80014be:	4b14      	ldr	r3, [pc, #80]	@ (8001510 <HAL_UART_MspInit+0xb8>)
 80014c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014c2:	4a13      	ldr	r2, [pc, #76]	@ (8001510 <HAL_UART_MspInit+0xb8>)
 80014c4:	f043 0308 	orr.w	r3, r3, #8
 80014c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80014ca:	4b11      	ldr	r3, [pc, #68]	@ (8001510 <HAL_UART_MspInit+0xb8>)
 80014cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ce:	f003 0308 	and.w	r3, r3, #8
 80014d2:	60bb      	str	r3, [r7, #8]
 80014d4:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = DEBUG_UART_TX_Pin|DEBUG_UART_RX_Pin;
 80014d6:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80014da:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014de:	2302      	movs	r3, #2
 80014e0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e4:	2300      	movs	r3, #0
 80014e6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014ea:	2303      	movs	r3, #3
 80014ec:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80014f0:	2307      	movs	r3, #7
 80014f2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014f6:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80014fa:	4619      	mov	r1, r3
 80014fc:	4805      	ldr	r0, [pc, #20]	@ (8001514 <HAL_UART_MspInit+0xbc>)
 80014fe:	f000 faed 	bl	8001adc <HAL_GPIO_Init>

    /* USER CODE END USART3_MspInit 1 */

  }

}
 8001502:	bf00      	nop
 8001504:	37a8      	adds	r7, #168	@ 0xa8
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	40004800 	.word	0x40004800
 8001510:	40023800 	.word	0x40023800
 8001514:	40020c00 	.word	0x40020c00

08001518 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b08e      	sub	sp, #56	@ 0x38
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001520:	2300      	movs	r3, #0
 8001522:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001524:	2300      	movs	r3, #0
 8001526:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001528:	4b33      	ldr	r3, [pc, #204]	@ (80015f8 <HAL_InitTick+0xe0>)
 800152a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800152c:	4a32      	ldr	r2, [pc, #200]	@ (80015f8 <HAL_InitTick+0xe0>)
 800152e:	f043 0310 	orr.w	r3, r3, #16
 8001532:	6413      	str	r3, [r2, #64]	@ 0x40
 8001534:	4b30      	ldr	r3, [pc, #192]	@ (80015f8 <HAL_InitTick+0xe0>)
 8001536:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001538:	f003 0310 	and.w	r3, r3, #16
 800153c:	60fb      	str	r3, [r7, #12]
 800153e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001540:	f107 0210 	add.w	r2, r7, #16
 8001544:	f107 0314 	add.w	r3, r7, #20
 8001548:	4611      	mov	r1, r2
 800154a:	4618      	mov	r0, r3
 800154c:	f002 fba8 	bl	8003ca0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001550:	6a3b      	ldr	r3, [r7, #32]
 8001552:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001554:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001556:	2b00      	cmp	r3, #0
 8001558:	d103      	bne.n	8001562 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800155a:	f002 fb79 	bl	8003c50 <HAL_RCC_GetPCLK1Freq>
 800155e:	6378      	str	r0, [r7, #52]	@ 0x34
 8001560:	e004      	b.n	800156c <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001562:	f002 fb75 	bl	8003c50 <HAL_RCC_GetPCLK1Freq>
 8001566:	4603      	mov	r3, r0
 8001568:	005b      	lsls	r3, r3, #1
 800156a:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800156c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800156e:	4a23      	ldr	r2, [pc, #140]	@ (80015fc <HAL_InitTick+0xe4>)
 8001570:	fba2 2303 	umull	r2, r3, r2, r3
 8001574:	0c9b      	lsrs	r3, r3, #18
 8001576:	3b01      	subs	r3, #1
 8001578:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800157a:	4b21      	ldr	r3, [pc, #132]	@ (8001600 <HAL_InitTick+0xe8>)
 800157c:	4a21      	ldr	r2, [pc, #132]	@ (8001604 <HAL_InitTick+0xec>)
 800157e:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001580:	4b1f      	ldr	r3, [pc, #124]	@ (8001600 <HAL_InitTick+0xe8>)
 8001582:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001586:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001588:	4a1d      	ldr	r2, [pc, #116]	@ (8001600 <HAL_InitTick+0xe8>)
 800158a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800158c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800158e:	4b1c      	ldr	r3, [pc, #112]	@ (8001600 <HAL_InitTick+0xe8>)
 8001590:	2200      	movs	r2, #0
 8001592:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001594:	4b1a      	ldr	r3, [pc, #104]	@ (8001600 <HAL_InitTick+0xe8>)
 8001596:	2200      	movs	r2, #0
 8001598:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800159a:	4b19      	ldr	r3, [pc, #100]	@ (8001600 <HAL_InitTick+0xe8>)
 800159c:	2200      	movs	r2, #0
 800159e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80015a0:	4817      	ldr	r0, [pc, #92]	@ (8001600 <HAL_InitTick+0xe8>)
 80015a2:	f002 ff9f 	bl	80044e4 <HAL_TIM_Base_Init>
 80015a6:	4603      	mov	r3, r0
 80015a8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80015ac:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d11b      	bne.n	80015ec <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80015b4:	4812      	ldr	r0, [pc, #72]	@ (8001600 <HAL_InitTick+0xe8>)
 80015b6:	f002 ffed 	bl	8004594 <HAL_TIM_Base_Start_IT>
 80015ba:	4603      	mov	r3, r0
 80015bc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80015c0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d111      	bne.n	80015ec <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80015c8:	2036      	movs	r0, #54	@ 0x36
 80015ca:	f000 fa49 	bl	8001a60 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	2b0f      	cmp	r3, #15
 80015d2:	d808      	bhi.n	80015e6 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80015d4:	2200      	movs	r2, #0
 80015d6:	6879      	ldr	r1, [r7, #4]
 80015d8:	2036      	movs	r0, #54	@ 0x36
 80015da:	f000 fa25 	bl	8001a28 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80015de:	4a0a      	ldr	r2, [pc, #40]	@ (8001608 <HAL_InitTick+0xf0>)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6013      	str	r3, [r2, #0]
 80015e4:	e002      	b.n	80015ec <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 80015e6:	2301      	movs	r3, #1
 80015e8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80015ec:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80015f0:	4618      	mov	r0, r3
 80015f2:	3738      	adds	r7, #56	@ 0x38
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}
 80015f8:	40023800 	.word	0x40023800
 80015fc:	431bde83 	.word	0x431bde83
 8001600:	2000032c 	.word	0x2000032c
 8001604:	40001000 	.word	0x40001000
 8001608:	20000004 	.word	0x20000004

0800160c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800160c:	b480      	push	{r7}
 800160e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001610:	bf00      	nop
 8001612:	e7fd      	b.n	8001610 <NMI_Handler+0x4>

08001614 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001614:	b480      	push	{r7}
 8001616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001618:	bf00      	nop
 800161a:	e7fd      	b.n	8001618 <HardFault_Handler+0x4>

0800161c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800161c:	b480      	push	{r7}
 800161e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001620:	bf00      	nop
 8001622:	e7fd      	b.n	8001620 <MemManage_Handler+0x4>

08001624 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001624:	b480      	push	{r7}
 8001626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001628:	bf00      	nop
 800162a:	e7fd      	b.n	8001628 <BusFault_Handler+0x4>

0800162c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800162c:	b480      	push	{r7}
 800162e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001630:	bf00      	nop
 8001632:	e7fd      	b.n	8001630 <UsageFault_Handler+0x4>

08001634 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001634:	b480      	push	{r7}
 8001636:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001638:	bf00      	nop
 800163a:	46bd      	mov	sp, r7
 800163c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001640:	4770      	bx	lr
	...

08001644 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001648:	4802      	ldr	r0, [pc, #8]	@ (8001654 <I2C1_EV_IRQHandler+0x10>)
 800164a:	f000 fddc 	bl	8002206 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800164e:	bf00      	nop
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	200001f4 	.word	0x200001f4

08001658 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 800165c:	4802      	ldr	r0, [pc, #8]	@ (8001668 <I2C1_ER_IRQHandler+0x10>)
 800165e:	f000 fdec 	bl	800223a <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001662:	bf00      	nop
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	200001f4 	.word	0x200001f4

0800166c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001670:	4802      	ldr	r0, [pc, #8]	@ (800167c <TIM6_DAC_IRQHandler+0x10>)
 8001672:	f003 f807 	bl	8004684 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001676:	bf00      	nop
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	2000032c 	.word	0x2000032c

08001680 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001684:	4802      	ldr	r0, [pc, #8]	@ (8001690 <TIM7_IRQHandler+0x10>)
 8001686:	f002 fffd 	bl	8004684 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800168a:	bf00      	nop
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	20000248 	.word	0x20000248

08001694 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001694:	b480      	push	{r7}
 8001696:	af00      	add	r7, sp, #0
  return 1;
 8001698:	2301      	movs	r3, #1
}
 800169a:	4618      	mov	r0, r3
 800169c:	46bd      	mov	sp, r7
 800169e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a2:	4770      	bx	lr

080016a4 <_kill>:

int _kill(int pid, int sig)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b082      	sub	sp, #8
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
 80016ac:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80016ae:	f008 f81f 	bl	80096f0 <__errno>
 80016b2:	4603      	mov	r3, r0
 80016b4:	2216      	movs	r2, #22
 80016b6:	601a      	str	r2, [r3, #0]
  return -1;
 80016b8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80016bc:	4618      	mov	r0, r3
 80016be:	3708      	adds	r7, #8
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}

080016c4 <_exit>:

void _exit (int status)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b082      	sub	sp, #8
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80016cc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80016d0:	6878      	ldr	r0, [r7, #4]
 80016d2:	f7ff ffe7 	bl	80016a4 <_kill>
  while (1) {}    /* Make sure we hang here */
 80016d6:	bf00      	nop
 80016d8:	e7fd      	b.n	80016d6 <_exit+0x12>

080016da <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80016da:	b580      	push	{r7, lr}
 80016dc:	b086      	sub	sp, #24
 80016de:	af00      	add	r7, sp, #0
 80016e0:	60f8      	str	r0, [r7, #12]
 80016e2:	60b9      	str	r1, [r7, #8]
 80016e4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016e6:	2300      	movs	r3, #0
 80016e8:	617b      	str	r3, [r7, #20]
 80016ea:	e00a      	b.n	8001702 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80016ec:	f3af 8000 	nop.w
 80016f0:	4601      	mov	r1, r0
 80016f2:	68bb      	ldr	r3, [r7, #8]
 80016f4:	1c5a      	adds	r2, r3, #1
 80016f6:	60ba      	str	r2, [r7, #8]
 80016f8:	b2ca      	uxtb	r2, r1
 80016fa:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016fc:	697b      	ldr	r3, [r7, #20]
 80016fe:	3301      	adds	r3, #1
 8001700:	617b      	str	r3, [r7, #20]
 8001702:	697a      	ldr	r2, [r7, #20]
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	429a      	cmp	r2, r3
 8001708:	dbf0      	blt.n	80016ec <_read+0x12>
  }

  return len;
 800170a:	687b      	ldr	r3, [r7, #4]
}
 800170c:	4618      	mov	r0, r3
 800170e:	3718      	adds	r7, #24
 8001710:	46bd      	mov	sp, r7
 8001712:	bd80      	pop	{r7, pc}

08001714 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001714:	b480      	push	{r7}
 8001716:	b083      	sub	sp, #12
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800171c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001720:	4618      	mov	r0, r3
 8001722:	370c      	adds	r7, #12
 8001724:	46bd      	mov	sp, r7
 8001726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172a:	4770      	bx	lr

0800172c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800172c:	b480      	push	{r7}
 800172e:	b083      	sub	sp, #12
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
 8001734:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800173c:	605a      	str	r2, [r3, #4]
  return 0;
 800173e:	2300      	movs	r3, #0
}
 8001740:	4618      	mov	r0, r3
 8001742:	370c      	adds	r7, #12
 8001744:	46bd      	mov	sp, r7
 8001746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174a:	4770      	bx	lr

0800174c <_isatty>:

int _isatty(int file)
{
 800174c:	b480      	push	{r7}
 800174e:	b083      	sub	sp, #12
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001754:	2301      	movs	r3, #1
}
 8001756:	4618      	mov	r0, r3
 8001758:	370c      	adds	r7, #12
 800175a:	46bd      	mov	sp, r7
 800175c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001760:	4770      	bx	lr

08001762 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001762:	b480      	push	{r7}
 8001764:	b085      	sub	sp, #20
 8001766:	af00      	add	r7, sp, #0
 8001768:	60f8      	str	r0, [r7, #12]
 800176a:	60b9      	str	r1, [r7, #8]
 800176c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800176e:	2300      	movs	r3, #0
}
 8001770:	4618      	mov	r0, r3
 8001772:	3714      	adds	r7, #20
 8001774:	46bd      	mov	sp, r7
 8001776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177a:	4770      	bx	lr

0800177c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b086      	sub	sp, #24
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001784:	4a14      	ldr	r2, [pc, #80]	@ (80017d8 <_sbrk+0x5c>)
 8001786:	4b15      	ldr	r3, [pc, #84]	@ (80017dc <_sbrk+0x60>)
 8001788:	1ad3      	subs	r3, r2, r3
 800178a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800178c:	697b      	ldr	r3, [r7, #20]
 800178e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001790:	4b13      	ldr	r3, [pc, #76]	@ (80017e0 <_sbrk+0x64>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	2b00      	cmp	r3, #0
 8001796:	d102      	bne.n	800179e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001798:	4b11      	ldr	r3, [pc, #68]	@ (80017e0 <_sbrk+0x64>)
 800179a:	4a12      	ldr	r2, [pc, #72]	@ (80017e4 <_sbrk+0x68>)
 800179c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800179e:	4b10      	ldr	r3, [pc, #64]	@ (80017e0 <_sbrk+0x64>)
 80017a0:	681a      	ldr	r2, [r3, #0]
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	4413      	add	r3, r2
 80017a6:	693a      	ldr	r2, [r7, #16]
 80017a8:	429a      	cmp	r2, r3
 80017aa:	d207      	bcs.n	80017bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017ac:	f007 ffa0 	bl	80096f0 <__errno>
 80017b0:	4603      	mov	r3, r0
 80017b2:	220c      	movs	r2, #12
 80017b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017b6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80017ba:	e009      	b.n	80017d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017bc:	4b08      	ldr	r3, [pc, #32]	@ (80017e0 <_sbrk+0x64>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017c2:	4b07      	ldr	r3, [pc, #28]	@ (80017e0 <_sbrk+0x64>)
 80017c4:	681a      	ldr	r2, [r3, #0]
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	4413      	add	r3, r2
 80017ca:	4a05      	ldr	r2, [pc, #20]	@ (80017e0 <_sbrk+0x64>)
 80017cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017ce:	68fb      	ldr	r3, [r7, #12]
}
 80017d0:	4618      	mov	r0, r3
 80017d2:	3718      	adds	r7, #24
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd80      	pop	{r7, pc}
 80017d8:	20050000 	.word	0x20050000
 80017dc:	00000400 	.word	0x00000400
 80017e0:	20000378 	.word	0x20000378
 80017e4:	200054c8 	.word	0x200054c8

080017e8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017e8:	b480      	push	{r7}
 80017ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017ec:	4b06      	ldr	r3, [pc, #24]	@ (8001808 <SystemInit+0x20>)
 80017ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80017f2:	4a05      	ldr	r2, [pc, #20]	@ (8001808 <SystemInit+0x20>)
 80017f4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80017f8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017fc:	bf00      	nop
 80017fe:	46bd      	mov	sp, r7
 8001800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001804:	4770      	bx	lr
 8001806:	bf00      	nop
 8001808:	e000ed00 	.word	0xe000ed00

0800180c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800180c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001844 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001810:	f7ff ffea 	bl	80017e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001814:	480c      	ldr	r0, [pc, #48]	@ (8001848 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001816:	490d      	ldr	r1, [pc, #52]	@ (800184c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001818:	4a0d      	ldr	r2, [pc, #52]	@ (8001850 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800181a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800181c:	e002      	b.n	8001824 <LoopCopyDataInit>

0800181e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800181e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001820:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001822:	3304      	adds	r3, #4

08001824 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001824:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001826:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001828:	d3f9      	bcc.n	800181e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800182a:	4a0a      	ldr	r2, [pc, #40]	@ (8001854 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800182c:	4c0a      	ldr	r4, [pc, #40]	@ (8001858 <LoopFillZerobss+0x22>)
  movs r3, #0
 800182e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001830:	e001      	b.n	8001836 <LoopFillZerobss>

08001832 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001832:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001834:	3204      	adds	r2, #4

08001836 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001836:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001838:	d3fb      	bcc.n	8001832 <FillZerobss>


/* Call static constructors */
    bl __libc_init_array
 800183a:	f007 ff5f 	bl	80096fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800183e:	f7ff fb8b 	bl	8000f58 <main>
  bx  lr    
 8001842:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001844:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001848:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800184c:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8001850:	0800b9fc 	.word	0x0800b9fc
  ldr r2, =_sbss
 8001854:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8001858:	200054c8 	.word	0x200054c8

0800185c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800185c:	e7fe      	b.n	800185c <ADC_IRQHandler>

0800185e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800185e:	b580      	push	{r7, lr}
 8001860:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001862:	2003      	movs	r0, #3
 8001864:	f000 f8d5 	bl	8001a12 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001868:	200f      	movs	r0, #15
 800186a:	f7ff fe55 	bl	8001518 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800186e:	f7ff fd35 	bl	80012dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001872:	2300      	movs	r3, #0
}
 8001874:	4618      	mov	r0, r3
 8001876:	bd80      	pop	{r7, pc}

08001878 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001878:	b480      	push	{r7}
 800187a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800187c:	4b06      	ldr	r3, [pc, #24]	@ (8001898 <HAL_IncTick+0x20>)
 800187e:	781b      	ldrb	r3, [r3, #0]
 8001880:	461a      	mov	r2, r3
 8001882:	4b06      	ldr	r3, [pc, #24]	@ (800189c <HAL_IncTick+0x24>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4413      	add	r3, r2
 8001888:	4a04      	ldr	r2, [pc, #16]	@ (800189c <HAL_IncTick+0x24>)
 800188a:	6013      	str	r3, [r2, #0]
}
 800188c:	bf00      	nop
 800188e:	46bd      	mov	sp, r7
 8001890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001894:	4770      	bx	lr
 8001896:	bf00      	nop
 8001898:	20000008 	.word	0x20000008
 800189c:	2000037c 	.word	0x2000037c

080018a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018a0:	b480      	push	{r7}
 80018a2:	af00      	add	r7, sp, #0
  return uwTick;
 80018a4:	4b03      	ldr	r3, [pc, #12]	@ (80018b4 <HAL_GetTick+0x14>)
 80018a6:	681b      	ldr	r3, [r3, #0]
}
 80018a8:	4618      	mov	r0, r3
 80018aa:	46bd      	mov	sp, r7
 80018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b0:	4770      	bx	lr
 80018b2:	bf00      	nop
 80018b4:	2000037c 	.word	0x2000037c

080018b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018b8:	b480      	push	{r7}
 80018ba:	b085      	sub	sp, #20
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	f003 0307 	and.w	r3, r3, #7
 80018c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018c8:	4b0b      	ldr	r3, [pc, #44]	@ (80018f8 <__NVIC_SetPriorityGrouping+0x40>)
 80018ca:	68db      	ldr	r3, [r3, #12]
 80018cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018ce:	68ba      	ldr	r2, [r7, #8]
 80018d0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80018d4:	4013      	ands	r3, r2
 80018d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018dc:	68bb      	ldr	r3, [r7, #8]
 80018de:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80018e0:	4b06      	ldr	r3, [pc, #24]	@ (80018fc <__NVIC_SetPriorityGrouping+0x44>)
 80018e2:	4313      	orrs	r3, r2
 80018e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018e6:	4a04      	ldr	r2, [pc, #16]	@ (80018f8 <__NVIC_SetPriorityGrouping+0x40>)
 80018e8:	68bb      	ldr	r3, [r7, #8]
 80018ea:	60d3      	str	r3, [r2, #12]
}
 80018ec:	bf00      	nop
 80018ee:	3714      	adds	r7, #20
 80018f0:	46bd      	mov	sp, r7
 80018f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f6:	4770      	bx	lr
 80018f8:	e000ed00 	.word	0xe000ed00
 80018fc:	05fa0000 	.word	0x05fa0000

08001900 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001900:	b480      	push	{r7}
 8001902:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001904:	4b04      	ldr	r3, [pc, #16]	@ (8001918 <__NVIC_GetPriorityGrouping+0x18>)
 8001906:	68db      	ldr	r3, [r3, #12]
 8001908:	0a1b      	lsrs	r3, r3, #8
 800190a:	f003 0307 	and.w	r3, r3, #7
}
 800190e:	4618      	mov	r0, r3
 8001910:	46bd      	mov	sp, r7
 8001912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001916:	4770      	bx	lr
 8001918:	e000ed00 	.word	0xe000ed00

0800191c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800191c:	b480      	push	{r7}
 800191e:	b083      	sub	sp, #12
 8001920:	af00      	add	r7, sp, #0
 8001922:	4603      	mov	r3, r0
 8001924:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001926:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800192a:	2b00      	cmp	r3, #0
 800192c:	db0b      	blt.n	8001946 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800192e:	79fb      	ldrb	r3, [r7, #7]
 8001930:	f003 021f 	and.w	r2, r3, #31
 8001934:	4907      	ldr	r1, [pc, #28]	@ (8001954 <__NVIC_EnableIRQ+0x38>)
 8001936:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800193a:	095b      	lsrs	r3, r3, #5
 800193c:	2001      	movs	r0, #1
 800193e:	fa00 f202 	lsl.w	r2, r0, r2
 8001942:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001946:	bf00      	nop
 8001948:	370c      	adds	r7, #12
 800194a:	46bd      	mov	sp, r7
 800194c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001950:	4770      	bx	lr
 8001952:	bf00      	nop
 8001954:	e000e100 	.word	0xe000e100

08001958 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001958:	b480      	push	{r7}
 800195a:	b083      	sub	sp, #12
 800195c:	af00      	add	r7, sp, #0
 800195e:	4603      	mov	r3, r0
 8001960:	6039      	str	r1, [r7, #0]
 8001962:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001964:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001968:	2b00      	cmp	r3, #0
 800196a:	db0a      	blt.n	8001982 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	b2da      	uxtb	r2, r3
 8001970:	490c      	ldr	r1, [pc, #48]	@ (80019a4 <__NVIC_SetPriority+0x4c>)
 8001972:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001976:	0112      	lsls	r2, r2, #4
 8001978:	b2d2      	uxtb	r2, r2
 800197a:	440b      	add	r3, r1
 800197c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001980:	e00a      	b.n	8001998 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	b2da      	uxtb	r2, r3
 8001986:	4908      	ldr	r1, [pc, #32]	@ (80019a8 <__NVIC_SetPriority+0x50>)
 8001988:	79fb      	ldrb	r3, [r7, #7]
 800198a:	f003 030f 	and.w	r3, r3, #15
 800198e:	3b04      	subs	r3, #4
 8001990:	0112      	lsls	r2, r2, #4
 8001992:	b2d2      	uxtb	r2, r2
 8001994:	440b      	add	r3, r1
 8001996:	761a      	strb	r2, [r3, #24]
}
 8001998:	bf00      	nop
 800199a:	370c      	adds	r7, #12
 800199c:	46bd      	mov	sp, r7
 800199e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a2:	4770      	bx	lr
 80019a4:	e000e100 	.word	0xe000e100
 80019a8:	e000ed00 	.word	0xe000ed00

080019ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019ac:	b480      	push	{r7}
 80019ae:	b089      	sub	sp, #36	@ 0x24
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	60f8      	str	r0, [r7, #12]
 80019b4:	60b9      	str	r1, [r7, #8]
 80019b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	f003 0307 	and.w	r3, r3, #7
 80019be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019c0:	69fb      	ldr	r3, [r7, #28]
 80019c2:	f1c3 0307 	rsb	r3, r3, #7
 80019c6:	2b04      	cmp	r3, #4
 80019c8:	bf28      	it	cs
 80019ca:	2304      	movcs	r3, #4
 80019cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019ce:	69fb      	ldr	r3, [r7, #28]
 80019d0:	3304      	adds	r3, #4
 80019d2:	2b06      	cmp	r3, #6
 80019d4:	d902      	bls.n	80019dc <NVIC_EncodePriority+0x30>
 80019d6:	69fb      	ldr	r3, [r7, #28]
 80019d8:	3b03      	subs	r3, #3
 80019da:	e000      	b.n	80019de <NVIC_EncodePriority+0x32>
 80019dc:	2300      	movs	r3, #0
 80019de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019e0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80019e4:	69bb      	ldr	r3, [r7, #24]
 80019e6:	fa02 f303 	lsl.w	r3, r2, r3
 80019ea:	43da      	mvns	r2, r3
 80019ec:	68bb      	ldr	r3, [r7, #8]
 80019ee:	401a      	ands	r2, r3
 80019f0:	697b      	ldr	r3, [r7, #20]
 80019f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019f4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80019f8:	697b      	ldr	r3, [r7, #20]
 80019fa:	fa01 f303 	lsl.w	r3, r1, r3
 80019fe:	43d9      	mvns	r1, r3
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a04:	4313      	orrs	r3, r2
         );
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	3724      	adds	r7, #36	@ 0x24
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a10:	4770      	bx	lr

08001a12 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a12:	b580      	push	{r7, lr}
 8001a14:	b082      	sub	sp, #8
 8001a16:	af00      	add	r7, sp, #0
 8001a18:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a1a:	6878      	ldr	r0, [r7, #4]
 8001a1c:	f7ff ff4c 	bl	80018b8 <__NVIC_SetPriorityGrouping>
}
 8001a20:	bf00      	nop
 8001a22:	3708      	adds	r7, #8
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd80      	pop	{r7, pc}

08001a28 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b086      	sub	sp, #24
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	4603      	mov	r3, r0
 8001a30:	60b9      	str	r1, [r7, #8]
 8001a32:	607a      	str	r2, [r7, #4]
 8001a34:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001a36:	2300      	movs	r3, #0
 8001a38:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a3a:	f7ff ff61 	bl	8001900 <__NVIC_GetPriorityGrouping>
 8001a3e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a40:	687a      	ldr	r2, [r7, #4]
 8001a42:	68b9      	ldr	r1, [r7, #8]
 8001a44:	6978      	ldr	r0, [r7, #20]
 8001a46:	f7ff ffb1 	bl	80019ac <NVIC_EncodePriority>
 8001a4a:	4602      	mov	r2, r0
 8001a4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a50:	4611      	mov	r1, r2
 8001a52:	4618      	mov	r0, r3
 8001a54:	f7ff ff80 	bl	8001958 <__NVIC_SetPriority>
}
 8001a58:	bf00      	nop
 8001a5a:	3718      	adds	r7, #24
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}

08001a60 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b082      	sub	sp, #8
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	4603      	mov	r3, r0
 8001a68:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f7ff ff54 	bl	800191c <__NVIC_EnableIRQ>
}
 8001a74:	bf00      	nop
 8001a76:	3708      	adds	r7, #8
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}

08001a7c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b083      	sub	sp, #12
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001a8a:	b2db      	uxtb	r3, r3
 8001a8c:	2b02      	cmp	r3, #2
 8001a8e:	d004      	beq.n	8001a9a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2280      	movs	r2, #128	@ 0x80
 8001a94:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001a96:	2301      	movs	r3, #1
 8001a98:	e00c      	b.n	8001ab4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	2205      	movs	r2, #5
 8001a9e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	681a      	ldr	r2, [r3, #0]
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f022 0201 	bic.w	r2, r2, #1
 8001ab0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001ab2:	2300      	movs	r3, #0
}
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	370c      	adds	r7, #12
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abe:	4770      	bx	lr

08001ac0 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b083      	sub	sp, #12
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001ace:	b2db      	uxtb	r3, r3
}
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	370c      	adds	r7, #12
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ada:	4770      	bx	lr

08001adc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b089      	sub	sp, #36	@ 0x24
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
 8001ae4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001aea:	2300      	movs	r3, #0
 8001aec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001aee:	2300      	movs	r3, #0
 8001af0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001af2:	2300      	movs	r3, #0
 8001af4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8001af6:	2300      	movs	r3, #0
 8001af8:	61fb      	str	r3, [r7, #28]
 8001afa:	e175      	b.n	8001de8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001afc:	2201      	movs	r2, #1
 8001afe:	69fb      	ldr	r3, [r7, #28]
 8001b00:	fa02 f303 	lsl.w	r3, r2, r3
 8001b04:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	697a      	ldr	r2, [r7, #20]
 8001b0c:	4013      	ands	r3, r2
 8001b0e:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8001b10:	693a      	ldr	r2, [r7, #16]
 8001b12:	697b      	ldr	r3, [r7, #20]
 8001b14:	429a      	cmp	r2, r3
 8001b16:	f040 8164 	bne.w	8001de2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	f003 0303 	and.w	r3, r3, #3
 8001b22:	2b01      	cmp	r3, #1
 8001b24:	d005      	beq.n	8001b32 <HAL_GPIO_Init+0x56>
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	f003 0303 	and.w	r3, r3, #3
 8001b2e:	2b02      	cmp	r3, #2
 8001b30:	d130      	bne.n	8001b94 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	689b      	ldr	r3, [r3, #8]
 8001b36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001b38:	69fb      	ldr	r3, [r7, #28]
 8001b3a:	005b      	lsls	r3, r3, #1
 8001b3c:	2203      	movs	r2, #3
 8001b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b42:	43db      	mvns	r3, r3
 8001b44:	69ba      	ldr	r2, [r7, #24]
 8001b46:	4013      	ands	r3, r2
 8001b48:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	68da      	ldr	r2, [r3, #12]
 8001b4e:	69fb      	ldr	r3, [r7, #28]
 8001b50:	005b      	lsls	r3, r3, #1
 8001b52:	fa02 f303 	lsl.w	r3, r2, r3
 8001b56:	69ba      	ldr	r2, [r7, #24]
 8001b58:	4313      	orrs	r3, r2
 8001b5a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	69ba      	ldr	r2, [r7, #24]
 8001b60:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b68:	2201      	movs	r2, #1
 8001b6a:	69fb      	ldr	r3, [r7, #28]
 8001b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b70:	43db      	mvns	r3, r3
 8001b72:	69ba      	ldr	r2, [r7, #24]
 8001b74:	4013      	ands	r3, r2
 8001b76:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	091b      	lsrs	r3, r3, #4
 8001b7e:	f003 0201 	and.w	r2, r3, #1
 8001b82:	69fb      	ldr	r3, [r7, #28]
 8001b84:	fa02 f303 	lsl.w	r3, r2, r3
 8001b88:	69ba      	ldr	r2, [r7, #24]
 8001b8a:	4313      	orrs	r3, r2
 8001b8c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	69ba      	ldr	r2, [r7, #24]
 8001b92:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	f003 0303 	and.w	r3, r3, #3
 8001b9c:	2b03      	cmp	r3, #3
 8001b9e:	d017      	beq.n	8001bd0 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	68db      	ldr	r3, [r3, #12]
 8001ba4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001ba6:	69fb      	ldr	r3, [r7, #28]
 8001ba8:	005b      	lsls	r3, r3, #1
 8001baa:	2203      	movs	r2, #3
 8001bac:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb0:	43db      	mvns	r3, r3
 8001bb2:	69ba      	ldr	r2, [r7, #24]
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	689a      	ldr	r2, [r3, #8]
 8001bbc:	69fb      	ldr	r3, [r7, #28]
 8001bbe:	005b      	lsls	r3, r3, #1
 8001bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc4:	69ba      	ldr	r2, [r7, #24]
 8001bc6:	4313      	orrs	r3, r2
 8001bc8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	69ba      	ldr	r2, [r7, #24]
 8001bce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	f003 0303 	and.w	r3, r3, #3
 8001bd8:	2b02      	cmp	r3, #2
 8001bda:	d123      	bne.n	8001c24 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001bdc:	69fb      	ldr	r3, [r7, #28]
 8001bde:	08da      	lsrs	r2, r3, #3
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	3208      	adds	r2, #8
 8001be4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001be8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001bea:	69fb      	ldr	r3, [r7, #28]
 8001bec:	f003 0307 	and.w	r3, r3, #7
 8001bf0:	009b      	lsls	r3, r3, #2
 8001bf2:	220f      	movs	r2, #15
 8001bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf8:	43db      	mvns	r3, r3
 8001bfa:	69ba      	ldr	r2, [r7, #24]
 8001bfc:	4013      	ands	r3, r2
 8001bfe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	691a      	ldr	r2, [r3, #16]
 8001c04:	69fb      	ldr	r3, [r7, #28]
 8001c06:	f003 0307 	and.w	r3, r3, #7
 8001c0a:	009b      	lsls	r3, r3, #2
 8001c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c10:	69ba      	ldr	r2, [r7, #24]
 8001c12:	4313      	orrs	r3, r2
 8001c14:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001c16:	69fb      	ldr	r3, [r7, #28]
 8001c18:	08da      	lsrs	r2, r3, #3
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	3208      	adds	r2, #8
 8001c1e:	69b9      	ldr	r1, [r7, #24]
 8001c20:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001c2a:	69fb      	ldr	r3, [r7, #28]
 8001c2c:	005b      	lsls	r3, r3, #1
 8001c2e:	2203      	movs	r2, #3
 8001c30:	fa02 f303 	lsl.w	r3, r2, r3
 8001c34:	43db      	mvns	r3, r3
 8001c36:	69ba      	ldr	r2, [r7, #24]
 8001c38:	4013      	ands	r3, r2
 8001c3a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	f003 0203 	and.w	r2, r3, #3
 8001c44:	69fb      	ldr	r3, [r7, #28]
 8001c46:	005b      	lsls	r3, r3, #1
 8001c48:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4c:	69ba      	ldr	r2, [r7, #24]
 8001c4e:	4313      	orrs	r3, r2
 8001c50:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	69ba      	ldr	r2, [r7, #24]
 8001c56:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	f000 80be 	beq.w	8001de2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c66:	4b66      	ldr	r3, [pc, #408]	@ (8001e00 <HAL_GPIO_Init+0x324>)
 8001c68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c6a:	4a65      	ldr	r2, [pc, #404]	@ (8001e00 <HAL_GPIO_Init+0x324>)
 8001c6c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c70:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c72:	4b63      	ldr	r3, [pc, #396]	@ (8001e00 <HAL_GPIO_Init+0x324>)
 8001c74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c76:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001c7a:	60fb      	str	r3, [r7, #12]
 8001c7c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001c7e:	4a61      	ldr	r2, [pc, #388]	@ (8001e04 <HAL_GPIO_Init+0x328>)
 8001c80:	69fb      	ldr	r3, [r7, #28]
 8001c82:	089b      	lsrs	r3, r3, #2
 8001c84:	3302      	adds	r3, #2
 8001c86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001c8c:	69fb      	ldr	r3, [r7, #28]
 8001c8e:	f003 0303 	and.w	r3, r3, #3
 8001c92:	009b      	lsls	r3, r3, #2
 8001c94:	220f      	movs	r2, #15
 8001c96:	fa02 f303 	lsl.w	r3, r2, r3
 8001c9a:	43db      	mvns	r3, r3
 8001c9c:	69ba      	ldr	r2, [r7, #24]
 8001c9e:	4013      	ands	r3, r2
 8001ca0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	4a58      	ldr	r2, [pc, #352]	@ (8001e08 <HAL_GPIO_Init+0x32c>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d037      	beq.n	8001d1a <HAL_GPIO_Init+0x23e>
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	4a57      	ldr	r2, [pc, #348]	@ (8001e0c <HAL_GPIO_Init+0x330>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d031      	beq.n	8001d16 <HAL_GPIO_Init+0x23a>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	4a56      	ldr	r2, [pc, #344]	@ (8001e10 <HAL_GPIO_Init+0x334>)
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d02b      	beq.n	8001d12 <HAL_GPIO_Init+0x236>
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	4a55      	ldr	r2, [pc, #340]	@ (8001e14 <HAL_GPIO_Init+0x338>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d025      	beq.n	8001d0e <HAL_GPIO_Init+0x232>
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	4a54      	ldr	r2, [pc, #336]	@ (8001e18 <HAL_GPIO_Init+0x33c>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d01f      	beq.n	8001d0a <HAL_GPIO_Init+0x22e>
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	4a53      	ldr	r2, [pc, #332]	@ (8001e1c <HAL_GPIO_Init+0x340>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d019      	beq.n	8001d06 <HAL_GPIO_Init+0x22a>
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	4a52      	ldr	r2, [pc, #328]	@ (8001e20 <HAL_GPIO_Init+0x344>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d013      	beq.n	8001d02 <HAL_GPIO_Init+0x226>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	4a51      	ldr	r2, [pc, #324]	@ (8001e24 <HAL_GPIO_Init+0x348>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d00d      	beq.n	8001cfe <HAL_GPIO_Init+0x222>
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	4a50      	ldr	r2, [pc, #320]	@ (8001e28 <HAL_GPIO_Init+0x34c>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d007      	beq.n	8001cfa <HAL_GPIO_Init+0x21e>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	4a4f      	ldr	r2, [pc, #316]	@ (8001e2c <HAL_GPIO_Init+0x350>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d101      	bne.n	8001cf6 <HAL_GPIO_Init+0x21a>
 8001cf2:	2309      	movs	r3, #9
 8001cf4:	e012      	b.n	8001d1c <HAL_GPIO_Init+0x240>
 8001cf6:	230a      	movs	r3, #10
 8001cf8:	e010      	b.n	8001d1c <HAL_GPIO_Init+0x240>
 8001cfa:	2308      	movs	r3, #8
 8001cfc:	e00e      	b.n	8001d1c <HAL_GPIO_Init+0x240>
 8001cfe:	2307      	movs	r3, #7
 8001d00:	e00c      	b.n	8001d1c <HAL_GPIO_Init+0x240>
 8001d02:	2306      	movs	r3, #6
 8001d04:	e00a      	b.n	8001d1c <HAL_GPIO_Init+0x240>
 8001d06:	2305      	movs	r3, #5
 8001d08:	e008      	b.n	8001d1c <HAL_GPIO_Init+0x240>
 8001d0a:	2304      	movs	r3, #4
 8001d0c:	e006      	b.n	8001d1c <HAL_GPIO_Init+0x240>
 8001d0e:	2303      	movs	r3, #3
 8001d10:	e004      	b.n	8001d1c <HAL_GPIO_Init+0x240>
 8001d12:	2302      	movs	r3, #2
 8001d14:	e002      	b.n	8001d1c <HAL_GPIO_Init+0x240>
 8001d16:	2301      	movs	r3, #1
 8001d18:	e000      	b.n	8001d1c <HAL_GPIO_Init+0x240>
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	69fa      	ldr	r2, [r7, #28]
 8001d1e:	f002 0203 	and.w	r2, r2, #3
 8001d22:	0092      	lsls	r2, r2, #2
 8001d24:	4093      	lsls	r3, r2
 8001d26:	69ba      	ldr	r2, [r7, #24]
 8001d28:	4313      	orrs	r3, r2
 8001d2a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001d2c:	4935      	ldr	r1, [pc, #212]	@ (8001e04 <HAL_GPIO_Init+0x328>)
 8001d2e:	69fb      	ldr	r3, [r7, #28]
 8001d30:	089b      	lsrs	r3, r3, #2
 8001d32:	3302      	adds	r3, #2
 8001d34:	69ba      	ldr	r2, [r7, #24]
 8001d36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d3a:	4b3d      	ldr	r3, [pc, #244]	@ (8001e30 <HAL_GPIO_Init+0x354>)
 8001d3c:	689b      	ldr	r3, [r3, #8]
 8001d3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d40:	693b      	ldr	r3, [r7, #16]
 8001d42:	43db      	mvns	r3, r3
 8001d44:	69ba      	ldr	r2, [r7, #24]
 8001d46:	4013      	ands	r3, r2
 8001d48:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d003      	beq.n	8001d5e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001d56:	69ba      	ldr	r2, [r7, #24]
 8001d58:	693b      	ldr	r3, [r7, #16]
 8001d5a:	4313      	orrs	r3, r2
 8001d5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d5e:	4a34      	ldr	r2, [pc, #208]	@ (8001e30 <HAL_GPIO_Init+0x354>)
 8001d60:	69bb      	ldr	r3, [r7, #24]
 8001d62:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d64:	4b32      	ldr	r3, [pc, #200]	@ (8001e30 <HAL_GPIO_Init+0x354>)
 8001d66:	68db      	ldr	r3, [r3, #12]
 8001d68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d6a:	693b      	ldr	r3, [r7, #16]
 8001d6c:	43db      	mvns	r3, r3
 8001d6e:	69ba      	ldr	r2, [r7, #24]
 8001d70:	4013      	ands	r3, r2
 8001d72:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d003      	beq.n	8001d88 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001d80:	69ba      	ldr	r2, [r7, #24]
 8001d82:	693b      	ldr	r3, [r7, #16]
 8001d84:	4313      	orrs	r3, r2
 8001d86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d88:	4a29      	ldr	r2, [pc, #164]	@ (8001e30 <HAL_GPIO_Init+0x354>)
 8001d8a:	69bb      	ldr	r3, [r7, #24]
 8001d8c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001d8e:	4b28      	ldr	r3, [pc, #160]	@ (8001e30 <HAL_GPIO_Init+0x354>)
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d94:	693b      	ldr	r3, [r7, #16]
 8001d96:	43db      	mvns	r3, r3
 8001d98:	69ba      	ldr	r2, [r7, #24]
 8001d9a:	4013      	ands	r3, r2
 8001d9c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d003      	beq.n	8001db2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001daa:	69ba      	ldr	r2, [r7, #24]
 8001dac:	693b      	ldr	r3, [r7, #16]
 8001dae:	4313      	orrs	r3, r2
 8001db0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001db2:	4a1f      	ldr	r2, [pc, #124]	@ (8001e30 <HAL_GPIO_Init+0x354>)
 8001db4:	69bb      	ldr	r3, [r7, #24]
 8001db6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001db8:	4b1d      	ldr	r3, [pc, #116]	@ (8001e30 <HAL_GPIO_Init+0x354>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dbe:	693b      	ldr	r3, [r7, #16]
 8001dc0:	43db      	mvns	r3, r3
 8001dc2:	69ba      	ldr	r2, [r7, #24]
 8001dc4:	4013      	ands	r3, r2
 8001dc6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d003      	beq.n	8001ddc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001dd4:	69ba      	ldr	r2, [r7, #24]
 8001dd6:	693b      	ldr	r3, [r7, #16]
 8001dd8:	4313      	orrs	r3, r2
 8001dda:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ddc:	4a14      	ldr	r2, [pc, #80]	@ (8001e30 <HAL_GPIO_Init+0x354>)
 8001dde:	69bb      	ldr	r3, [r7, #24]
 8001de0:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8001de2:	69fb      	ldr	r3, [r7, #28]
 8001de4:	3301      	adds	r3, #1
 8001de6:	61fb      	str	r3, [r7, #28]
 8001de8:	69fb      	ldr	r3, [r7, #28]
 8001dea:	2b0f      	cmp	r3, #15
 8001dec:	f67f ae86 	bls.w	8001afc <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001df0:	bf00      	nop
 8001df2:	bf00      	nop
 8001df4:	3724      	adds	r7, #36	@ 0x24
 8001df6:	46bd      	mov	sp, r7
 8001df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfc:	4770      	bx	lr
 8001dfe:	bf00      	nop
 8001e00:	40023800 	.word	0x40023800
 8001e04:	40013800 	.word	0x40013800
 8001e08:	40020000 	.word	0x40020000
 8001e0c:	40020400 	.word	0x40020400
 8001e10:	40020800 	.word	0x40020800
 8001e14:	40020c00 	.word	0x40020c00
 8001e18:	40021000 	.word	0x40021000
 8001e1c:	40021400 	.word	0x40021400
 8001e20:	40021800 	.word	0x40021800
 8001e24:	40021c00 	.word	0x40021c00
 8001e28:	40022000 	.word	0x40022000
 8001e2c:	40022400 	.word	0x40022400
 8001e30:	40013c00 	.word	0x40013c00

08001e34 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b082      	sub	sp, #8
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d101      	bne.n	8001e46 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001e42:	2301      	movs	r3, #1
 8001e44:	e08b      	b.n	8001f5e <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001e4c:	b2db      	uxtb	r3, r3
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d106      	bne.n	8001e60 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2200      	movs	r2, #0
 8001e56:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001e5a:	6878      	ldr	r0, [r7, #4]
 8001e5c:	f7ff fa66 	bl	800132c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2224      	movs	r2, #36	@ 0x24
 8001e64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	681a      	ldr	r2, [r3, #0]
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f022 0201 	bic.w	r2, r2, #1
 8001e76:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	685a      	ldr	r2, [r3, #4]
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001e84:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	689a      	ldr	r2, [r3, #8]
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001e94:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	68db      	ldr	r3, [r3, #12]
 8001e9a:	2b01      	cmp	r3, #1
 8001e9c:	d107      	bne.n	8001eae <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	689a      	ldr	r2, [r3, #8]
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001eaa:	609a      	str	r2, [r3, #8]
 8001eac:	e006      	b.n	8001ebc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	689a      	ldr	r2, [r3, #8]
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001eba:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	68db      	ldr	r3, [r3, #12]
 8001ec0:	2b02      	cmp	r3, #2
 8001ec2:	d108      	bne.n	8001ed6 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	685a      	ldr	r2, [r3, #4]
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001ed2:	605a      	str	r2, [r3, #4]
 8001ed4:	e007      	b.n	8001ee6 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	685a      	ldr	r2, [r3, #4]
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001ee4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	6859      	ldr	r1, [r3, #4]
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681a      	ldr	r2, [r3, #0]
 8001ef0:	4b1d      	ldr	r3, [pc, #116]	@ (8001f68 <HAL_I2C_Init+0x134>)
 8001ef2:	430b      	orrs	r3, r1
 8001ef4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	68da      	ldr	r2, [r3, #12]
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001f04:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	691a      	ldr	r2, [r3, #16]
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	695b      	ldr	r3, [r3, #20]
 8001f0e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	699b      	ldr	r3, [r3, #24]
 8001f16:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	430a      	orrs	r2, r1
 8001f1e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	69d9      	ldr	r1, [r3, #28]
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6a1a      	ldr	r2, [r3, #32]
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	430a      	orrs	r2, r1
 8001f2e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	681a      	ldr	r2, [r3, #0]
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f042 0201 	orr.w	r2, r2, #1
 8001f3e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2200      	movs	r2, #0
 8001f44:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2220      	movs	r2, #32
 8001f4a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2200      	movs	r2, #0
 8001f52:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2200      	movs	r2, #0
 8001f58:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001f5c:	2300      	movs	r3, #0
}
 8001f5e:	4618      	mov	r0, r3
 8001f60:	3708      	adds	r7, #8
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}
 8001f66:	bf00      	nop
 8001f68:	02008000 	.word	0x02008000

08001f6c <HAL_I2C_Slave_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Transmit(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size,
                                         uint32_t Timeout)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b088      	sub	sp, #32
 8001f70:	af02      	add	r7, sp, #8
 8001f72:	60f8      	str	r0, [r7, #12]
 8001f74:	60b9      	str	r1, [r7, #8]
 8001f76:	603b      	str	r3, [r7, #0]
 8001f78:	4613      	mov	r3, r2
 8001f7a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint16_t tmpXferCount;
  HAL_StatusTypeDef error;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001f82:	b2db      	uxtb	r3, r3
 8001f84:	2b20      	cmp	r3, #32
 8001f86:	f040 8139 	bne.w	80021fc <HAL_I2C_Slave_Transmit+0x290>
  {
    if ((pData == NULL) || (Size == 0U))
 8001f8a:	68bb      	ldr	r3, [r7, #8]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d002      	beq.n	8001f96 <HAL_I2C_Slave_Transmit+0x2a>
 8001f90:	88fb      	ldrh	r3, [r7, #6]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d105      	bne.n	8001fa2 <HAL_I2C_Slave_Transmit+0x36>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001f9c:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	e12d      	b.n	80021fe <HAL_I2C_Slave_Transmit+0x292>
    }
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001fa8:	2b01      	cmp	r3, #1
 8001faa:	d101      	bne.n	8001fb0 <HAL_I2C_Slave_Transmit+0x44>
 8001fac:	2302      	movs	r3, #2
 8001fae:	e126      	b.n	80021fe <HAL_I2C_Slave_Transmit+0x292>
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	2201      	movs	r2, #1
 8001fb4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001fb8:	f7ff fc72 	bl	80018a0 <HAL_GetTick>
 8001fbc:	6178      	str	r0, [r7, #20]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	2221      	movs	r2, #33	@ 0x21
 8001fc2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	2220      	movs	r2, #32
 8001fca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	68ba      	ldr	r2, [r7, #8]
 8001fd8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	88fa      	ldrh	r2, [r7, #6]
 8001fde:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	685a      	ldr	r2, [r3, #4]
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001ff4:	605a      	str	r2, [r3, #4]

    /* Preload TX data if no stretch enable */
    if (hi2c->Init.NoStretchMode == I2C_NOSTRETCH_ENABLE)
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	6a1b      	ldr	r3, [r3, #32]
 8001ffa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001ffe:	d111      	bne.n	8002024 <HAL_I2C_Slave_Transmit+0xb8>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002004:	781a      	ldrb	r2, [r3, #0]
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002010:	1c5a      	adds	r2, r3, #1
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800201a:	b29b      	uxth	r3, r3
 800201c:	3b01      	subs	r3, #1
 800201e:	b29a      	uxth	r2, r3
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, RESET, Timeout, tickstart) != HAL_OK)
 8002024:	697b      	ldr	r3, [r7, #20]
 8002026:	9300      	str	r3, [sp, #0]
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	2200      	movs	r2, #0
 800202c:	2108      	movs	r1, #8
 800202e:	68f8      	ldr	r0, [r7, #12]
 8002030:	f000 fea3 	bl	8002d7a <I2C_WaitOnFlagUntilTimeout>
 8002034:	4603      	mov	r3, r0
 8002036:	2b00      	cmp	r3, #0
 8002038:	d00c      	beq.n	8002054 <HAL_I2C_Slave_Transmit+0xe8>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	685a      	ldr	r2, [r3, #4]
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002048:	605a      	str	r2, [r3, #4]

      /* Flush TX register */
      I2C_Flush_TXDR(hi2c);
 800204a:	68f8      	ldr	r0, [r7, #12]
 800204c:	f000 fe53 	bl	8002cf6 <I2C_Flush_TXDR>

      return HAL_ERROR;
 8002050:	2301      	movs	r3, #1
 8002052:	e0d4      	b.n	80021fe <HAL_I2C_Slave_Transmit+0x292>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	2208      	movs	r2, #8
 800205a:	61da      	str	r2, [r3, #28]

    /* If 10bit addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	68db      	ldr	r3, [r3, #12]
 8002060:	2b02      	cmp	r3, #2
 8002062:	d11b      	bne.n	800209c <HAL_I2C_Slave_Transmit+0x130>
    {
      /* Wait until ADDR flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, RESET, Timeout, tickstart) != HAL_OK)
 8002064:	697b      	ldr	r3, [r7, #20]
 8002066:	9300      	str	r3, [sp, #0]
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	2200      	movs	r2, #0
 800206c:	2108      	movs	r1, #8
 800206e:	68f8      	ldr	r0, [r7, #12]
 8002070:	f000 fe83 	bl	8002d7a <I2C_WaitOnFlagUntilTimeout>
 8002074:	4603      	mov	r3, r0
 8002076:	2b00      	cmp	r3, #0
 8002078:	d00c      	beq.n	8002094 <HAL_I2C_Slave_Transmit+0x128>
      {
        /* Disable Address Acknowledge */
        hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	685a      	ldr	r2, [r3, #4]
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002088:	605a      	str	r2, [r3, #4]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800208a:	68f8      	ldr	r0, [r7, #12]
 800208c:	f000 fe33 	bl	8002cf6 <I2C_Flush_TXDR>

        return HAL_ERROR;
 8002090:	2301      	movs	r3, #1
 8002092:	e0b4      	b.n	80021fe <HAL_I2C_Slave_Transmit+0x292>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	2208      	movs	r2, #8
 800209a:	61da      	str	r2, [r3, #28]
    }

    /* Wait until DIR flag is set Transmitter mode */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_DIR, RESET, Timeout, tickstart) != HAL_OK)
 800209c:	697b      	ldr	r3, [r7, #20]
 800209e:	9300      	str	r3, [sp, #0]
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	2200      	movs	r2, #0
 80020a4:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
 80020a8:	68f8      	ldr	r0, [r7, #12]
 80020aa:	f000 fe66 	bl	8002d7a <I2C_WaitOnFlagUntilTimeout>
 80020ae:	4603      	mov	r3, r0
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d030      	beq.n	8002116 <HAL_I2C_Slave_Transmit+0x1aa>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	685a      	ldr	r2, [r3, #4]
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80020c2:	605a      	str	r2, [r3, #4]

      /* Flush TX register */
      I2C_Flush_TXDR(hi2c);
 80020c4:	68f8      	ldr	r0, [r7, #12]
 80020c6:	f000 fe16 	bl	8002cf6 <I2C_Flush_TXDR>

      return HAL_ERROR;
 80020ca:	2301      	movs	r3, #1
 80020cc:	e097      	b.n	80021fe <HAL_I2C_Slave_Transmit+0x292>
    }

    while (hi2c->XferCount > 0U)
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80020ce:	697a      	ldr	r2, [r7, #20]
 80020d0:	6839      	ldr	r1, [r7, #0]
 80020d2:	68f8      	ldr	r0, [r7, #12]
 80020d4:	f000 feaa 	bl	8002e2c <I2C_WaitOnTXISFlagUntilTimeout>
 80020d8:	4603      	mov	r3, r0
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d009      	beq.n	80020f2 <HAL_I2C_Slave_Transmit+0x186>
      {
        /* Disable Address Acknowledge */
        hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	685a      	ldr	r2, [r3, #4]
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80020ec:	605a      	str	r2, [r3, #4]
        return HAL_ERROR;
 80020ee:	2301      	movs	r3, #1
 80020f0:	e085      	b.n	80021fe <HAL_I2C_Slave_Transmit+0x292>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020f6:	781a      	ldrb	r2, [r3, #0]
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002102:	1c5a      	adds	r2, r3, #1
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800210c:	b29b      	uxth	r3, r3
 800210e:	3b01      	subs	r3, #1
 8002110:	b29a      	uxth	r2, r3
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferCount > 0U)
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800211a:	b29b      	uxth	r3, r3
 800211c:	2b00      	cmp	r3, #0
 800211e:	d1d6      	bne.n	80020ce <HAL_I2C_Slave_Transmit+0x162>
    }

    /* Wait until AF flag is set */
    error = I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_AF, RESET, Timeout, tickstart);
 8002120:	697b      	ldr	r3, [r7, #20]
 8002122:	9300      	str	r3, [sp, #0]
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	2200      	movs	r2, #0
 8002128:	2110      	movs	r1, #16
 800212a:	68f8      	ldr	r0, [r7, #12]
 800212c:	f000 fe25 	bl	8002d7a <I2C_WaitOnFlagUntilTimeout>
 8002130:	4603      	mov	r3, r0
 8002132:	74fb      	strb	r3, [r7, #19]

    if (error != HAL_OK)
 8002134:	7cfb      	ldrb	r3, [r7, #19]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d017      	beq.n	800216a <HAL_I2C_Slave_Transmit+0x1fe>
    {
      /* Check that I2C transfer finished */
      /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
      /* Mean XferCount == 0 */

      tmpXferCount = hi2c->XferCount;
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800213e:	823b      	strh	r3, [r7, #16]
      if ((hi2c->ErrorCode == HAL_I2C_ERROR_AF) && (tmpXferCount == 0U))
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002144:	2b04      	cmp	r3, #4
 8002146:	d106      	bne.n	8002156 <HAL_I2C_Slave_Transmit+0x1ea>
 8002148:	8a3b      	ldrh	r3, [r7, #16]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d103      	bne.n	8002156 <HAL_I2C_Slave_Transmit+0x1ea>
      {
        /* Reset ErrorCode to NONE */
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	2200      	movs	r2, #0
 8002152:	645a      	str	r2, [r3, #68]	@ 0x44
 8002154:	e026      	b.n	80021a4 <HAL_I2C_Slave_Transmit+0x238>
      }
      else
      {
        /* Disable Address Acknowledge */
        hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	685a      	ldr	r2, [r3, #4]
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002164:	605a      	str	r2, [r3, #4]
        return HAL_ERROR;
 8002166:	2301      	movs	r3, #1
 8002168:	e049      	b.n	80021fe <HAL_I2C_Slave_Transmit+0x292>
      }
    }
    else
    {
      /* Flush TX register */
      I2C_Flush_TXDR(hi2c);
 800216a:	68f8      	ldr	r0, [r7, #12]
 800216c:	f000 fdc3 	bl	8002cf6 <I2C_Flush_TXDR>

      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	2210      	movs	r2, #16
 8002176:	61da      	str	r2, [r3, #28]

      /* Wait until STOP flag is set */
      if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002178:	697a      	ldr	r2, [r7, #20]
 800217a:	6839      	ldr	r1, [r7, #0]
 800217c:	68f8      	ldr	r0, [r7, #12]
 800217e:	f000 fe9c 	bl	8002eba <I2C_WaitOnSTOPFlagUntilTimeout>
 8002182:	4603      	mov	r3, r0
 8002184:	2b00      	cmp	r3, #0
 8002186:	d009      	beq.n	800219c <HAL_I2C_Slave_Transmit+0x230>
      {
        /* Disable Address Acknowledge */
        hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	685a      	ldr	r2, [r3, #4]
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002196:	605a      	str	r2, [r3, #4]

        return HAL_ERROR;
 8002198:	2301      	movs	r3, #1
 800219a:	e030      	b.n	80021fe <HAL_I2C_Slave_Transmit+0x292>
      }

      /* Clear STOP flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	2220      	movs	r2, #32
 80021a2:	61da      	str	r2, [r3, #28]
    }

    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, Timeout, tickstart) != HAL_OK)
 80021a4:	697b      	ldr	r3, [r7, #20]
 80021a6:	9300      	str	r3, [sp, #0]
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	2201      	movs	r2, #1
 80021ac:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80021b0:	68f8      	ldr	r0, [r7, #12]
 80021b2:	f000 fde2 	bl	8002d7a <I2C_WaitOnFlagUntilTimeout>
 80021b6:	4603      	mov	r3, r0
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d009      	beq.n	80021d0 <HAL_I2C_Slave_Transmit+0x264>
    {
      /* Disable Address Acknowledge */
      hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	685a      	ldr	r2, [r3, #4]
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80021ca:	605a      	str	r2, [r3, #4]
      return HAL_ERROR;
 80021cc:	2301      	movs	r3, #1
 80021ce:	e016      	b.n	80021fe <HAL_I2C_Slave_Transmit+0x292>
    }

    /* Disable Address Acknowledge */
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	685a      	ldr	r2, [r3, #4]
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80021de:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	2220      	movs	r2, #32
 80021e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	2200      	movs	r2, #0
 80021ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	2200      	movs	r2, #0
 80021f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80021f8:	2300      	movs	r3, #0
 80021fa:	e000      	b.n	80021fe <HAL_I2C_Slave_Transmit+0x292>
  }
  else
  {
    return HAL_BUSY;
 80021fc:	2302      	movs	r3, #2
  }
}
 80021fe:	4618      	mov	r0, r3
 8002200:	3718      	adds	r7, #24
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}

08002206 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8002206:	b580      	push	{r7, lr}
 8002208:	b084      	sub	sp, #16
 800220a:	af00      	add	r7, sp, #0
 800220c:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	699b      	ldr	r3, [r3, #24]
 8002214:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002222:	2b00      	cmp	r3, #0
 8002224:	d005      	beq.n	8002232 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800222a:	68ba      	ldr	r2, [r7, #8]
 800222c:	68f9      	ldr	r1, [r7, #12]
 800222e:	6878      	ldr	r0, [r7, #4]
 8002230:	4798      	blx	r3
  }
}
 8002232:	bf00      	nop
 8002234:	3710      	adds	r7, #16
 8002236:	46bd      	mov	sp, r7
 8002238:	bd80      	pop	{r7, pc}

0800223a <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800223a:	b580      	push	{r7, lr}
 800223c:	b086      	sub	sp, #24
 800223e:	af00      	add	r7, sp, #0
 8002240:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	699b      	ldr	r3, [r3, #24]
 8002248:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8002252:	697b      	ldr	r3, [r7, #20]
 8002254:	0a1b      	lsrs	r3, r3, #8
 8002256:	f003 0301 	and.w	r3, r3, #1
 800225a:	2b00      	cmp	r3, #0
 800225c:	d010      	beq.n	8002280 <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800225e:	693b      	ldr	r3, [r7, #16]
 8002260:	09db      	lsrs	r3, r3, #7
 8002262:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8002266:	2b00      	cmp	r3, #0
 8002268:	d00a      	beq.n	8002280 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800226e:	f043 0201 	orr.w	r2, r3, #1
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800227e:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8002280:	697b      	ldr	r3, [r7, #20]
 8002282:	0a9b      	lsrs	r3, r3, #10
 8002284:	f003 0301 	and.w	r3, r3, #1
 8002288:	2b00      	cmp	r3, #0
 800228a:	d010      	beq.n	80022ae <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800228c:	693b      	ldr	r3, [r7, #16]
 800228e:	09db      	lsrs	r3, r3, #7
 8002290:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8002294:	2b00      	cmp	r3, #0
 8002296:	d00a      	beq.n	80022ae <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800229c:	f043 0208 	orr.w	r2, r3, #8
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80022ac:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80022ae:	697b      	ldr	r3, [r7, #20]
 80022b0:	0a5b      	lsrs	r3, r3, #9
 80022b2:	f003 0301 	and.w	r3, r3, #1
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d010      	beq.n	80022dc <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80022ba:	693b      	ldr	r3, [r7, #16]
 80022bc:	09db      	lsrs	r3, r3, #7
 80022be:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d00a      	beq.n	80022dc <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022ca:	f043 0202 	orr.w	r2, r3, #2
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80022da:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022e0:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	f003 030b 	and.w	r3, r3, #11
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d003      	beq.n	80022f4 <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 80022ec:	68f9      	ldr	r1, [r7, #12]
 80022ee:	6878      	ldr	r0, [r7, #4]
 80022f0:	f000 fbea 	bl	8002ac8 <I2C_ITError>
  }
}
 80022f4:	bf00      	nop
 80022f6:	3718      	adds	r7, #24
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bd80      	pop	{r7, pc}

080022fc <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80022fc:	b480      	push	{r7}
 80022fe:	b083      	sub	sp, #12
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002304:	bf00      	nop
 8002306:	370c      	adds	r7, #12
 8002308:	46bd      	mov	sp, r7
 800230a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230e:	4770      	bx	lr

08002310 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002310:	b480      	push	{r7}
 8002312:	b083      	sub	sp, #12
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002318:	bf00      	nop
 800231a:	370c      	adds	r7, #12
 800231c:	46bd      	mov	sp, r7
 800231e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002322:	4770      	bx	lr

08002324 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002324:	b480      	push	{r7}
 8002326:	b083      	sub	sp, #12
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
 800232c:	460b      	mov	r3, r1
 800232e:	70fb      	strb	r3, [r7, #3]
 8002330:	4613      	mov	r3, r2
 8002332:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002334:	bf00      	nop
 8002336:	370c      	adds	r7, #12
 8002338:	46bd      	mov	sp, r7
 800233a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233e:	4770      	bx	lr

08002340 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002340:	b480      	push	{r7}
 8002342:	b083      	sub	sp, #12
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8002348:	bf00      	nop
 800234a:	370c      	adds	r7, #12
 800234c:	46bd      	mov	sp, r7
 800234e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002352:	4770      	bx	lr

08002354 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002354:	b480      	push	{r7}
 8002356:	b083      	sub	sp, #12
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800235c:	bf00      	nop
 800235e:	370c      	adds	r7, #12
 8002360:	46bd      	mov	sp, r7
 8002362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002366:	4770      	bx	lr

08002368 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002368:	b480      	push	{r7}
 800236a:	b083      	sub	sp, #12
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002370:	bf00      	nop
 8002372:	370c      	adds	r7, #12
 8002374:	46bd      	mov	sp, r7
 8002376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237a:	4770      	bx	lr

0800237c <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b086      	sub	sp, #24
 8002380:	af00      	add	r7, sp, #0
 8002382:	60f8      	str	r0, [r7, #12]
 8002384:	60b9      	str	r1, [r7, #8]
 8002386:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800238c:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800238e:	68bb      	ldr	r3, [r7, #8]
 8002390:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002398:	2b01      	cmp	r3, #1
 800239a:	d101      	bne.n	80023a0 <I2C_Slave_ISR_IT+0x24>
 800239c:	2302      	movs	r3, #2
 800239e:	e0ed      	b.n	800257c <I2C_Slave_ISR_IT+0x200>
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	2201      	movs	r2, #1
 80023a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80023a8:	693b      	ldr	r3, [r7, #16]
 80023aa:	095b      	lsrs	r3, r3, #5
 80023ac:	f003 0301 	and.w	r3, r3, #1
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d00a      	beq.n	80023ca <I2C_Slave_ISR_IT+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	095b      	lsrs	r3, r3, #5
 80023b8:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d004      	beq.n	80023ca <I2C_Slave_ISR_IT+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80023c0:	6939      	ldr	r1, [r7, #16]
 80023c2:	68f8      	ldr	r0, [r7, #12]
 80023c4:	f000 f9c0 	bl	8002748 <I2C_ITSlaveCplt>
 80023c8:	e0d3      	b.n	8002572 <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80023ca:	693b      	ldr	r3, [r7, #16]
 80023cc:	091b      	lsrs	r3, r3, #4
 80023ce:	f003 0301 	and.w	r3, r3, #1
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d04d      	beq.n	8002472 <I2C_Slave_ISR_IT+0xf6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	091b      	lsrs	r3, r3, #4
 80023da:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d047      	beq.n	8002472 <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023e6:	b29b      	uxth	r3, r3
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d128      	bne.n	800243e <I2C_Slave_ISR_IT+0xc2>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80023f2:	b2db      	uxtb	r3, r3
 80023f4:	2b28      	cmp	r3, #40	@ 0x28
 80023f6:	d108      	bne.n	800240a <I2C_Slave_ISR_IT+0x8e>
 80023f8:	697b      	ldr	r3, [r7, #20]
 80023fa:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80023fe:	d104      	bne.n	800240a <I2C_Slave_ISR_IT+0x8e>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8002400:	6939      	ldr	r1, [r7, #16]
 8002402:	68f8      	ldr	r0, [r7, #12]
 8002404:	f000 fb0a 	bl	8002a1c <I2C_ITListenCplt>
 8002408:	e032      	b.n	8002470 <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002410:	b2db      	uxtb	r3, r3
 8002412:	2b29      	cmp	r3, #41	@ 0x29
 8002414:	d10e      	bne.n	8002434 <I2C_Slave_ISR_IT+0xb8>
 8002416:	697b      	ldr	r3, [r7, #20]
 8002418:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800241c:	d00a      	beq.n	8002434 <I2C_Slave_ISR_IT+0xb8>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	2210      	movs	r2, #16
 8002424:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8002426:	68f8      	ldr	r0, [r7, #12]
 8002428:	f000 fc65 	bl	8002cf6 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800242c:	68f8      	ldr	r0, [r7, #12]
 800242e:	f000 f92d 	bl	800268c <I2C_ITSlaveSeqCplt>
 8002432:	e01d      	b.n	8002470 <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	2210      	movs	r2, #16
 800243a:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800243c:	e096      	b.n	800256c <I2C_Slave_ISR_IT+0x1f0>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	2210      	movs	r2, #16
 8002444:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800244a:	f043 0204 	orr.w	r2, r3, #4
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002452:	697b      	ldr	r3, [r7, #20]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d004      	beq.n	8002462 <I2C_Slave_ISR_IT+0xe6>
 8002458:	697b      	ldr	r3, [r7, #20]
 800245a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800245e:	f040 8085 	bne.w	800256c <I2C_Slave_ISR_IT+0x1f0>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002466:	4619      	mov	r1, r3
 8002468:	68f8      	ldr	r0, [r7, #12]
 800246a:	f000 fb2d 	bl	8002ac8 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800246e:	e07d      	b.n	800256c <I2C_Slave_ISR_IT+0x1f0>
 8002470:	e07c      	b.n	800256c <I2C_Slave_ISR_IT+0x1f0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002472:	693b      	ldr	r3, [r7, #16]
 8002474:	089b      	lsrs	r3, r3, #2
 8002476:	f003 0301 	and.w	r3, r3, #1
 800247a:	2b00      	cmp	r3, #0
 800247c:	d030      	beq.n	80024e0 <I2C_Slave_ISR_IT+0x164>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	089b      	lsrs	r3, r3, #2
 8002482:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002486:	2b00      	cmp	r3, #0
 8002488:	d02a      	beq.n	80024e0 <I2C_Slave_ISR_IT+0x164>
  {
    if (hi2c->XferCount > 0U)
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800248e:	b29b      	uxth	r3, r3
 8002490:	2b00      	cmp	r3, #0
 8002492:	d018      	beq.n	80024c6 <I2C_Slave_ISR_IT+0x14a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800249e:	b2d2      	uxtb	r2, r2
 80024a0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024a6:	1c5a      	adds	r2, r3, #1
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024b0:	3b01      	subs	r3, #1
 80024b2:	b29a      	uxth	r2, r3
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024bc:	b29b      	uxth	r3, r3
 80024be:	3b01      	subs	r3, #1
 80024c0:	b29a      	uxth	r2, r3
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024ca:	b29b      	uxth	r3, r3
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d14f      	bne.n	8002570 <I2C_Slave_ISR_IT+0x1f4>
 80024d0:	697b      	ldr	r3, [r7, #20]
 80024d2:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80024d6:	d04b      	beq.n	8002570 <I2C_Slave_ISR_IT+0x1f4>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80024d8:	68f8      	ldr	r0, [r7, #12]
 80024da:	f000 f8d7 	bl	800268c <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80024de:	e047      	b.n	8002570 <I2C_Slave_ISR_IT+0x1f4>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80024e0:	693b      	ldr	r3, [r7, #16]
 80024e2:	08db      	lsrs	r3, r3, #3
 80024e4:	f003 0301 	and.w	r3, r3, #1
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d00a      	beq.n	8002502 <I2C_Slave_ISR_IT+0x186>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	08db      	lsrs	r3, r3, #3
 80024f0:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d004      	beq.n	8002502 <I2C_Slave_ISR_IT+0x186>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80024f8:	6939      	ldr	r1, [r7, #16]
 80024fa:	68f8      	ldr	r0, [r7, #12]
 80024fc:	f000 f842 	bl	8002584 <I2C_ITAddrCplt>
 8002500:	e037      	b.n	8002572 <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002502:	693b      	ldr	r3, [r7, #16]
 8002504:	085b      	lsrs	r3, r3, #1
 8002506:	f003 0301 	and.w	r3, r3, #1
 800250a:	2b00      	cmp	r3, #0
 800250c:	d031      	beq.n	8002572 <I2C_Slave_ISR_IT+0x1f6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	085b      	lsrs	r3, r3, #1
 8002512:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002516:	2b00      	cmp	r3, #0
 8002518:	d02b      	beq.n	8002572 <I2C_Slave_ISR_IT+0x1f6>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800251e:	b29b      	uxth	r3, r3
 8002520:	2b00      	cmp	r3, #0
 8002522:	d018      	beq.n	8002556 <I2C_Slave_ISR_IT+0x1da>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002528:	781a      	ldrb	r2, [r3, #0]
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002534:	1c5a      	adds	r2, r3, #1
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800253e:	b29b      	uxth	r3, r3
 8002540:	3b01      	subs	r3, #1
 8002542:	b29a      	uxth	r2, r3
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800254c:	3b01      	subs	r3, #1
 800254e:	b29a      	uxth	r2, r3
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	851a      	strh	r2, [r3, #40]	@ 0x28
 8002554:	e00d      	b.n	8002572 <I2C_Slave_ISR_IT+0x1f6>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8002556:	697b      	ldr	r3, [r7, #20]
 8002558:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800255c:	d002      	beq.n	8002564 <I2C_Slave_ISR_IT+0x1e8>
 800255e:	697b      	ldr	r3, [r7, #20]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d106      	bne.n	8002572 <I2C_Slave_ISR_IT+0x1f6>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002564:	68f8      	ldr	r0, [r7, #12]
 8002566:	f000 f891 	bl	800268c <I2C_ITSlaveSeqCplt>
 800256a:	e002      	b.n	8002572 <I2C_Slave_ISR_IT+0x1f6>
    if (hi2c->XferCount == 0U)
 800256c:	bf00      	nop
 800256e:	e000      	b.n	8002572 <I2C_Slave_ISR_IT+0x1f6>
    if ((hi2c->XferCount == 0U) && \
 8002570:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	2200      	movs	r2, #0
 8002576:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800257a:	2300      	movs	r3, #0
}
 800257c:	4618      	mov	r0, r3
 800257e:	3718      	adds	r7, #24
 8002580:	46bd      	mov	sp, r7
 8002582:	bd80      	pop	{r7, pc}

08002584 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b084      	sub	sp, #16
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
 800258c:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002594:	b2db      	uxtb	r3, r3
 8002596:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800259a:	2b28      	cmp	r3, #40	@ 0x28
 800259c:	d16a      	bne.n	8002674 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	699b      	ldr	r3, [r3, #24]
 80025a4:	0c1b      	lsrs	r3, r3, #16
 80025a6:	b2db      	uxtb	r3, r3
 80025a8:	f003 0301 	and.w	r3, r3, #1
 80025ac:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	699b      	ldr	r3, [r3, #24]
 80025b4:	0c1b      	lsrs	r3, r3, #16
 80025b6:	b29b      	uxth	r3, r3
 80025b8:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 80025bc:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	689b      	ldr	r3, [r3, #8]
 80025c4:	b29b      	uxth	r3, r3
 80025c6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80025ca:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	68db      	ldr	r3, [r3, #12]
 80025d2:	b29b      	uxth	r3, r3
 80025d4:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 80025d8:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	68db      	ldr	r3, [r3, #12]
 80025de:	2b02      	cmp	r3, #2
 80025e0:	d138      	bne.n	8002654 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 80025e2:	897b      	ldrh	r3, [r7, #10]
 80025e4:	09db      	lsrs	r3, r3, #7
 80025e6:	b29a      	uxth	r2, r3
 80025e8:	89bb      	ldrh	r3, [r7, #12]
 80025ea:	4053      	eors	r3, r2
 80025ec:	b29b      	uxth	r3, r3
 80025ee:	f003 0306 	and.w	r3, r3, #6
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d11c      	bne.n	8002630 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 80025f6:	897b      	ldrh	r3, [r7, #10]
 80025f8:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80025fe:	1c5a      	adds	r2, r3, #1
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002608:	2b02      	cmp	r3, #2
 800260a:	d13b      	bne.n	8002684 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2200      	movs	r2, #0
 8002610:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	2208      	movs	r2, #8
 8002618:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2200      	movs	r2, #0
 800261e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002622:	89ba      	ldrh	r2, [r7, #12]
 8002624:	7bfb      	ldrb	r3, [r7, #15]
 8002626:	4619      	mov	r1, r3
 8002628:	6878      	ldr	r0, [r7, #4]
 800262a:	f7ff fe7b 	bl	8002324 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800262e:	e029      	b.n	8002684 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8002630:	893b      	ldrh	r3, [r7, #8]
 8002632:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002634:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002638:	6878      	ldr	r0, [r7, #4]
 800263a:	f000 fd61 	bl	8003100 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2200      	movs	r2, #0
 8002642:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002646:	89ba      	ldrh	r2, [r7, #12]
 8002648:	7bfb      	ldrb	r3, [r7, #15]
 800264a:	4619      	mov	r1, r3
 800264c:	6878      	ldr	r0, [r7, #4]
 800264e:	f7ff fe69 	bl	8002324 <HAL_I2C_AddrCallback>
}
 8002652:	e017      	b.n	8002684 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002654:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002658:	6878      	ldr	r0, [r7, #4]
 800265a:	f000 fd51 	bl	8003100 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2200      	movs	r2, #0
 8002662:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002666:	89ba      	ldrh	r2, [r7, #12]
 8002668:	7bfb      	ldrb	r3, [r7, #15]
 800266a:	4619      	mov	r1, r3
 800266c:	6878      	ldr	r0, [r7, #4]
 800266e:	f7ff fe59 	bl	8002324 <HAL_I2C_AddrCallback>
}
 8002672:	e007      	b.n	8002684 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	2208      	movs	r2, #8
 800267a:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2200      	movs	r2, #0
 8002680:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 8002684:	bf00      	nop
 8002686:	3710      	adds	r7, #16
 8002688:	46bd      	mov	sp, r7
 800268a:	bd80      	pop	{r7, pc}

0800268c <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b084      	sub	sp, #16
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2200      	movs	r2, #0
 80026a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	0b9b      	lsrs	r3, r3, #14
 80026a8:	f003 0301 	and.w	r3, r3, #1
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d008      	beq.n	80026c2 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	681a      	ldr	r2, [r3, #0]
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80026be:	601a      	str	r2, [r3, #0]
 80026c0:	e00d      	b.n	80026de <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	0bdb      	lsrs	r3, r3, #15
 80026c6:	f003 0301 	and.w	r3, r3, #1
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d007      	beq.n	80026de <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	681a      	ldr	r2, [r3, #0]
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80026dc:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80026e4:	b2db      	uxtb	r3, r3
 80026e6:	2b29      	cmp	r3, #41	@ 0x29
 80026e8:	d112      	bne.n	8002710 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2228      	movs	r2, #40	@ 0x28
 80026ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2221      	movs	r2, #33	@ 0x21
 80026f6:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80026f8:	2101      	movs	r1, #1
 80026fa:	6878      	ldr	r0, [r7, #4]
 80026fc:	f000 fd00 	bl	8003100 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2200      	movs	r2, #0
 8002704:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002708:	6878      	ldr	r0, [r7, #4]
 800270a:	f7ff fdf7 	bl	80022fc <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800270e:	e017      	b.n	8002740 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002716:	b2db      	uxtb	r3, r3
 8002718:	2b2a      	cmp	r3, #42	@ 0x2a
 800271a:	d111      	bne.n	8002740 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2228      	movs	r2, #40	@ 0x28
 8002720:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2222      	movs	r2, #34	@ 0x22
 8002728:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800272a:	2102      	movs	r1, #2
 800272c:	6878      	ldr	r0, [r7, #4]
 800272e:	f000 fce7 	bl	8003100 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2200      	movs	r2, #0
 8002736:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800273a:	6878      	ldr	r0, [r7, #4]
 800273c:	f7ff fde8 	bl	8002310 <HAL_I2C_SlaveRxCpltCallback>
}
 8002740:	bf00      	nop
 8002742:	3710      	adds	r7, #16
 8002744:	46bd      	mov	sp, r7
 8002746:	bd80      	pop	{r7, pc}

08002748 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b086      	sub	sp, #24
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
 8002750:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002762:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800276a:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	2220      	movs	r2, #32
 8002772:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002774:	7afb      	ldrb	r3, [r7, #11]
 8002776:	2b21      	cmp	r3, #33	@ 0x21
 8002778:	d002      	beq.n	8002780 <I2C_ITSlaveCplt+0x38>
 800277a:	7afb      	ldrb	r3, [r7, #11]
 800277c:	2b29      	cmp	r3, #41	@ 0x29
 800277e:	d108      	bne.n	8002792 <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8002780:	f248 0101 	movw	r1, #32769	@ 0x8001
 8002784:	6878      	ldr	r0, [r7, #4]
 8002786:	f000 fcbb 	bl	8003100 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2221      	movs	r2, #33	@ 0x21
 800278e:	631a      	str	r2, [r3, #48]	@ 0x30
 8002790:	e019      	b.n	80027c6 <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002792:	7afb      	ldrb	r3, [r7, #11]
 8002794:	2b22      	cmp	r3, #34	@ 0x22
 8002796:	d002      	beq.n	800279e <I2C_ITSlaveCplt+0x56>
 8002798:	7afb      	ldrb	r3, [r7, #11]
 800279a:	2b2a      	cmp	r3, #42	@ 0x2a
 800279c:	d108      	bne.n	80027b0 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800279e:	f248 0102 	movw	r1, #32770	@ 0x8002
 80027a2:	6878      	ldr	r0, [r7, #4]
 80027a4:	f000 fcac 	bl	8003100 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2222      	movs	r2, #34	@ 0x22
 80027ac:	631a      	str	r2, [r3, #48]	@ 0x30
 80027ae:	e00a      	b.n	80027c6 <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 80027b0:	7afb      	ldrb	r3, [r7, #11]
 80027b2:	2b28      	cmp	r3, #40	@ 0x28
 80027b4:	d107      	bne.n	80027c6 <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 80027b6:	f248 0103 	movw	r1, #32771	@ 0x8003
 80027ba:	6878      	ldr	r0, [r7, #4]
 80027bc:	f000 fca0 	bl	8003100 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2200      	movs	r2, #0
 80027c4:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	685a      	ldr	r2, [r3, #4]
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80027d4:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	6859      	ldr	r1, [r3, #4]
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681a      	ldr	r2, [r3, #0]
 80027e0:	4b8c      	ldr	r3, [pc, #560]	@ (8002a14 <I2C_ITSlaveCplt+0x2cc>)
 80027e2:	400b      	ands	r3, r1
 80027e4:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80027e6:	6878      	ldr	r0, [r7, #4]
 80027e8:	f000 fa85 	bl	8002cf6 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80027ec:	693b      	ldr	r3, [r7, #16]
 80027ee:	0b9b      	lsrs	r3, r3, #14
 80027f0:	f003 0301 	and.w	r3, r3, #1
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d013      	beq.n	8002820 <I2C_ITSlaveCplt+0xd8>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	681a      	ldr	r2, [r3, #0]
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002806:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800280c:	2b00      	cmp	r3, #0
 800280e:	d020      	beq.n	8002852 <I2C_ITSlaveCplt+0x10a>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	b29a      	uxth	r2, r3
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800281e:	e018      	b.n	8002852 <I2C_ITSlaveCplt+0x10a>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8002820:	693b      	ldr	r3, [r7, #16]
 8002822:	0bdb      	lsrs	r3, r3, #15
 8002824:	f003 0301 	and.w	r3, r3, #1
 8002828:	2b00      	cmp	r3, #0
 800282a:	d012      	beq.n	8002852 <I2C_ITSlaveCplt+0x10a>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	681a      	ldr	r2, [r3, #0]
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800283a:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002840:	2b00      	cmp	r3, #0
 8002842:	d006      	beq.n	8002852 <I2C_ITSlaveCplt+0x10a>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	b29a      	uxth	r2, r3
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8002852:	697b      	ldr	r3, [r7, #20]
 8002854:	089b      	lsrs	r3, r3, #2
 8002856:	f003 0301 	and.w	r3, r3, #1
 800285a:	2b00      	cmp	r3, #0
 800285c:	d020      	beq.n	80028a0 <I2C_ITSlaveCplt+0x158>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800285e:	697b      	ldr	r3, [r7, #20]
 8002860:	f023 0304 	bic.w	r3, r3, #4
 8002864:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002870:	b2d2      	uxtb	r2, r2
 8002872:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002878:	1c5a      	adds	r2, r3, #1
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	625a      	str	r2, [r3, #36]	@ 0x24

    if (hi2c->XferSize > 0U)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002882:	2b00      	cmp	r3, #0
 8002884:	d00c      	beq.n	80028a0 <I2C_ITSlaveCplt+0x158>
    {
      hi2c->XferSize--;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800288a:	3b01      	subs	r3, #1
 800288c:	b29a      	uxth	r2, r3
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002896:	b29b      	uxth	r3, r3
 8002898:	3b01      	subs	r3, #1
 800289a:	b29a      	uxth	r2, r3
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028a4:	b29b      	uxth	r3, r3
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d005      	beq.n	80028b6 <I2C_ITSlaveCplt+0x16e>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028ae:	f043 0204 	orr.w	r2, r3, #4
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80028b6:	697b      	ldr	r3, [r7, #20]
 80028b8:	091b      	lsrs	r3, r3, #4
 80028ba:	f003 0301 	and.w	r3, r3, #1
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d04a      	beq.n	8002958 <I2C_ITSlaveCplt+0x210>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 80028c2:	693b      	ldr	r3, [r7, #16]
 80028c4:	091b      	lsrs	r3, r3, #4
 80028c6:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d044      	beq.n	8002958 <I2C_ITSlaveCplt+0x210>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028d2:	b29b      	uxth	r3, r3
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d128      	bne.n	800292a <I2C_ITSlaveCplt+0x1e2>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80028de:	b2db      	uxtb	r3, r3
 80028e0:	2b28      	cmp	r3, #40	@ 0x28
 80028e2:	d108      	bne.n	80028f6 <I2C_ITSlaveCplt+0x1ae>
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80028ea:	d104      	bne.n	80028f6 <I2C_ITSlaveCplt+0x1ae>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80028ec:	6979      	ldr	r1, [r7, #20]
 80028ee:	6878      	ldr	r0, [r7, #4]
 80028f0:	f000 f894 	bl	8002a1c <I2C_ITListenCplt>
 80028f4:	e030      	b.n	8002958 <I2C_ITSlaveCplt+0x210>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80028fc:	b2db      	uxtb	r3, r3
 80028fe:	2b29      	cmp	r3, #41	@ 0x29
 8002900:	d10e      	bne.n	8002920 <I2C_ITSlaveCplt+0x1d8>
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002908:	d00a      	beq.n	8002920 <I2C_ITSlaveCplt+0x1d8>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	2210      	movs	r2, #16
 8002910:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8002912:	6878      	ldr	r0, [r7, #4]
 8002914:	f000 f9ef 	bl	8002cf6 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002918:	6878      	ldr	r0, [r7, #4]
 800291a:	f7ff feb7 	bl	800268c <I2C_ITSlaveSeqCplt>
 800291e:	e01b      	b.n	8002958 <I2C_ITSlaveCplt+0x210>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	2210      	movs	r2, #16
 8002926:	61da      	str	r2, [r3, #28]
 8002928:	e016      	b.n	8002958 <I2C_ITSlaveCplt+0x210>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	2210      	movs	r2, #16
 8002930:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002936:	f043 0204 	orr.w	r2, r3, #4
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d003      	beq.n	800294c <I2C_ITSlaveCplt+0x204>
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800294a:	d105      	bne.n	8002958 <I2C_ITSlaveCplt+0x210>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002950:	4619      	mov	r1, r3
 8002952:	6878      	ldr	r0, [r7, #4]
 8002954:	f000 f8b8 	bl	8002ac8 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2200      	movs	r2, #0
 800295c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2200      	movs	r2, #0
 8002964:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800296a:	2b00      	cmp	r3, #0
 800296c:	d010      	beq.n	8002990 <I2C_ITSlaveCplt+0x248>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002972:	4619      	mov	r1, r3
 8002974:	6878      	ldr	r0, [r7, #4]
 8002976:	f000 f8a7 	bl	8002ac8 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002980:	b2db      	uxtb	r3, r3
 8002982:	2b28      	cmp	r3, #40	@ 0x28
 8002984:	d141      	bne.n	8002a0a <I2C_ITSlaveCplt+0x2c2>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8002986:	6979      	ldr	r1, [r7, #20]
 8002988:	6878      	ldr	r0, [r7, #4]
 800298a:	f000 f847 	bl	8002a1c <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800298e:	e03c      	b.n	8002a0a <I2C_ITSlaveCplt+0x2c2>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002994:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002998:	d014      	beq.n	80029c4 <I2C_ITSlaveCplt+0x27c>
    I2C_ITSlaveSeqCplt(hi2c);
 800299a:	6878      	ldr	r0, [r7, #4]
 800299c:	f7ff fe76 	bl	800268c <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	4a1d      	ldr	r2, [pc, #116]	@ (8002a18 <I2C_ITSlaveCplt+0x2d0>)
 80029a4:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2220      	movs	r2, #32
 80029aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2200      	movs	r2, #0
 80029b2:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2200      	movs	r2, #0
 80029b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 80029bc:	6878      	ldr	r0, [r7, #4]
 80029be:	f7ff fcbf 	bl	8002340 <HAL_I2C_ListenCpltCallback>
}
 80029c2:	e022      	b.n	8002a0a <I2C_ITSlaveCplt+0x2c2>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80029ca:	b2db      	uxtb	r3, r3
 80029cc:	2b22      	cmp	r3, #34	@ 0x22
 80029ce:	d10e      	bne.n	80029ee <I2C_ITSlaveCplt+0x2a6>
    hi2c->State = HAL_I2C_STATE_READY;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2220      	movs	r2, #32
 80029d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2200      	movs	r2, #0
 80029dc:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2200      	movs	r2, #0
 80029e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80029e6:	6878      	ldr	r0, [r7, #4]
 80029e8:	f7ff fc92 	bl	8002310 <HAL_I2C_SlaveRxCpltCallback>
}
 80029ec:	e00d      	b.n	8002a0a <I2C_ITSlaveCplt+0x2c2>
    hi2c->State = HAL_I2C_STATE_READY;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2220      	movs	r2, #32
 80029f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2200      	movs	r2, #0
 80029fa:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2200      	movs	r2, #0
 8002a00:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002a04:	6878      	ldr	r0, [r7, #4]
 8002a06:	f7ff fc79 	bl	80022fc <HAL_I2C_SlaveTxCpltCallback>
}
 8002a0a:	bf00      	nop
 8002a0c:	3718      	adds	r7, #24
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd80      	pop	{r7, pc}
 8002a12:	bf00      	nop
 8002a14:	fe00e800 	.word	0xfe00e800
 8002a18:	ffff0000 	.word	0xffff0000

08002a1c <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b082      	sub	sp, #8
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
 8002a24:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	4a26      	ldr	r2, [pc, #152]	@ (8002ac4 <I2C_ITListenCplt+0xa8>)
 8002a2a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2200      	movs	r2, #0
 8002a30:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2220      	movs	r2, #32
 8002a36:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2200      	movs	r2, #0
 8002a46:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	089b      	lsrs	r3, r3, #2
 8002a4c:	f003 0301 	and.w	r3, r3, #1
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d022      	beq.n	8002a9a <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a5e:	b2d2      	uxtb	r2, r2
 8002a60:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a66:	1c5a      	adds	r2, r3, #1
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	625a      	str	r2, [r3, #36]	@ 0x24

    if (hi2c->XferSize > 0U)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d012      	beq.n	8002a9a <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a78:	3b01      	subs	r3, #1
 8002a7a:	b29a      	uxth	r2, r3
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a84:	b29b      	uxth	r3, r3
 8002a86:	3b01      	subs	r3, #1
 8002a88:	b29a      	uxth	r2, r3
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a92:	f043 0204 	orr.w	r2, r3, #4
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002a9a:	f248 0103 	movw	r1, #32771	@ 0x8003
 8002a9e:	6878      	ldr	r0, [r7, #4]
 8002aa0:	f000 fb2e 	bl	8003100 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	2210      	movs	r2, #16
 8002aaa:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2200      	movs	r2, #0
 8002ab0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8002ab4:	6878      	ldr	r0, [r7, #4]
 8002ab6:	f7ff fc43 	bl	8002340 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8002aba:	bf00      	nop
 8002abc:	3708      	adds	r7, #8
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd80      	pop	{r7, pc}
 8002ac2:	bf00      	nop
 8002ac4:	ffff0000 	.word	0xffff0000

08002ac8 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b084      	sub	sp, #16
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
 8002ad0:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ad8:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2200      	movs	r2, #0
 8002ade:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	4a6d      	ldr	r2, [pc, #436]	@ (8002c9c <I2C_ITError+0x1d4>)
 8002ae6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2200      	movs	r2, #0
 8002aec:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	431a      	orrs	r2, r3
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8002afa:	7bfb      	ldrb	r3, [r7, #15]
 8002afc:	2b28      	cmp	r3, #40	@ 0x28
 8002afe:	d005      	beq.n	8002b0c <I2C_ITError+0x44>
 8002b00:	7bfb      	ldrb	r3, [r7, #15]
 8002b02:	2b29      	cmp	r3, #41	@ 0x29
 8002b04:	d002      	beq.n	8002b0c <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8002b06:	7bfb      	ldrb	r3, [r7, #15]
 8002b08:	2b2a      	cmp	r3, #42	@ 0x2a
 8002b0a:	d10b      	bne.n	8002b24 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002b0c:	2103      	movs	r1, #3
 8002b0e:	6878      	ldr	r0, [r7, #4]
 8002b10:	f000 faf6 	bl	8003100 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2228      	movs	r2, #40	@ 0x28
 8002b18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	4a60      	ldr	r2, [pc, #384]	@ (8002ca0 <I2C_ITError+0x1d8>)
 8002b20:	635a      	str	r2, [r3, #52]	@ 0x34
 8002b22:	e030      	b.n	8002b86 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002b24:	f248 0103 	movw	r1, #32771	@ 0x8003
 8002b28:	6878      	ldr	r0, [r7, #4]
 8002b2a:	f000 fae9 	bl	8003100 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002b2e:	6878      	ldr	r0, [r7, #4]
 8002b30:	f000 f8e1 	bl	8002cf6 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b3a:	b2db      	uxtb	r3, r3
 8002b3c:	2b60      	cmp	r3, #96	@ 0x60
 8002b3e:	d01f      	beq.n	8002b80 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2220      	movs	r2, #32
 8002b44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	699b      	ldr	r3, [r3, #24]
 8002b4e:	f003 0320 	and.w	r3, r3, #32
 8002b52:	2b20      	cmp	r3, #32
 8002b54:	d114      	bne.n	8002b80 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	699b      	ldr	r3, [r3, #24]
 8002b5c:	f003 0310 	and.w	r3, r3, #16
 8002b60:	2b10      	cmp	r3, #16
 8002b62:	d109      	bne.n	8002b78 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	2210      	movs	r2, #16
 8002b6a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b70:	f043 0204 	orr.w	r2, r3, #4
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	2220      	movs	r2, #32
 8002b7e:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2200      	movs	r2, #0
 8002b84:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b8a:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d039      	beq.n	8002c08 <I2C_ITError+0x140>
 8002b94:	68bb      	ldr	r3, [r7, #8]
 8002b96:	2b11      	cmp	r3, #17
 8002b98:	d002      	beq.n	8002ba0 <I2C_ITError+0xd8>
 8002b9a:	68bb      	ldr	r3, [r7, #8]
 8002b9c:	2b21      	cmp	r3, #33	@ 0x21
 8002b9e:	d133      	bne.n	8002c08 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002baa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002bae:	d107      	bne.n	8002bc0 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	681a      	ldr	r2, [r3, #0]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002bbe:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	f7fe ff7b 	bl	8001ac0 <HAL_DMA_GetState>
 8002bca:	4603      	mov	r3, r0
 8002bcc:	2b01      	cmp	r3, #1
 8002bce:	d017      	beq.n	8002c00 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bd4:	4a33      	ldr	r2, [pc, #204]	@ (8002ca4 <I2C_ITError+0x1dc>)
 8002bd6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2200      	movs	r2, #0
 8002bdc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002be4:	4618      	mov	r0, r3
 8002be6:	f7fe ff49 	bl	8001a7c <HAL_DMA_Abort_IT>
 8002bea:	4603      	mov	r3, r0
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d04d      	beq.n	8002c8c <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bf4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002bf6:	687a      	ldr	r2, [r7, #4]
 8002bf8:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002bfa:	4610      	mov	r0, r2
 8002bfc:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002bfe:	e045      	b.n	8002c8c <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8002c00:	6878      	ldr	r0, [r7, #4]
 8002c02:	f000 f851 	bl	8002ca8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002c06:	e041      	b.n	8002c8c <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d039      	beq.n	8002c84 <I2C_ITError+0x1bc>
 8002c10:	68bb      	ldr	r3, [r7, #8]
 8002c12:	2b12      	cmp	r3, #18
 8002c14:	d002      	beq.n	8002c1c <I2C_ITError+0x154>
 8002c16:	68bb      	ldr	r3, [r7, #8]
 8002c18:	2b22      	cmp	r3, #34	@ 0x22
 8002c1a:	d133      	bne.n	8002c84 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002c26:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002c2a:	d107      	bne.n	8002c3c <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	681a      	ldr	r2, [r3, #0]
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002c3a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c40:	4618      	mov	r0, r3
 8002c42:	f7fe ff3d 	bl	8001ac0 <HAL_DMA_GetState>
 8002c46:	4603      	mov	r3, r0
 8002c48:	2b01      	cmp	r3, #1
 8002c4a:	d017      	beq.n	8002c7c <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c50:	4a14      	ldr	r2, [pc, #80]	@ (8002ca4 <I2C_ITError+0x1dc>)
 8002c52:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2200      	movs	r2, #0
 8002c58:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c60:	4618      	mov	r0, r3
 8002c62:	f7fe ff0b 	bl	8001a7c <HAL_DMA_Abort_IT>
 8002c66:	4603      	mov	r3, r0
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d011      	beq.n	8002c90 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c70:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002c72:	687a      	ldr	r2, [r7, #4]
 8002c74:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002c76:	4610      	mov	r0, r2
 8002c78:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002c7a:	e009      	b.n	8002c90 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8002c7c:	6878      	ldr	r0, [r7, #4]
 8002c7e:	f000 f813 	bl	8002ca8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002c82:	e005      	b.n	8002c90 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8002c84:	6878      	ldr	r0, [r7, #4]
 8002c86:	f000 f80f 	bl	8002ca8 <I2C_TreatErrorCallback>
  }
}
 8002c8a:	e002      	b.n	8002c92 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002c8c:	bf00      	nop
 8002c8e:	e000      	b.n	8002c92 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002c90:	bf00      	nop
}
 8002c92:	bf00      	nop
 8002c94:	3710      	adds	r7, #16
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}
 8002c9a:	bf00      	nop
 8002c9c:	ffff0000 	.word	0xffff0000
 8002ca0:	0800237d 	.word	0x0800237d
 8002ca4:	08002d3f 	.word	0x08002d3f

08002ca8 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b082      	sub	sp, #8
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002cb6:	b2db      	uxtb	r3, r3
 8002cb8:	2b60      	cmp	r3, #96	@ 0x60
 8002cba:	d10e      	bne.n	8002cda <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2220      	movs	r2, #32
 8002cc0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2200      	movs	r2, #0
 8002cce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8002cd2:	6878      	ldr	r0, [r7, #4]
 8002cd4:	f7ff fb48 	bl	8002368 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002cd8:	e009      	b.n	8002cee <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2200      	movs	r2, #0
 8002cde:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8002ce8:	6878      	ldr	r0, [r7, #4]
 8002cea:	f7ff fb33 	bl	8002354 <HAL_I2C_ErrorCallback>
}
 8002cee:	bf00      	nop
 8002cf0:	3708      	adds	r7, #8
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bd80      	pop	{r7, pc}

08002cf6 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002cf6:	b480      	push	{r7}
 8002cf8:	b083      	sub	sp, #12
 8002cfa:	af00      	add	r7, sp, #0
 8002cfc:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	699b      	ldr	r3, [r3, #24]
 8002d04:	f003 0302 	and.w	r3, r3, #2
 8002d08:	2b02      	cmp	r3, #2
 8002d0a:	d103      	bne.n	8002d14 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	2200      	movs	r2, #0
 8002d12:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	699b      	ldr	r3, [r3, #24]
 8002d1a:	f003 0301 	and.w	r3, r3, #1
 8002d1e:	2b01      	cmp	r3, #1
 8002d20:	d007      	beq.n	8002d32 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	699a      	ldr	r2, [r3, #24]
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f042 0201 	orr.w	r2, r2, #1
 8002d30:	619a      	str	r2, [r3, #24]
  }
}
 8002d32:	bf00      	nop
 8002d34:	370c      	adds	r7, #12
 8002d36:	46bd      	mov	sp, r7
 8002d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3c:	4770      	bx	lr

08002d3e <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8002d3e:	b580      	push	{r7, lr}
 8002d40:	b084      	sub	sp, #16
 8002d42:	af00      	add	r7, sp, #0
 8002d44:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d4a:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d003      	beq.n	8002d5c <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d58:	2200      	movs	r2, #0
 8002d5a:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d003      	beq.n	8002d6c <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d68:	2200      	movs	r2, #0
 8002d6a:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 8002d6c:	68f8      	ldr	r0, [r7, #12]
 8002d6e:	f7ff ff9b 	bl	8002ca8 <I2C_TreatErrorCallback>
}
 8002d72:	bf00      	nop
 8002d74:	3710      	adds	r7, #16
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bd80      	pop	{r7, pc}

08002d7a <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002d7a:	b580      	push	{r7, lr}
 8002d7c:	b084      	sub	sp, #16
 8002d7e:	af00      	add	r7, sp, #0
 8002d80:	60f8      	str	r0, [r7, #12]
 8002d82:	60b9      	str	r1, [r7, #8]
 8002d84:	603b      	str	r3, [r7, #0]
 8002d86:	4613      	mov	r3, r2
 8002d88:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d8a:	e03b      	b.n	8002e04 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d8c:	69ba      	ldr	r2, [r7, #24]
 8002d8e:	6839      	ldr	r1, [r7, #0]
 8002d90:	68f8      	ldr	r0, [r7, #12]
 8002d92:	f000 f8d5 	bl	8002f40 <I2C_IsErrorOccurred>
 8002d96:	4603      	mov	r3, r0
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d001      	beq.n	8002da0 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	e041      	b.n	8002e24 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002da6:	d02d      	beq.n	8002e04 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002da8:	f7fe fd7a 	bl	80018a0 <HAL_GetTick>
 8002dac:	4602      	mov	r2, r0
 8002dae:	69bb      	ldr	r3, [r7, #24]
 8002db0:	1ad3      	subs	r3, r2, r3
 8002db2:	683a      	ldr	r2, [r7, #0]
 8002db4:	429a      	cmp	r2, r3
 8002db6:	d302      	bcc.n	8002dbe <I2C_WaitOnFlagUntilTimeout+0x44>
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d122      	bne.n	8002e04 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	699a      	ldr	r2, [r3, #24]
 8002dc4:	68bb      	ldr	r3, [r7, #8]
 8002dc6:	4013      	ands	r3, r2
 8002dc8:	68ba      	ldr	r2, [r7, #8]
 8002dca:	429a      	cmp	r2, r3
 8002dcc:	bf0c      	ite	eq
 8002dce:	2301      	moveq	r3, #1
 8002dd0:	2300      	movne	r3, #0
 8002dd2:	b2db      	uxtb	r3, r3
 8002dd4:	461a      	mov	r2, r3
 8002dd6:	79fb      	ldrb	r3, [r7, #7]
 8002dd8:	429a      	cmp	r2, r3
 8002dda:	d113      	bne.n	8002e04 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002de0:	f043 0220 	orr.w	r2, r3, #32
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	2220      	movs	r2, #32
 8002dec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	2200      	movs	r2, #0
 8002df4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8002e00:	2301      	movs	r3, #1
 8002e02:	e00f      	b.n	8002e24 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	699a      	ldr	r2, [r3, #24]
 8002e0a:	68bb      	ldr	r3, [r7, #8]
 8002e0c:	4013      	ands	r3, r2
 8002e0e:	68ba      	ldr	r2, [r7, #8]
 8002e10:	429a      	cmp	r2, r3
 8002e12:	bf0c      	ite	eq
 8002e14:	2301      	moveq	r3, #1
 8002e16:	2300      	movne	r3, #0
 8002e18:	b2db      	uxtb	r3, r3
 8002e1a:	461a      	mov	r2, r3
 8002e1c:	79fb      	ldrb	r3, [r7, #7]
 8002e1e:	429a      	cmp	r2, r3
 8002e20:	d0b4      	beq.n	8002d8c <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002e22:	2300      	movs	r3, #0
}
 8002e24:	4618      	mov	r0, r3
 8002e26:	3710      	adds	r7, #16
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	bd80      	pop	{r7, pc}

08002e2c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b084      	sub	sp, #16
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	60f8      	str	r0, [r7, #12]
 8002e34:	60b9      	str	r1, [r7, #8]
 8002e36:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002e38:	e033      	b.n	8002ea2 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e3a:	687a      	ldr	r2, [r7, #4]
 8002e3c:	68b9      	ldr	r1, [r7, #8]
 8002e3e:	68f8      	ldr	r0, [r7, #12]
 8002e40:	f000 f87e 	bl	8002f40 <I2C_IsErrorOccurred>
 8002e44:	4603      	mov	r3, r0
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d001      	beq.n	8002e4e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	e031      	b.n	8002eb2 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e4e:	68bb      	ldr	r3, [r7, #8]
 8002e50:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002e54:	d025      	beq.n	8002ea2 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e56:	f7fe fd23 	bl	80018a0 <HAL_GetTick>
 8002e5a:	4602      	mov	r2, r0
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	1ad3      	subs	r3, r2, r3
 8002e60:	68ba      	ldr	r2, [r7, #8]
 8002e62:	429a      	cmp	r2, r3
 8002e64:	d302      	bcc.n	8002e6c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002e66:	68bb      	ldr	r3, [r7, #8]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d11a      	bne.n	8002ea2 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	699b      	ldr	r3, [r3, #24]
 8002e72:	f003 0302 	and.w	r3, r3, #2
 8002e76:	2b02      	cmp	r3, #2
 8002e78:	d013      	beq.n	8002ea2 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e7e:	f043 0220 	orr.w	r2, r3, #32
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	2220      	movs	r2, #32
 8002e8a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	2200      	movs	r2, #0
 8002e92:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	2200      	movs	r2, #0
 8002e9a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	e007      	b.n	8002eb2 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	699b      	ldr	r3, [r3, #24]
 8002ea8:	f003 0302 	and.w	r3, r3, #2
 8002eac:	2b02      	cmp	r3, #2
 8002eae:	d1c4      	bne.n	8002e3a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002eb0:	2300      	movs	r3, #0
}
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	3710      	adds	r7, #16
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}

08002eba <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002eba:	b580      	push	{r7, lr}
 8002ebc:	b084      	sub	sp, #16
 8002ebe:	af00      	add	r7, sp, #0
 8002ec0:	60f8      	str	r0, [r7, #12]
 8002ec2:	60b9      	str	r1, [r7, #8]
 8002ec4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002ec6:	e02f      	b.n	8002f28 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ec8:	687a      	ldr	r2, [r7, #4]
 8002eca:	68b9      	ldr	r1, [r7, #8]
 8002ecc:	68f8      	ldr	r0, [r7, #12]
 8002ece:	f000 f837 	bl	8002f40 <I2C_IsErrorOccurred>
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d001      	beq.n	8002edc <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002ed8:	2301      	movs	r3, #1
 8002eda:	e02d      	b.n	8002f38 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002edc:	f7fe fce0 	bl	80018a0 <HAL_GetTick>
 8002ee0:	4602      	mov	r2, r0
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	1ad3      	subs	r3, r2, r3
 8002ee6:	68ba      	ldr	r2, [r7, #8]
 8002ee8:	429a      	cmp	r2, r3
 8002eea:	d302      	bcc.n	8002ef2 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002eec:	68bb      	ldr	r3, [r7, #8]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d11a      	bne.n	8002f28 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	699b      	ldr	r3, [r3, #24]
 8002ef8:	f003 0320 	and.w	r3, r3, #32
 8002efc:	2b20      	cmp	r3, #32
 8002efe:	d013      	beq.n	8002f28 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f04:	f043 0220 	orr.w	r2, r3, #32
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	2220      	movs	r2, #32
 8002f10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	2200      	movs	r2, #0
 8002f18:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	2200      	movs	r2, #0
 8002f20:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8002f24:	2301      	movs	r3, #1
 8002f26:	e007      	b.n	8002f38 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	699b      	ldr	r3, [r3, #24]
 8002f2e:	f003 0320 	and.w	r3, r3, #32
 8002f32:	2b20      	cmp	r3, #32
 8002f34:	d1c8      	bne.n	8002ec8 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002f36:	2300      	movs	r3, #0
}
 8002f38:	4618      	mov	r0, r3
 8002f3a:	3710      	adds	r7, #16
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bd80      	pop	{r7, pc}

08002f40 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b08a      	sub	sp, #40	@ 0x28
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	60f8      	str	r0, [r7, #12]
 8002f48:	60b9      	str	r1, [r7, #8]
 8002f4a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	699b      	ldr	r3, [r3, #24]
 8002f58:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002f62:	69bb      	ldr	r3, [r7, #24]
 8002f64:	f003 0310 	and.w	r3, r3, #16
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d068      	beq.n	800303e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	2210      	movs	r2, #16
 8002f72:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002f74:	e049      	b.n	800300a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002f76:	68bb      	ldr	r3, [r7, #8]
 8002f78:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002f7c:	d045      	beq.n	800300a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002f7e:	f7fe fc8f 	bl	80018a0 <HAL_GetTick>
 8002f82:	4602      	mov	r2, r0
 8002f84:	69fb      	ldr	r3, [r7, #28]
 8002f86:	1ad3      	subs	r3, r2, r3
 8002f88:	68ba      	ldr	r2, [r7, #8]
 8002f8a:	429a      	cmp	r2, r3
 8002f8c:	d302      	bcc.n	8002f94 <I2C_IsErrorOccurred+0x54>
 8002f8e:	68bb      	ldr	r3, [r7, #8]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d13a      	bne.n	800300a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002f9e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002fa6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	699b      	ldr	r3, [r3, #24]
 8002fae:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002fb2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002fb6:	d121      	bne.n	8002ffc <I2C_IsErrorOccurred+0xbc>
 8002fb8:	697b      	ldr	r3, [r7, #20]
 8002fba:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002fbe:	d01d      	beq.n	8002ffc <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002fc0:	7cfb      	ldrb	r3, [r7, #19]
 8002fc2:	2b20      	cmp	r3, #32
 8002fc4:	d01a      	beq.n	8002ffc <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	685a      	ldr	r2, [r3, #4]
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002fd4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002fd6:	f7fe fc63 	bl	80018a0 <HAL_GetTick>
 8002fda:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002fdc:	e00e      	b.n	8002ffc <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002fde:	f7fe fc5f 	bl	80018a0 <HAL_GetTick>
 8002fe2:	4602      	mov	r2, r0
 8002fe4:	69fb      	ldr	r3, [r7, #28]
 8002fe6:	1ad3      	subs	r3, r2, r3
 8002fe8:	2b19      	cmp	r3, #25
 8002fea:	d907      	bls.n	8002ffc <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002fec:	6a3b      	ldr	r3, [r7, #32]
 8002fee:	f043 0320 	orr.w	r3, r3, #32
 8002ff2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8002ffa:	e006      	b.n	800300a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	699b      	ldr	r3, [r3, #24]
 8003002:	f003 0320 	and.w	r3, r3, #32
 8003006:	2b20      	cmp	r3, #32
 8003008:	d1e9      	bne.n	8002fde <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	699b      	ldr	r3, [r3, #24]
 8003010:	f003 0320 	and.w	r3, r3, #32
 8003014:	2b20      	cmp	r3, #32
 8003016:	d003      	beq.n	8003020 <I2C_IsErrorOccurred+0xe0>
 8003018:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800301c:	2b00      	cmp	r3, #0
 800301e:	d0aa      	beq.n	8002f76 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003020:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003024:	2b00      	cmp	r3, #0
 8003026:	d103      	bne.n	8003030 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	2220      	movs	r2, #32
 800302e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003030:	6a3b      	ldr	r3, [r7, #32]
 8003032:	f043 0304 	orr.w	r3, r3, #4
 8003036:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003038:	2301      	movs	r3, #1
 800303a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	699b      	ldr	r3, [r3, #24]
 8003044:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003046:	69bb      	ldr	r3, [r7, #24]
 8003048:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800304c:	2b00      	cmp	r3, #0
 800304e:	d00b      	beq.n	8003068 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003050:	6a3b      	ldr	r3, [r7, #32]
 8003052:	f043 0301 	orr.w	r3, r3, #1
 8003056:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003060:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003062:	2301      	movs	r3, #1
 8003064:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003068:	69bb      	ldr	r3, [r7, #24]
 800306a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800306e:	2b00      	cmp	r3, #0
 8003070:	d00b      	beq.n	800308a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003072:	6a3b      	ldr	r3, [r7, #32]
 8003074:	f043 0308 	orr.w	r3, r3, #8
 8003078:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003082:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003084:	2301      	movs	r3, #1
 8003086:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800308a:	69bb      	ldr	r3, [r7, #24]
 800308c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003090:	2b00      	cmp	r3, #0
 8003092:	d00b      	beq.n	80030ac <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003094:	6a3b      	ldr	r3, [r7, #32]
 8003096:	f043 0302 	orr.w	r3, r3, #2
 800309a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80030a4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80030a6:	2301      	movs	r3, #1
 80030a8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80030ac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d01c      	beq.n	80030ee <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80030b4:	68f8      	ldr	r0, [r7, #12]
 80030b6:	f7ff fe1e 	bl	8002cf6 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	6859      	ldr	r1, [r3, #4]
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681a      	ldr	r2, [r3, #0]
 80030c4:	4b0d      	ldr	r3, [pc, #52]	@ (80030fc <I2C_IsErrorOccurred+0x1bc>)
 80030c6:	400b      	ands	r3, r1
 80030c8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80030ce:	6a3b      	ldr	r3, [r7, #32]
 80030d0:	431a      	orrs	r2, r3
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	2220      	movs	r2, #32
 80030da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	2200      	movs	r2, #0
 80030e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	2200      	movs	r2, #0
 80030ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80030ee:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80030f2:	4618      	mov	r0, r3
 80030f4:	3728      	adds	r7, #40	@ 0x28
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bd80      	pop	{r7, pc}
 80030fa:	bf00      	nop
 80030fc:	fe00e800 	.word	0xfe00e800

08003100 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8003100:	b480      	push	{r7}
 8003102:	b085      	sub	sp, #20
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
 8003108:	460b      	mov	r3, r1
 800310a:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800310c:	2300      	movs	r3, #0
 800310e:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003110:	887b      	ldrh	r3, [r7, #2]
 8003112:	f003 0301 	and.w	r3, r3, #1
 8003116:	2b00      	cmp	r3, #0
 8003118:	d00f      	beq.n	800313a <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 8003120:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003128:	b2db      	uxtb	r3, r3
 800312a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800312e:	2b28      	cmp	r3, #40	@ 0x28
 8003130:	d003      	beq.n	800313a <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8003138:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800313a:	887b      	ldrh	r3, [r7, #2]
 800313c:	f003 0302 	and.w	r3, r3, #2
 8003140:	2b00      	cmp	r3, #0
 8003142:	d00f      	beq.n	8003164 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 800314a:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003152:	b2db      	uxtb	r3, r3
 8003154:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003158:	2b28      	cmp	r3, #40	@ 0x28
 800315a:	d003      	beq.n	8003164 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8003162:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003164:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003168:	2b00      	cmp	r3, #0
 800316a:	da03      	bge.n	8003174 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8003172:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003174:	887b      	ldrh	r3, [r7, #2]
 8003176:	2b10      	cmp	r3, #16
 8003178:	d103      	bne.n	8003182 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8003180:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003182:	887b      	ldrh	r3, [r7, #2]
 8003184:	2b20      	cmp	r3, #32
 8003186:	d103      	bne.n	8003190 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	f043 0320 	orr.w	r3, r3, #32
 800318e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8003190:	887b      	ldrh	r3, [r7, #2]
 8003192:	2b40      	cmp	r3, #64	@ 0x40
 8003194:	d103      	bne.n	800319e <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800319c:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	6819      	ldr	r1, [r3, #0]
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	43da      	mvns	r2, r3
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	400a      	ands	r2, r1
 80031ae:	601a      	str	r2, [r3, #0]
}
 80031b0:	bf00      	nop
 80031b2:	3714      	adds	r7, #20
 80031b4:	46bd      	mov	sp, r7
 80031b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ba:	4770      	bx	lr

080031bc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80031bc:	b480      	push	{r7}
 80031be:	b083      	sub	sp, #12
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
 80031c4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80031cc:	b2db      	uxtb	r3, r3
 80031ce:	2b20      	cmp	r3, #32
 80031d0:	d138      	bne.n	8003244 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80031d8:	2b01      	cmp	r3, #1
 80031da:	d101      	bne.n	80031e0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80031dc:	2302      	movs	r3, #2
 80031de:	e032      	b.n	8003246 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2201      	movs	r2, #1
 80031e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2224      	movs	r2, #36	@ 0x24
 80031ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	681a      	ldr	r2, [r3, #0]
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f022 0201 	bic.w	r2, r2, #1
 80031fe:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	681a      	ldr	r2, [r3, #0]
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800320e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	6819      	ldr	r1, [r3, #0]
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	683a      	ldr	r2, [r7, #0]
 800321c:	430a      	orrs	r2, r1
 800321e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	681a      	ldr	r2, [r3, #0]
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f042 0201 	orr.w	r2, r2, #1
 800322e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2220      	movs	r2, #32
 8003234:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2200      	movs	r2, #0
 800323c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003240:	2300      	movs	r3, #0
 8003242:	e000      	b.n	8003246 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003244:	2302      	movs	r3, #2
  }
}
 8003246:	4618      	mov	r0, r3
 8003248:	370c      	adds	r7, #12
 800324a:	46bd      	mov	sp, r7
 800324c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003250:	4770      	bx	lr

08003252 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003252:	b480      	push	{r7}
 8003254:	b085      	sub	sp, #20
 8003256:	af00      	add	r7, sp, #0
 8003258:	6078      	str	r0, [r7, #4]
 800325a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003262:	b2db      	uxtb	r3, r3
 8003264:	2b20      	cmp	r3, #32
 8003266:	d139      	bne.n	80032dc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800326e:	2b01      	cmp	r3, #1
 8003270:	d101      	bne.n	8003276 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003272:	2302      	movs	r3, #2
 8003274:	e033      	b.n	80032de <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2201      	movs	r2, #1
 800327a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2224      	movs	r2, #36	@ 0x24
 8003282:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	681a      	ldr	r2, [r3, #0]
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f022 0201 	bic.w	r2, r2, #1
 8003294:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80032a4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	021b      	lsls	r3, r3, #8
 80032aa:	68fa      	ldr	r2, [r7, #12]
 80032ac:	4313      	orrs	r3, r2
 80032ae:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	68fa      	ldr	r2, [r7, #12]
 80032b6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	681a      	ldr	r2, [r3, #0]
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f042 0201 	orr.w	r2, r2, #1
 80032c6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2220      	movs	r2, #32
 80032cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2200      	movs	r2, #0
 80032d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80032d8:	2300      	movs	r3, #0
 80032da:	e000      	b.n	80032de <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80032dc:	2302      	movs	r3, #2
  }
}
 80032de:	4618      	mov	r0, r3
 80032e0:	3714      	adds	r7, #20
 80032e2:	46bd      	mov	sp, r7
 80032e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e8:	4770      	bx	lr
	...

080032ec <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b082      	sub	sp, #8
 80032f0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80032f2:	2300      	movs	r3, #0
 80032f4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80032f6:	4b23      	ldr	r3, [pc, #140]	@ (8003384 <HAL_PWREx_EnableOverDrive+0x98>)
 80032f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032fa:	4a22      	ldr	r2, [pc, #136]	@ (8003384 <HAL_PWREx_EnableOverDrive+0x98>)
 80032fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003300:	6413      	str	r3, [r2, #64]	@ 0x40
 8003302:	4b20      	ldr	r3, [pc, #128]	@ (8003384 <HAL_PWREx_EnableOverDrive+0x98>)
 8003304:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003306:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800330a:	603b      	str	r3, [r7, #0]
 800330c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800330e:	4b1e      	ldr	r3, [pc, #120]	@ (8003388 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a1d      	ldr	r2, [pc, #116]	@ (8003388 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003314:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003318:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800331a:	f7fe fac1 	bl	80018a0 <HAL_GetTick>
 800331e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003320:	e009      	b.n	8003336 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003322:	f7fe fabd 	bl	80018a0 <HAL_GetTick>
 8003326:	4602      	mov	r2, r0
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	1ad3      	subs	r3, r2, r3
 800332c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003330:	d901      	bls.n	8003336 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003332:	2303      	movs	r3, #3
 8003334:	e022      	b.n	800337c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003336:	4b14      	ldr	r3, [pc, #80]	@ (8003388 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800333e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003342:	d1ee      	bne.n	8003322 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003344:	4b10      	ldr	r3, [pc, #64]	@ (8003388 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4a0f      	ldr	r2, [pc, #60]	@ (8003388 <HAL_PWREx_EnableOverDrive+0x9c>)
 800334a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800334e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003350:	f7fe faa6 	bl	80018a0 <HAL_GetTick>
 8003354:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003356:	e009      	b.n	800336c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003358:	f7fe faa2 	bl	80018a0 <HAL_GetTick>
 800335c:	4602      	mov	r2, r0
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	1ad3      	subs	r3, r2, r3
 8003362:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003366:	d901      	bls.n	800336c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003368:	2303      	movs	r3, #3
 800336a:	e007      	b.n	800337c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800336c:	4b06      	ldr	r3, [pc, #24]	@ (8003388 <HAL_PWREx_EnableOverDrive+0x9c>)
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003374:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003378:	d1ee      	bne.n	8003358 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800337a:	2300      	movs	r3, #0
}
 800337c:	4618      	mov	r0, r3
 800337e:	3708      	adds	r7, #8
 8003380:	46bd      	mov	sp, r7
 8003382:	bd80      	pop	{r7, pc}
 8003384:	40023800 	.word	0x40023800
 8003388:	40007000 	.word	0x40007000

0800338c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b086      	sub	sp, #24
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003394:	2300      	movs	r3, #0
 8003396:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d101      	bne.n	80033a2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800339e:	2301      	movs	r3, #1
 80033a0:	e291      	b.n	80038c6 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f003 0301 	and.w	r3, r3, #1
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	f000 8087 	beq.w	80034be <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80033b0:	4b96      	ldr	r3, [pc, #600]	@ (800360c <HAL_RCC_OscConfig+0x280>)
 80033b2:	689b      	ldr	r3, [r3, #8]
 80033b4:	f003 030c 	and.w	r3, r3, #12
 80033b8:	2b04      	cmp	r3, #4
 80033ba:	d00c      	beq.n	80033d6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80033bc:	4b93      	ldr	r3, [pc, #588]	@ (800360c <HAL_RCC_OscConfig+0x280>)
 80033be:	689b      	ldr	r3, [r3, #8]
 80033c0:	f003 030c 	and.w	r3, r3, #12
 80033c4:	2b08      	cmp	r3, #8
 80033c6:	d112      	bne.n	80033ee <HAL_RCC_OscConfig+0x62>
 80033c8:	4b90      	ldr	r3, [pc, #576]	@ (800360c <HAL_RCC_OscConfig+0x280>)
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80033d0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80033d4:	d10b      	bne.n	80033ee <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033d6:	4b8d      	ldr	r3, [pc, #564]	@ (800360c <HAL_RCC_OscConfig+0x280>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d06c      	beq.n	80034bc <HAL_RCC_OscConfig+0x130>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d168      	bne.n	80034bc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80033ea:	2301      	movs	r3, #1
 80033ec:	e26b      	b.n	80038c6 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80033f6:	d106      	bne.n	8003406 <HAL_RCC_OscConfig+0x7a>
 80033f8:	4b84      	ldr	r3, [pc, #528]	@ (800360c <HAL_RCC_OscConfig+0x280>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a83      	ldr	r2, [pc, #524]	@ (800360c <HAL_RCC_OscConfig+0x280>)
 80033fe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003402:	6013      	str	r3, [r2, #0]
 8003404:	e02e      	b.n	8003464 <HAL_RCC_OscConfig+0xd8>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d10c      	bne.n	8003428 <HAL_RCC_OscConfig+0x9c>
 800340e:	4b7f      	ldr	r3, [pc, #508]	@ (800360c <HAL_RCC_OscConfig+0x280>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4a7e      	ldr	r2, [pc, #504]	@ (800360c <HAL_RCC_OscConfig+0x280>)
 8003414:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003418:	6013      	str	r3, [r2, #0]
 800341a:	4b7c      	ldr	r3, [pc, #496]	@ (800360c <HAL_RCC_OscConfig+0x280>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4a7b      	ldr	r2, [pc, #492]	@ (800360c <HAL_RCC_OscConfig+0x280>)
 8003420:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003424:	6013      	str	r3, [r2, #0]
 8003426:	e01d      	b.n	8003464 <HAL_RCC_OscConfig+0xd8>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003430:	d10c      	bne.n	800344c <HAL_RCC_OscConfig+0xc0>
 8003432:	4b76      	ldr	r3, [pc, #472]	@ (800360c <HAL_RCC_OscConfig+0x280>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4a75      	ldr	r2, [pc, #468]	@ (800360c <HAL_RCC_OscConfig+0x280>)
 8003438:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800343c:	6013      	str	r3, [r2, #0]
 800343e:	4b73      	ldr	r3, [pc, #460]	@ (800360c <HAL_RCC_OscConfig+0x280>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4a72      	ldr	r2, [pc, #456]	@ (800360c <HAL_RCC_OscConfig+0x280>)
 8003444:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003448:	6013      	str	r3, [r2, #0]
 800344a:	e00b      	b.n	8003464 <HAL_RCC_OscConfig+0xd8>
 800344c:	4b6f      	ldr	r3, [pc, #444]	@ (800360c <HAL_RCC_OscConfig+0x280>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a6e      	ldr	r2, [pc, #440]	@ (800360c <HAL_RCC_OscConfig+0x280>)
 8003452:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003456:	6013      	str	r3, [r2, #0]
 8003458:	4b6c      	ldr	r3, [pc, #432]	@ (800360c <HAL_RCC_OscConfig+0x280>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4a6b      	ldr	r2, [pc, #428]	@ (800360c <HAL_RCC_OscConfig+0x280>)
 800345e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003462:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d013      	beq.n	8003494 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800346c:	f7fe fa18 	bl	80018a0 <HAL_GetTick>
 8003470:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003472:	e008      	b.n	8003486 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003474:	f7fe fa14 	bl	80018a0 <HAL_GetTick>
 8003478:	4602      	mov	r2, r0
 800347a:	693b      	ldr	r3, [r7, #16]
 800347c:	1ad3      	subs	r3, r2, r3
 800347e:	2b64      	cmp	r3, #100	@ 0x64
 8003480:	d901      	bls.n	8003486 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003482:	2303      	movs	r3, #3
 8003484:	e21f      	b.n	80038c6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003486:	4b61      	ldr	r3, [pc, #388]	@ (800360c <HAL_RCC_OscConfig+0x280>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800348e:	2b00      	cmp	r3, #0
 8003490:	d0f0      	beq.n	8003474 <HAL_RCC_OscConfig+0xe8>
 8003492:	e014      	b.n	80034be <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003494:	f7fe fa04 	bl	80018a0 <HAL_GetTick>
 8003498:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800349a:	e008      	b.n	80034ae <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800349c:	f7fe fa00 	bl	80018a0 <HAL_GetTick>
 80034a0:	4602      	mov	r2, r0
 80034a2:	693b      	ldr	r3, [r7, #16]
 80034a4:	1ad3      	subs	r3, r2, r3
 80034a6:	2b64      	cmp	r3, #100	@ 0x64
 80034a8:	d901      	bls.n	80034ae <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80034aa:	2303      	movs	r3, #3
 80034ac:	e20b      	b.n	80038c6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034ae:	4b57      	ldr	r3, [pc, #348]	@ (800360c <HAL_RCC_OscConfig+0x280>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d1f0      	bne.n	800349c <HAL_RCC_OscConfig+0x110>
 80034ba:	e000      	b.n	80034be <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f003 0302 	and.w	r3, r3, #2
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d069      	beq.n	800359e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80034ca:	4b50      	ldr	r3, [pc, #320]	@ (800360c <HAL_RCC_OscConfig+0x280>)
 80034cc:	689b      	ldr	r3, [r3, #8]
 80034ce:	f003 030c 	and.w	r3, r3, #12
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d00b      	beq.n	80034ee <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80034d6:	4b4d      	ldr	r3, [pc, #308]	@ (800360c <HAL_RCC_OscConfig+0x280>)
 80034d8:	689b      	ldr	r3, [r3, #8]
 80034da:	f003 030c 	and.w	r3, r3, #12
 80034de:	2b08      	cmp	r3, #8
 80034e0:	d11c      	bne.n	800351c <HAL_RCC_OscConfig+0x190>
 80034e2:	4b4a      	ldr	r3, [pc, #296]	@ (800360c <HAL_RCC_OscConfig+0x280>)
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d116      	bne.n	800351c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034ee:	4b47      	ldr	r3, [pc, #284]	@ (800360c <HAL_RCC_OscConfig+0x280>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f003 0302 	and.w	r3, r3, #2
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d005      	beq.n	8003506 <HAL_RCC_OscConfig+0x17a>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	68db      	ldr	r3, [r3, #12]
 80034fe:	2b01      	cmp	r3, #1
 8003500:	d001      	beq.n	8003506 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003502:	2301      	movs	r3, #1
 8003504:	e1df      	b.n	80038c6 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003506:	4b41      	ldr	r3, [pc, #260]	@ (800360c <HAL_RCC_OscConfig+0x280>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	691b      	ldr	r3, [r3, #16]
 8003512:	00db      	lsls	r3, r3, #3
 8003514:	493d      	ldr	r1, [pc, #244]	@ (800360c <HAL_RCC_OscConfig+0x280>)
 8003516:	4313      	orrs	r3, r2
 8003518:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800351a:	e040      	b.n	800359e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	68db      	ldr	r3, [r3, #12]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d023      	beq.n	800356c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003524:	4b39      	ldr	r3, [pc, #228]	@ (800360c <HAL_RCC_OscConfig+0x280>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4a38      	ldr	r2, [pc, #224]	@ (800360c <HAL_RCC_OscConfig+0x280>)
 800352a:	f043 0301 	orr.w	r3, r3, #1
 800352e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003530:	f7fe f9b6 	bl	80018a0 <HAL_GetTick>
 8003534:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003536:	e008      	b.n	800354a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003538:	f7fe f9b2 	bl	80018a0 <HAL_GetTick>
 800353c:	4602      	mov	r2, r0
 800353e:	693b      	ldr	r3, [r7, #16]
 8003540:	1ad3      	subs	r3, r2, r3
 8003542:	2b02      	cmp	r3, #2
 8003544:	d901      	bls.n	800354a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003546:	2303      	movs	r3, #3
 8003548:	e1bd      	b.n	80038c6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800354a:	4b30      	ldr	r3, [pc, #192]	@ (800360c <HAL_RCC_OscConfig+0x280>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f003 0302 	and.w	r3, r3, #2
 8003552:	2b00      	cmp	r3, #0
 8003554:	d0f0      	beq.n	8003538 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003556:	4b2d      	ldr	r3, [pc, #180]	@ (800360c <HAL_RCC_OscConfig+0x280>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	691b      	ldr	r3, [r3, #16]
 8003562:	00db      	lsls	r3, r3, #3
 8003564:	4929      	ldr	r1, [pc, #164]	@ (800360c <HAL_RCC_OscConfig+0x280>)
 8003566:	4313      	orrs	r3, r2
 8003568:	600b      	str	r3, [r1, #0]
 800356a:	e018      	b.n	800359e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800356c:	4b27      	ldr	r3, [pc, #156]	@ (800360c <HAL_RCC_OscConfig+0x280>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4a26      	ldr	r2, [pc, #152]	@ (800360c <HAL_RCC_OscConfig+0x280>)
 8003572:	f023 0301 	bic.w	r3, r3, #1
 8003576:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003578:	f7fe f992 	bl	80018a0 <HAL_GetTick>
 800357c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800357e:	e008      	b.n	8003592 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003580:	f7fe f98e 	bl	80018a0 <HAL_GetTick>
 8003584:	4602      	mov	r2, r0
 8003586:	693b      	ldr	r3, [r7, #16]
 8003588:	1ad3      	subs	r3, r2, r3
 800358a:	2b02      	cmp	r3, #2
 800358c:	d901      	bls.n	8003592 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800358e:	2303      	movs	r3, #3
 8003590:	e199      	b.n	80038c6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003592:	4b1e      	ldr	r3, [pc, #120]	@ (800360c <HAL_RCC_OscConfig+0x280>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f003 0302 	and.w	r3, r3, #2
 800359a:	2b00      	cmp	r3, #0
 800359c:	d1f0      	bne.n	8003580 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f003 0308 	and.w	r3, r3, #8
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d038      	beq.n	800361c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	695b      	ldr	r3, [r3, #20]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d019      	beq.n	80035e6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80035b2:	4b16      	ldr	r3, [pc, #88]	@ (800360c <HAL_RCC_OscConfig+0x280>)
 80035b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80035b6:	4a15      	ldr	r2, [pc, #84]	@ (800360c <HAL_RCC_OscConfig+0x280>)
 80035b8:	f043 0301 	orr.w	r3, r3, #1
 80035bc:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035be:	f7fe f96f 	bl	80018a0 <HAL_GetTick>
 80035c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035c4:	e008      	b.n	80035d8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035c6:	f7fe f96b 	bl	80018a0 <HAL_GetTick>
 80035ca:	4602      	mov	r2, r0
 80035cc:	693b      	ldr	r3, [r7, #16]
 80035ce:	1ad3      	subs	r3, r2, r3
 80035d0:	2b02      	cmp	r3, #2
 80035d2:	d901      	bls.n	80035d8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80035d4:	2303      	movs	r3, #3
 80035d6:	e176      	b.n	80038c6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035d8:	4b0c      	ldr	r3, [pc, #48]	@ (800360c <HAL_RCC_OscConfig+0x280>)
 80035da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80035dc:	f003 0302 	and.w	r3, r3, #2
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d0f0      	beq.n	80035c6 <HAL_RCC_OscConfig+0x23a>
 80035e4:	e01a      	b.n	800361c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80035e6:	4b09      	ldr	r3, [pc, #36]	@ (800360c <HAL_RCC_OscConfig+0x280>)
 80035e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80035ea:	4a08      	ldr	r2, [pc, #32]	@ (800360c <HAL_RCC_OscConfig+0x280>)
 80035ec:	f023 0301 	bic.w	r3, r3, #1
 80035f0:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035f2:	f7fe f955 	bl	80018a0 <HAL_GetTick>
 80035f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035f8:	e00a      	b.n	8003610 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035fa:	f7fe f951 	bl	80018a0 <HAL_GetTick>
 80035fe:	4602      	mov	r2, r0
 8003600:	693b      	ldr	r3, [r7, #16]
 8003602:	1ad3      	subs	r3, r2, r3
 8003604:	2b02      	cmp	r3, #2
 8003606:	d903      	bls.n	8003610 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003608:	2303      	movs	r3, #3
 800360a:	e15c      	b.n	80038c6 <HAL_RCC_OscConfig+0x53a>
 800360c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003610:	4b91      	ldr	r3, [pc, #580]	@ (8003858 <HAL_RCC_OscConfig+0x4cc>)
 8003612:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003614:	f003 0302 	and.w	r3, r3, #2
 8003618:	2b00      	cmp	r3, #0
 800361a:	d1ee      	bne.n	80035fa <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f003 0304 	and.w	r3, r3, #4
 8003624:	2b00      	cmp	r3, #0
 8003626:	f000 80a4 	beq.w	8003772 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800362a:	4b8b      	ldr	r3, [pc, #556]	@ (8003858 <HAL_RCC_OscConfig+0x4cc>)
 800362c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800362e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003632:	2b00      	cmp	r3, #0
 8003634:	d10d      	bne.n	8003652 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003636:	4b88      	ldr	r3, [pc, #544]	@ (8003858 <HAL_RCC_OscConfig+0x4cc>)
 8003638:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800363a:	4a87      	ldr	r2, [pc, #540]	@ (8003858 <HAL_RCC_OscConfig+0x4cc>)
 800363c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003640:	6413      	str	r3, [r2, #64]	@ 0x40
 8003642:	4b85      	ldr	r3, [pc, #532]	@ (8003858 <HAL_RCC_OscConfig+0x4cc>)
 8003644:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003646:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800364a:	60bb      	str	r3, [r7, #8]
 800364c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800364e:	2301      	movs	r3, #1
 8003650:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003652:	4b82      	ldr	r3, [pc, #520]	@ (800385c <HAL_RCC_OscConfig+0x4d0>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800365a:	2b00      	cmp	r3, #0
 800365c:	d118      	bne.n	8003690 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800365e:	4b7f      	ldr	r3, [pc, #508]	@ (800385c <HAL_RCC_OscConfig+0x4d0>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4a7e      	ldr	r2, [pc, #504]	@ (800385c <HAL_RCC_OscConfig+0x4d0>)
 8003664:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003668:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800366a:	f7fe f919 	bl	80018a0 <HAL_GetTick>
 800366e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003670:	e008      	b.n	8003684 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003672:	f7fe f915 	bl	80018a0 <HAL_GetTick>
 8003676:	4602      	mov	r2, r0
 8003678:	693b      	ldr	r3, [r7, #16]
 800367a:	1ad3      	subs	r3, r2, r3
 800367c:	2b64      	cmp	r3, #100	@ 0x64
 800367e:	d901      	bls.n	8003684 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003680:	2303      	movs	r3, #3
 8003682:	e120      	b.n	80038c6 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003684:	4b75      	ldr	r3, [pc, #468]	@ (800385c <HAL_RCC_OscConfig+0x4d0>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800368c:	2b00      	cmp	r3, #0
 800368e:	d0f0      	beq.n	8003672 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	689b      	ldr	r3, [r3, #8]
 8003694:	2b01      	cmp	r3, #1
 8003696:	d106      	bne.n	80036a6 <HAL_RCC_OscConfig+0x31a>
 8003698:	4b6f      	ldr	r3, [pc, #444]	@ (8003858 <HAL_RCC_OscConfig+0x4cc>)
 800369a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800369c:	4a6e      	ldr	r2, [pc, #440]	@ (8003858 <HAL_RCC_OscConfig+0x4cc>)
 800369e:	f043 0301 	orr.w	r3, r3, #1
 80036a2:	6713      	str	r3, [r2, #112]	@ 0x70
 80036a4:	e02d      	b.n	8003702 <HAL_RCC_OscConfig+0x376>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	689b      	ldr	r3, [r3, #8]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d10c      	bne.n	80036c8 <HAL_RCC_OscConfig+0x33c>
 80036ae:	4b6a      	ldr	r3, [pc, #424]	@ (8003858 <HAL_RCC_OscConfig+0x4cc>)
 80036b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036b2:	4a69      	ldr	r2, [pc, #420]	@ (8003858 <HAL_RCC_OscConfig+0x4cc>)
 80036b4:	f023 0301 	bic.w	r3, r3, #1
 80036b8:	6713      	str	r3, [r2, #112]	@ 0x70
 80036ba:	4b67      	ldr	r3, [pc, #412]	@ (8003858 <HAL_RCC_OscConfig+0x4cc>)
 80036bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036be:	4a66      	ldr	r2, [pc, #408]	@ (8003858 <HAL_RCC_OscConfig+0x4cc>)
 80036c0:	f023 0304 	bic.w	r3, r3, #4
 80036c4:	6713      	str	r3, [r2, #112]	@ 0x70
 80036c6:	e01c      	b.n	8003702 <HAL_RCC_OscConfig+0x376>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	689b      	ldr	r3, [r3, #8]
 80036cc:	2b05      	cmp	r3, #5
 80036ce:	d10c      	bne.n	80036ea <HAL_RCC_OscConfig+0x35e>
 80036d0:	4b61      	ldr	r3, [pc, #388]	@ (8003858 <HAL_RCC_OscConfig+0x4cc>)
 80036d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036d4:	4a60      	ldr	r2, [pc, #384]	@ (8003858 <HAL_RCC_OscConfig+0x4cc>)
 80036d6:	f043 0304 	orr.w	r3, r3, #4
 80036da:	6713      	str	r3, [r2, #112]	@ 0x70
 80036dc:	4b5e      	ldr	r3, [pc, #376]	@ (8003858 <HAL_RCC_OscConfig+0x4cc>)
 80036de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036e0:	4a5d      	ldr	r2, [pc, #372]	@ (8003858 <HAL_RCC_OscConfig+0x4cc>)
 80036e2:	f043 0301 	orr.w	r3, r3, #1
 80036e6:	6713      	str	r3, [r2, #112]	@ 0x70
 80036e8:	e00b      	b.n	8003702 <HAL_RCC_OscConfig+0x376>
 80036ea:	4b5b      	ldr	r3, [pc, #364]	@ (8003858 <HAL_RCC_OscConfig+0x4cc>)
 80036ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036ee:	4a5a      	ldr	r2, [pc, #360]	@ (8003858 <HAL_RCC_OscConfig+0x4cc>)
 80036f0:	f023 0301 	bic.w	r3, r3, #1
 80036f4:	6713      	str	r3, [r2, #112]	@ 0x70
 80036f6:	4b58      	ldr	r3, [pc, #352]	@ (8003858 <HAL_RCC_OscConfig+0x4cc>)
 80036f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036fa:	4a57      	ldr	r2, [pc, #348]	@ (8003858 <HAL_RCC_OscConfig+0x4cc>)
 80036fc:	f023 0304 	bic.w	r3, r3, #4
 8003700:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	689b      	ldr	r3, [r3, #8]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d015      	beq.n	8003736 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800370a:	f7fe f8c9 	bl	80018a0 <HAL_GetTick>
 800370e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003710:	e00a      	b.n	8003728 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003712:	f7fe f8c5 	bl	80018a0 <HAL_GetTick>
 8003716:	4602      	mov	r2, r0
 8003718:	693b      	ldr	r3, [r7, #16]
 800371a:	1ad3      	subs	r3, r2, r3
 800371c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003720:	4293      	cmp	r3, r2
 8003722:	d901      	bls.n	8003728 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003724:	2303      	movs	r3, #3
 8003726:	e0ce      	b.n	80038c6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003728:	4b4b      	ldr	r3, [pc, #300]	@ (8003858 <HAL_RCC_OscConfig+0x4cc>)
 800372a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800372c:	f003 0302 	and.w	r3, r3, #2
 8003730:	2b00      	cmp	r3, #0
 8003732:	d0ee      	beq.n	8003712 <HAL_RCC_OscConfig+0x386>
 8003734:	e014      	b.n	8003760 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003736:	f7fe f8b3 	bl	80018a0 <HAL_GetTick>
 800373a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800373c:	e00a      	b.n	8003754 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800373e:	f7fe f8af 	bl	80018a0 <HAL_GetTick>
 8003742:	4602      	mov	r2, r0
 8003744:	693b      	ldr	r3, [r7, #16]
 8003746:	1ad3      	subs	r3, r2, r3
 8003748:	f241 3288 	movw	r2, #5000	@ 0x1388
 800374c:	4293      	cmp	r3, r2
 800374e:	d901      	bls.n	8003754 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003750:	2303      	movs	r3, #3
 8003752:	e0b8      	b.n	80038c6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003754:	4b40      	ldr	r3, [pc, #256]	@ (8003858 <HAL_RCC_OscConfig+0x4cc>)
 8003756:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003758:	f003 0302 	and.w	r3, r3, #2
 800375c:	2b00      	cmp	r3, #0
 800375e:	d1ee      	bne.n	800373e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003760:	7dfb      	ldrb	r3, [r7, #23]
 8003762:	2b01      	cmp	r3, #1
 8003764:	d105      	bne.n	8003772 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003766:	4b3c      	ldr	r3, [pc, #240]	@ (8003858 <HAL_RCC_OscConfig+0x4cc>)
 8003768:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800376a:	4a3b      	ldr	r2, [pc, #236]	@ (8003858 <HAL_RCC_OscConfig+0x4cc>)
 800376c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003770:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	699b      	ldr	r3, [r3, #24]
 8003776:	2b00      	cmp	r3, #0
 8003778:	f000 80a4 	beq.w	80038c4 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800377c:	4b36      	ldr	r3, [pc, #216]	@ (8003858 <HAL_RCC_OscConfig+0x4cc>)
 800377e:	689b      	ldr	r3, [r3, #8]
 8003780:	f003 030c 	and.w	r3, r3, #12
 8003784:	2b08      	cmp	r3, #8
 8003786:	d06b      	beq.n	8003860 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	699b      	ldr	r3, [r3, #24]
 800378c:	2b02      	cmp	r3, #2
 800378e:	d149      	bne.n	8003824 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003790:	4b31      	ldr	r3, [pc, #196]	@ (8003858 <HAL_RCC_OscConfig+0x4cc>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4a30      	ldr	r2, [pc, #192]	@ (8003858 <HAL_RCC_OscConfig+0x4cc>)
 8003796:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800379a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800379c:	f7fe f880 	bl	80018a0 <HAL_GetTick>
 80037a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037a2:	e008      	b.n	80037b6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037a4:	f7fe f87c 	bl	80018a0 <HAL_GetTick>
 80037a8:	4602      	mov	r2, r0
 80037aa:	693b      	ldr	r3, [r7, #16]
 80037ac:	1ad3      	subs	r3, r2, r3
 80037ae:	2b02      	cmp	r3, #2
 80037b0:	d901      	bls.n	80037b6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80037b2:	2303      	movs	r3, #3
 80037b4:	e087      	b.n	80038c6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037b6:	4b28      	ldr	r3, [pc, #160]	@ (8003858 <HAL_RCC_OscConfig+0x4cc>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d1f0      	bne.n	80037a4 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	69da      	ldr	r2, [r3, #28]
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6a1b      	ldr	r3, [r3, #32]
 80037ca:	431a      	orrs	r2, r3
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037d0:	019b      	lsls	r3, r3, #6
 80037d2:	431a      	orrs	r2, r3
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037d8:	085b      	lsrs	r3, r3, #1
 80037da:	3b01      	subs	r3, #1
 80037dc:	041b      	lsls	r3, r3, #16
 80037de:	431a      	orrs	r2, r3
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037e4:	061b      	lsls	r3, r3, #24
 80037e6:	4313      	orrs	r3, r2
 80037e8:	4a1b      	ldr	r2, [pc, #108]	@ (8003858 <HAL_RCC_OscConfig+0x4cc>)
 80037ea:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80037ee:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80037f0:	4b19      	ldr	r3, [pc, #100]	@ (8003858 <HAL_RCC_OscConfig+0x4cc>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4a18      	ldr	r2, [pc, #96]	@ (8003858 <HAL_RCC_OscConfig+0x4cc>)
 80037f6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80037fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037fc:	f7fe f850 	bl	80018a0 <HAL_GetTick>
 8003800:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003802:	e008      	b.n	8003816 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003804:	f7fe f84c 	bl	80018a0 <HAL_GetTick>
 8003808:	4602      	mov	r2, r0
 800380a:	693b      	ldr	r3, [r7, #16]
 800380c:	1ad3      	subs	r3, r2, r3
 800380e:	2b02      	cmp	r3, #2
 8003810:	d901      	bls.n	8003816 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8003812:	2303      	movs	r3, #3
 8003814:	e057      	b.n	80038c6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003816:	4b10      	ldr	r3, [pc, #64]	@ (8003858 <HAL_RCC_OscConfig+0x4cc>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800381e:	2b00      	cmp	r3, #0
 8003820:	d0f0      	beq.n	8003804 <HAL_RCC_OscConfig+0x478>
 8003822:	e04f      	b.n	80038c4 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003824:	4b0c      	ldr	r3, [pc, #48]	@ (8003858 <HAL_RCC_OscConfig+0x4cc>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a0b      	ldr	r2, [pc, #44]	@ (8003858 <HAL_RCC_OscConfig+0x4cc>)
 800382a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800382e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003830:	f7fe f836 	bl	80018a0 <HAL_GetTick>
 8003834:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003836:	e008      	b.n	800384a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003838:	f7fe f832 	bl	80018a0 <HAL_GetTick>
 800383c:	4602      	mov	r2, r0
 800383e:	693b      	ldr	r3, [r7, #16]
 8003840:	1ad3      	subs	r3, r2, r3
 8003842:	2b02      	cmp	r3, #2
 8003844:	d901      	bls.n	800384a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8003846:	2303      	movs	r3, #3
 8003848:	e03d      	b.n	80038c6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800384a:	4b03      	ldr	r3, [pc, #12]	@ (8003858 <HAL_RCC_OscConfig+0x4cc>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003852:	2b00      	cmp	r3, #0
 8003854:	d1f0      	bne.n	8003838 <HAL_RCC_OscConfig+0x4ac>
 8003856:	e035      	b.n	80038c4 <HAL_RCC_OscConfig+0x538>
 8003858:	40023800 	.word	0x40023800
 800385c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003860:	4b1b      	ldr	r3, [pc, #108]	@ (80038d0 <HAL_RCC_OscConfig+0x544>)
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	699b      	ldr	r3, [r3, #24]
 800386a:	2b01      	cmp	r3, #1
 800386c:	d028      	beq.n	80038c0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003878:	429a      	cmp	r2, r3
 800387a:	d121      	bne.n	80038c0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003886:	429a      	cmp	r2, r3
 8003888:	d11a      	bne.n	80038c0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800388a:	68fa      	ldr	r2, [r7, #12]
 800388c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003890:	4013      	ands	r3, r2
 8003892:	687a      	ldr	r2, [r7, #4]
 8003894:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003896:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003898:	4293      	cmp	r3, r2
 800389a:	d111      	bne.n	80038c0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038a6:	085b      	lsrs	r3, r3, #1
 80038a8:	3b01      	subs	r3, #1
 80038aa:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80038ac:	429a      	cmp	r2, r3
 80038ae:	d107      	bne.n	80038c0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038ba:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80038bc:	429a      	cmp	r2, r3
 80038be:	d001      	beq.n	80038c4 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80038c0:	2301      	movs	r3, #1
 80038c2:	e000      	b.n	80038c6 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80038c4:	2300      	movs	r3, #0
}
 80038c6:	4618      	mov	r0, r3
 80038c8:	3718      	adds	r7, #24
 80038ca:	46bd      	mov	sp, r7
 80038cc:	bd80      	pop	{r7, pc}
 80038ce:	bf00      	nop
 80038d0:	40023800 	.word	0x40023800

080038d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b084      	sub	sp, #16
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
 80038dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80038de:	2300      	movs	r3, #0
 80038e0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d101      	bne.n	80038ec <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80038e8:	2301      	movs	r3, #1
 80038ea:	e0d0      	b.n	8003a8e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80038ec:	4b6a      	ldr	r3, [pc, #424]	@ (8003a98 <HAL_RCC_ClockConfig+0x1c4>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f003 030f 	and.w	r3, r3, #15
 80038f4:	683a      	ldr	r2, [r7, #0]
 80038f6:	429a      	cmp	r2, r3
 80038f8:	d910      	bls.n	800391c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038fa:	4b67      	ldr	r3, [pc, #412]	@ (8003a98 <HAL_RCC_ClockConfig+0x1c4>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f023 020f 	bic.w	r2, r3, #15
 8003902:	4965      	ldr	r1, [pc, #404]	@ (8003a98 <HAL_RCC_ClockConfig+0x1c4>)
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	4313      	orrs	r3, r2
 8003908:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800390a:	4b63      	ldr	r3, [pc, #396]	@ (8003a98 <HAL_RCC_ClockConfig+0x1c4>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f003 030f 	and.w	r3, r3, #15
 8003912:	683a      	ldr	r2, [r7, #0]
 8003914:	429a      	cmp	r2, r3
 8003916:	d001      	beq.n	800391c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003918:	2301      	movs	r3, #1
 800391a:	e0b8      	b.n	8003a8e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f003 0302 	and.w	r3, r3, #2
 8003924:	2b00      	cmp	r3, #0
 8003926:	d020      	beq.n	800396a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f003 0304 	and.w	r3, r3, #4
 8003930:	2b00      	cmp	r3, #0
 8003932:	d005      	beq.n	8003940 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003934:	4b59      	ldr	r3, [pc, #356]	@ (8003a9c <HAL_RCC_ClockConfig+0x1c8>)
 8003936:	689b      	ldr	r3, [r3, #8]
 8003938:	4a58      	ldr	r2, [pc, #352]	@ (8003a9c <HAL_RCC_ClockConfig+0x1c8>)
 800393a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800393e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f003 0308 	and.w	r3, r3, #8
 8003948:	2b00      	cmp	r3, #0
 800394a:	d005      	beq.n	8003958 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800394c:	4b53      	ldr	r3, [pc, #332]	@ (8003a9c <HAL_RCC_ClockConfig+0x1c8>)
 800394e:	689b      	ldr	r3, [r3, #8]
 8003950:	4a52      	ldr	r2, [pc, #328]	@ (8003a9c <HAL_RCC_ClockConfig+0x1c8>)
 8003952:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003956:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003958:	4b50      	ldr	r3, [pc, #320]	@ (8003a9c <HAL_RCC_ClockConfig+0x1c8>)
 800395a:	689b      	ldr	r3, [r3, #8]
 800395c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	689b      	ldr	r3, [r3, #8]
 8003964:	494d      	ldr	r1, [pc, #308]	@ (8003a9c <HAL_RCC_ClockConfig+0x1c8>)
 8003966:	4313      	orrs	r3, r2
 8003968:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f003 0301 	and.w	r3, r3, #1
 8003972:	2b00      	cmp	r3, #0
 8003974:	d040      	beq.n	80039f8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	685b      	ldr	r3, [r3, #4]
 800397a:	2b01      	cmp	r3, #1
 800397c:	d107      	bne.n	800398e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800397e:	4b47      	ldr	r3, [pc, #284]	@ (8003a9c <HAL_RCC_ClockConfig+0x1c8>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003986:	2b00      	cmp	r3, #0
 8003988:	d115      	bne.n	80039b6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800398a:	2301      	movs	r3, #1
 800398c:	e07f      	b.n	8003a8e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	685b      	ldr	r3, [r3, #4]
 8003992:	2b02      	cmp	r3, #2
 8003994:	d107      	bne.n	80039a6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003996:	4b41      	ldr	r3, [pc, #260]	@ (8003a9c <HAL_RCC_ClockConfig+0x1c8>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d109      	bne.n	80039b6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80039a2:	2301      	movs	r3, #1
 80039a4:	e073      	b.n	8003a8e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039a6:	4b3d      	ldr	r3, [pc, #244]	@ (8003a9c <HAL_RCC_ClockConfig+0x1c8>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f003 0302 	and.w	r3, r3, #2
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d101      	bne.n	80039b6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80039b2:	2301      	movs	r3, #1
 80039b4:	e06b      	b.n	8003a8e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80039b6:	4b39      	ldr	r3, [pc, #228]	@ (8003a9c <HAL_RCC_ClockConfig+0x1c8>)
 80039b8:	689b      	ldr	r3, [r3, #8]
 80039ba:	f023 0203 	bic.w	r2, r3, #3
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	685b      	ldr	r3, [r3, #4]
 80039c2:	4936      	ldr	r1, [pc, #216]	@ (8003a9c <HAL_RCC_ClockConfig+0x1c8>)
 80039c4:	4313      	orrs	r3, r2
 80039c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039c8:	f7fd ff6a 	bl	80018a0 <HAL_GetTick>
 80039cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039ce:	e00a      	b.n	80039e6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039d0:	f7fd ff66 	bl	80018a0 <HAL_GetTick>
 80039d4:	4602      	mov	r2, r0
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	1ad3      	subs	r3, r2, r3
 80039da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80039de:	4293      	cmp	r3, r2
 80039e0:	d901      	bls.n	80039e6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80039e2:	2303      	movs	r3, #3
 80039e4:	e053      	b.n	8003a8e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039e6:	4b2d      	ldr	r3, [pc, #180]	@ (8003a9c <HAL_RCC_ClockConfig+0x1c8>)
 80039e8:	689b      	ldr	r3, [r3, #8]
 80039ea:	f003 020c 	and.w	r2, r3, #12
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	009b      	lsls	r3, r3, #2
 80039f4:	429a      	cmp	r2, r3
 80039f6:	d1eb      	bne.n	80039d0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80039f8:	4b27      	ldr	r3, [pc, #156]	@ (8003a98 <HAL_RCC_ClockConfig+0x1c4>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f003 030f 	and.w	r3, r3, #15
 8003a00:	683a      	ldr	r2, [r7, #0]
 8003a02:	429a      	cmp	r2, r3
 8003a04:	d210      	bcs.n	8003a28 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a06:	4b24      	ldr	r3, [pc, #144]	@ (8003a98 <HAL_RCC_ClockConfig+0x1c4>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f023 020f 	bic.w	r2, r3, #15
 8003a0e:	4922      	ldr	r1, [pc, #136]	@ (8003a98 <HAL_RCC_ClockConfig+0x1c4>)
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	4313      	orrs	r3, r2
 8003a14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a16:	4b20      	ldr	r3, [pc, #128]	@ (8003a98 <HAL_RCC_ClockConfig+0x1c4>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f003 030f 	and.w	r3, r3, #15
 8003a1e:	683a      	ldr	r2, [r7, #0]
 8003a20:	429a      	cmp	r2, r3
 8003a22:	d001      	beq.n	8003a28 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003a24:	2301      	movs	r3, #1
 8003a26:	e032      	b.n	8003a8e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f003 0304 	and.w	r3, r3, #4
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d008      	beq.n	8003a46 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a34:	4b19      	ldr	r3, [pc, #100]	@ (8003a9c <HAL_RCC_ClockConfig+0x1c8>)
 8003a36:	689b      	ldr	r3, [r3, #8]
 8003a38:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	68db      	ldr	r3, [r3, #12]
 8003a40:	4916      	ldr	r1, [pc, #88]	@ (8003a9c <HAL_RCC_ClockConfig+0x1c8>)
 8003a42:	4313      	orrs	r3, r2
 8003a44:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f003 0308 	and.w	r3, r3, #8
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d009      	beq.n	8003a66 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003a52:	4b12      	ldr	r3, [pc, #72]	@ (8003a9c <HAL_RCC_ClockConfig+0x1c8>)
 8003a54:	689b      	ldr	r3, [r3, #8]
 8003a56:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	691b      	ldr	r3, [r3, #16]
 8003a5e:	00db      	lsls	r3, r3, #3
 8003a60:	490e      	ldr	r1, [pc, #56]	@ (8003a9c <HAL_RCC_ClockConfig+0x1c8>)
 8003a62:	4313      	orrs	r3, r2
 8003a64:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003a66:	f000 f821 	bl	8003aac <HAL_RCC_GetSysClockFreq>
 8003a6a:	4602      	mov	r2, r0
 8003a6c:	4b0b      	ldr	r3, [pc, #44]	@ (8003a9c <HAL_RCC_ClockConfig+0x1c8>)
 8003a6e:	689b      	ldr	r3, [r3, #8]
 8003a70:	091b      	lsrs	r3, r3, #4
 8003a72:	f003 030f 	and.w	r3, r3, #15
 8003a76:	490a      	ldr	r1, [pc, #40]	@ (8003aa0 <HAL_RCC_ClockConfig+0x1cc>)
 8003a78:	5ccb      	ldrb	r3, [r1, r3]
 8003a7a:	fa22 f303 	lsr.w	r3, r2, r3
 8003a7e:	4a09      	ldr	r2, [pc, #36]	@ (8003aa4 <HAL_RCC_ClockConfig+0x1d0>)
 8003a80:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003a82:	4b09      	ldr	r3, [pc, #36]	@ (8003aa8 <HAL_RCC_ClockConfig+0x1d4>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4618      	mov	r0, r3
 8003a88:	f7fd fd46 	bl	8001518 <HAL_InitTick>

  return HAL_OK;
 8003a8c:	2300      	movs	r3, #0
}
 8003a8e:	4618      	mov	r0, r3
 8003a90:	3710      	adds	r7, #16
 8003a92:	46bd      	mov	sp, r7
 8003a94:	bd80      	pop	{r7, pc}
 8003a96:	bf00      	nop
 8003a98:	40023c00 	.word	0x40023c00
 8003a9c:	40023800 	.word	0x40023800
 8003aa0:	0800b604 	.word	0x0800b604
 8003aa4:	20000000 	.word	0x20000000
 8003aa8:	20000004 	.word	0x20000004

08003aac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003aac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ab0:	b090      	sub	sp, #64	@ 0x40
 8003ab2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	637b      	str	r3, [r7, #52]	@ 0x34
 8003ab8:	2300      	movs	r3, #0
 8003aba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003abc:	2300      	movs	r3, #0
 8003abe:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0;
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003ac4:	4b59      	ldr	r3, [pc, #356]	@ (8003c2c <HAL_RCC_GetSysClockFreq+0x180>)
 8003ac6:	689b      	ldr	r3, [r3, #8]
 8003ac8:	f003 030c 	and.w	r3, r3, #12
 8003acc:	2b08      	cmp	r3, #8
 8003ace:	d00d      	beq.n	8003aec <HAL_RCC_GetSysClockFreq+0x40>
 8003ad0:	2b08      	cmp	r3, #8
 8003ad2:	f200 80a1 	bhi.w	8003c18 <HAL_RCC_GetSysClockFreq+0x16c>
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d002      	beq.n	8003ae0 <HAL_RCC_GetSysClockFreq+0x34>
 8003ada:	2b04      	cmp	r3, #4
 8003adc:	d003      	beq.n	8003ae6 <HAL_RCC_GetSysClockFreq+0x3a>
 8003ade:	e09b      	b.n	8003c18 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003ae0:	4b53      	ldr	r3, [pc, #332]	@ (8003c30 <HAL_RCC_GetSysClockFreq+0x184>)
 8003ae2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003ae4:	e09b      	b.n	8003c1e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003ae6:	4b53      	ldr	r3, [pc, #332]	@ (8003c34 <HAL_RCC_GetSysClockFreq+0x188>)
 8003ae8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003aea:	e098      	b.n	8003c1e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003aec:	4b4f      	ldr	r3, [pc, #316]	@ (8003c2c <HAL_RCC_GetSysClockFreq+0x180>)
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003af4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003af6:	4b4d      	ldr	r3, [pc, #308]	@ (8003c2c <HAL_RCC_GetSysClockFreq+0x180>)
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d028      	beq.n	8003b54 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b02:	4b4a      	ldr	r3, [pc, #296]	@ (8003c2c <HAL_RCC_GetSysClockFreq+0x180>)
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	099b      	lsrs	r3, r3, #6
 8003b08:	2200      	movs	r2, #0
 8003b0a:	623b      	str	r3, [r7, #32]
 8003b0c:	627a      	str	r2, [r7, #36]	@ 0x24
 8003b0e:	6a3b      	ldr	r3, [r7, #32]
 8003b10:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003b14:	2100      	movs	r1, #0
 8003b16:	4b47      	ldr	r3, [pc, #284]	@ (8003c34 <HAL_RCC_GetSysClockFreq+0x188>)
 8003b18:	fb03 f201 	mul.w	r2, r3, r1
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	fb00 f303 	mul.w	r3, r0, r3
 8003b22:	4413      	add	r3, r2
 8003b24:	4a43      	ldr	r2, [pc, #268]	@ (8003c34 <HAL_RCC_GetSysClockFreq+0x188>)
 8003b26:	fba0 1202 	umull	r1, r2, r0, r2
 8003b2a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003b2c:	460a      	mov	r2, r1
 8003b2e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003b30:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003b32:	4413      	add	r3, r2
 8003b34:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003b36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b38:	2200      	movs	r2, #0
 8003b3a:	61bb      	str	r3, [r7, #24]
 8003b3c:	61fa      	str	r2, [r7, #28]
 8003b3e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003b42:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003b46:	f7fd f84f 	bl	8000be8 <__aeabi_uldivmod>
 8003b4a:	4602      	mov	r2, r0
 8003b4c:	460b      	mov	r3, r1
 8003b4e:	4613      	mov	r3, r2
 8003b50:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003b52:	e053      	b.n	8003bfc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b54:	4b35      	ldr	r3, [pc, #212]	@ (8003c2c <HAL_RCC_GetSysClockFreq+0x180>)
 8003b56:	685b      	ldr	r3, [r3, #4]
 8003b58:	099b      	lsrs	r3, r3, #6
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	613b      	str	r3, [r7, #16]
 8003b5e:	617a      	str	r2, [r7, #20]
 8003b60:	693b      	ldr	r3, [r7, #16]
 8003b62:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003b66:	f04f 0b00 	mov.w	fp, #0
 8003b6a:	4652      	mov	r2, sl
 8003b6c:	465b      	mov	r3, fp
 8003b6e:	f04f 0000 	mov.w	r0, #0
 8003b72:	f04f 0100 	mov.w	r1, #0
 8003b76:	0159      	lsls	r1, r3, #5
 8003b78:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b7c:	0150      	lsls	r0, r2, #5
 8003b7e:	4602      	mov	r2, r0
 8003b80:	460b      	mov	r3, r1
 8003b82:	ebb2 080a 	subs.w	r8, r2, sl
 8003b86:	eb63 090b 	sbc.w	r9, r3, fp
 8003b8a:	f04f 0200 	mov.w	r2, #0
 8003b8e:	f04f 0300 	mov.w	r3, #0
 8003b92:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003b96:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003b9a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003b9e:	ebb2 0408 	subs.w	r4, r2, r8
 8003ba2:	eb63 0509 	sbc.w	r5, r3, r9
 8003ba6:	f04f 0200 	mov.w	r2, #0
 8003baa:	f04f 0300 	mov.w	r3, #0
 8003bae:	00eb      	lsls	r3, r5, #3
 8003bb0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003bb4:	00e2      	lsls	r2, r4, #3
 8003bb6:	4614      	mov	r4, r2
 8003bb8:	461d      	mov	r5, r3
 8003bba:	eb14 030a 	adds.w	r3, r4, sl
 8003bbe:	603b      	str	r3, [r7, #0]
 8003bc0:	eb45 030b 	adc.w	r3, r5, fp
 8003bc4:	607b      	str	r3, [r7, #4]
 8003bc6:	f04f 0200 	mov.w	r2, #0
 8003bca:	f04f 0300 	mov.w	r3, #0
 8003bce:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003bd2:	4629      	mov	r1, r5
 8003bd4:	028b      	lsls	r3, r1, #10
 8003bd6:	4621      	mov	r1, r4
 8003bd8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003bdc:	4621      	mov	r1, r4
 8003bde:	028a      	lsls	r2, r1, #10
 8003be0:	4610      	mov	r0, r2
 8003be2:	4619      	mov	r1, r3
 8003be4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003be6:	2200      	movs	r2, #0
 8003be8:	60bb      	str	r3, [r7, #8]
 8003bea:	60fa      	str	r2, [r7, #12]
 8003bec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003bf0:	f7fc fffa 	bl	8000be8 <__aeabi_uldivmod>
 8003bf4:	4602      	mov	r2, r0
 8003bf6:	460b      	mov	r3, r1
 8003bf8:	4613      	mov	r3, r2
 8003bfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003bfc:	4b0b      	ldr	r3, [pc, #44]	@ (8003c2c <HAL_RCC_GetSysClockFreq+0x180>)
 8003bfe:	685b      	ldr	r3, [r3, #4]
 8003c00:	0c1b      	lsrs	r3, r3, #16
 8003c02:	f003 0303 	and.w	r3, r3, #3
 8003c06:	3301      	adds	r3, #1
 8003c08:	005b      	lsls	r3, r3, #1
 8003c0a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8003c0c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003c0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c10:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c14:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003c16:	e002      	b.n	8003c1e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003c18:	4b05      	ldr	r3, [pc, #20]	@ (8003c30 <HAL_RCC_GetSysClockFreq+0x184>)
 8003c1a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003c1c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003c20:	4618      	mov	r0, r3
 8003c22:	3740      	adds	r7, #64	@ 0x40
 8003c24:	46bd      	mov	sp, r7
 8003c26:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c2a:	bf00      	nop
 8003c2c:	40023800 	.word	0x40023800
 8003c30:	00f42400 	.word	0x00f42400
 8003c34:	017d7840 	.word	0x017d7840

08003c38 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c3c:	4b03      	ldr	r3, [pc, #12]	@ (8003c4c <HAL_RCC_GetHCLKFreq+0x14>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
}
 8003c40:	4618      	mov	r0, r3
 8003c42:	46bd      	mov	sp, r7
 8003c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c48:	4770      	bx	lr
 8003c4a:	bf00      	nop
 8003c4c:	20000000 	.word	0x20000000

08003c50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003c54:	f7ff fff0 	bl	8003c38 <HAL_RCC_GetHCLKFreq>
 8003c58:	4602      	mov	r2, r0
 8003c5a:	4b05      	ldr	r3, [pc, #20]	@ (8003c70 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003c5c:	689b      	ldr	r3, [r3, #8]
 8003c5e:	0a9b      	lsrs	r3, r3, #10
 8003c60:	f003 0307 	and.w	r3, r3, #7
 8003c64:	4903      	ldr	r1, [pc, #12]	@ (8003c74 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c66:	5ccb      	ldrb	r3, [r1, r3]
 8003c68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	bd80      	pop	{r7, pc}
 8003c70:	40023800 	.word	0x40023800
 8003c74:	0800b614 	.word	0x0800b614

08003c78 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003c7c:	f7ff ffdc 	bl	8003c38 <HAL_RCC_GetHCLKFreq>
 8003c80:	4602      	mov	r2, r0
 8003c82:	4b05      	ldr	r3, [pc, #20]	@ (8003c98 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003c84:	689b      	ldr	r3, [r3, #8]
 8003c86:	0b5b      	lsrs	r3, r3, #13
 8003c88:	f003 0307 	and.w	r3, r3, #7
 8003c8c:	4903      	ldr	r1, [pc, #12]	@ (8003c9c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c8e:	5ccb      	ldrb	r3, [r1, r3]
 8003c90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c94:	4618      	mov	r0, r3
 8003c96:	bd80      	pop	{r7, pc}
 8003c98:	40023800 	.word	0x40023800
 8003c9c:	0800b614 	.word	0x0800b614

08003ca0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	b083      	sub	sp, #12
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
 8003ca8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	220f      	movs	r2, #15
 8003cae:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003cb0:	4b12      	ldr	r3, [pc, #72]	@ (8003cfc <HAL_RCC_GetClockConfig+0x5c>)
 8003cb2:	689b      	ldr	r3, [r3, #8]
 8003cb4:	f003 0203 	and.w	r2, r3, #3
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003cbc:	4b0f      	ldr	r3, [pc, #60]	@ (8003cfc <HAL_RCC_GetClockConfig+0x5c>)
 8003cbe:	689b      	ldr	r3, [r3, #8]
 8003cc0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003cc8:	4b0c      	ldr	r3, [pc, #48]	@ (8003cfc <HAL_RCC_GetClockConfig+0x5c>)
 8003cca:	689b      	ldr	r3, [r3, #8]
 8003ccc:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003cd4:	4b09      	ldr	r3, [pc, #36]	@ (8003cfc <HAL_RCC_GetClockConfig+0x5c>)
 8003cd6:	689b      	ldr	r3, [r3, #8]
 8003cd8:	08db      	lsrs	r3, r3, #3
 8003cda:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003ce2:	4b07      	ldr	r3, [pc, #28]	@ (8003d00 <HAL_RCC_GetClockConfig+0x60>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f003 020f 	and.w	r2, r3, #15
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	601a      	str	r2, [r3, #0]
}
 8003cee:	bf00      	nop
 8003cf0:	370c      	adds	r7, #12
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf8:	4770      	bx	lr
 8003cfa:	bf00      	nop
 8003cfc:	40023800 	.word	0x40023800
 8003d00:	40023c00 	.word	0x40023c00

08003d04 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b088      	sub	sp, #32
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003d10:	2300      	movs	r3, #0
 8003d12:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003d14:	2300      	movs	r3, #0
 8003d16:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003d18:	2300      	movs	r3, #0
 8003d1a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f003 0301 	and.w	r3, r3, #1
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d012      	beq.n	8003d52 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003d2c:	4b69      	ldr	r3, [pc, #420]	@ (8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d2e:	689b      	ldr	r3, [r3, #8]
 8003d30:	4a68      	ldr	r2, [pc, #416]	@ (8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d32:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8003d36:	6093      	str	r3, [r2, #8]
 8003d38:	4b66      	ldr	r3, [pc, #408]	@ (8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d3a:	689a      	ldr	r2, [r3, #8]
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d40:	4964      	ldr	r1, [pc, #400]	@ (8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d42:	4313      	orrs	r3, r2
 8003d44:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d101      	bne.n	8003d52 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003d4e:	2301      	movs	r3, #1
 8003d50:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d017      	beq.n	8003d8e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003d5e:	4b5d      	ldr	r3, [pc, #372]	@ (8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d60:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003d64:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d6c:	4959      	ldr	r1, [pc, #356]	@ (8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d78:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003d7c:	d101      	bne.n	8003d82 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003d7e:	2301      	movs	r3, #1
 8003d80:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d101      	bne.n	8003d8e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d017      	beq.n	8003dca <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003d9a:	4b4e      	ldr	r3, [pc, #312]	@ (8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003da0:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003da8:	494a      	ldr	r1, [pc, #296]	@ (8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003daa:	4313      	orrs	r3, r2
 8003dac:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003db4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003db8:	d101      	bne.n	8003dbe <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003dba:	2301      	movs	r3, #1
 8003dbc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d101      	bne.n	8003dca <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d001      	beq.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f003 0320 	and.w	r3, r3, #32
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	f000 808b 	beq.w	8003efe <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003de8:	4b3a      	ldr	r3, [pc, #232]	@ (8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003dea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dec:	4a39      	ldr	r2, [pc, #228]	@ (8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003dee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003df2:	6413      	str	r3, [r2, #64]	@ 0x40
 8003df4:	4b37      	ldr	r3, [pc, #220]	@ (8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003df6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003df8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003dfc:	60bb      	str	r3, [r7, #8]
 8003dfe:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003e00:	4b35      	ldr	r3, [pc, #212]	@ (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4a34      	ldr	r2, [pc, #208]	@ (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003e06:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e0a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e0c:	f7fd fd48 	bl	80018a0 <HAL_GetTick>
 8003e10:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003e12:	e008      	b.n	8003e26 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e14:	f7fd fd44 	bl	80018a0 <HAL_GetTick>
 8003e18:	4602      	mov	r2, r0
 8003e1a:	697b      	ldr	r3, [r7, #20]
 8003e1c:	1ad3      	subs	r3, r2, r3
 8003e1e:	2b64      	cmp	r3, #100	@ 0x64
 8003e20:	d901      	bls.n	8003e26 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003e22:	2303      	movs	r3, #3
 8003e24:	e357      	b.n	80044d6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003e26:	4b2c      	ldr	r3, [pc, #176]	@ (8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d0f0      	beq.n	8003e14 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003e32:	4b28      	ldr	r3, [pc, #160]	@ (8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e36:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003e3a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003e3c:	693b      	ldr	r3, [r7, #16]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d035      	beq.n	8003eae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e46:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003e4a:	693a      	ldr	r2, [r7, #16]
 8003e4c:	429a      	cmp	r2, r3
 8003e4e:	d02e      	beq.n	8003eae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003e50:	4b20      	ldr	r3, [pc, #128]	@ (8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e54:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003e58:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003e5a:	4b1e      	ldr	r3, [pc, #120]	@ (8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e5e:	4a1d      	ldr	r2, [pc, #116]	@ (8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e60:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e64:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003e66:	4b1b      	ldr	r3, [pc, #108]	@ (8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e6a:	4a1a      	ldr	r2, [pc, #104]	@ (8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e6c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e70:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003e72:	4a18      	ldr	r2, [pc, #96]	@ (8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e74:	693b      	ldr	r3, [r7, #16]
 8003e76:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003e78:	4b16      	ldr	r3, [pc, #88]	@ (8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e7c:	f003 0301 	and.w	r3, r3, #1
 8003e80:	2b01      	cmp	r3, #1
 8003e82:	d114      	bne.n	8003eae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e84:	f7fd fd0c 	bl	80018a0 <HAL_GetTick>
 8003e88:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e8a:	e00a      	b.n	8003ea2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e8c:	f7fd fd08 	bl	80018a0 <HAL_GetTick>
 8003e90:	4602      	mov	r2, r0
 8003e92:	697b      	ldr	r3, [r7, #20]
 8003e94:	1ad3      	subs	r3, r2, r3
 8003e96:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d901      	bls.n	8003ea2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003e9e:	2303      	movs	r3, #3
 8003ea0:	e319      	b.n	80044d6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ea2:	4b0c      	ldr	r3, [pc, #48]	@ (8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ea4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ea6:	f003 0302 	and.w	r3, r3, #2
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d0ee      	beq.n	8003e8c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003eb2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003eb6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003eba:	d111      	bne.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003ebc:	4b05      	ldr	r3, [pc, #20]	@ (8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ebe:	689b      	ldr	r3, [r3, #8]
 8003ec0:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003ec8:	4b04      	ldr	r3, [pc, #16]	@ (8003edc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003eca:	400b      	ands	r3, r1
 8003ecc:	4901      	ldr	r1, [pc, #4]	@ (8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	608b      	str	r3, [r1, #8]
 8003ed2:	e00b      	b.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003ed4:	40023800 	.word	0x40023800
 8003ed8:	40007000 	.word	0x40007000
 8003edc:	0ffffcff 	.word	0x0ffffcff
 8003ee0:	4baa      	ldr	r3, [pc, #680]	@ (800418c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ee2:	689b      	ldr	r3, [r3, #8]
 8003ee4:	4aa9      	ldr	r2, [pc, #676]	@ (800418c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ee6:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8003eea:	6093      	str	r3, [r2, #8]
 8003eec:	4ba7      	ldr	r3, [pc, #668]	@ (800418c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003eee:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ef4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ef8:	49a4      	ldr	r1, [pc, #656]	@ (800418c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003efa:	4313      	orrs	r3, r2
 8003efc:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f003 0310 	and.w	r3, r3, #16
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d010      	beq.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003f0a:	4ba0      	ldr	r3, [pc, #640]	@ (800418c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003f10:	4a9e      	ldr	r2, [pc, #632]	@ (800418c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f12:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003f16:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8003f1a:	4b9c      	ldr	r3, [pc, #624]	@ (800418c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f1c:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f24:	4999      	ldr	r1, [pc, #612]	@ (800418c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f26:	4313      	orrs	r3, r2
 8003f28:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d00a      	beq.n	8003f4e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003f38:	4b94      	ldr	r3, [pc, #592]	@ (800418c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f3e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003f46:	4991      	ldr	r1, [pc, #580]	@ (800418c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f48:	4313      	orrs	r3, r2
 8003f4a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d00a      	beq.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003f5a:	4b8c      	ldr	r3, [pc, #560]	@ (800418c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f60:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003f68:	4988      	ldr	r1, [pc, #544]	@ (800418c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f6a:	4313      	orrs	r3, r2
 8003f6c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d00a      	beq.n	8003f92 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003f7c:	4b83      	ldr	r3, [pc, #524]	@ (800418c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f82:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003f8a:	4980      	ldr	r1, [pc, #512]	@ (800418c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003f8c:	4313      	orrs	r3, r2
 8003f8e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d00a      	beq.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003f9e:	4b7b      	ldr	r3, [pc, #492]	@ (800418c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003fa0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003fa4:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fac:	4977      	ldr	r1, [pc, #476]	@ (800418c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003fae:	4313      	orrs	r3, r2
 8003fb0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d00a      	beq.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003fc0:	4b72      	ldr	r3, [pc, #456]	@ (800418c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003fc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003fc6:	f023 0203 	bic.w	r2, r3, #3
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fce:	496f      	ldr	r1, [pc, #444]	@ (800418c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003fd0:	4313      	orrs	r3, r2
 8003fd2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d00a      	beq.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003fe2:	4b6a      	ldr	r3, [pc, #424]	@ (800418c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003fe4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003fe8:	f023 020c 	bic.w	r2, r3, #12
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ff0:	4966      	ldr	r1, [pc, #408]	@ (800418c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ff2:	4313      	orrs	r3, r2
 8003ff4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004000:	2b00      	cmp	r3, #0
 8004002:	d00a      	beq.n	800401a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004004:	4b61      	ldr	r3, [pc, #388]	@ (800418c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004006:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800400a:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004012:	495e      	ldr	r1, [pc, #376]	@ (800418c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004014:	4313      	orrs	r3, r2
 8004016:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004022:	2b00      	cmp	r3, #0
 8004024:	d00a      	beq.n	800403c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004026:	4b59      	ldr	r3, [pc, #356]	@ (800418c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004028:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800402c:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004034:	4955      	ldr	r1, [pc, #340]	@ (800418c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004036:	4313      	orrs	r3, r2
 8004038:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004044:	2b00      	cmp	r3, #0
 8004046:	d00a      	beq.n	800405e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004048:	4b50      	ldr	r3, [pc, #320]	@ (800418c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800404a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800404e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004056:	494d      	ldr	r1, [pc, #308]	@ (800418c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004058:	4313      	orrs	r3, r2
 800405a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004066:	2b00      	cmp	r3, #0
 8004068:	d00a      	beq.n	8004080 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800406a:	4b48      	ldr	r3, [pc, #288]	@ (800418c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800406c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004070:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004078:	4944      	ldr	r1, [pc, #272]	@ (800418c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800407a:	4313      	orrs	r3, r2
 800407c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004088:	2b00      	cmp	r3, #0
 800408a:	d00a      	beq.n	80040a2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800408c:	4b3f      	ldr	r3, [pc, #252]	@ (800418c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800408e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004092:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800409a:	493c      	ldr	r1, [pc, #240]	@ (800418c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800409c:	4313      	orrs	r3, r2
 800409e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d00a      	beq.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80040ae:	4b37      	ldr	r3, [pc, #220]	@ (800418c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80040b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040b4:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80040bc:	4933      	ldr	r1, [pc, #204]	@ (800418c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80040be:	4313      	orrs	r3, r2
 80040c0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d00a      	beq.n	80040e6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80040d0:	4b2e      	ldr	r3, [pc, #184]	@ (800418c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80040d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040d6:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80040de:	492b      	ldr	r1, [pc, #172]	@ (800418c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80040e0:	4313      	orrs	r3, r2
 80040e2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d011      	beq.n	8004116 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80040f2:	4b26      	ldr	r3, [pc, #152]	@ (800418c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80040f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040f8:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004100:	4922      	ldr	r1, [pc, #136]	@ (800418c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004102:	4313      	orrs	r3, r2
 8004104:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800410c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004110:	d101      	bne.n	8004116 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004112:	2301      	movs	r3, #1
 8004114:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f003 0308 	and.w	r3, r3, #8
 800411e:	2b00      	cmp	r3, #0
 8004120:	d001      	beq.n	8004126 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004122:	2301      	movs	r3, #1
 8004124:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800412e:	2b00      	cmp	r3, #0
 8004130:	d00a      	beq.n	8004148 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004132:	4b16      	ldr	r3, [pc, #88]	@ (800418c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004134:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004138:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004140:	4912      	ldr	r1, [pc, #72]	@ (800418c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004142:	4313      	orrs	r3, r2
 8004144:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004150:	2b00      	cmp	r3, #0
 8004152:	d00b      	beq.n	800416c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004154:	4b0d      	ldr	r3, [pc, #52]	@ (800418c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004156:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800415a:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004164:	4909      	ldr	r1, [pc, #36]	@ (800418c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004166:	4313      	orrs	r3, r2
 8004168:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800416c:	69fb      	ldr	r3, [r7, #28]
 800416e:	2b01      	cmp	r3, #1
 8004170:	d006      	beq.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800417a:	2b00      	cmp	r3, #0
 800417c:	f000 80d9 	beq.w	8004332 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004180:	4b02      	ldr	r3, [pc, #8]	@ (800418c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	4a01      	ldr	r2, [pc, #4]	@ (800418c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004186:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800418a:	e001      	b.n	8004190 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 800418c:	40023800 	.word	0x40023800
 8004190:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004192:	f7fd fb85 	bl	80018a0 <HAL_GetTick>
 8004196:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004198:	e008      	b.n	80041ac <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800419a:	f7fd fb81 	bl	80018a0 <HAL_GetTick>
 800419e:	4602      	mov	r2, r0
 80041a0:	697b      	ldr	r3, [r7, #20]
 80041a2:	1ad3      	subs	r3, r2, r3
 80041a4:	2b64      	cmp	r3, #100	@ 0x64
 80041a6:	d901      	bls.n	80041ac <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80041a8:	2303      	movs	r3, #3
 80041aa:	e194      	b.n	80044d6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80041ac:	4b6c      	ldr	r3, [pc, #432]	@ (8004360 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d1f0      	bne.n	800419a <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f003 0301 	and.w	r3, r3, #1
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d021      	beq.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0x504>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d11d      	bne.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80041cc:	4b64      	ldr	r3, [pc, #400]	@ (8004360 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80041ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80041d2:	0c1b      	lsrs	r3, r3, #16
 80041d4:	f003 0303 	and.w	r3, r3, #3
 80041d8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80041da:	4b61      	ldr	r3, [pc, #388]	@ (8004360 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80041dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80041e0:	0e1b      	lsrs	r3, r3, #24
 80041e2:	f003 030f 	and.w	r3, r3, #15
 80041e6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	685b      	ldr	r3, [r3, #4]
 80041ec:	019a      	lsls	r2, r3, #6
 80041ee:	693b      	ldr	r3, [r7, #16]
 80041f0:	041b      	lsls	r3, r3, #16
 80041f2:	431a      	orrs	r2, r3
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	061b      	lsls	r3, r3, #24
 80041f8:	431a      	orrs	r2, r3
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	689b      	ldr	r3, [r3, #8]
 80041fe:	071b      	lsls	r3, r3, #28
 8004200:	4957      	ldr	r1, [pc, #348]	@ (8004360 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004202:	4313      	orrs	r3, r2
 8004204:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004210:	2b00      	cmp	r3, #0
 8004212:	d004      	beq.n	800421e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004218:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800421c:	d00a      	beq.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004226:	2b00      	cmp	r3, #0
 8004228:	d02e      	beq.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800422e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004232:	d129      	bne.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004234:	4b4a      	ldr	r3, [pc, #296]	@ (8004360 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004236:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800423a:	0c1b      	lsrs	r3, r3, #16
 800423c:	f003 0303 	and.w	r3, r3, #3
 8004240:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004242:	4b47      	ldr	r3, [pc, #284]	@ (8004360 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004244:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004248:	0f1b      	lsrs	r3, r3, #28
 800424a:	f003 0307 	and.w	r3, r3, #7
 800424e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	685b      	ldr	r3, [r3, #4]
 8004254:	019a      	lsls	r2, r3, #6
 8004256:	693b      	ldr	r3, [r7, #16]
 8004258:	041b      	lsls	r3, r3, #16
 800425a:	431a      	orrs	r2, r3
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	68db      	ldr	r3, [r3, #12]
 8004260:	061b      	lsls	r3, r3, #24
 8004262:	431a      	orrs	r2, r3
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	071b      	lsls	r3, r3, #28
 8004268:	493d      	ldr	r1, [pc, #244]	@ (8004360 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800426a:	4313      	orrs	r3, r2
 800426c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004270:	4b3b      	ldr	r3, [pc, #236]	@ (8004360 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004272:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004276:	f023 021f 	bic.w	r2, r3, #31
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800427e:	3b01      	subs	r3, #1
 8004280:	4937      	ldr	r1, [pc, #220]	@ (8004360 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004282:	4313      	orrs	r3, r2
 8004284:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004290:	2b00      	cmp	r3, #0
 8004292:	d01d      	beq.n	80042d0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004294:	4b32      	ldr	r3, [pc, #200]	@ (8004360 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004296:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800429a:	0e1b      	lsrs	r3, r3, #24
 800429c:	f003 030f 	and.w	r3, r3, #15
 80042a0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80042a2:	4b2f      	ldr	r3, [pc, #188]	@ (8004360 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80042a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80042a8:	0f1b      	lsrs	r3, r3, #28
 80042aa:	f003 0307 	and.w	r3, r3, #7
 80042ae:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	685b      	ldr	r3, [r3, #4]
 80042b4:	019a      	lsls	r2, r3, #6
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	691b      	ldr	r3, [r3, #16]
 80042ba:	041b      	lsls	r3, r3, #16
 80042bc:	431a      	orrs	r2, r3
 80042be:	693b      	ldr	r3, [r7, #16]
 80042c0:	061b      	lsls	r3, r3, #24
 80042c2:	431a      	orrs	r2, r3
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	071b      	lsls	r3, r3, #28
 80042c8:	4925      	ldr	r1, [pc, #148]	@ (8004360 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80042ca:	4313      	orrs	r3, r2
 80042cc:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d011      	beq.n	8004300 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	685b      	ldr	r3, [r3, #4]
 80042e0:	019a      	lsls	r2, r3, #6
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	691b      	ldr	r3, [r3, #16]
 80042e6:	041b      	lsls	r3, r3, #16
 80042e8:	431a      	orrs	r2, r3
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	68db      	ldr	r3, [r3, #12]
 80042ee:	061b      	lsls	r3, r3, #24
 80042f0:	431a      	orrs	r2, r3
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	689b      	ldr	r3, [r3, #8]
 80042f6:	071b      	lsls	r3, r3, #28
 80042f8:	4919      	ldr	r1, [pc, #100]	@ (8004360 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80042fa:	4313      	orrs	r3, r2
 80042fc:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004300:	4b17      	ldr	r3, [pc, #92]	@ (8004360 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	4a16      	ldr	r2, [pc, #88]	@ (8004360 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004306:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800430a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800430c:	f7fd fac8 	bl	80018a0 <HAL_GetTick>
 8004310:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004312:	e008      	b.n	8004326 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004314:	f7fd fac4 	bl	80018a0 <HAL_GetTick>
 8004318:	4602      	mov	r2, r0
 800431a:	697b      	ldr	r3, [r7, #20]
 800431c:	1ad3      	subs	r3, r2, r3
 800431e:	2b64      	cmp	r3, #100	@ 0x64
 8004320:	d901      	bls.n	8004326 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004322:	2303      	movs	r3, #3
 8004324:	e0d7      	b.n	80044d6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004326:	4b0e      	ldr	r3, [pc, #56]	@ (8004360 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800432e:	2b00      	cmp	r3, #0
 8004330:	d0f0      	beq.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004332:	69bb      	ldr	r3, [r7, #24]
 8004334:	2b01      	cmp	r3, #1
 8004336:	f040 80cd 	bne.w	80044d4 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800433a:	4b09      	ldr	r3, [pc, #36]	@ (8004360 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	4a08      	ldr	r2, [pc, #32]	@ (8004360 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004340:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004344:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004346:	f7fd faab 	bl	80018a0 <HAL_GetTick>
 800434a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800434c:	e00a      	b.n	8004364 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800434e:	f7fd faa7 	bl	80018a0 <HAL_GetTick>
 8004352:	4602      	mov	r2, r0
 8004354:	697b      	ldr	r3, [r7, #20]
 8004356:	1ad3      	subs	r3, r2, r3
 8004358:	2b64      	cmp	r3, #100	@ 0x64
 800435a:	d903      	bls.n	8004364 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800435c:	2303      	movs	r3, #3
 800435e:	e0ba      	b.n	80044d6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8004360:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004364:	4b5e      	ldr	r3, [pc, #376]	@ (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800436c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004370:	d0ed      	beq.n	800434e <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800437a:	2b00      	cmp	r3, #0
 800437c:	d003      	beq.n	8004386 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004382:	2b00      	cmp	r3, #0
 8004384:	d009      	beq.n	800439a <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800438e:	2b00      	cmp	r3, #0
 8004390:	d02e      	beq.n	80043f0 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004396:	2b00      	cmp	r3, #0
 8004398:	d12a      	bne.n	80043f0 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800439a:	4b51      	ldr	r3, [pc, #324]	@ (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800439c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043a0:	0c1b      	lsrs	r3, r3, #16
 80043a2:	f003 0303 	and.w	r3, r3, #3
 80043a6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80043a8:	4b4d      	ldr	r3, [pc, #308]	@ (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80043aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043ae:	0f1b      	lsrs	r3, r3, #28
 80043b0:	f003 0307 	and.w	r3, r3, #7
 80043b4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	695b      	ldr	r3, [r3, #20]
 80043ba:	019a      	lsls	r2, r3, #6
 80043bc:	693b      	ldr	r3, [r7, #16]
 80043be:	041b      	lsls	r3, r3, #16
 80043c0:	431a      	orrs	r2, r3
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	699b      	ldr	r3, [r3, #24]
 80043c6:	061b      	lsls	r3, r3, #24
 80043c8:	431a      	orrs	r2, r3
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	071b      	lsls	r3, r3, #28
 80043ce:	4944      	ldr	r1, [pc, #272]	@ (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80043d0:	4313      	orrs	r3, r2
 80043d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80043d6:	4b42      	ldr	r3, [pc, #264]	@ (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80043d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80043dc:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043e4:	3b01      	subs	r3, #1
 80043e6:	021b      	lsls	r3, r3, #8
 80043e8:	493d      	ldr	r1, [pc, #244]	@ (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80043ea:	4313      	orrs	r3, r2
 80043ec:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d022      	beq.n	8004442 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004400:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004404:	d11d      	bne.n	8004442 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004406:	4b36      	ldr	r3, [pc, #216]	@ (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004408:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800440c:	0e1b      	lsrs	r3, r3, #24
 800440e:	f003 030f 	and.w	r3, r3, #15
 8004412:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004414:	4b32      	ldr	r3, [pc, #200]	@ (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004416:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800441a:	0f1b      	lsrs	r3, r3, #28
 800441c:	f003 0307 	and.w	r3, r3, #7
 8004420:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	695b      	ldr	r3, [r3, #20]
 8004426:	019a      	lsls	r2, r3, #6
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6a1b      	ldr	r3, [r3, #32]
 800442c:	041b      	lsls	r3, r3, #16
 800442e:	431a      	orrs	r2, r3
 8004430:	693b      	ldr	r3, [r7, #16]
 8004432:	061b      	lsls	r3, r3, #24
 8004434:	431a      	orrs	r2, r3
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	071b      	lsls	r3, r3, #28
 800443a:	4929      	ldr	r1, [pc, #164]	@ (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800443c:	4313      	orrs	r3, r2
 800443e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f003 0308 	and.w	r3, r3, #8
 800444a:	2b00      	cmp	r3, #0
 800444c:	d028      	beq.n	80044a0 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800444e:	4b24      	ldr	r3, [pc, #144]	@ (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004450:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004454:	0e1b      	lsrs	r3, r3, #24
 8004456:	f003 030f 	and.w	r3, r3, #15
 800445a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800445c:	4b20      	ldr	r3, [pc, #128]	@ (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800445e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004462:	0c1b      	lsrs	r3, r3, #16
 8004464:	f003 0303 	and.w	r3, r3, #3
 8004468:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	695b      	ldr	r3, [r3, #20]
 800446e:	019a      	lsls	r2, r3, #6
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	041b      	lsls	r3, r3, #16
 8004474:	431a      	orrs	r2, r3
 8004476:	693b      	ldr	r3, [r7, #16]
 8004478:	061b      	lsls	r3, r3, #24
 800447a:	431a      	orrs	r2, r3
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	69db      	ldr	r3, [r3, #28]
 8004480:	071b      	lsls	r3, r3, #28
 8004482:	4917      	ldr	r1, [pc, #92]	@ (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004484:	4313      	orrs	r3, r2
 8004486:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800448a:	4b15      	ldr	r3, [pc, #84]	@ (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800448c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004490:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004498:	4911      	ldr	r1, [pc, #68]	@ (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800449a:	4313      	orrs	r3, r2
 800449c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80044a0:	4b0f      	ldr	r3, [pc, #60]	@ (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4a0e      	ldr	r2, [pc, #56]	@ (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80044a6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80044aa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044ac:	f7fd f9f8 	bl	80018a0 <HAL_GetTick>
 80044b0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80044b2:	e008      	b.n	80044c6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80044b4:	f7fd f9f4 	bl	80018a0 <HAL_GetTick>
 80044b8:	4602      	mov	r2, r0
 80044ba:	697b      	ldr	r3, [r7, #20]
 80044bc:	1ad3      	subs	r3, r2, r3
 80044be:	2b64      	cmp	r3, #100	@ 0x64
 80044c0:	d901      	bls.n	80044c6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80044c2:	2303      	movs	r3, #3
 80044c4:	e007      	b.n	80044d6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80044c6:	4b06      	ldr	r3, [pc, #24]	@ (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80044ce:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80044d2:	d1ef      	bne.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80044d4:	2300      	movs	r3, #0
}
 80044d6:	4618      	mov	r0, r3
 80044d8:	3720      	adds	r7, #32
 80044da:	46bd      	mov	sp, r7
 80044dc:	bd80      	pop	{r7, pc}
 80044de:	bf00      	nop
 80044e0:	40023800 	.word	0x40023800

080044e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b082      	sub	sp, #8
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d101      	bne.n	80044f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80044f2:	2301      	movs	r3, #1
 80044f4:	e049      	b.n	800458a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80044fc:	b2db      	uxtb	r3, r3
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d106      	bne.n	8004510 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2200      	movs	r2, #0
 8004506:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800450a:	6878      	ldr	r0, [r7, #4]
 800450c:	f7fc ff7e 	bl	800140c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2202      	movs	r2, #2
 8004514:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681a      	ldr	r2, [r3, #0]
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	3304      	adds	r3, #4
 8004520:	4619      	mov	r1, r3
 8004522:	4610      	mov	r0, r2
 8004524:	f000 f9de 	bl	80048e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2201      	movs	r2, #1
 800452c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2201      	movs	r2, #1
 8004534:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2201      	movs	r2, #1
 800453c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2201      	movs	r2, #1
 8004544:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2201      	movs	r2, #1
 800454c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2201      	movs	r2, #1
 8004554:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2201      	movs	r2, #1
 800455c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2201      	movs	r2, #1
 8004564:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2201      	movs	r2, #1
 800456c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2201      	movs	r2, #1
 8004574:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2201      	movs	r2, #1
 800457c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2201      	movs	r2, #1
 8004584:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004588:	2300      	movs	r3, #0
}
 800458a:	4618      	mov	r0, r3
 800458c:	3708      	adds	r7, #8
 800458e:	46bd      	mov	sp, r7
 8004590:	bd80      	pop	{r7, pc}
	...

08004594 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004594:	b480      	push	{r7}
 8004596:	b085      	sub	sp, #20
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80045a2:	b2db      	uxtb	r3, r3
 80045a4:	2b01      	cmp	r3, #1
 80045a6:	d001      	beq.n	80045ac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80045a8:	2301      	movs	r3, #1
 80045aa:	e054      	b.n	8004656 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2202      	movs	r2, #2
 80045b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	68da      	ldr	r2, [r3, #12]
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f042 0201 	orr.w	r2, r2, #1
 80045c2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	4a26      	ldr	r2, [pc, #152]	@ (8004664 <HAL_TIM_Base_Start_IT+0xd0>)
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d022      	beq.n	8004614 <HAL_TIM_Base_Start_IT+0x80>
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80045d6:	d01d      	beq.n	8004614 <HAL_TIM_Base_Start_IT+0x80>
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	4a22      	ldr	r2, [pc, #136]	@ (8004668 <HAL_TIM_Base_Start_IT+0xd4>)
 80045de:	4293      	cmp	r3, r2
 80045e0:	d018      	beq.n	8004614 <HAL_TIM_Base_Start_IT+0x80>
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	4a21      	ldr	r2, [pc, #132]	@ (800466c <HAL_TIM_Base_Start_IT+0xd8>)
 80045e8:	4293      	cmp	r3, r2
 80045ea:	d013      	beq.n	8004614 <HAL_TIM_Base_Start_IT+0x80>
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4a1f      	ldr	r2, [pc, #124]	@ (8004670 <HAL_TIM_Base_Start_IT+0xdc>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d00e      	beq.n	8004614 <HAL_TIM_Base_Start_IT+0x80>
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	4a1e      	ldr	r2, [pc, #120]	@ (8004674 <HAL_TIM_Base_Start_IT+0xe0>)
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d009      	beq.n	8004614 <HAL_TIM_Base_Start_IT+0x80>
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	4a1c      	ldr	r2, [pc, #112]	@ (8004678 <HAL_TIM_Base_Start_IT+0xe4>)
 8004606:	4293      	cmp	r3, r2
 8004608:	d004      	beq.n	8004614 <HAL_TIM_Base_Start_IT+0x80>
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	4a1b      	ldr	r2, [pc, #108]	@ (800467c <HAL_TIM_Base_Start_IT+0xe8>)
 8004610:	4293      	cmp	r3, r2
 8004612:	d115      	bne.n	8004640 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	689a      	ldr	r2, [r3, #8]
 800461a:	4b19      	ldr	r3, [pc, #100]	@ (8004680 <HAL_TIM_Base_Start_IT+0xec>)
 800461c:	4013      	ands	r3, r2
 800461e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	2b06      	cmp	r3, #6
 8004624:	d015      	beq.n	8004652 <HAL_TIM_Base_Start_IT+0xbe>
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800462c:	d011      	beq.n	8004652 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	681a      	ldr	r2, [r3, #0]
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f042 0201 	orr.w	r2, r2, #1
 800463c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800463e:	e008      	b.n	8004652 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	681a      	ldr	r2, [r3, #0]
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f042 0201 	orr.w	r2, r2, #1
 800464e:	601a      	str	r2, [r3, #0]
 8004650:	e000      	b.n	8004654 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004652:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004654:	2300      	movs	r3, #0
}
 8004656:	4618      	mov	r0, r3
 8004658:	3714      	adds	r7, #20
 800465a:	46bd      	mov	sp, r7
 800465c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004660:	4770      	bx	lr
 8004662:	bf00      	nop
 8004664:	40010000 	.word	0x40010000
 8004668:	40000400 	.word	0x40000400
 800466c:	40000800 	.word	0x40000800
 8004670:	40000c00 	.word	0x40000c00
 8004674:	40010400 	.word	0x40010400
 8004678:	40014000 	.word	0x40014000
 800467c:	40001800 	.word	0x40001800
 8004680:	00010007 	.word	0x00010007

08004684 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b084      	sub	sp, #16
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	68db      	ldr	r3, [r3, #12]
 8004692:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	691b      	ldr	r3, [r3, #16]
 800469a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800469c:	68bb      	ldr	r3, [r7, #8]
 800469e:	f003 0302 	and.w	r3, r3, #2
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d020      	beq.n	80046e8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	f003 0302 	and.w	r3, r3, #2
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d01b      	beq.n	80046e8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f06f 0202 	mvn.w	r2, #2
 80046b8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2201      	movs	r2, #1
 80046be:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	699b      	ldr	r3, [r3, #24]
 80046c6:	f003 0303 	and.w	r3, r3, #3
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d003      	beq.n	80046d6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80046ce:	6878      	ldr	r0, [r7, #4]
 80046d0:	f000 f8e9 	bl	80048a6 <HAL_TIM_IC_CaptureCallback>
 80046d4:	e005      	b.n	80046e2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80046d6:	6878      	ldr	r0, [r7, #4]
 80046d8:	f000 f8db 	bl	8004892 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046dc:	6878      	ldr	r0, [r7, #4]
 80046de:	f000 f8ec 	bl	80048ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2200      	movs	r2, #0
 80046e6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80046e8:	68bb      	ldr	r3, [r7, #8]
 80046ea:	f003 0304 	and.w	r3, r3, #4
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d020      	beq.n	8004734 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	f003 0304 	and.w	r3, r3, #4
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d01b      	beq.n	8004734 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f06f 0204 	mvn.w	r2, #4
 8004704:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2202      	movs	r2, #2
 800470a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	699b      	ldr	r3, [r3, #24]
 8004712:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004716:	2b00      	cmp	r3, #0
 8004718:	d003      	beq.n	8004722 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800471a:	6878      	ldr	r0, [r7, #4]
 800471c:	f000 f8c3 	bl	80048a6 <HAL_TIM_IC_CaptureCallback>
 8004720:	e005      	b.n	800472e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004722:	6878      	ldr	r0, [r7, #4]
 8004724:	f000 f8b5 	bl	8004892 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004728:	6878      	ldr	r0, [r7, #4]
 800472a:	f000 f8c6 	bl	80048ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2200      	movs	r2, #0
 8004732:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004734:	68bb      	ldr	r3, [r7, #8]
 8004736:	f003 0308 	and.w	r3, r3, #8
 800473a:	2b00      	cmp	r3, #0
 800473c:	d020      	beq.n	8004780 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	f003 0308 	and.w	r3, r3, #8
 8004744:	2b00      	cmp	r3, #0
 8004746:	d01b      	beq.n	8004780 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f06f 0208 	mvn.w	r2, #8
 8004750:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2204      	movs	r2, #4
 8004756:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	69db      	ldr	r3, [r3, #28]
 800475e:	f003 0303 	and.w	r3, r3, #3
 8004762:	2b00      	cmp	r3, #0
 8004764:	d003      	beq.n	800476e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004766:	6878      	ldr	r0, [r7, #4]
 8004768:	f000 f89d 	bl	80048a6 <HAL_TIM_IC_CaptureCallback>
 800476c:	e005      	b.n	800477a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800476e:	6878      	ldr	r0, [r7, #4]
 8004770:	f000 f88f 	bl	8004892 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004774:	6878      	ldr	r0, [r7, #4]
 8004776:	f000 f8a0 	bl	80048ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2200      	movs	r2, #0
 800477e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004780:	68bb      	ldr	r3, [r7, #8]
 8004782:	f003 0310 	and.w	r3, r3, #16
 8004786:	2b00      	cmp	r3, #0
 8004788:	d020      	beq.n	80047cc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	f003 0310 	and.w	r3, r3, #16
 8004790:	2b00      	cmp	r3, #0
 8004792:	d01b      	beq.n	80047cc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f06f 0210 	mvn.w	r2, #16
 800479c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2208      	movs	r2, #8
 80047a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	69db      	ldr	r3, [r3, #28]
 80047aa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d003      	beq.n	80047ba <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80047b2:	6878      	ldr	r0, [r7, #4]
 80047b4:	f000 f877 	bl	80048a6 <HAL_TIM_IC_CaptureCallback>
 80047b8:	e005      	b.n	80047c6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80047ba:	6878      	ldr	r0, [r7, #4]
 80047bc:	f000 f869 	bl	8004892 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047c0:	6878      	ldr	r0, [r7, #4]
 80047c2:	f000 f87a 	bl	80048ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2200      	movs	r2, #0
 80047ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80047cc:	68bb      	ldr	r3, [r7, #8]
 80047ce:	f003 0301 	and.w	r3, r3, #1
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d00c      	beq.n	80047f0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	f003 0301 	and.w	r3, r3, #1
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d007      	beq.n	80047f0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f06f 0201 	mvn.w	r2, #1
 80047e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80047ea:	6878      	ldr	r0, [r7, #4]
 80047ec:	f7fc fd50 	bl	8001290 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80047f0:	68bb      	ldr	r3, [r7, #8]
 80047f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d104      	bne.n	8004804 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80047fa:	68bb      	ldr	r3, [r7, #8]
 80047fc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004800:	2b00      	cmp	r3, #0
 8004802:	d00c      	beq.n	800481e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800480a:	2b00      	cmp	r3, #0
 800480c:	d007      	beq.n	800481e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8004816:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004818:	6878      	ldr	r0, [r7, #4]
 800481a:	f000 f9a1 	bl	8004b60 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800481e:	68bb      	ldr	r3, [r7, #8]
 8004820:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004824:	2b00      	cmp	r3, #0
 8004826:	d00c      	beq.n	8004842 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800482e:	2b00      	cmp	r3, #0
 8004830:	d007      	beq.n	8004842 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800483a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800483c:	6878      	ldr	r0, [r7, #4]
 800483e:	f000 f999 	bl	8004b74 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004842:	68bb      	ldr	r3, [r7, #8]
 8004844:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004848:	2b00      	cmp	r3, #0
 800484a:	d00c      	beq.n	8004866 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004852:	2b00      	cmp	r3, #0
 8004854:	d007      	beq.n	8004866 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800485e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004860:	6878      	ldr	r0, [r7, #4]
 8004862:	f000 f834 	bl	80048ce <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004866:	68bb      	ldr	r3, [r7, #8]
 8004868:	f003 0320 	and.w	r3, r3, #32
 800486c:	2b00      	cmp	r3, #0
 800486e:	d00c      	beq.n	800488a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	f003 0320 	and.w	r3, r3, #32
 8004876:	2b00      	cmp	r3, #0
 8004878:	d007      	beq.n	800488a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f06f 0220 	mvn.w	r2, #32
 8004882:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004884:	6878      	ldr	r0, [r7, #4]
 8004886:	f000 f961 	bl	8004b4c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800488a:	bf00      	nop
 800488c:	3710      	adds	r7, #16
 800488e:	46bd      	mov	sp, r7
 8004890:	bd80      	pop	{r7, pc}

08004892 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004892:	b480      	push	{r7}
 8004894:	b083      	sub	sp, #12
 8004896:	af00      	add	r7, sp, #0
 8004898:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800489a:	bf00      	nop
 800489c:	370c      	adds	r7, #12
 800489e:	46bd      	mov	sp, r7
 80048a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a4:	4770      	bx	lr

080048a6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80048a6:	b480      	push	{r7}
 80048a8:	b083      	sub	sp, #12
 80048aa:	af00      	add	r7, sp, #0
 80048ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80048ae:	bf00      	nop
 80048b0:	370c      	adds	r7, #12
 80048b2:	46bd      	mov	sp, r7
 80048b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b8:	4770      	bx	lr

080048ba <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80048ba:	b480      	push	{r7}
 80048bc:	b083      	sub	sp, #12
 80048be:	af00      	add	r7, sp, #0
 80048c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80048c2:	bf00      	nop
 80048c4:	370c      	adds	r7, #12
 80048c6:	46bd      	mov	sp, r7
 80048c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048cc:	4770      	bx	lr

080048ce <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80048ce:	b480      	push	{r7}
 80048d0:	b083      	sub	sp, #12
 80048d2:	af00      	add	r7, sp, #0
 80048d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80048d6:	bf00      	nop
 80048d8:	370c      	adds	r7, #12
 80048da:	46bd      	mov	sp, r7
 80048dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e0:	4770      	bx	lr
	...

080048e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80048e4:	b480      	push	{r7}
 80048e6:	b085      	sub	sp, #20
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
 80048ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	4a43      	ldr	r2, [pc, #268]	@ (8004a04 <TIM_Base_SetConfig+0x120>)
 80048f8:	4293      	cmp	r3, r2
 80048fa:	d013      	beq.n	8004924 <TIM_Base_SetConfig+0x40>
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004902:	d00f      	beq.n	8004924 <TIM_Base_SetConfig+0x40>
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	4a40      	ldr	r2, [pc, #256]	@ (8004a08 <TIM_Base_SetConfig+0x124>)
 8004908:	4293      	cmp	r3, r2
 800490a:	d00b      	beq.n	8004924 <TIM_Base_SetConfig+0x40>
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	4a3f      	ldr	r2, [pc, #252]	@ (8004a0c <TIM_Base_SetConfig+0x128>)
 8004910:	4293      	cmp	r3, r2
 8004912:	d007      	beq.n	8004924 <TIM_Base_SetConfig+0x40>
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	4a3e      	ldr	r2, [pc, #248]	@ (8004a10 <TIM_Base_SetConfig+0x12c>)
 8004918:	4293      	cmp	r3, r2
 800491a:	d003      	beq.n	8004924 <TIM_Base_SetConfig+0x40>
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	4a3d      	ldr	r2, [pc, #244]	@ (8004a14 <TIM_Base_SetConfig+0x130>)
 8004920:	4293      	cmp	r3, r2
 8004922:	d108      	bne.n	8004936 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800492a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	685b      	ldr	r3, [r3, #4]
 8004930:	68fa      	ldr	r2, [r7, #12]
 8004932:	4313      	orrs	r3, r2
 8004934:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	4a32      	ldr	r2, [pc, #200]	@ (8004a04 <TIM_Base_SetConfig+0x120>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d02b      	beq.n	8004996 <TIM_Base_SetConfig+0xb2>
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004944:	d027      	beq.n	8004996 <TIM_Base_SetConfig+0xb2>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	4a2f      	ldr	r2, [pc, #188]	@ (8004a08 <TIM_Base_SetConfig+0x124>)
 800494a:	4293      	cmp	r3, r2
 800494c:	d023      	beq.n	8004996 <TIM_Base_SetConfig+0xb2>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	4a2e      	ldr	r2, [pc, #184]	@ (8004a0c <TIM_Base_SetConfig+0x128>)
 8004952:	4293      	cmp	r3, r2
 8004954:	d01f      	beq.n	8004996 <TIM_Base_SetConfig+0xb2>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	4a2d      	ldr	r2, [pc, #180]	@ (8004a10 <TIM_Base_SetConfig+0x12c>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d01b      	beq.n	8004996 <TIM_Base_SetConfig+0xb2>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	4a2c      	ldr	r2, [pc, #176]	@ (8004a14 <TIM_Base_SetConfig+0x130>)
 8004962:	4293      	cmp	r3, r2
 8004964:	d017      	beq.n	8004996 <TIM_Base_SetConfig+0xb2>
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	4a2b      	ldr	r2, [pc, #172]	@ (8004a18 <TIM_Base_SetConfig+0x134>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d013      	beq.n	8004996 <TIM_Base_SetConfig+0xb2>
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	4a2a      	ldr	r2, [pc, #168]	@ (8004a1c <TIM_Base_SetConfig+0x138>)
 8004972:	4293      	cmp	r3, r2
 8004974:	d00f      	beq.n	8004996 <TIM_Base_SetConfig+0xb2>
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	4a29      	ldr	r2, [pc, #164]	@ (8004a20 <TIM_Base_SetConfig+0x13c>)
 800497a:	4293      	cmp	r3, r2
 800497c:	d00b      	beq.n	8004996 <TIM_Base_SetConfig+0xb2>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	4a28      	ldr	r2, [pc, #160]	@ (8004a24 <TIM_Base_SetConfig+0x140>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d007      	beq.n	8004996 <TIM_Base_SetConfig+0xb2>
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	4a27      	ldr	r2, [pc, #156]	@ (8004a28 <TIM_Base_SetConfig+0x144>)
 800498a:	4293      	cmp	r3, r2
 800498c:	d003      	beq.n	8004996 <TIM_Base_SetConfig+0xb2>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	4a26      	ldr	r2, [pc, #152]	@ (8004a2c <TIM_Base_SetConfig+0x148>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d108      	bne.n	80049a8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800499c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	68db      	ldr	r3, [r3, #12]
 80049a2:	68fa      	ldr	r2, [r7, #12]
 80049a4:	4313      	orrs	r3, r2
 80049a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	695b      	ldr	r3, [r3, #20]
 80049b2:	4313      	orrs	r3, r2
 80049b4:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	689a      	ldr	r2, [r3, #8]
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	681a      	ldr	r2, [r3, #0]
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	4a0e      	ldr	r2, [pc, #56]	@ (8004a04 <TIM_Base_SetConfig+0x120>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d003      	beq.n	80049d6 <TIM_Base_SetConfig+0xf2>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	4a10      	ldr	r2, [pc, #64]	@ (8004a14 <TIM_Base_SetConfig+0x130>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d103      	bne.n	80049de <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	691a      	ldr	r2, [r3, #16]
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f043 0204 	orr.w	r2, r3, #4
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2201      	movs	r2, #1
 80049ee:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	68fa      	ldr	r2, [r7, #12]
 80049f4:	601a      	str	r2, [r3, #0]
}
 80049f6:	bf00      	nop
 80049f8:	3714      	adds	r7, #20
 80049fa:	46bd      	mov	sp, r7
 80049fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a00:	4770      	bx	lr
 8004a02:	bf00      	nop
 8004a04:	40010000 	.word	0x40010000
 8004a08:	40000400 	.word	0x40000400
 8004a0c:	40000800 	.word	0x40000800
 8004a10:	40000c00 	.word	0x40000c00
 8004a14:	40010400 	.word	0x40010400
 8004a18:	40014000 	.word	0x40014000
 8004a1c:	40014400 	.word	0x40014400
 8004a20:	40014800 	.word	0x40014800
 8004a24:	40001800 	.word	0x40001800
 8004a28:	40001c00 	.word	0x40001c00
 8004a2c:	40002000 	.word	0x40002000

08004a30 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004a30:	b480      	push	{r7}
 8004a32:	b085      	sub	sp, #20
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
 8004a38:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004a40:	2b01      	cmp	r3, #1
 8004a42:	d101      	bne.n	8004a48 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004a44:	2302      	movs	r3, #2
 8004a46:	e06d      	b.n	8004b24 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2201      	movs	r2, #1
 8004a4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2202      	movs	r2, #2
 8004a54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	685b      	ldr	r3, [r3, #4]
 8004a5e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	689b      	ldr	r3, [r3, #8]
 8004a66:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	4a30      	ldr	r2, [pc, #192]	@ (8004b30 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d004      	beq.n	8004a7c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	4a2f      	ldr	r2, [pc, #188]	@ (8004b34 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	d108      	bne.n	8004a8e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8004a82:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	685b      	ldr	r3, [r3, #4]
 8004a88:	68fa      	ldr	r2, [r7, #12]
 8004a8a:	4313      	orrs	r3, r2
 8004a8c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a94:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	68fa      	ldr	r2, [r7, #12]
 8004a9c:	4313      	orrs	r3, r2
 8004a9e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	68fa      	ldr	r2, [r7, #12]
 8004aa6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	4a20      	ldr	r2, [pc, #128]	@ (8004b30 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d022      	beq.n	8004af8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004aba:	d01d      	beq.n	8004af8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4a1d      	ldr	r2, [pc, #116]	@ (8004b38 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d018      	beq.n	8004af8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	4a1c      	ldr	r2, [pc, #112]	@ (8004b3c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004acc:	4293      	cmp	r3, r2
 8004ace:	d013      	beq.n	8004af8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	4a1a      	ldr	r2, [pc, #104]	@ (8004b40 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d00e      	beq.n	8004af8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	4a15      	ldr	r2, [pc, #84]	@ (8004b34 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004ae0:	4293      	cmp	r3, r2
 8004ae2:	d009      	beq.n	8004af8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	4a16      	ldr	r2, [pc, #88]	@ (8004b44 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d004      	beq.n	8004af8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	4a15      	ldr	r2, [pc, #84]	@ (8004b48 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d10c      	bne.n	8004b12 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004af8:	68bb      	ldr	r3, [r7, #8]
 8004afa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004afe:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	689b      	ldr	r3, [r3, #8]
 8004b04:	68ba      	ldr	r2, [r7, #8]
 8004b06:	4313      	orrs	r3, r2
 8004b08:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	68ba      	ldr	r2, [r7, #8]
 8004b10:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2201      	movs	r2, #1
 8004b16:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004b22:	2300      	movs	r3, #0
}
 8004b24:	4618      	mov	r0, r3
 8004b26:	3714      	adds	r7, #20
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2e:	4770      	bx	lr
 8004b30:	40010000 	.word	0x40010000
 8004b34:	40010400 	.word	0x40010400
 8004b38:	40000400 	.word	0x40000400
 8004b3c:	40000800 	.word	0x40000800
 8004b40:	40000c00 	.word	0x40000c00
 8004b44:	40014000 	.word	0x40014000
 8004b48:	40001800 	.word	0x40001800

08004b4c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004b4c:	b480      	push	{r7}
 8004b4e:	b083      	sub	sp, #12
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004b54:	bf00      	nop
 8004b56:	370c      	adds	r7, #12
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5e:	4770      	bx	lr

08004b60 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004b60:	b480      	push	{r7}
 8004b62:	b083      	sub	sp, #12
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004b68:	bf00      	nop
 8004b6a:	370c      	adds	r7, #12
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b72:	4770      	bx	lr

08004b74 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004b74:	b480      	push	{r7}
 8004b76:	b083      	sub	sp, #12
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004b7c:	bf00      	nop
 8004b7e:	370c      	adds	r7, #12
 8004b80:	46bd      	mov	sp, r7
 8004b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b86:	4770      	bx	lr

08004b88 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b082      	sub	sp, #8
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d101      	bne.n	8004b9a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004b96:	2301      	movs	r3, #1
 8004b98:	e040      	b.n	8004c1c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d106      	bne.n	8004bb0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004baa:	6878      	ldr	r0, [r7, #4]
 8004bac:	f7fc fc54 	bl	8001458 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2224      	movs	r2, #36	@ 0x24
 8004bb4:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	681a      	ldr	r2, [r3, #0]
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f022 0201 	bic.w	r2, r2, #1
 8004bc4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d002      	beq.n	8004bd4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004bce:	6878      	ldr	r0, [r7, #4]
 8004bd0:	f000 fb16 	bl	8005200 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004bd4:	6878      	ldr	r0, [r7, #4]
 8004bd6:	f000 f8af 	bl	8004d38 <UART_SetConfig>
 8004bda:	4603      	mov	r3, r0
 8004bdc:	2b01      	cmp	r3, #1
 8004bde:	d101      	bne.n	8004be4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004be0:	2301      	movs	r3, #1
 8004be2:	e01b      	b.n	8004c1c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	685a      	ldr	r2, [r3, #4]
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004bf2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	689a      	ldr	r2, [r3, #8]
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004c02:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	681a      	ldr	r2, [r3, #0]
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f042 0201 	orr.w	r2, r2, #1
 8004c12:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004c14:	6878      	ldr	r0, [r7, #4]
 8004c16:	f000 fb95 	bl	8005344 <UART_CheckIdleState>
 8004c1a:	4603      	mov	r3, r0
}
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	3708      	adds	r7, #8
 8004c20:	46bd      	mov	sp, r7
 8004c22:	bd80      	pop	{r7, pc}

08004c24 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b08a      	sub	sp, #40	@ 0x28
 8004c28:	af02      	add	r7, sp, #8
 8004c2a:	60f8      	str	r0, [r7, #12]
 8004c2c:	60b9      	str	r1, [r7, #8]
 8004c2e:	603b      	str	r3, [r7, #0]
 8004c30:	4613      	mov	r3, r2
 8004c32:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004c38:	2b20      	cmp	r3, #32
 8004c3a:	d177      	bne.n	8004d2c <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c3c:	68bb      	ldr	r3, [r7, #8]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d002      	beq.n	8004c48 <HAL_UART_Transmit+0x24>
 8004c42:	88fb      	ldrh	r3, [r7, #6]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d101      	bne.n	8004c4c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004c48:	2301      	movs	r3, #1
 8004c4a:	e070      	b.n	8004d2e <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	2200      	movs	r2, #0
 8004c50:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	2221      	movs	r2, #33	@ 0x21
 8004c58:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004c5a:	f7fc fe21 	bl	80018a0 <HAL_GetTick>
 8004c5e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	88fa      	ldrh	r2, [r7, #6]
 8004c64:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	88fa      	ldrh	r2, [r7, #6]
 8004c6c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	689b      	ldr	r3, [r3, #8]
 8004c74:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c78:	d108      	bne.n	8004c8c <HAL_UART_Transmit+0x68>
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	691b      	ldr	r3, [r3, #16]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d104      	bne.n	8004c8c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004c82:	2300      	movs	r3, #0
 8004c84:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004c86:	68bb      	ldr	r3, [r7, #8]
 8004c88:	61bb      	str	r3, [r7, #24]
 8004c8a:	e003      	b.n	8004c94 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004c8c:	68bb      	ldr	r3, [r7, #8]
 8004c8e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004c90:	2300      	movs	r3, #0
 8004c92:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004c94:	e02f      	b.n	8004cf6 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	9300      	str	r3, [sp, #0]
 8004c9a:	697b      	ldr	r3, [r7, #20]
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	2180      	movs	r1, #128	@ 0x80
 8004ca0:	68f8      	ldr	r0, [r7, #12]
 8004ca2:	f000 fba6 	bl	80053f2 <UART_WaitOnFlagUntilTimeout>
 8004ca6:	4603      	mov	r3, r0
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d004      	beq.n	8004cb6 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	2220      	movs	r2, #32
 8004cb0:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8004cb2:	2303      	movs	r3, #3
 8004cb4:	e03b      	b.n	8004d2e <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8004cb6:	69fb      	ldr	r3, [r7, #28]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d10b      	bne.n	8004cd4 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004cbc:	69bb      	ldr	r3, [r7, #24]
 8004cbe:	881b      	ldrh	r3, [r3, #0]
 8004cc0:	461a      	mov	r2, r3
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004cca:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004ccc:	69bb      	ldr	r3, [r7, #24]
 8004cce:	3302      	adds	r3, #2
 8004cd0:	61bb      	str	r3, [r7, #24]
 8004cd2:	e007      	b.n	8004ce4 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004cd4:	69fb      	ldr	r3, [r7, #28]
 8004cd6:	781a      	ldrb	r2, [r3, #0]
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004cde:	69fb      	ldr	r3, [r7, #28]
 8004ce0:	3301      	adds	r3, #1
 8004ce2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004cea:	b29b      	uxth	r3, r3
 8004cec:	3b01      	subs	r3, #1
 8004cee:	b29a      	uxth	r2, r3
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004cfc:	b29b      	uxth	r3, r3
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d1c9      	bne.n	8004c96 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	9300      	str	r3, [sp, #0]
 8004d06:	697b      	ldr	r3, [r7, #20]
 8004d08:	2200      	movs	r2, #0
 8004d0a:	2140      	movs	r1, #64	@ 0x40
 8004d0c:	68f8      	ldr	r0, [r7, #12]
 8004d0e:	f000 fb70 	bl	80053f2 <UART_WaitOnFlagUntilTimeout>
 8004d12:	4603      	mov	r3, r0
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d004      	beq.n	8004d22 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	2220      	movs	r2, #32
 8004d1c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8004d1e:	2303      	movs	r3, #3
 8004d20:	e005      	b.n	8004d2e <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	2220      	movs	r2, #32
 8004d26:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8004d28:	2300      	movs	r3, #0
 8004d2a:	e000      	b.n	8004d2e <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8004d2c:	2302      	movs	r3, #2
  }
}
 8004d2e:	4618      	mov	r0, r3
 8004d30:	3720      	adds	r7, #32
 8004d32:	46bd      	mov	sp, r7
 8004d34:	bd80      	pop	{r7, pc}
	...

08004d38 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b088      	sub	sp, #32
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004d40:	2300      	movs	r3, #0
 8004d42:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	689a      	ldr	r2, [r3, #8]
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	691b      	ldr	r3, [r3, #16]
 8004d4c:	431a      	orrs	r2, r3
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	695b      	ldr	r3, [r3, #20]
 8004d52:	431a      	orrs	r2, r3
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	69db      	ldr	r3, [r3, #28]
 8004d58:	4313      	orrs	r3, r2
 8004d5a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	681a      	ldr	r2, [r3, #0]
 8004d62:	4ba6      	ldr	r3, [pc, #664]	@ (8004ffc <UART_SetConfig+0x2c4>)
 8004d64:	4013      	ands	r3, r2
 8004d66:	687a      	ldr	r2, [r7, #4]
 8004d68:	6812      	ldr	r2, [r2, #0]
 8004d6a:	6979      	ldr	r1, [r7, #20]
 8004d6c:	430b      	orrs	r3, r1
 8004d6e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	685b      	ldr	r3, [r3, #4]
 8004d76:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	68da      	ldr	r2, [r3, #12]
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	430a      	orrs	r2, r1
 8004d84:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	699b      	ldr	r3, [r3, #24]
 8004d8a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6a1b      	ldr	r3, [r3, #32]
 8004d90:	697a      	ldr	r2, [r7, #20]
 8004d92:	4313      	orrs	r3, r2
 8004d94:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	689b      	ldr	r3, [r3, #8]
 8004d9c:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	697a      	ldr	r2, [r7, #20]
 8004da6:	430a      	orrs	r2, r1
 8004da8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	4a94      	ldr	r2, [pc, #592]	@ (8005000 <UART_SetConfig+0x2c8>)
 8004db0:	4293      	cmp	r3, r2
 8004db2:	d120      	bne.n	8004df6 <UART_SetConfig+0xbe>
 8004db4:	4b93      	ldr	r3, [pc, #588]	@ (8005004 <UART_SetConfig+0x2cc>)
 8004db6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004dba:	f003 0303 	and.w	r3, r3, #3
 8004dbe:	2b03      	cmp	r3, #3
 8004dc0:	d816      	bhi.n	8004df0 <UART_SetConfig+0xb8>
 8004dc2:	a201      	add	r2, pc, #4	@ (adr r2, 8004dc8 <UART_SetConfig+0x90>)
 8004dc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dc8:	08004dd9 	.word	0x08004dd9
 8004dcc:	08004de5 	.word	0x08004de5
 8004dd0:	08004ddf 	.word	0x08004ddf
 8004dd4:	08004deb 	.word	0x08004deb
 8004dd8:	2301      	movs	r3, #1
 8004dda:	77fb      	strb	r3, [r7, #31]
 8004ddc:	e150      	b.n	8005080 <UART_SetConfig+0x348>
 8004dde:	2302      	movs	r3, #2
 8004de0:	77fb      	strb	r3, [r7, #31]
 8004de2:	e14d      	b.n	8005080 <UART_SetConfig+0x348>
 8004de4:	2304      	movs	r3, #4
 8004de6:	77fb      	strb	r3, [r7, #31]
 8004de8:	e14a      	b.n	8005080 <UART_SetConfig+0x348>
 8004dea:	2308      	movs	r3, #8
 8004dec:	77fb      	strb	r3, [r7, #31]
 8004dee:	e147      	b.n	8005080 <UART_SetConfig+0x348>
 8004df0:	2310      	movs	r3, #16
 8004df2:	77fb      	strb	r3, [r7, #31]
 8004df4:	e144      	b.n	8005080 <UART_SetConfig+0x348>
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	4a83      	ldr	r2, [pc, #524]	@ (8005008 <UART_SetConfig+0x2d0>)
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d132      	bne.n	8004e66 <UART_SetConfig+0x12e>
 8004e00:	4b80      	ldr	r3, [pc, #512]	@ (8005004 <UART_SetConfig+0x2cc>)
 8004e02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e06:	f003 030c 	and.w	r3, r3, #12
 8004e0a:	2b0c      	cmp	r3, #12
 8004e0c:	d828      	bhi.n	8004e60 <UART_SetConfig+0x128>
 8004e0e:	a201      	add	r2, pc, #4	@ (adr r2, 8004e14 <UART_SetConfig+0xdc>)
 8004e10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e14:	08004e49 	.word	0x08004e49
 8004e18:	08004e61 	.word	0x08004e61
 8004e1c:	08004e61 	.word	0x08004e61
 8004e20:	08004e61 	.word	0x08004e61
 8004e24:	08004e55 	.word	0x08004e55
 8004e28:	08004e61 	.word	0x08004e61
 8004e2c:	08004e61 	.word	0x08004e61
 8004e30:	08004e61 	.word	0x08004e61
 8004e34:	08004e4f 	.word	0x08004e4f
 8004e38:	08004e61 	.word	0x08004e61
 8004e3c:	08004e61 	.word	0x08004e61
 8004e40:	08004e61 	.word	0x08004e61
 8004e44:	08004e5b 	.word	0x08004e5b
 8004e48:	2300      	movs	r3, #0
 8004e4a:	77fb      	strb	r3, [r7, #31]
 8004e4c:	e118      	b.n	8005080 <UART_SetConfig+0x348>
 8004e4e:	2302      	movs	r3, #2
 8004e50:	77fb      	strb	r3, [r7, #31]
 8004e52:	e115      	b.n	8005080 <UART_SetConfig+0x348>
 8004e54:	2304      	movs	r3, #4
 8004e56:	77fb      	strb	r3, [r7, #31]
 8004e58:	e112      	b.n	8005080 <UART_SetConfig+0x348>
 8004e5a:	2308      	movs	r3, #8
 8004e5c:	77fb      	strb	r3, [r7, #31]
 8004e5e:	e10f      	b.n	8005080 <UART_SetConfig+0x348>
 8004e60:	2310      	movs	r3, #16
 8004e62:	77fb      	strb	r3, [r7, #31]
 8004e64:	e10c      	b.n	8005080 <UART_SetConfig+0x348>
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	4a68      	ldr	r2, [pc, #416]	@ (800500c <UART_SetConfig+0x2d4>)
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	d120      	bne.n	8004eb2 <UART_SetConfig+0x17a>
 8004e70:	4b64      	ldr	r3, [pc, #400]	@ (8005004 <UART_SetConfig+0x2cc>)
 8004e72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e76:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004e7a:	2b30      	cmp	r3, #48	@ 0x30
 8004e7c:	d013      	beq.n	8004ea6 <UART_SetConfig+0x16e>
 8004e7e:	2b30      	cmp	r3, #48	@ 0x30
 8004e80:	d814      	bhi.n	8004eac <UART_SetConfig+0x174>
 8004e82:	2b20      	cmp	r3, #32
 8004e84:	d009      	beq.n	8004e9a <UART_SetConfig+0x162>
 8004e86:	2b20      	cmp	r3, #32
 8004e88:	d810      	bhi.n	8004eac <UART_SetConfig+0x174>
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d002      	beq.n	8004e94 <UART_SetConfig+0x15c>
 8004e8e:	2b10      	cmp	r3, #16
 8004e90:	d006      	beq.n	8004ea0 <UART_SetConfig+0x168>
 8004e92:	e00b      	b.n	8004eac <UART_SetConfig+0x174>
 8004e94:	2300      	movs	r3, #0
 8004e96:	77fb      	strb	r3, [r7, #31]
 8004e98:	e0f2      	b.n	8005080 <UART_SetConfig+0x348>
 8004e9a:	2302      	movs	r3, #2
 8004e9c:	77fb      	strb	r3, [r7, #31]
 8004e9e:	e0ef      	b.n	8005080 <UART_SetConfig+0x348>
 8004ea0:	2304      	movs	r3, #4
 8004ea2:	77fb      	strb	r3, [r7, #31]
 8004ea4:	e0ec      	b.n	8005080 <UART_SetConfig+0x348>
 8004ea6:	2308      	movs	r3, #8
 8004ea8:	77fb      	strb	r3, [r7, #31]
 8004eaa:	e0e9      	b.n	8005080 <UART_SetConfig+0x348>
 8004eac:	2310      	movs	r3, #16
 8004eae:	77fb      	strb	r3, [r7, #31]
 8004eb0:	e0e6      	b.n	8005080 <UART_SetConfig+0x348>
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	4a56      	ldr	r2, [pc, #344]	@ (8005010 <UART_SetConfig+0x2d8>)
 8004eb8:	4293      	cmp	r3, r2
 8004eba:	d120      	bne.n	8004efe <UART_SetConfig+0x1c6>
 8004ebc:	4b51      	ldr	r3, [pc, #324]	@ (8005004 <UART_SetConfig+0x2cc>)
 8004ebe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ec2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004ec6:	2bc0      	cmp	r3, #192	@ 0xc0
 8004ec8:	d013      	beq.n	8004ef2 <UART_SetConfig+0x1ba>
 8004eca:	2bc0      	cmp	r3, #192	@ 0xc0
 8004ecc:	d814      	bhi.n	8004ef8 <UART_SetConfig+0x1c0>
 8004ece:	2b80      	cmp	r3, #128	@ 0x80
 8004ed0:	d009      	beq.n	8004ee6 <UART_SetConfig+0x1ae>
 8004ed2:	2b80      	cmp	r3, #128	@ 0x80
 8004ed4:	d810      	bhi.n	8004ef8 <UART_SetConfig+0x1c0>
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d002      	beq.n	8004ee0 <UART_SetConfig+0x1a8>
 8004eda:	2b40      	cmp	r3, #64	@ 0x40
 8004edc:	d006      	beq.n	8004eec <UART_SetConfig+0x1b4>
 8004ede:	e00b      	b.n	8004ef8 <UART_SetConfig+0x1c0>
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	77fb      	strb	r3, [r7, #31]
 8004ee4:	e0cc      	b.n	8005080 <UART_SetConfig+0x348>
 8004ee6:	2302      	movs	r3, #2
 8004ee8:	77fb      	strb	r3, [r7, #31]
 8004eea:	e0c9      	b.n	8005080 <UART_SetConfig+0x348>
 8004eec:	2304      	movs	r3, #4
 8004eee:	77fb      	strb	r3, [r7, #31]
 8004ef0:	e0c6      	b.n	8005080 <UART_SetConfig+0x348>
 8004ef2:	2308      	movs	r3, #8
 8004ef4:	77fb      	strb	r3, [r7, #31]
 8004ef6:	e0c3      	b.n	8005080 <UART_SetConfig+0x348>
 8004ef8:	2310      	movs	r3, #16
 8004efa:	77fb      	strb	r3, [r7, #31]
 8004efc:	e0c0      	b.n	8005080 <UART_SetConfig+0x348>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	4a44      	ldr	r2, [pc, #272]	@ (8005014 <UART_SetConfig+0x2dc>)
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d125      	bne.n	8004f54 <UART_SetConfig+0x21c>
 8004f08:	4b3e      	ldr	r3, [pc, #248]	@ (8005004 <UART_SetConfig+0x2cc>)
 8004f0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f0e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004f12:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004f16:	d017      	beq.n	8004f48 <UART_SetConfig+0x210>
 8004f18:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004f1c:	d817      	bhi.n	8004f4e <UART_SetConfig+0x216>
 8004f1e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004f22:	d00b      	beq.n	8004f3c <UART_SetConfig+0x204>
 8004f24:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004f28:	d811      	bhi.n	8004f4e <UART_SetConfig+0x216>
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d003      	beq.n	8004f36 <UART_SetConfig+0x1fe>
 8004f2e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004f32:	d006      	beq.n	8004f42 <UART_SetConfig+0x20a>
 8004f34:	e00b      	b.n	8004f4e <UART_SetConfig+0x216>
 8004f36:	2300      	movs	r3, #0
 8004f38:	77fb      	strb	r3, [r7, #31]
 8004f3a:	e0a1      	b.n	8005080 <UART_SetConfig+0x348>
 8004f3c:	2302      	movs	r3, #2
 8004f3e:	77fb      	strb	r3, [r7, #31]
 8004f40:	e09e      	b.n	8005080 <UART_SetConfig+0x348>
 8004f42:	2304      	movs	r3, #4
 8004f44:	77fb      	strb	r3, [r7, #31]
 8004f46:	e09b      	b.n	8005080 <UART_SetConfig+0x348>
 8004f48:	2308      	movs	r3, #8
 8004f4a:	77fb      	strb	r3, [r7, #31]
 8004f4c:	e098      	b.n	8005080 <UART_SetConfig+0x348>
 8004f4e:	2310      	movs	r3, #16
 8004f50:	77fb      	strb	r3, [r7, #31]
 8004f52:	e095      	b.n	8005080 <UART_SetConfig+0x348>
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	4a2f      	ldr	r2, [pc, #188]	@ (8005018 <UART_SetConfig+0x2e0>)
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	d125      	bne.n	8004faa <UART_SetConfig+0x272>
 8004f5e:	4b29      	ldr	r3, [pc, #164]	@ (8005004 <UART_SetConfig+0x2cc>)
 8004f60:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f64:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004f68:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004f6c:	d017      	beq.n	8004f9e <UART_SetConfig+0x266>
 8004f6e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004f72:	d817      	bhi.n	8004fa4 <UART_SetConfig+0x26c>
 8004f74:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004f78:	d00b      	beq.n	8004f92 <UART_SetConfig+0x25a>
 8004f7a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004f7e:	d811      	bhi.n	8004fa4 <UART_SetConfig+0x26c>
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d003      	beq.n	8004f8c <UART_SetConfig+0x254>
 8004f84:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f88:	d006      	beq.n	8004f98 <UART_SetConfig+0x260>
 8004f8a:	e00b      	b.n	8004fa4 <UART_SetConfig+0x26c>
 8004f8c:	2301      	movs	r3, #1
 8004f8e:	77fb      	strb	r3, [r7, #31]
 8004f90:	e076      	b.n	8005080 <UART_SetConfig+0x348>
 8004f92:	2302      	movs	r3, #2
 8004f94:	77fb      	strb	r3, [r7, #31]
 8004f96:	e073      	b.n	8005080 <UART_SetConfig+0x348>
 8004f98:	2304      	movs	r3, #4
 8004f9a:	77fb      	strb	r3, [r7, #31]
 8004f9c:	e070      	b.n	8005080 <UART_SetConfig+0x348>
 8004f9e:	2308      	movs	r3, #8
 8004fa0:	77fb      	strb	r3, [r7, #31]
 8004fa2:	e06d      	b.n	8005080 <UART_SetConfig+0x348>
 8004fa4:	2310      	movs	r3, #16
 8004fa6:	77fb      	strb	r3, [r7, #31]
 8004fa8:	e06a      	b.n	8005080 <UART_SetConfig+0x348>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	4a1b      	ldr	r2, [pc, #108]	@ (800501c <UART_SetConfig+0x2e4>)
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	d138      	bne.n	8005026 <UART_SetConfig+0x2ee>
 8004fb4:	4b13      	ldr	r3, [pc, #76]	@ (8005004 <UART_SetConfig+0x2cc>)
 8004fb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004fba:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8004fbe:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004fc2:	d017      	beq.n	8004ff4 <UART_SetConfig+0x2bc>
 8004fc4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8004fc8:	d82a      	bhi.n	8005020 <UART_SetConfig+0x2e8>
 8004fca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004fce:	d00b      	beq.n	8004fe8 <UART_SetConfig+0x2b0>
 8004fd0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004fd4:	d824      	bhi.n	8005020 <UART_SetConfig+0x2e8>
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d003      	beq.n	8004fe2 <UART_SetConfig+0x2aa>
 8004fda:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004fde:	d006      	beq.n	8004fee <UART_SetConfig+0x2b6>
 8004fe0:	e01e      	b.n	8005020 <UART_SetConfig+0x2e8>
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	77fb      	strb	r3, [r7, #31]
 8004fe6:	e04b      	b.n	8005080 <UART_SetConfig+0x348>
 8004fe8:	2302      	movs	r3, #2
 8004fea:	77fb      	strb	r3, [r7, #31]
 8004fec:	e048      	b.n	8005080 <UART_SetConfig+0x348>
 8004fee:	2304      	movs	r3, #4
 8004ff0:	77fb      	strb	r3, [r7, #31]
 8004ff2:	e045      	b.n	8005080 <UART_SetConfig+0x348>
 8004ff4:	2308      	movs	r3, #8
 8004ff6:	77fb      	strb	r3, [r7, #31]
 8004ff8:	e042      	b.n	8005080 <UART_SetConfig+0x348>
 8004ffa:	bf00      	nop
 8004ffc:	efff69f3 	.word	0xefff69f3
 8005000:	40011000 	.word	0x40011000
 8005004:	40023800 	.word	0x40023800
 8005008:	40004400 	.word	0x40004400
 800500c:	40004800 	.word	0x40004800
 8005010:	40004c00 	.word	0x40004c00
 8005014:	40005000 	.word	0x40005000
 8005018:	40011400 	.word	0x40011400
 800501c:	40007800 	.word	0x40007800
 8005020:	2310      	movs	r3, #16
 8005022:	77fb      	strb	r3, [r7, #31]
 8005024:	e02c      	b.n	8005080 <UART_SetConfig+0x348>
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	4a72      	ldr	r2, [pc, #456]	@ (80051f4 <UART_SetConfig+0x4bc>)
 800502c:	4293      	cmp	r3, r2
 800502e:	d125      	bne.n	800507c <UART_SetConfig+0x344>
 8005030:	4b71      	ldr	r3, [pc, #452]	@ (80051f8 <UART_SetConfig+0x4c0>)
 8005032:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005036:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800503a:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800503e:	d017      	beq.n	8005070 <UART_SetConfig+0x338>
 8005040:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8005044:	d817      	bhi.n	8005076 <UART_SetConfig+0x33e>
 8005046:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800504a:	d00b      	beq.n	8005064 <UART_SetConfig+0x32c>
 800504c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005050:	d811      	bhi.n	8005076 <UART_SetConfig+0x33e>
 8005052:	2b00      	cmp	r3, #0
 8005054:	d003      	beq.n	800505e <UART_SetConfig+0x326>
 8005056:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800505a:	d006      	beq.n	800506a <UART_SetConfig+0x332>
 800505c:	e00b      	b.n	8005076 <UART_SetConfig+0x33e>
 800505e:	2300      	movs	r3, #0
 8005060:	77fb      	strb	r3, [r7, #31]
 8005062:	e00d      	b.n	8005080 <UART_SetConfig+0x348>
 8005064:	2302      	movs	r3, #2
 8005066:	77fb      	strb	r3, [r7, #31]
 8005068:	e00a      	b.n	8005080 <UART_SetConfig+0x348>
 800506a:	2304      	movs	r3, #4
 800506c:	77fb      	strb	r3, [r7, #31]
 800506e:	e007      	b.n	8005080 <UART_SetConfig+0x348>
 8005070:	2308      	movs	r3, #8
 8005072:	77fb      	strb	r3, [r7, #31]
 8005074:	e004      	b.n	8005080 <UART_SetConfig+0x348>
 8005076:	2310      	movs	r3, #16
 8005078:	77fb      	strb	r3, [r7, #31]
 800507a:	e001      	b.n	8005080 <UART_SetConfig+0x348>
 800507c:	2310      	movs	r3, #16
 800507e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	69db      	ldr	r3, [r3, #28]
 8005084:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005088:	d15b      	bne.n	8005142 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800508a:	7ffb      	ldrb	r3, [r7, #31]
 800508c:	2b08      	cmp	r3, #8
 800508e:	d828      	bhi.n	80050e2 <UART_SetConfig+0x3aa>
 8005090:	a201      	add	r2, pc, #4	@ (adr r2, 8005098 <UART_SetConfig+0x360>)
 8005092:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005096:	bf00      	nop
 8005098:	080050bd 	.word	0x080050bd
 800509c:	080050c5 	.word	0x080050c5
 80050a0:	080050cd 	.word	0x080050cd
 80050a4:	080050e3 	.word	0x080050e3
 80050a8:	080050d3 	.word	0x080050d3
 80050ac:	080050e3 	.word	0x080050e3
 80050b0:	080050e3 	.word	0x080050e3
 80050b4:	080050e3 	.word	0x080050e3
 80050b8:	080050db 	.word	0x080050db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80050bc:	f7fe fdc8 	bl	8003c50 <HAL_RCC_GetPCLK1Freq>
 80050c0:	61b8      	str	r0, [r7, #24]
        break;
 80050c2:	e013      	b.n	80050ec <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80050c4:	f7fe fdd8 	bl	8003c78 <HAL_RCC_GetPCLK2Freq>
 80050c8:	61b8      	str	r0, [r7, #24]
        break;
 80050ca:	e00f      	b.n	80050ec <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80050cc:	4b4b      	ldr	r3, [pc, #300]	@ (80051fc <UART_SetConfig+0x4c4>)
 80050ce:	61bb      	str	r3, [r7, #24]
        break;
 80050d0:	e00c      	b.n	80050ec <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80050d2:	f7fe fceb 	bl	8003aac <HAL_RCC_GetSysClockFreq>
 80050d6:	61b8      	str	r0, [r7, #24]
        break;
 80050d8:	e008      	b.n	80050ec <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80050da:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80050de:	61bb      	str	r3, [r7, #24]
        break;
 80050e0:	e004      	b.n	80050ec <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80050e2:	2300      	movs	r3, #0
 80050e4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80050e6:	2301      	movs	r3, #1
 80050e8:	77bb      	strb	r3, [r7, #30]
        break;
 80050ea:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80050ec:	69bb      	ldr	r3, [r7, #24]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d074      	beq.n	80051dc <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80050f2:	69bb      	ldr	r3, [r7, #24]
 80050f4:	005a      	lsls	r2, r3, #1
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	685b      	ldr	r3, [r3, #4]
 80050fa:	085b      	lsrs	r3, r3, #1
 80050fc:	441a      	add	r2, r3
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	685b      	ldr	r3, [r3, #4]
 8005102:	fbb2 f3f3 	udiv	r3, r2, r3
 8005106:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005108:	693b      	ldr	r3, [r7, #16]
 800510a:	2b0f      	cmp	r3, #15
 800510c:	d916      	bls.n	800513c <UART_SetConfig+0x404>
 800510e:	693b      	ldr	r3, [r7, #16]
 8005110:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005114:	d212      	bcs.n	800513c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005116:	693b      	ldr	r3, [r7, #16]
 8005118:	b29b      	uxth	r3, r3
 800511a:	f023 030f 	bic.w	r3, r3, #15
 800511e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005120:	693b      	ldr	r3, [r7, #16]
 8005122:	085b      	lsrs	r3, r3, #1
 8005124:	b29b      	uxth	r3, r3
 8005126:	f003 0307 	and.w	r3, r3, #7
 800512a:	b29a      	uxth	r2, r3
 800512c:	89fb      	ldrh	r3, [r7, #14]
 800512e:	4313      	orrs	r3, r2
 8005130:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	89fa      	ldrh	r2, [r7, #14]
 8005138:	60da      	str	r2, [r3, #12]
 800513a:	e04f      	b.n	80051dc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800513c:	2301      	movs	r3, #1
 800513e:	77bb      	strb	r3, [r7, #30]
 8005140:	e04c      	b.n	80051dc <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005142:	7ffb      	ldrb	r3, [r7, #31]
 8005144:	2b08      	cmp	r3, #8
 8005146:	d828      	bhi.n	800519a <UART_SetConfig+0x462>
 8005148:	a201      	add	r2, pc, #4	@ (adr r2, 8005150 <UART_SetConfig+0x418>)
 800514a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800514e:	bf00      	nop
 8005150:	08005175 	.word	0x08005175
 8005154:	0800517d 	.word	0x0800517d
 8005158:	08005185 	.word	0x08005185
 800515c:	0800519b 	.word	0x0800519b
 8005160:	0800518b 	.word	0x0800518b
 8005164:	0800519b 	.word	0x0800519b
 8005168:	0800519b 	.word	0x0800519b
 800516c:	0800519b 	.word	0x0800519b
 8005170:	08005193 	.word	0x08005193
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005174:	f7fe fd6c 	bl	8003c50 <HAL_RCC_GetPCLK1Freq>
 8005178:	61b8      	str	r0, [r7, #24]
        break;
 800517a:	e013      	b.n	80051a4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800517c:	f7fe fd7c 	bl	8003c78 <HAL_RCC_GetPCLK2Freq>
 8005180:	61b8      	str	r0, [r7, #24]
        break;
 8005182:	e00f      	b.n	80051a4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005184:	4b1d      	ldr	r3, [pc, #116]	@ (80051fc <UART_SetConfig+0x4c4>)
 8005186:	61bb      	str	r3, [r7, #24]
        break;
 8005188:	e00c      	b.n	80051a4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800518a:	f7fe fc8f 	bl	8003aac <HAL_RCC_GetSysClockFreq>
 800518e:	61b8      	str	r0, [r7, #24]
        break;
 8005190:	e008      	b.n	80051a4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005192:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005196:	61bb      	str	r3, [r7, #24]
        break;
 8005198:	e004      	b.n	80051a4 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800519a:	2300      	movs	r3, #0
 800519c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800519e:	2301      	movs	r3, #1
 80051a0:	77bb      	strb	r3, [r7, #30]
        break;
 80051a2:	bf00      	nop
    }

    if (pclk != 0U)
 80051a4:	69bb      	ldr	r3, [r7, #24]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d018      	beq.n	80051dc <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	685b      	ldr	r3, [r3, #4]
 80051ae:	085a      	lsrs	r2, r3, #1
 80051b0:	69bb      	ldr	r3, [r7, #24]
 80051b2:	441a      	add	r2, r3
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	685b      	ldr	r3, [r3, #4]
 80051b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80051bc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80051be:	693b      	ldr	r3, [r7, #16]
 80051c0:	2b0f      	cmp	r3, #15
 80051c2:	d909      	bls.n	80051d8 <UART_SetConfig+0x4a0>
 80051c4:	693b      	ldr	r3, [r7, #16]
 80051c6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80051ca:	d205      	bcs.n	80051d8 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80051cc:	693b      	ldr	r3, [r7, #16]
 80051ce:	b29a      	uxth	r2, r3
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	60da      	str	r2, [r3, #12]
 80051d6:	e001      	b.n	80051dc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80051d8:	2301      	movs	r3, #1
 80051da:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2200      	movs	r2, #0
 80051e0:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2200      	movs	r2, #0
 80051e6:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80051e8:	7fbb      	ldrb	r3, [r7, #30]
}
 80051ea:	4618      	mov	r0, r3
 80051ec:	3720      	adds	r7, #32
 80051ee:	46bd      	mov	sp, r7
 80051f0:	bd80      	pop	{r7, pc}
 80051f2:	bf00      	nop
 80051f4:	40007c00 	.word	0x40007c00
 80051f8:	40023800 	.word	0x40023800
 80051fc:	00f42400 	.word	0x00f42400

08005200 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005200:	b480      	push	{r7}
 8005202:	b083      	sub	sp, #12
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800520c:	f003 0308 	and.w	r3, r3, #8
 8005210:	2b00      	cmp	r3, #0
 8005212:	d00a      	beq.n	800522a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	685b      	ldr	r3, [r3, #4]
 800521a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	430a      	orrs	r2, r1
 8005228:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800522e:	f003 0301 	and.w	r3, r3, #1
 8005232:	2b00      	cmp	r3, #0
 8005234:	d00a      	beq.n	800524c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	685b      	ldr	r3, [r3, #4]
 800523c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	430a      	orrs	r2, r1
 800524a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005250:	f003 0302 	and.w	r3, r3, #2
 8005254:	2b00      	cmp	r3, #0
 8005256:	d00a      	beq.n	800526e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	685b      	ldr	r3, [r3, #4]
 800525e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	430a      	orrs	r2, r1
 800526c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005272:	f003 0304 	and.w	r3, r3, #4
 8005276:	2b00      	cmp	r3, #0
 8005278:	d00a      	beq.n	8005290 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	685b      	ldr	r3, [r3, #4]
 8005280:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	430a      	orrs	r2, r1
 800528e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005294:	f003 0310 	and.w	r3, r3, #16
 8005298:	2b00      	cmp	r3, #0
 800529a:	d00a      	beq.n	80052b2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	689b      	ldr	r3, [r3, #8]
 80052a2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	430a      	orrs	r2, r1
 80052b0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052b6:	f003 0320 	and.w	r3, r3, #32
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d00a      	beq.n	80052d4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	689b      	ldr	r3, [r3, #8]
 80052c4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	430a      	orrs	r2, r1
 80052d2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d01a      	beq.n	8005316 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	685b      	ldr	r3, [r3, #4]
 80052e6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	430a      	orrs	r2, r1
 80052f4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052fa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80052fe:	d10a      	bne.n	8005316 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	685b      	ldr	r3, [r3, #4]
 8005306:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	430a      	orrs	r2, r1
 8005314:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800531a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800531e:	2b00      	cmp	r3, #0
 8005320:	d00a      	beq.n	8005338 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	685b      	ldr	r3, [r3, #4]
 8005328:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	430a      	orrs	r2, r1
 8005336:	605a      	str	r2, [r3, #4]
  }
}
 8005338:	bf00      	nop
 800533a:	370c      	adds	r7, #12
 800533c:	46bd      	mov	sp, r7
 800533e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005342:	4770      	bx	lr

08005344 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005344:	b580      	push	{r7, lr}
 8005346:	b08c      	sub	sp, #48	@ 0x30
 8005348:	af02      	add	r7, sp, #8
 800534a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2200      	movs	r2, #0
 8005350:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005354:	f7fc faa4 	bl	80018a0 <HAL_GetTick>
 8005358:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f003 0308 	and.w	r3, r3, #8
 8005364:	2b08      	cmp	r3, #8
 8005366:	d12e      	bne.n	80053c6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005368:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800536c:	9300      	str	r3, [sp, #0]
 800536e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005370:	2200      	movs	r2, #0
 8005372:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005376:	6878      	ldr	r0, [r7, #4]
 8005378:	f000 f83b 	bl	80053f2 <UART_WaitOnFlagUntilTimeout>
 800537c:	4603      	mov	r3, r0
 800537e:	2b00      	cmp	r3, #0
 8005380:	d021      	beq.n	80053c6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	613b      	str	r3, [r7, #16]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005388:	693b      	ldr	r3, [r7, #16]
 800538a:	e853 3f00 	ldrex	r3, [r3]
 800538e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005396:	623b      	str	r3, [r7, #32]
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	461a      	mov	r2, r3
 800539e:	6a3b      	ldr	r3, [r7, #32]
 80053a0:	61fb      	str	r3, [r7, #28]
 80053a2:	61ba      	str	r2, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053a4:	69b9      	ldr	r1, [r7, #24]
 80053a6:	69fa      	ldr	r2, [r7, #28]
 80053a8:	e841 2300 	strex	r3, r2, [r1]
 80053ac:	617b      	str	r3, [r7, #20]
   return(result);
 80053ae:	697b      	ldr	r3, [r7, #20]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d1e6      	bne.n	8005382 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2220      	movs	r2, #32
 80053b8:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	2200      	movs	r2, #0
 80053be:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80053c2:	2303      	movs	r3, #3
 80053c4:	e011      	b.n	80053ea <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2220      	movs	r2, #32
 80053ca:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2220      	movs	r2, #32
 80053d0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2200      	movs	r2, #0
 80053d8:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	2200      	movs	r2, #0
 80053de:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2200      	movs	r2, #0
 80053e4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80053e8:	2300      	movs	r3, #0
}
 80053ea:	4618      	mov	r0, r3
 80053ec:	3728      	adds	r7, #40	@ 0x28
 80053ee:	46bd      	mov	sp, r7
 80053f0:	bd80      	pop	{r7, pc}

080053f2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80053f2:	b580      	push	{r7, lr}
 80053f4:	b084      	sub	sp, #16
 80053f6:	af00      	add	r7, sp, #0
 80053f8:	60f8      	str	r0, [r7, #12]
 80053fa:	60b9      	str	r1, [r7, #8]
 80053fc:	603b      	str	r3, [r7, #0]
 80053fe:	4613      	mov	r3, r2
 8005400:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005402:	e04f      	b.n	80054a4 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005404:	69bb      	ldr	r3, [r7, #24]
 8005406:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800540a:	d04b      	beq.n	80054a4 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800540c:	f7fc fa48 	bl	80018a0 <HAL_GetTick>
 8005410:	4602      	mov	r2, r0
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	1ad3      	subs	r3, r2, r3
 8005416:	69ba      	ldr	r2, [r7, #24]
 8005418:	429a      	cmp	r2, r3
 800541a:	d302      	bcc.n	8005422 <UART_WaitOnFlagUntilTimeout+0x30>
 800541c:	69bb      	ldr	r3, [r7, #24]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d101      	bne.n	8005426 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005422:	2303      	movs	r3, #3
 8005424:	e04e      	b.n	80054c4 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f003 0304 	and.w	r3, r3, #4
 8005430:	2b00      	cmp	r3, #0
 8005432:	d037      	beq.n	80054a4 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005434:	68bb      	ldr	r3, [r7, #8]
 8005436:	2b80      	cmp	r3, #128	@ 0x80
 8005438:	d034      	beq.n	80054a4 <UART_WaitOnFlagUntilTimeout+0xb2>
 800543a:	68bb      	ldr	r3, [r7, #8]
 800543c:	2b40      	cmp	r3, #64	@ 0x40
 800543e:	d031      	beq.n	80054a4 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	69db      	ldr	r3, [r3, #28]
 8005446:	f003 0308 	and.w	r3, r3, #8
 800544a:	2b08      	cmp	r3, #8
 800544c:	d110      	bne.n	8005470 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	2208      	movs	r2, #8
 8005454:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005456:	68f8      	ldr	r0, [r7, #12]
 8005458:	f000 f838 	bl	80054cc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	2208      	movs	r2, #8
 8005460:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	2200      	movs	r2, #0
 8005468:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800546c:	2301      	movs	r3, #1
 800546e:	e029      	b.n	80054c4 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	69db      	ldr	r3, [r3, #28]
 8005476:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800547a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800547e:	d111      	bne.n	80054a4 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005488:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800548a:	68f8      	ldr	r0, [r7, #12]
 800548c:	f000 f81e 	bl	80054cc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	2220      	movs	r2, #32
 8005494:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	2200      	movs	r2, #0
 800549c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80054a0:	2303      	movs	r3, #3
 80054a2:	e00f      	b.n	80054c4 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	69da      	ldr	r2, [r3, #28]
 80054aa:	68bb      	ldr	r3, [r7, #8]
 80054ac:	4013      	ands	r3, r2
 80054ae:	68ba      	ldr	r2, [r7, #8]
 80054b0:	429a      	cmp	r2, r3
 80054b2:	bf0c      	ite	eq
 80054b4:	2301      	moveq	r3, #1
 80054b6:	2300      	movne	r3, #0
 80054b8:	b2db      	uxtb	r3, r3
 80054ba:	461a      	mov	r2, r3
 80054bc:	79fb      	ldrb	r3, [r7, #7]
 80054be:	429a      	cmp	r2, r3
 80054c0:	d0a0      	beq.n	8005404 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80054c2:	2300      	movs	r3, #0
}
 80054c4:	4618      	mov	r0, r3
 80054c6:	3710      	adds	r7, #16
 80054c8:	46bd      	mov	sp, r7
 80054ca:	bd80      	pop	{r7, pc}

080054cc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80054cc:	b480      	push	{r7}
 80054ce:	b095      	sub	sp, #84	@ 0x54
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80054dc:	e853 3f00 	ldrex	r3, [r3]
 80054e0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80054e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054e4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80054e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	461a      	mov	r2, r3
 80054f0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80054f2:	643b      	str	r3, [r7, #64]	@ 0x40
 80054f4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054f6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80054f8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80054fa:	e841 2300 	strex	r3, r2, [r1]
 80054fe:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005500:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005502:	2b00      	cmp	r3, #0
 8005504:	d1e6      	bne.n	80054d4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	3308      	adds	r3, #8
 800550c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800550e:	6a3b      	ldr	r3, [r7, #32]
 8005510:	e853 3f00 	ldrex	r3, [r3]
 8005514:	61fb      	str	r3, [r7, #28]
   return(result);
 8005516:	69fb      	ldr	r3, [r7, #28]
 8005518:	f023 0301 	bic.w	r3, r3, #1
 800551c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	3308      	adds	r3, #8
 8005524:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005526:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005528:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800552a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800552c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800552e:	e841 2300 	strex	r3, r2, [r1]
 8005532:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005534:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005536:	2b00      	cmp	r3, #0
 8005538:	d1e5      	bne.n	8005506 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800553e:	2b01      	cmp	r3, #1
 8005540:	d118      	bne.n	8005574 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	e853 3f00 	ldrex	r3, [r3]
 800554e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005550:	68bb      	ldr	r3, [r7, #8]
 8005552:	f023 0310 	bic.w	r3, r3, #16
 8005556:	647b      	str	r3, [r7, #68]	@ 0x44
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	461a      	mov	r2, r3
 800555e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005560:	61bb      	str	r3, [r7, #24]
 8005562:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005564:	6979      	ldr	r1, [r7, #20]
 8005566:	69ba      	ldr	r2, [r7, #24]
 8005568:	e841 2300 	strex	r3, r2, [r1]
 800556c:	613b      	str	r3, [r7, #16]
   return(result);
 800556e:	693b      	ldr	r3, [r7, #16]
 8005570:	2b00      	cmp	r3, #0
 8005572:	d1e6      	bne.n	8005542 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	2220      	movs	r2, #32
 8005578:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2200      	movs	r2, #0
 8005580:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	2200      	movs	r2, #0
 8005586:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005588:	bf00      	nop
 800558a:	3754      	adds	r7, #84	@ 0x54
 800558c:	46bd      	mov	sp, r7
 800558e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005592:	4770      	bx	lr

08005594 <StartGPSTask>:
static uint32_t until_next_park = 0;

extern osMessageQueueId_t gpsMsgQueueHandle;

void StartGPSTask(void *argument)
{
 8005594:	b580      	push	{r7, lr}
 8005596:	b082      	sub	sp, #8
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
	srand(0);
 800559c:	2000      	movs	r0, #0
 800559e:	f003 fa1d 	bl	80089dc <srand>
	lat = START_LAT;
 80055a2:	4b2c      	ldr	r3, [pc, #176]	@ (8005654 <StartGPSTask+0xc0>)
 80055a4:	4a2c      	ldr	r2, [pc, #176]	@ (8005658 <StartGPSTask+0xc4>)
 80055a6:	601a      	str	r2, [r3, #0]
	lon = START_LON;
 80055a8:	4b2c      	ldr	r3, [pc, #176]	@ (800565c <StartGPSTask+0xc8>)
 80055aa:	4a2d      	ldr	r2, [pc, #180]	@ (8005660 <StartGPSTask+0xcc>)
 80055ac:	601a      	str	r2, [r3, #0]

	until_next_park = rand_uint_range(PARK_INTERVAL_MIN, PARK_INTERVAL_MAX);
 80055ae:	210f      	movs	r1, #15
 80055b0:	2005      	movs	r0, #5
 80055b2:	f000 f883 	bl	80056bc <rand_uint_range>
 80055b6:	4603      	mov	r3, r0
 80055b8:	4a2a      	ldr	r2, [pc, #168]	@ (8005664 <StartGPSTask+0xd0>)
 80055ba:	6013      	str	r3, [r2, #0]

	while (1)
	{
		if (is_parking)
 80055bc:	4b2a      	ldr	r3, [pc, #168]	@ (8005668 <StartGPSTask+0xd4>)
 80055be:	781b      	ldrb	r3, [r3, #0]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d027      	beq.n	8005614 <StartGPSTask+0x80>
		{
			if (park_counter == 0)
 80055c4:	4b29      	ldr	r3, [pc, #164]	@ (800566c <StartGPSTask+0xd8>)
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d103      	bne.n	80055d4 <StartGPSTask+0x40>
			{
				send_gps_msg(MSG_START);
 80055cc:	2001      	movs	r0, #1
 80055ce:	f000 f905 	bl	80057dc <send_gps_msg>
 80055d2:	e019      	b.n	8005608 <StartGPSTask+0x74>
			}
			else if (park_counter >= park_duration)
 80055d4:	4b25      	ldr	r3, [pc, #148]	@ (800566c <StartGPSTask+0xd8>)
 80055d6:	681a      	ldr	r2, [r3, #0]
 80055d8:	4b25      	ldr	r3, [pc, #148]	@ (8005670 <StartGPSTask+0xdc>)
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	429a      	cmp	r2, r3
 80055de:	d310      	bcc.n	8005602 <StartGPSTask+0x6e>
			{
				send_gps_msg(MSG_STOP);
 80055e0:	2002      	movs	r0, #2
 80055e2:	f000 f8fb 	bl	80057dc <send_gps_msg>
				is_parking = 0;
 80055e6:	4b20      	ldr	r3, [pc, #128]	@ (8005668 <StartGPSTask+0xd4>)
 80055e8:	2200      	movs	r2, #0
 80055ea:	701a      	strb	r2, [r3, #0]
				until_next_park = rand_uint_range(PARK_INTERVAL_MIN, PARK_INTERVAL_MAX);
 80055ec:	210f      	movs	r1, #15
 80055ee:	2005      	movs	r0, #5
 80055f0:	f000 f864 	bl	80056bc <rand_uint_range>
 80055f4:	4603      	mov	r3, r0
 80055f6:	4a1b      	ldr	r2, [pc, #108]	@ (8005664 <StartGPSTask+0xd0>)
 80055f8:	6013      	str	r3, [r2, #0]
				park_counter = 0;
 80055fa:	4b1c      	ldr	r3, [pc, #112]	@ (800566c <StartGPSTask+0xd8>)
 80055fc:	2200      	movs	r2, #0
 80055fe:	601a      	str	r2, [r3, #0]
 8005600:	e002      	b.n	8005608 <StartGPSTask+0x74>
			}
			else
			{
				send_gps_msg(MSG_IDLE);
 8005602:	2000      	movs	r0, #0
 8005604:	f000 f8ea 	bl	80057dc <send_gps_msg>
			}
			park_counter++;
 8005608:	4b18      	ldr	r3, [pc, #96]	@ (800566c <StartGPSTask+0xd8>)
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	3301      	adds	r3, #1
 800560e:	4a17      	ldr	r2, [pc, #92]	@ (800566c <StartGPSTask+0xd8>)
 8005610:	6013      	str	r3, [r2, #0]
 8005612:	e01a      	b.n	800564a <StartGPSTask+0xb6>
		}
		else
		{
			update_position_randomly();
 8005614:	f000 f86a 	bl	80056ec <update_position_randomly>
			send_gps_msg(MSG_IDLE);
 8005618:	2000      	movs	r0, #0
 800561a:	f000 f8df 	bl	80057dc <send_gps_msg>
			if (--until_next_park == 0)
 800561e:	4b11      	ldr	r3, [pc, #68]	@ (8005664 <StartGPSTask+0xd0>)
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	3b01      	subs	r3, #1
 8005624:	4a0f      	ldr	r2, [pc, #60]	@ (8005664 <StartGPSTask+0xd0>)
 8005626:	6013      	str	r3, [r2, #0]
 8005628:	4b0e      	ldr	r3, [pc, #56]	@ (8005664 <StartGPSTask+0xd0>)
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	2b00      	cmp	r3, #0
 800562e:	d10c      	bne.n	800564a <StartGPSTask+0xb6>
			{
				is_parking = 1;
 8005630:	4b0d      	ldr	r3, [pc, #52]	@ (8005668 <StartGPSTask+0xd4>)
 8005632:	2201      	movs	r2, #1
 8005634:	701a      	strb	r2, [r3, #0]
				park_duration = rand_uint_range(PARK_DURATION_MIN, PARK_DURATION_MAX);
 8005636:	210a      	movs	r1, #10
 8005638:	2001      	movs	r0, #1
 800563a:	f000 f83f 	bl	80056bc <rand_uint_range>
 800563e:	4603      	mov	r3, r0
 8005640:	4a0b      	ldr	r2, [pc, #44]	@ (8005670 <StartGPSTask+0xdc>)
 8005642:	6013      	str	r3, [r2, #0]
				park_counter = 0;
 8005644:	4b09      	ldr	r3, [pc, #36]	@ (800566c <StartGPSTask+0xd8>)
 8005646:	2200      	movs	r2, #0
 8005648:	601a      	str	r2, [r3, #0]
			}
		}

		osDelay(1000);
 800564a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800564e:	f000 fa73 	bl	8005b38 <osDelay>
		if (is_parking)
 8005652:	e7b3      	b.n	80055bc <StartGPSTask+0x28>
 8005654:	20000384 	.word	0x20000384
 8005658:	42001aee 	.word	0x42001aee
 800565c:	20000388 	.word	0x20000388
 8005660:	420b4d84 	.word	0x420b4d84
 8005664:	20000398 	.word	0x20000398
 8005668:	2000038c 	.word	0x2000038c
 800566c:	20000390 	.word	0x20000390
 8005670:	20000394 	.word	0x20000394

08005674 <rand_float_range>:
	}
}

static float rand_float_range(float min, float max)
{
 8005674:	b580      	push	{r7, lr}
 8005676:	b082      	sub	sp, #8
 8005678:	af00      	add	r7, sp, #0
 800567a:	ed87 0a01 	vstr	s0, [r7, #4]
 800567e:	edc7 0a00 	vstr	s1, [r7]
    return min + ((float)rand() / RAND_MAX) * (max - min);
 8005682:	f003 f9d9 	bl	8008a38 <rand>
 8005686:	ee07 0a90 	vmov	s15, r0
 800568a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800568e:	eddf 6a0a 	vldr	s13, [pc, #40]	@ 80056b8 <rand_float_range+0x44>
 8005692:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8005696:	edd7 6a00 	vldr	s13, [r7]
 800569a:	edd7 7a01 	vldr	s15, [r7, #4]
 800569e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80056a2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80056a6:	edd7 7a01 	vldr	s15, [r7, #4]
 80056aa:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 80056ae:	eeb0 0a67 	vmov.f32	s0, s15
 80056b2:	3708      	adds	r7, #8
 80056b4:	46bd      	mov	sp, r7
 80056b6:	bd80      	pop	{r7, pc}
 80056b8:	4f000000 	.word	0x4f000000

080056bc <rand_uint_range>:

static uint32_t rand_uint_range(uint32_t min, uint32_t max)
{
 80056bc:	b580      	push	{r7, lr}
 80056be:	b082      	sub	sp, #8
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
 80056c4:	6039      	str	r1, [r7, #0]
    return min + (rand() % (max - min + 1));
 80056c6:	f003 f9b7 	bl	8008a38 <rand>
 80056ca:	4603      	mov	r3, r0
 80056cc:	461a      	mov	r2, r3
 80056ce:	6839      	ldr	r1, [r7, #0]
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	1acb      	subs	r3, r1, r3
 80056d4:	3301      	adds	r3, #1
 80056d6:	fbb2 f1f3 	udiv	r1, r2, r3
 80056da:	fb01 f303 	mul.w	r3, r1, r3
 80056de:	1ad2      	subs	r2, r2, r3
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	4413      	add	r3, r2
}
 80056e4:	4618      	mov	r0, r3
 80056e6:	3708      	adds	r7, #8
 80056e8:	46bd      	mov	sp, r7
 80056ea:	bd80      	pop	{r7, pc}

080056ec <update_position_randomly>:

static void update_position_randomly(void)
{
 80056ec:	b580      	push	{r7, lr}
 80056ee:	b082      	sub	sp, #8
 80056f0:	af00      	add	r7, sp, #0
    float d_lat = rand_float_range(MOVE_STEP_MIN, MOVE_STEP_MAX);
 80056f2:	eddf 0a2e 	vldr	s1, [pc, #184]	@ 80057ac <update_position_randomly+0xc0>
 80056f6:	ed9f 0a2e 	vldr	s0, [pc, #184]	@ 80057b0 <update_position_randomly+0xc4>
 80056fa:	f7ff ffbb 	bl	8005674 <rand_float_range>
 80056fe:	ed87 0a01 	vstr	s0, [r7, #4]
    float d_lon = rand_float_range(MOVE_STEP_MIN, MOVE_STEP_MAX);
 8005702:	eddf 0a2a 	vldr	s1, [pc, #168]	@ 80057ac <update_position_randomly+0xc0>
 8005706:	ed9f 0a2a 	vldr	s0, [pc, #168]	@ 80057b0 <update_position_randomly+0xc4>
 800570a:	f7ff ffb3 	bl	8005674 <rand_float_range>
 800570e:	ed87 0a00 	vstr	s0, [r7]

    lat += d_lat;
 8005712:	4b28      	ldr	r3, [pc, #160]	@ (80057b4 <update_position_randomly+0xc8>)
 8005714:	ed93 7a00 	vldr	s14, [r3]
 8005718:	edd7 7a01 	vldr	s15, [r7, #4]
 800571c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005720:	4b24      	ldr	r3, [pc, #144]	@ (80057b4 <update_position_randomly+0xc8>)
 8005722:	edc3 7a00 	vstr	s15, [r3]
    lon += d_lon;
 8005726:	4b24      	ldr	r3, [pc, #144]	@ (80057b8 <update_position_randomly+0xcc>)
 8005728:	ed93 7a00 	vldr	s14, [r3]
 800572c:	edd7 7a00 	vldr	s15, [r7]
 8005730:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005734:	4b20      	ldr	r3, [pc, #128]	@ (80057b8 <update_position_randomly+0xcc>)
 8005736:	edc3 7a00 	vstr	s15, [r3]

    if (lat < LAT_MIN) lat = LAT_MIN;
 800573a:	4b1e      	ldr	r3, [pc, #120]	@ (80057b4 <update_position_randomly+0xc8>)
 800573c:	edd3 7a00 	vldr	s15, [r3]
 8005740:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 80057bc <update_position_randomly+0xd0>
 8005744:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005748:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800574c:	d502      	bpl.n	8005754 <update_position_randomly+0x68>
 800574e:	4b19      	ldr	r3, [pc, #100]	@ (80057b4 <update_position_randomly+0xc8>)
 8005750:	4a1b      	ldr	r2, [pc, #108]	@ (80057c0 <update_position_randomly+0xd4>)
 8005752:	601a      	str	r2, [r3, #0]
    if (lat > LAT_MAX) lat = LAT_MAX;
 8005754:	4b17      	ldr	r3, [pc, #92]	@ (80057b4 <update_position_randomly+0xc8>)
 8005756:	edd3 7a00 	vldr	s15, [r3]
 800575a:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 80057c4 <update_position_randomly+0xd8>
 800575e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005762:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005766:	dd02      	ble.n	800576e <update_position_randomly+0x82>
 8005768:	4b12      	ldr	r3, [pc, #72]	@ (80057b4 <update_position_randomly+0xc8>)
 800576a:	4a17      	ldr	r2, [pc, #92]	@ (80057c8 <update_position_randomly+0xdc>)
 800576c:	601a      	str	r2, [r3, #0]
    if (lon < LON_MIN) lon = LON_MIN;
 800576e:	4b12      	ldr	r3, [pc, #72]	@ (80057b8 <update_position_randomly+0xcc>)
 8005770:	edd3 7a00 	vldr	s15, [r3]
 8005774:	ed9f 7a15 	vldr	s14, [pc, #84]	@ 80057cc <update_position_randomly+0xe0>
 8005778:	eef4 7ac7 	vcmpe.f32	s15, s14
 800577c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005780:	d502      	bpl.n	8005788 <update_position_randomly+0x9c>
 8005782:	4b0d      	ldr	r3, [pc, #52]	@ (80057b8 <update_position_randomly+0xcc>)
 8005784:	4a12      	ldr	r2, [pc, #72]	@ (80057d0 <update_position_randomly+0xe4>)
 8005786:	601a      	str	r2, [r3, #0]
    if (lon > LON_MAX) lon = LON_MAX;
 8005788:	4b0b      	ldr	r3, [pc, #44]	@ (80057b8 <update_position_randomly+0xcc>)
 800578a:	edd3 7a00 	vldr	s15, [r3]
 800578e:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 80057d4 <update_position_randomly+0xe8>
 8005792:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005796:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800579a:	dc00      	bgt.n	800579e <update_position_randomly+0xb2>
}
 800579c:	e002      	b.n	80057a4 <update_position_randomly+0xb8>
    if (lon > LON_MAX) lon = LON_MAX;
 800579e:	4b06      	ldr	r3, [pc, #24]	@ (80057b8 <update_position_randomly+0xcc>)
 80057a0:	4a0d      	ldr	r2, [pc, #52]	@ (80057d8 <update_position_randomly+0xec>)
 80057a2:	601a      	str	r2, [r3, #0]
}
 80057a4:	bf00      	nop
 80057a6:	3708      	adds	r7, #8
 80057a8:	46bd      	mov	sp, r7
 80057aa:	bd80      	pop	{r7, pc}
 80057ac:	3a03126f 	.word	0x3a03126f
 80057b0:	ba03126f 	.word	0xba03126f
 80057b4:	20000384 	.word	0x20000384
 80057b8:	20000388 	.word	0x20000388
 80057bc:	41ec0000 	.word	0x41ec0000
 80057c0:	41ec0000 	.word	0x41ec0000
 80057c4:	42053333 	.word	0x42053333
 80057c8:	42053333 	.word	0x42053333
 80057cc:	4208cccd 	.word	0x4208cccd
 80057d0:	4208cccd 	.word	0x4208cccd
 80057d4:	420f999a 	.word	0x420f999a
 80057d8:	420f999a 	.word	0x420f999a

080057dc <send_gps_msg>:

void send_gps_msg(msg_type_t type)
{
 80057dc:	b580      	push	{r7, lr}
 80057de:	b088      	sub	sp, #32
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	4603      	mov	r3, r0
 80057e4:	71fb      	strb	r3, [r7, #7]
	gps_msg_t msg;
	msg.msg_type = type;
 80057e6:	79fb      	ldrb	r3, [r7, #7]
 80057e8:	733b      	strb	r3, [r7, #12]
	msg.license_id = LICENSE_ID;
 80057ea:	2300      	movs	r3, #0
 80057ec:	f043 034e 	orr.w	r3, r3, #78	@ 0x4e
 80057f0:	737b      	strb	r3, [r7, #13]
 80057f2:	2300      	movs	r3, #0
 80057f4:	f043 0361 	orr.w	r3, r3, #97	@ 0x61
 80057f8:	73bb      	strb	r3, [r7, #14]
 80057fa:	2300      	movs	r3, #0
 80057fc:	f063 0343 	orn	r3, r3, #67	@ 0x43
 8005800:	73fb      	strb	r3, [r7, #15]
 8005802:	2300      	movs	r3, #0
 8005804:	743b      	strb	r3, [r7, #16]
	msg.utc_seconds = utc_seconds;
 8005806:	4b0c      	ldr	r3, [pc, #48]	@ (8005838 <send_gps_msg+0x5c>)
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f8c7 3011 	str.w	r3, [r7, #17]
	msg.latitude = lat;
 800580e:	4b0b      	ldr	r3, [pc, #44]	@ (800583c <send_gps_msg+0x60>)
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f8c7 3015 	str.w	r3, [r7, #21]
	msg.longitude = lon;
 8005816:	4b0a      	ldr	r3, [pc, #40]	@ (8005840 <send_gps_msg+0x64>)
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f8c7 3019 	str.w	r3, [r7, #25]

	osMessageQueuePut(gpsMsgQueueHandle, &msg, 0, osWaitForever);
 800581e:	4b09      	ldr	r3, [pc, #36]	@ (8005844 <send_gps_msg+0x68>)
 8005820:	6818      	ldr	r0, [r3, #0]
 8005822:	f107 010c 	add.w	r1, r7, #12
 8005826:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800582a:	2200      	movs	r2, #0
 800582c:	f000 fa38 	bl	8005ca0 <osMessageQueuePut>
}
 8005830:	bf00      	nop
 8005832:	3720      	adds	r7, #32
 8005834:	46bd      	mov	sp, r7
 8005836:	bd80      	pop	{r7, pc}
 8005838:	20000380 	.word	0x20000380
 800583c:	20000384 	.word	0x20000384
 8005840:	20000388 	.word	0x20000388
 8005844:	20000328 	.word	0x20000328

08005848 <StartI2CSenderTask>:

extern I2C_HandleTypeDef hi2c1;
extern osMessageQueueId_t gpsMsgQueueHandle;

void StartI2CSenderTask(void *argument)
{
 8005848:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800584c:	b08c      	sub	sp, #48	@ 0x30
 800584e:	af04      	add	r7, sp, #16
 8005850:	6078      	str	r0, [r7, #4]
	gps_msg_t msg;
	while (1)
	{
		if (osMessageQueueGet(gpsMsgQueueHandle, &msg, 0, osWaitForever) == osOK)
 8005852:	4b26      	ldr	r3, [pc, #152]	@ (80058ec <StartI2CSenderTask+0xa4>)
 8005854:	6818      	ldr	r0, [r3, #0]
 8005856:	f107 0108 	add.w	r1, r7, #8
 800585a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800585e:	2200      	movs	r2, #0
 8005860:	f000 fa92 	bl	8005d88 <osMessageQueueGet>
 8005864:	4603      	mov	r3, r0
 8005866:	2b00      	cmp	r3, #0
 8005868:	d1f3      	bne.n	8005852 <StartI2CSenderTask+0xa>
		{
			char *type_str;
			if(msg.msg_type == MSG_IDLE) type_str = "IDLE";
 800586a:	7a3b      	ldrb	r3, [r7, #8]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d102      	bne.n	8005876 <StartI2CSenderTask+0x2e>
 8005870:	4b1f      	ldr	r3, [pc, #124]	@ (80058f0 <StartI2CSenderTask+0xa8>)
 8005872:	61fb      	str	r3, [r7, #28]
 8005874:	e00a      	b.n	800588c <StartI2CSenderTask+0x44>
			else if(msg.msg_type == MSG_START) type_str = "START";
 8005876:	7a3b      	ldrb	r3, [r7, #8]
 8005878:	2b01      	cmp	r3, #1
 800587a:	d102      	bne.n	8005882 <StartI2CSenderTask+0x3a>
 800587c:	4b1d      	ldr	r3, [pc, #116]	@ (80058f4 <StartI2CSenderTask+0xac>)
 800587e:	61fb      	str	r3, [r7, #28]
 8005880:	e004      	b.n	800588c <StartI2CSenderTask+0x44>
			else if(msg.msg_type == MSG_STOP) type_str = "STOP";
 8005882:	7a3b      	ldrb	r3, [r7, #8]
 8005884:	2b02      	cmp	r3, #2
 8005886:	d101      	bne.n	800588c <StartI2CSenderTask+0x44>
 8005888:	4b1b      	ldr	r3, [pc, #108]	@ (80058f8 <StartI2CSenderTask+0xb0>)
 800588a:	61fb      	str	r3, [r7, #28]

			printf("Sending %s message: license=%08lu, time(sec)=%lu, lat=%.6f, lon=%.6f\n",
		           type_str, (unsigned long)msg.license_id, (unsigned long)msg.utc_seconds,
 800588c:	f8d7 6009 	ldr.w	r6, [r7, #9]
 8005890:	f8d7 800d 	ldr.w	r8, [r7, #13]
		           msg.latitude, msg.longitude);
 8005894:	f8d7 3011 	ldr.w	r3, [r7, #17]
			printf("Sending %s message: license=%08lu, time(sec)=%lu, lat=%.6f, lon=%.6f\n",
 8005898:	4618      	mov	r0, r3
 800589a:	f7fa fe75 	bl	8000588 <__aeabi_f2d>
 800589e:	4604      	mov	r4, r0
 80058a0:	460d      	mov	r5, r1
		           msg.latitude, msg.longitude);
 80058a2:	f8d7 3015 	ldr.w	r3, [r7, #21]
			printf("Sending %s message: license=%08lu, time(sec)=%lu, lat=%.6f, lon=%.6f\n",
 80058a6:	4618      	mov	r0, r3
 80058a8:	f7fa fe6e 	bl	8000588 <__aeabi_f2d>
 80058ac:	4602      	mov	r2, r0
 80058ae:	460b      	mov	r3, r1
 80058b0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80058b4:	e9cd 4500 	strd	r4, r5, [sp]
 80058b8:	4643      	mov	r3, r8
 80058ba:	4632      	mov	r2, r6
 80058bc:	69f9      	ldr	r1, [r7, #28]
 80058be:	480f      	ldr	r0, [pc, #60]	@ (80058fc <StartI2CSenderTask+0xb4>)
 80058c0:	f003 fe10 	bl	80094e4 <iprintf>

			HAL_StatusTypeDef ret = HAL_I2C_Slave_Transmit(&hi2c1, (uint8_t*)&msg, sizeof(msg), HAL_MAX_DELAY);
 80058c4:	f107 0108 	add.w	r1, r7, #8
 80058c8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80058cc:	2211      	movs	r2, #17
 80058ce:	480c      	ldr	r0, [pc, #48]	@ (8005900 <StartI2CSenderTask+0xb8>)
 80058d0:	f7fc fb4c 	bl	8001f6c <HAL_I2C_Slave_Transmit>
 80058d4:	4603      	mov	r3, r0
 80058d6:	76fb      	strb	r3, [r7, #27]

			if (ret != HAL_OK)
 80058d8:	7efb      	ldrb	r3, [r7, #27]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d0b9      	beq.n	8005852 <StartI2CSenderTask+0xa>
			{
				printf("I2C Transmit failed with code: %d\n", ret);
 80058de:	7efb      	ldrb	r3, [r7, #27]
 80058e0:	4619      	mov	r1, r3
 80058e2:	4808      	ldr	r0, [pc, #32]	@ (8005904 <StartI2CSenderTask+0xbc>)
 80058e4:	f003 fdfe 	bl	80094e4 <iprintf>
		if (osMessageQueueGet(gpsMsgQueueHandle, &msg, 0, osWaitForever) == osOK)
 80058e8:	e7b3      	b.n	8005852 <StartI2CSenderTask+0xa>
 80058ea:	bf00      	nop
 80058ec:	20000328 	.word	0x20000328
 80058f0:	0800b4e4 	.word	0x0800b4e4
 80058f4:	0800b4ec 	.word	0x0800b4ec
 80058f8:	0800b4f4 	.word	0x0800b4f4
 80058fc:	0800b4fc 	.word	0x0800b4fc
 8005900:	200001f4 	.word	0x200001f4
 8005904:	0800b544 	.word	0x0800b544

08005908 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005908:	b480      	push	{r7}
 800590a:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800590c:	bf00      	nop
 800590e:	46bd      	mov	sp, r7
 8005910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005914:	4770      	bx	lr
	...

08005918 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005918:	b480      	push	{r7}
 800591a:	b085      	sub	sp, #20
 800591c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800591e:	f3ef 8305 	mrs	r3, IPSR
 8005922:	60bb      	str	r3, [r7, #8]
  return(result);
 8005924:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005926:	2b00      	cmp	r3, #0
 8005928:	d10f      	bne.n	800594a <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800592a:	f3ef 8310 	mrs	r3, PRIMASK
 800592e:	607b      	str	r3, [r7, #4]
  return(result);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2b00      	cmp	r3, #0
 8005934:	d105      	bne.n	8005942 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005936:	f3ef 8311 	mrs	r3, BASEPRI
 800593a:	603b      	str	r3, [r7, #0]
  return(result);
 800593c:	683b      	ldr	r3, [r7, #0]
 800593e:	2b00      	cmp	r3, #0
 8005940:	d007      	beq.n	8005952 <osKernelInitialize+0x3a>
 8005942:	4b0e      	ldr	r3, [pc, #56]	@ (800597c <osKernelInitialize+0x64>)
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	2b02      	cmp	r3, #2
 8005948:	d103      	bne.n	8005952 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800594a:	f06f 0305 	mvn.w	r3, #5
 800594e:	60fb      	str	r3, [r7, #12]
 8005950:	e00c      	b.n	800596c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005952:	4b0a      	ldr	r3, [pc, #40]	@ (800597c <osKernelInitialize+0x64>)
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	2b00      	cmp	r3, #0
 8005958:	d105      	bne.n	8005966 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800595a:	4b08      	ldr	r3, [pc, #32]	@ (800597c <osKernelInitialize+0x64>)
 800595c:	2201      	movs	r2, #1
 800595e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005960:	2300      	movs	r3, #0
 8005962:	60fb      	str	r3, [r7, #12]
 8005964:	e002      	b.n	800596c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8005966:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800596a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800596c:	68fb      	ldr	r3, [r7, #12]
}
 800596e:	4618      	mov	r0, r3
 8005970:	3714      	adds	r7, #20
 8005972:	46bd      	mov	sp, r7
 8005974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005978:	4770      	bx	lr
 800597a:	bf00      	nop
 800597c:	2000039c 	.word	0x2000039c

08005980 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005980:	b580      	push	{r7, lr}
 8005982:	b084      	sub	sp, #16
 8005984:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005986:	f3ef 8305 	mrs	r3, IPSR
 800598a:	60bb      	str	r3, [r7, #8]
  return(result);
 800598c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800598e:	2b00      	cmp	r3, #0
 8005990:	d10f      	bne.n	80059b2 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005992:	f3ef 8310 	mrs	r3, PRIMASK
 8005996:	607b      	str	r3, [r7, #4]
  return(result);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2b00      	cmp	r3, #0
 800599c:	d105      	bne.n	80059aa <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800599e:	f3ef 8311 	mrs	r3, BASEPRI
 80059a2:	603b      	str	r3, [r7, #0]
  return(result);
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d007      	beq.n	80059ba <osKernelStart+0x3a>
 80059aa:	4b0f      	ldr	r3, [pc, #60]	@ (80059e8 <osKernelStart+0x68>)
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	2b02      	cmp	r3, #2
 80059b0:	d103      	bne.n	80059ba <osKernelStart+0x3a>
    stat = osErrorISR;
 80059b2:	f06f 0305 	mvn.w	r3, #5
 80059b6:	60fb      	str	r3, [r7, #12]
 80059b8:	e010      	b.n	80059dc <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 80059ba:	4b0b      	ldr	r3, [pc, #44]	@ (80059e8 <osKernelStart+0x68>)
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	2b01      	cmp	r3, #1
 80059c0:	d109      	bne.n	80059d6 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80059c2:	f7ff ffa1 	bl	8005908 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80059c6:	4b08      	ldr	r3, [pc, #32]	@ (80059e8 <osKernelStart+0x68>)
 80059c8:	2202      	movs	r2, #2
 80059ca:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80059cc:	f001 fb1a 	bl	8007004 <vTaskStartScheduler>
      stat = osOK;
 80059d0:	2300      	movs	r3, #0
 80059d2:	60fb      	str	r3, [r7, #12]
 80059d4:	e002      	b.n	80059dc <osKernelStart+0x5c>
    } else {
      stat = osError;
 80059d6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80059da:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80059dc:	68fb      	ldr	r3, [r7, #12]
}
 80059de:	4618      	mov	r0, r3
 80059e0:	3710      	adds	r7, #16
 80059e2:	46bd      	mov	sp, r7
 80059e4:	bd80      	pop	{r7, pc}
 80059e6:	bf00      	nop
 80059e8:	2000039c 	.word	0x2000039c

080059ec <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80059ec:	b580      	push	{r7, lr}
 80059ee:	b090      	sub	sp, #64	@ 0x40
 80059f0:	af04      	add	r7, sp, #16
 80059f2:	60f8      	str	r0, [r7, #12]
 80059f4:	60b9      	str	r1, [r7, #8]
 80059f6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80059f8:	2300      	movs	r3, #0
 80059fa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80059fc:	f3ef 8305 	mrs	r3, IPSR
 8005a00:	61fb      	str	r3, [r7, #28]
  return(result);
 8005a02:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	f040 8090 	bne.w	8005b2a <osThreadNew+0x13e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a0a:	f3ef 8310 	mrs	r3, PRIMASK
 8005a0e:	61bb      	str	r3, [r7, #24]
  return(result);
 8005a10:	69bb      	ldr	r3, [r7, #24]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d105      	bne.n	8005a22 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005a16:	f3ef 8311 	mrs	r3, BASEPRI
 8005a1a:	617b      	str	r3, [r7, #20]
  return(result);
 8005a1c:	697b      	ldr	r3, [r7, #20]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d003      	beq.n	8005a2a <osThreadNew+0x3e>
 8005a22:	4b44      	ldr	r3, [pc, #272]	@ (8005b34 <osThreadNew+0x148>)
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	2b02      	cmp	r3, #2
 8005a28:	d07f      	beq.n	8005b2a <osThreadNew+0x13e>
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d07c      	beq.n	8005b2a <osThreadNew+0x13e>
    stack = configMINIMAL_STACK_SIZE;
 8005a30:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005a34:	62bb      	str	r3, [r7, #40]	@ 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8005a36:	2318      	movs	r3, #24
 8005a38:	627b      	str	r3, [r7, #36]	@ 0x24

    name = NULL;
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    mem  = -1;
 8005a3e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005a42:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d045      	beq.n	8005ad6 <osThreadNew+0xea>
      if (attr->name != NULL) {
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d002      	beq.n	8005a58 <osThreadNew+0x6c>
        name = attr->name;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	699b      	ldr	r3, [r3, #24]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d002      	beq.n	8005a66 <osThreadNew+0x7a>
        prio = (UBaseType_t)attr->priority;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	699b      	ldr	r3, [r3, #24]
 8005a64:	627b      	str	r3, [r7, #36]	@ 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005a66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d008      	beq.n	8005a7e <osThreadNew+0x92>
 8005a6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a6e:	2b38      	cmp	r3, #56	@ 0x38
 8005a70:	d805      	bhi.n	8005a7e <osThreadNew+0x92>
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	685b      	ldr	r3, [r3, #4]
 8005a76:	f003 0301 	and.w	r3, r3, #1
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d001      	beq.n	8005a82 <osThreadNew+0x96>
        return (NULL);
 8005a7e:	2300      	movs	r3, #0
 8005a80:	e054      	b.n	8005b2c <osThreadNew+0x140>
      }

      if (attr->stack_size > 0U) {
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	695b      	ldr	r3, [r3, #20]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d003      	beq.n	8005a92 <osThreadNew+0xa6>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	695b      	ldr	r3, [r3, #20]
 8005a8e:	089b      	lsrs	r3, r3, #2
 8005a90:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	689b      	ldr	r3, [r3, #8]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d00e      	beq.n	8005ab8 <osThreadNew+0xcc>
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	68db      	ldr	r3, [r3, #12]
 8005a9e:	2ba7      	cmp	r3, #167	@ 0xa7
 8005aa0:	d90a      	bls.n	8005ab8 <osThreadNew+0xcc>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d006      	beq.n	8005ab8 <osThreadNew+0xcc>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	695b      	ldr	r3, [r3, #20]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d002      	beq.n	8005ab8 <osThreadNew+0xcc>
        mem = 1;
 8005ab2:	2301      	movs	r3, #1
 8005ab4:	623b      	str	r3, [r7, #32]
 8005ab6:	e010      	b.n	8005ada <osThreadNew+0xee>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	689b      	ldr	r3, [r3, #8]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d10c      	bne.n	8005ada <osThreadNew+0xee>
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	68db      	ldr	r3, [r3, #12]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d108      	bne.n	8005ada <osThreadNew+0xee>
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	691b      	ldr	r3, [r3, #16]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d104      	bne.n	8005ada <osThreadNew+0xee>
          mem = 0;
 8005ad0:	2300      	movs	r3, #0
 8005ad2:	623b      	str	r3, [r7, #32]
 8005ad4:	e001      	b.n	8005ada <osThreadNew+0xee>
        }
      }
    }
    else {
      mem = 0;
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8005ada:	6a3b      	ldr	r3, [r7, #32]
 8005adc:	2b01      	cmp	r3, #1
 8005ade:	d110      	bne.n	8005b02 <osThreadNew+0x116>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8005ae4:	687a      	ldr	r2, [r7, #4]
 8005ae6:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005ae8:	9202      	str	r2, [sp, #8]
 8005aea:	9301      	str	r3, [sp, #4]
 8005aec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005aee:	9300      	str	r3, [sp, #0]
 8005af0:	68bb      	ldr	r3, [r7, #8]
 8005af2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005af4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005af6:	68f8      	ldr	r0, [r7, #12]
 8005af8:	f001 f886 	bl	8006c08 <xTaskCreateStatic>
 8005afc:	4603      	mov	r3, r0
 8005afe:	613b      	str	r3, [r7, #16]
 8005b00:	e013      	b.n	8005b2a <osThreadNew+0x13e>
    }
    else {
      if (mem == 0) {
 8005b02:	6a3b      	ldr	r3, [r7, #32]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d110      	bne.n	8005b2a <osThreadNew+0x13e>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005b08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b0a:	b29a      	uxth	r2, r3
 8005b0c:	f107 0310 	add.w	r3, r7, #16
 8005b10:	9301      	str	r3, [sp, #4]
 8005b12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b14:	9300      	str	r3, [sp, #0]
 8005b16:	68bb      	ldr	r3, [r7, #8]
 8005b18:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005b1a:	68f8      	ldr	r0, [r7, #12]
 8005b1c:	f001 f8da 	bl	8006cd4 <xTaskCreate>
 8005b20:	4603      	mov	r3, r0
 8005b22:	2b01      	cmp	r3, #1
 8005b24:	d001      	beq.n	8005b2a <osThreadNew+0x13e>
          hTask = NULL;
 8005b26:	2300      	movs	r3, #0
 8005b28:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005b2a:	693b      	ldr	r3, [r7, #16]
}
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	3730      	adds	r7, #48	@ 0x30
 8005b30:	46bd      	mov	sp, r7
 8005b32:	bd80      	pop	{r7, pc}
 8005b34:	2000039c 	.word	0x2000039c

08005b38 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	b086      	sub	sp, #24
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005b40:	f3ef 8305 	mrs	r3, IPSR
 8005b44:	613b      	str	r3, [r7, #16]
  return(result);
 8005b46:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d10f      	bne.n	8005b6c <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b4c:	f3ef 8310 	mrs	r3, PRIMASK
 8005b50:	60fb      	str	r3, [r7, #12]
  return(result);
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d105      	bne.n	8005b64 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005b58:	f3ef 8311 	mrs	r3, BASEPRI
 8005b5c:	60bb      	str	r3, [r7, #8]
  return(result);
 8005b5e:	68bb      	ldr	r3, [r7, #8]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d007      	beq.n	8005b74 <osDelay+0x3c>
 8005b64:	4b0a      	ldr	r3, [pc, #40]	@ (8005b90 <osDelay+0x58>)
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	2b02      	cmp	r3, #2
 8005b6a:	d103      	bne.n	8005b74 <osDelay+0x3c>
    stat = osErrorISR;
 8005b6c:	f06f 0305 	mvn.w	r3, #5
 8005b70:	617b      	str	r3, [r7, #20]
 8005b72:	e007      	b.n	8005b84 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8005b74:	2300      	movs	r3, #0
 8005b76:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d002      	beq.n	8005b84 <osDelay+0x4c>
      vTaskDelay(ticks);
 8005b7e:	6878      	ldr	r0, [r7, #4]
 8005b80:	f001 fa08 	bl	8006f94 <vTaskDelay>
    }
  }

  return (stat);
 8005b84:	697b      	ldr	r3, [r7, #20]
}
 8005b86:	4618      	mov	r0, r3
 8005b88:	3718      	adds	r7, #24
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	bd80      	pop	{r7, pc}
 8005b8e:	bf00      	nop
 8005b90:	2000039c 	.word	0x2000039c

08005b94 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b08c      	sub	sp, #48	@ 0x30
 8005b98:	af02      	add	r7, sp, #8
 8005b9a:	60f8      	str	r0, [r7, #12]
 8005b9c:	60b9      	str	r1, [r7, #8]
 8005b9e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8005ba0:	2300      	movs	r3, #0
 8005ba2:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005ba4:	f3ef 8305 	mrs	r3, IPSR
 8005ba8:	61bb      	str	r3, [r7, #24]
  return(result);
 8005baa:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d16f      	bne.n	8005c90 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005bb0:	f3ef 8310 	mrs	r3, PRIMASK
 8005bb4:	617b      	str	r3, [r7, #20]
  return(result);
 8005bb6:	697b      	ldr	r3, [r7, #20]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d105      	bne.n	8005bc8 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005bbc:	f3ef 8311 	mrs	r3, BASEPRI
 8005bc0:	613b      	str	r3, [r7, #16]
  return(result);
 8005bc2:	693b      	ldr	r3, [r7, #16]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d003      	beq.n	8005bd0 <osMessageQueueNew+0x3c>
 8005bc8:	4b34      	ldr	r3, [pc, #208]	@ (8005c9c <osMessageQueueNew+0x108>)
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	2b02      	cmp	r3, #2
 8005bce:	d05f      	beq.n	8005c90 <osMessageQueueNew+0xfc>
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d05c      	beq.n	8005c90 <osMessageQueueNew+0xfc>
 8005bd6:	68bb      	ldr	r3, [r7, #8]
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d059      	beq.n	8005c90 <osMessageQueueNew+0xfc>
    mem = -1;
 8005bdc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005be0:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d029      	beq.n	8005c3c <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	689b      	ldr	r3, [r3, #8]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d012      	beq.n	8005c16 <osMessageQueueNew+0x82>
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	68db      	ldr	r3, [r3, #12]
 8005bf4:	2b4f      	cmp	r3, #79	@ 0x4f
 8005bf6:	d90e      	bls.n	8005c16 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d00a      	beq.n	8005c16 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	695a      	ldr	r2, [r3, #20]
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	68b9      	ldr	r1, [r7, #8]
 8005c08:	fb01 f303 	mul.w	r3, r1, r3
 8005c0c:	429a      	cmp	r2, r3
 8005c0e:	d302      	bcc.n	8005c16 <osMessageQueueNew+0x82>
        mem = 1;
 8005c10:	2301      	movs	r3, #1
 8005c12:	623b      	str	r3, [r7, #32]
 8005c14:	e014      	b.n	8005c40 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	689b      	ldr	r3, [r3, #8]
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d110      	bne.n	8005c40 <osMessageQueueNew+0xac>
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	68db      	ldr	r3, [r3, #12]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d10c      	bne.n	8005c40 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d108      	bne.n	8005c40 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	695b      	ldr	r3, [r3, #20]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d104      	bne.n	8005c40 <osMessageQueueNew+0xac>
          mem = 0;
 8005c36:	2300      	movs	r3, #0
 8005c38:	623b      	str	r3, [r7, #32]
 8005c3a:	e001      	b.n	8005c40 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8005c3c:	2300      	movs	r3, #0
 8005c3e:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8005c40:	6a3b      	ldr	r3, [r7, #32]
 8005c42:	2b01      	cmp	r3, #1
 8005c44:	d10b      	bne.n	8005c5e <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	691a      	ldr	r2, [r3, #16]
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	689b      	ldr	r3, [r3, #8]
 8005c4e:	2100      	movs	r1, #0
 8005c50:	9100      	str	r1, [sp, #0]
 8005c52:	68b9      	ldr	r1, [r7, #8]
 8005c54:	68f8      	ldr	r0, [r7, #12]
 8005c56:	f000 fa5d 	bl	8006114 <xQueueGenericCreateStatic>
 8005c5a:	6278      	str	r0, [r7, #36]	@ 0x24
 8005c5c:	e008      	b.n	8005c70 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 8005c5e:	6a3b      	ldr	r3, [r7, #32]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d105      	bne.n	8005c70 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 8005c64:	2200      	movs	r2, #0
 8005c66:	68b9      	ldr	r1, [r7, #8]
 8005c68:	68f8      	ldr	r0, [r7, #12]
 8005c6a:	f000 fada 	bl	8006222 <xQueueGenericCreate>
 8005c6e:	6278      	str	r0, [r7, #36]	@ 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8005c70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d00c      	beq.n	8005c90 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d003      	beq.n	8005c84 <osMessageQueueNew+0xf0>
        name = attr->name;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	61fb      	str	r3, [r7, #28]
 8005c82:	e001      	b.n	8005c88 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 8005c84:	2300      	movs	r3, #0
 8005c86:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8005c88:	69f9      	ldr	r1, [r7, #28]
 8005c8a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005c8c:	f000 ff5e 	bl	8006b4c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8005c90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005c92:	4618      	mov	r0, r3
 8005c94:	3728      	adds	r7, #40	@ 0x28
 8005c96:	46bd      	mov	sp, r7
 8005c98:	bd80      	pop	{r7, pc}
 8005c9a:	bf00      	nop
 8005c9c:	2000039c 	.word	0x2000039c

08005ca0 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b08a      	sub	sp, #40	@ 0x28
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	60f8      	str	r0, [r7, #12]
 8005ca8:	60b9      	str	r1, [r7, #8]
 8005caa:	603b      	str	r3, [r7, #0]
 8005cac:	4613      	mov	r3, r2
 8005cae:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005cb8:	f3ef 8305 	mrs	r3, IPSR
 8005cbc:	61fb      	str	r3, [r7, #28]
  return(result);
 8005cbe:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d10f      	bne.n	8005ce4 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005cc4:	f3ef 8310 	mrs	r3, PRIMASK
 8005cc8:	61bb      	str	r3, [r7, #24]
  return(result);
 8005cca:	69bb      	ldr	r3, [r7, #24]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d105      	bne.n	8005cdc <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005cd0:	f3ef 8311 	mrs	r3, BASEPRI
 8005cd4:	617b      	str	r3, [r7, #20]
  return(result);
 8005cd6:	697b      	ldr	r3, [r7, #20]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d02c      	beq.n	8005d36 <osMessageQueuePut+0x96>
 8005cdc:	4b28      	ldr	r3, [pc, #160]	@ (8005d80 <osMessageQueuePut+0xe0>)
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	2b02      	cmp	r3, #2
 8005ce2:	d128      	bne.n	8005d36 <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005ce4:	6a3b      	ldr	r3, [r7, #32]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d005      	beq.n	8005cf6 <osMessageQueuePut+0x56>
 8005cea:	68bb      	ldr	r3, [r7, #8]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d002      	beq.n	8005cf6 <osMessageQueuePut+0x56>
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d003      	beq.n	8005cfe <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 8005cf6:	f06f 0303 	mvn.w	r3, #3
 8005cfa:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005cfc:	e039      	b.n	8005d72 <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 8005cfe:	2300      	movs	r3, #0
 8005d00:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8005d02:	f107 0210 	add.w	r2, r7, #16
 8005d06:	2300      	movs	r3, #0
 8005d08:	68b9      	ldr	r1, [r7, #8]
 8005d0a:	6a38      	ldr	r0, [r7, #32]
 8005d0c:	f000 fbfa 	bl	8006504 <xQueueGenericSendFromISR>
 8005d10:	4603      	mov	r3, r0
 8005d12:	2b01      	cmp	r3, #1
 8005d14:	d003      	beq.n	8005d1e <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 8005d16:	f06f 0302 	mvn.w	r3, #2
 8005d1a:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005d1c:	e029      	b.n	8005d72 <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 8005d1e:	693b      	ldr	r3, [r7, #16]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d026      	beq.n	8005d72 <osMessageQueuePut+0xd2>
 8005d24:	4b17      	ldr	r3, [pc, #92]	@ (8005d84 <osMessageQueuePut+0xe4>)
 8005d26:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005d2a:	601a      	str	r2, [r3, #0]
 8005d2c:	f3bf 8f4f 	dsb	sy
 8005d30:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005d34:	e01d      	b.n	8005d72 <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8005d36:	6a3b      	ldr	r3, [r7, #32]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d002      	beq.n	8005d42 <osMessageQueuePut+0xa2>
 8005d3c:	68bb      	ldr	r3, [r7, #8]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d103      	bne.n	8005d4a <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 8005d42:	f06f 0303 	mvn.w	r3, #3
 8005d46:	627b      	str	r3, [r7, #36]	@ 0x24
 8005d48:	e014      	b.n	8005d74 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8005d4a:	2300      	movs	r3, #0
 8005d4c:	683a      	ldr	r2, [r7, #0]
 8005d4e:	68b9      	ldr	r1, [r7, #8]
 8005d50:	6a38      	ldr	r0, [r7, #32]
 8005d52:	f000 facd 	bl	80062f0 <xQueueGenericSend>
 8005d56:	4603      	mov	r3, r0
 8005d58:	2b01      	cmp	r3, #1
 8005d5a:	d00b      	beq.n	8005d74 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d003      	beq.n	8005d6a <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 8005d62:	f06f 0301 	mvn.w	r3, #1
 8005d66:	627b      	str	r3, [r7, #36]	@ 0x24
 8005d68:	e004      	b.n	8005d74 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 8005d6a:	f06f 0302 	mvn.w	r3, #2
 8005d6e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005d70:	e000      	b.n	8005d74 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005d72:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8005d74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005d76:	4618      	mov	r0, r3
 8005d78:	3728      	adds	r7, #40	@ 0x28
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	bd80      	pop	{r7, pc}
 8005d7e:	bf00      	nop
 8005d80:	2000039c 	.word	0x2000039c
 8005d84:	e000ed04 	.word	0xe000ed04

08005d88 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	b08a      	sub	sp, #40	@ 0x28
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	60f8      	str	r0, [r7, #12]
 8005d90:	60b9      	str	r1, [r7, #8]
 8005d92:	607a      	str	r2, [r7, #4]
 8005d94:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005d9e:	f3ef 8305 	mrs	r3, IPSR
 8005da2:	61fb      	str	r3, [r7, #28]
  return(result);
 8005da4:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d10f      	bne.n	8005dca <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005daa:	f3ef 8310 	mrs	r3, PRIMASK
 8005dae:	61bb      	str	r3, [r7, #24]
  return(result);
 8005db0:	69bb      	ldr	r3, [r7, #24]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d105      	bne.n	8005dc2 <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005db6:	f3ef 8311 	mrs	r3, BASEPRI
 8005dba:	617b      	str	r3, [r7, #20]
  return(result);
 8005dbc:	697b      	ldr	r3, [r7, #20]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d02c      	beq.n	8005e1c <osMessageQueueGet+0x94>
 8005dc2:	4b28      	ldr	r3, [pc, #160]	@ (8005e64 <osMessageQueueGet+0xdc>)
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	2b02      	cmp	r3, #2
 8005dc8:	d128      	bne.n	8005e1c <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005dca:	6a3b      	ldr	r3, [r7, #32]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d005      	beq.n	8005ddc <osMessageQueueGet+0x54>
 8005dd0:	68bb      	ldr	r3, [r7, #8]
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d002      	beq.n	8005ddc <osMessageQueueGet+0x54>
 8005dd6:	683b      	ldr	r3, [r7, #0]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d003      	beq.n	8005de4 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 8005ddc:	f06f 0303 	mvn.w	r3, #3
 8005de0:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005de2:	e038      	b.n	8005e56 <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 8005de4:	2300      	movs	r3, #0
 8005de6:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8005de8:	f107 0310 	add.w	r3, r7, #16
 8005dec:	461a      	mov	r2, r3
 8005dee:	68b9      	ldr	r1, [r7, #8]
 8005df0:	6a38      	ldr	r0, [r7, #32]
 8005df2:	f000 fd13 	bl	800681c <xQueueReceiveFromISR>
 8005df6:	4603      	mov	r3, r0
 8005df8:	2b01      	cmp	r3, #1
 8005dfa:	d003      	beq.n	8005e04 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 8005dfc:	f06f 0302 	mvn.w	r3, #2
 8005e00:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005e02:	e028      	b.n	8005e56 <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 8005e04:	693b      	ldr	r3, [r7, #16]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d025      	beq.n	8005e56 <osMessageQueueGet+0xce>
 8005e0a:	4b17      	ldr	r3, [pc, #92]	@ (8005e68 <osMessageQueueGet+0xe0>)
 8005e0c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005e10:	601a      	str	r2, [r3, #0]
 8005e12:	f3bf 8f4f 	dsb	sy
 8005e16:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005e1a:	e01c      	b.n	8005e56 <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8005e1c:	6a3b      	ldr	r3, [r7, #32]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d002      	beq.n	8005e28 <osMessageQueueGet+0xa0>
 8005e22:	68bb      	ldr	r3, [r7, #8]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d103      	bne.n	8005e30 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 8005e28:	f06f 0303 	mvn.w	r3, #3
 8005e2c:	627b      	str	r3, [r7, #36]	@ 0x24
 8005e2e:	e013      	b.n	8005e58 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8005e30:	683a      	ldr	r2, [r7, #0]
 8005e32:	68b9      	ldr	r1, [r7, #8]
 8005e34:	6a38      	ldr	r0, [r7, #32]
 8005e36:	f000 fc09 	bl	800664c <xQueueReceive>
 8005e3a:	4603      	mov	r3, r0
 8005e3c:	2b01      	cmp	r3, #1
 8005e3e:	d00b      	beq.n	8005e58 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 8005e40:	683b      	ldr	r3, [r7, #0]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d003      	beq.n	8005e4e <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 8005e46:	f06f 0301 	mvn.w	r3, #1
 8005e4a:	627b      	str	r3, [r7, #36]	@ 0x24
 8005e4c:	e004      	b.n	8005e58 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 8005e4e:	f06f 0302 	mvn.w	r3, #2
 8005e52:	627b      	str	r3, [r7, #36]	@ 0x24
 8005e54:	e000      	b.n	8005e58 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005e56:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8005e58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	3728      	adds	r7, #40	@ 0x28
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	bd80      	pop	{r7, pc}
 8005e62:	bf00      	nop
 8005e64:	2000039c 	.word	0x2000039c
 8005e68:	e000ed04 	.word	0xe000ed04

08005e6c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005e6c:	b480      	push	{r7}
 8005e6e:	b085      	sub	sp, #20
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	60f8      	str	r0, [r7, #12]
 8005e74:	60b9      	str	r1, [r7, #8]
 8005e76:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	4a07      	ldr	r2, [pc, #28]	@ (8005e98 <vApplicationGetIdleTaskMemory+0x2c>)
 8005e7c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005e7e:	68bb      	ldr	r3, [r7, #8]
 8005e80:	4a06      	ldr	r2, [pc, #24]	@ (8005e9c <vApplicationGetIdleTaskMemory+0x30>)
 8005e82:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005e8a:	601a      	str	r2, [r3, #0]
}
 8005e8c:	bf00      	nop
 8005e8e:	3714      	adds	r7, #20
 8005e90:	46bd      	mov	sp, r7
 8005e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e96:	4770      	bx	lr
 8005e98:	200003a0 	.word	0x200003a0
 8005e9c:	20000448 	.word	0x20000448

08005ea0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005ea0:	b480      	push	{r7}
 8005ea2:	b085      	sub	sp, #20
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	60f8      	str	r0, [r7, #12]
 8005ea8:	60b9      	str	r1, [r7, #8]
 8005eaa:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	4a07      	ldr	r2, [pc, #28]	@ (8005ecc <vApplicationGetTimerTaskMemory+0x2c>)
 8005eb0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005eb2:	68bb      	ldr	r3, [r7, #8]
 8005eb4:	4a06      	ldr	r2, [pc, #24]	@ (8005ed0 <vApplicationGetTimerTaskMemory+0x30>)
 8005eb6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005ebe:	601a      	str	r2, [r3, #0]
}
 8005ec0:	bf00      	nop
 8005ec2:	3714      	adds	r7, #20
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eca:	4770      	bx	lr
 8005ecc:	20000848 	.word	0x20000848
 8005ed0:	200008f0 	.word	0x200008f0

08005ed4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005ed4:	b480      	push	{r7}
 8005ed6:	b083      	sub	sp, #12
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	f103 0208 	add.w	r2, r3, #8
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005eec:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	f103 0208 	add.w	r2, r3, #8
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	f103 0208 	add.w	r2, r3, #8
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	2200      	movs	r2, #0
 8005f06:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005f08:	bf00      	nop
 8005f0a:	370c      	adds	r7, #12
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f12:	4770      	bx	lr

08005f14 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005f14:	b480      	push	{r7}
 8005f16:	b083      	sub	sp, #12
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2200      	movs	r2, #0
 8005f20:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005f22:	bf00      	nop
 8005f24:	370c      	adds	r7, #12
 8005f26:	46bd      	mov	sp, r7
 8005f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2c:	4770      	bx	lr

08005f2e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005f2e:	b480      	push	{r7}
 8005f30:	b085      	sub	sp, #20
 8005f32:	af00      	add	r7, sp, #0
 8005f34:	6078      	str	r0, [r7, #4]
 8005f36:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	685b      	ldr	r3, [r3, #4]
 8005f3c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005f3e:	683b      	ldr	r3, [r7, #0]
 8005f40:	68fa      	ldr	r2, [r7, #12]
 8005f42:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	689a      	ldr	r2, [r3, #8]
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	689b      	ldr	r3, [r3, #8]
 8005f50:	683a      	ldr	r2, [r7, #0]
 8005f52:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	683a      	ldr	r2, [r7, #0]
 8005f58:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005f5a:	683b      	ldr	r3, [r7, #0]
 8005f5c:	687a      	ldr	r2, [r7, #4]
 8005f5e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	1c5a      	adds	r2, r3, #1
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	601a      	str	r2, [r3, #0]
}
 8005f6a:	bf00      	nop
 8005f6c:	3714      	adds	r7, #20
 8005f6e:	46bd      	mov	sp, r7
 8005f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f74:	4770      	bx	lr

08005f76 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005f76:	b480      	push	{r7}
 8005f78:	b085      	sub	sp, #20
 8005f7a:	af00      	add	r7, sp, #0
 8005f7c:	6078      	str	r0, [r7, #4]
 8005f7e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005f86:	68bb      	ldr	r3, [r7, #8]
 8005f88:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005f8c:	d103      	bne.n	8005f96 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	691b      	ldr	r3, [r3, #16]
 8005f92:	60fb      	str	r3, [r7, #12]
 8005f94:	e00c      	b.n	8005fb0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	3308      	adds	r3, #8
 8005f9a:	60fb      	str	r3, [r7, #12]
 8005f9c:	e002      	b.n	8005fa4 <vListInsert+0x2e>
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	685b      	ldr	r3, [r3, #4]
 8005fa2:	60fb      	str	r3, [r7, #12]
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	685b      	ldr	r3, [r3, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	68ba      	ldr	r2, [r7, #8]
 8005fac:	429a      	cmp	r2, r3
 8005fae:	d2f6      	bcs.n	8005f9e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	685a      	ldr	r2, [r3, #4]
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	685b      	ldr	r3, [r3, #4]
 8005fbc:	683a      	ldr	r2, [r7, #0]
 8005fbe:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005fc0:	683b      	ldr	r3, [r7, #0]
 8005fc2:	68fa      	ldr	r2, [r7, #12]
 8005fc4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	683a      	ldr	r2, [r7, #0]
 8005fca:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005fcc:	683b      	ldr	r3, [r7, #0]
 8005fce:	687a      	ldr	r2, [r7, #4]
 8005fd0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	1c5a      	adds	r2, r3, #1
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	601a      	str	r2, [r3, #0]
}
 8005fdc:	bf00      	nop
 8005fde:	3714      	adds	r7, #20
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe6:	4770      	bx	lr

08005fe8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005fe8:	b480      	push	{r7}
 8005fea:	b085      	sub	sp, #20
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	691b      	ldr	r3, [r3, #16]
 8005ff4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	685b      	ldr	r3, [r3, #4]
 8005ffa:	687a      	ldr	r2, [r7, #4]
 8005ffc:	6892      	ldr	r2, [r2, #8]
 8005ffe:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	689b      	ldr	r3, [r3, #8]
 8006004:	687a      	ldr	r2, [r7, #4]
 8006006:	6852      	ldr	r2, [r2, #4]
 8006008:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	685b      	ldr	r3, [r3, #4]
 800600e:	687a      	ldr	r2, [r7, #4]
 8006010:	429a      	cmp	r2, r3
 8006012:	d103      	bne.n	800601c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	689a      	ldr	r2, [r3, #8]
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2200      	movs	r2, #0
 8006020:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	1e5a      	subs	r2, r3, #1
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	681b      	ldr	r3, [r3, #0]
}
 8006030:	4618      	mov	r0, r3
 8006032:	3714      	adds	r7, #20
 8006034:	46bd      	mov	sp, r7
 8006036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603a:	4770      	bx	lr

0800603c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800603c:	b580      	push	{r7, lr}
 800603e:	b084      	sub	sp, #16
 8006040:	af00      	add	r7, sp, #0
 8006042:	6078      	str	r0, [r7, #4]
 8006044:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	2b00      	cmp	r3, #0
 800604e:	d10d      	bne.n	800606c <xQueueGenericReset+0x30>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006050:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006054:	b672      	cpsid	i
 8006056:	f383 8811 	msr	BASEPRI, r3
 800605a:	f3bf 8f6f 	isb	sy
 800605e:	f3bf 8f4f 	dsb	sy
 8006062:	b662      	cpsie	i
 8006064:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006066:	bf00      	nop
 8006068:	bf00      	nop
 800606a:	e7fd      	b.n	8006068 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800606c:	f002 f99e 	bl	80083ac <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	681a      	ldr	r2, [r3, #0]
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006078:	68f9      	ldr	r1, [r7, #12]
 800607a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800607c:	fb01 f303 	mul.w	r3, r1, r3
 8006080:	441a      	add	r2, r3
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	2200      	movs	r2, #0
 800608a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	681a      	ldr	r2, [r3, #0]
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	681a      	ldr	r2, [r3, #0]
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800609c:	3b01      	subs	r3, #1
 800609e:	68f9      	ldr	r1, [r7, #12]
 80060a0:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80060a2:	fb01 f303 	mul.w	r3, r1, r3
 80060a6:	441a      	add	r2, r3
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	22ff      	movs	r2, #255	@ 0xff
 80060b0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	22ff      	movs	r2, #255	@ 0xff
 80060b8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80060bc:	683b      	ldr	r3, [r7, #0]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d114      	bne.n	80060ec <xQueueGenericReset+0xb0>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	691b      	ldr	r3, [r3, #16]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d01a      	beq.n	8006100 <xQueueGenericReset+0xc4>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	3310      	adds	r3, #16
 80060ce:	4618      	mov	r0, r3
 80060d0:	f001 fa44 	bl	800755c <xTaskRemoveFromEventList>
 80060d4:	4603      	mov	r3, r0
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d012      	beq.n	8006100 <xQueueGenericReset+0xc4>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80060da:	4b0d      	ldr	r3, [pc, #52]	@ (8006110 <xQueueGenericReset+0xd4>)
 80060dc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80060e0:	601a      	str	r2, [r3, #0]
 80060e2:	f3bf 8f4f 	dsb	sy
 80060e6:	f3bf 8f6f 	isb	sy
 80060ea:	e009      	b.n	8006100 <xQueueGenericReset+0xc4>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	3310      	adds	r3, #16
 80060f0:	4618      	mov	r0, r3
 80060f2:	f7ff feef 	bl	8005ed4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	3324      	adds	r3, #36	@ 0x24
 80060fa:	4618      	mov	r0, r3
 80060fc:	f7ff feea 	bl	8005ed4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006100:	f002 f98a 	bl	8008418 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006104:	2301      	movs	r3, #1
}
 8006106:	4618      	mov	r0, r3
 8006108:	3710      	adds	r7, #16
 800610a:	46bd      	mov	sp, r7
 800610c:	bd80      	pop	{r7, pc}
 800610e:	bf00      	nop
 8006110:	e000ed04 	.word	0xe000ed04

08006114 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006114:	b580      	push	{r7, lr}
 8006116:	b08e      	sub	sp, #56	@ 0x38
 8006118:	af02      	add	r7, sp, #8
 800611a:	60f8      	str	r0, [r7, #12]
 800611c:	60b9      	str	r1, [r7, #8]
 800611e:	607a      	str	r2, [r7, #4]
 8006120:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	2b00      	cmp	r3, #0
 8006126:	d10d      	bne.n	8006144 <xQueueGenericCreateStatic+0x30>
	__asm volatile
 8006128:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800612c:	b672      	cpsid	i
 800612e:	f383 8811 	msr	BASEPRI, r3
 8006132:	f3bf 8f6f 	isb	sy
 8006136:	f3bf 8f4f 	dsb	sy
 800613a:	b662      	cpsie	i
 800613c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800613e:	bf00      	nop
 8006140:	bf00      	nop
 8006142:	e7fd      	b.n	8006140 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	2b00      	cmp	r3, #0
 8006148:	d10d      	bne.n	8006166 <xQueueGenericCreateStatic+0x52>
	__asm volatile
 800614a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800614e:	b672      	cpsid	i
 8006150:	f383 8811 	msr	BASEPRI, r3
 8006154:	f3bf 8f6f 	isb	sy
 8006158:	f3bf 8f4f 	dsb	sy
 800615c:	b662      	cpsie	i
 800615e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006160:	bf00      	nop
 8006162:	bf00      	nop
 8006164:	e7fd      	b.n	8006162 <xQueueGenericCreateStatic+0x4e>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	2b00      	cmp	r3, #0
 800616a:	d002      	beq.n	8006172 <xQueueGenericCreateStatic+0x5e>
 800616c:	68bb      	ldr	r3, [r7, #8]
 800616e:	2b00      	cmp	r3, #0
 8006170:	d001      	beq.n	8006176 <xQueueGenericCreateStatic+0x62>
 8006172:	2301      	movs	r3, #1
 8006174:	e000      	b.n	8006178 <xQueueGenericCreateStatic+0x64>
 8006176:	2300      	movs	r3, #0
 8006178:	2b00      	cmp	r3, #0
 800617a:	d10d      	bne.n	8006198 <xQueueGenericCreateStatic+0x84>
	__asm volatile
 800617c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006180:	b672      	cpsid	i
 8006182:	f383 8811 	msr	BASEPRI, r3
 8006186:	f3bf 8f6f 	isb	sy
 800618a:	f3bf 8f4f 	dsb	sy
 800618e:	b662      	cpsie	i
 8006190:	623b      	str	r3, [r7, #32]
}
 8006192:	bf00      	nop
 8006194:	bf00      	nop
 8006196:	e7fd      	b.n	8006194 <xQueueGenericCreateStatic+0x80>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2b00      	cmp	r3, #0
 800619c:	d102      	bne.n	80061a4 <xQueueGenericCreateStatic+0x90>
 800619e:	68bb      	ldr	r3, [r7, #8]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d101      	bne.n	80061a8 <xQueueGenericCreateStatic+0x94>
 80061a4:	2301      	movs	r3, #1
 80061a6:	e000      	b.n	80061aa <xQueueGenericCreateStatic+0x96>
 80061a8:	2300      	movs	r3, #0
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d10d      	bne.n	80061ca <xQueueGenericCreateStatic+0xb6>
	__asm volatile
 80061ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061b2:	b672      	cpsid	i
 80061b4:	f383 8811 	msr	BASEPRI, r3
 80061b8:	f3bf 8f6f 	isb	sy
 80061bc:	f3bf 8f4f 	dsb	sy
 80061c0:	b662      	cpsie	i
 80061c2:	61fb      	str	r3, [r7, #28]
}
 80061c4:	bf00      	nop
 80061c6:	bf00      	nop
 80061c8:	e7fd      	b.n	80061c6 <xQueueGenericCreateStatic+0xb2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80061ca:	2350      	movs	r3, #80	@ 0x50
 80061cc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80061ce:	697b      	ldr	r3, [r7, #20]
 80061d0:	2b50      	cmp	r3, #80	@ 0x50
 80061d2:	d00d      	beq.n	80061f0 <xQueueGenericCreateStatic+0xdc>
	__asm volatile
 80061d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061d8:	b672      	cpsid	i
 80061da:	f383 8811 	msr	BASEPRI, r3
 80061de:	f3bf 8f6f 	isb	sy
 80061e2:	f3bf 8f4f 	dsb	sy
 80061e6:	b662      	cpsie	i
 80061e8:	61bb      	str	r3, [r7, #24]
}
 80061ea:	bf00      	nop
 80061ec:	bf00      	nop
 80061ee:	e7fd      	b.n	80061ec <xQueueGenericCreateStatic+0xd8>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80061f0:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80061f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d00d      	beq.n	8006218 <xQueueGenericCreateStatic+0x104>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80061fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061fe:	2201      	movs	r2, #1
 8006200:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006204:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8006208:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800620a:	9300      	str	r3, [sp, #0]
 800620c:	4613      	mov	r3, r2
 800620e:	687a      	ldr	r2, [r7, #4]
 8006210:	68b9      	ldr	r1, [r7, #8]
 8006212:	68f8      	ldr	r0, [r7, #12]
 8006214:	f000 f848 	bl	80062a8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006218:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800621a:	4618      	mov	r0, r3
 800621c:	3730      	adds	r7, #48	@ 0x30
 800621e:	46bd      	mov	sp, r7
 8006220:	bd80      	pop	{r7, pc}

08006222 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006222:	b580      	push	{r7, lr}
 8006224:	b08a      	sub	sp, #40	@ 0x28
 8006226:	af02      	add	r7, sp, #8
 8006228:	60f8      	str	r0, [r7, #12]
 800622a:	60b9      	str	r1, [r7, #8]
 800622c:	4613      	mov	r3, r2
 800622e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	2b00      	cmp	r3, #0
 8006234:	d10d      	bne.n	8006252 <xQueueGenericCreate+0x30>
	__asm volatile
 8006236:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800623a:	b672      	cpsid	i
 800623c:	f383 8811 	msr	BASEPRI, r3
 8006240:	f3bf 8f6f 	isb	sy
 8006244:	f3bf 8f4f 	dsb	sy
 8006248:	b662      	cpsie	i
 800624a:	613b      	str	r3, [r7, #16]
}
 800624c:	bf00      	nop
 800624e:	bf00      	nop
 8006250:	e7fd      	b.n	800624e <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8006252:	68bb      	ldr	r3, [r7, #8]
 8006254:	2b00      	cmp	r3, #0
 8006256:	d102      	bne.n	800625e <xQueueGenericCreate+0x3c>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8006258:	2300      	movs	r3, #0
 800625a:	61fb      	str	r3, [r7, #28]
 800625c:	e004      	b.n	8006268 <xQueueGenericCreate+0x46>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	68ba      	ldr	r2, [r7, #8]
 8006262:	fb02 f303 	mul.w	r3, r2, r3
 8006266:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006268:	69fb      	ldr	r3, [r7, #28]
 800626a:	3350      	adds	r3, #80	@ 0x50
 800626c:	4618      	mov	r0, r3
 800626e:	f002 f9cb 	bl	8008608 <pvPortMalloc>
 8006272:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006274:	69bb      	ldr	r3, [r7, #24]
 8006276:	2b00      	cmp	r3, #0
 8006278:	d011      	beq.n	800629e <xQueueGenericCreate+0x7c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800627a:	69bb      	ldr	r3, [r7, #24]
 800627c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800627e:	697b      	ldr	r3, [r7, #20]
 8006280:	3350      	adds	r3, #80	@ 0x50
 8006282:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006284:	69bb      	ldr	r3, [r7, #24]
 8006286:	2200      	movs	r2, #0
 8006288:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800628c:	79fa      	ldrb	r2, [r7, #7]
 800628e:	69bb      	ldr	r3, [r7, #24]
 8006290:	9300      	str	r3, [sp, #0]
 8006292:	4613      	mov	r3, r2
 8006294:	697a      	ldr	r2, [r7, #20]
 8006296:	68b9      	ldr	r1, [r7, #8]
 8006298:	68f8      	ldr	r0, [r7, #12]
 800629a:	f000 f805 	bl	80062a8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800629e:	69bb      	ldr	r3, [r7, #24]
	}
 80062a0:	4618      	mov	r0, r3
 80062a2:	3720      	adds	r7, #32
 80062a4:	46bd      	mov	sp, r7
 80062a6:	bd80      	pop	{r7, pc}

080062a8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80062a8:	b580      	push	{r7, lr}
 80062aa:	b084      	sub	sp, #16
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	60f8      	str	r0, [r7, #12]
 80062b0:	60b9      	str	r1, [r7, #8]
 80062b2:	607a      	str	r2, [r7, #4]
 80062b4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80062b6:	68bb      	ldr	r3, [r7, #8]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d103      	bne.n	80062c4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80062bc:	69bb      	ldr	r3, [r7, #24]
 80062be:	69ba      	ldr	r2, [r7, #24]
 80062c0:	601a      	str	r2, [r3, #0]
 80062c2:	e002      	b.n	80062ca <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80062c4:	69bb      	ldr	r3, [r7, #24]
 80062c6:	687a      	ldr	r2, [r7, #4]
 80062c8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80062ca:	69bb      	ldr	r3, [r7, #24]
 80062cc:	68fa      	ldr	r2, [r7, #12]
 80062ce:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80062d0:	69bb      	ldr	r3, [r7, #24]
 80062d2:	68ba      	ldr	r2, [r7, #8]
 80062d4:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80062d6:	2101      	movs	r1, #1
 80062d8:	69b8      	ldr	r0, [r7, #24]
 80062da:	f7ff feaf 	bl	800603c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80062de:	69bb      	ldr	r3, [r7, #24]
 80062e0:	78fa      	ldrb	r2, [r7, #3]
 80062e2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80062e6:	bf00      	nop
 80062e8:	3710      	adds	r7, #16
 80062ea:	46bd      	mov	sp, r7
 80062ec:	bd80      	pop	{r7, pc}
	...

080062f0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80062f0:	b580      	push	{r7, lr}
 80062f2:	b08e      	sub	sp, #56	@ 0x38
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	60f8      	str	r0, [r7, #12]
 80062f8:	60b9      	str	r1, [r7, #8]
 80062fa:	607a      	str	r2, [r7, #4]
 80062fc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80062fe:	2300      	movs	r3, #0
 8006300:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8006306:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006308:	2b00      	cmp	r3, #0
 800630a:	d10d      	bne.n	8006328 <xQueueGenericSend+0x38>
	__asm volatile
 800630c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006310:	b672      	cpsid	i
 8006312:	f383 8811 	msr	BASEPRI, r3
 8006316:	f3bf 8f6f 	isb	sy
 800631a:	f3bf 8f4f 	dsb	sy
 800631e:	b662      	cpsie	i
 8006320:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006322:	bf00      	nop
 8006324:	bf00      	nop
 8006326:	e7fd      	b.n	8006324 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006328:	68bb      	ldr	r3, [r7, #8]
 800632a:	2b00      	cmp	r3, #0
 800632c:	d103      	bne.n	8006336 <xQueueGenericSend+0x46>
 800632e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006330:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006332:	2b00      	cmp	r3, #0
 8006334:	d101      	bne.n	800633a <xQueueGenericSend+0x4a>
 8006336:	2301      	movs	r3, #1
 8006338:	e000      	b.n	800633c <xQueueGenericSend+0x4c>
 800633a:	2300      	movs	r3, #0
 800633c:	2b00      	cmp	r3, #0
 800633e:	d10d      	bne.n	800635c <xQueueGenericSend+0x6c>
	__asm volatile
 8006340:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006344:	b672      	cpsid	i
 8006346:	f383 8811 	msr	BASEPRI, r3
 800634a:	f3bf 8f6f 	isb	sy
 800634e:	f3bf 8f4f 	dsb	sy
 8006352:	b662      	cpsie	i
 8006354:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006356:	bf00      	nop
 8006358:	bf00      	nop
 800635a:	e7fd      	b.n	8006358 <xQueueGenericSend+0x68>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	2b02      	cmp	r3, #2
 8006360:	d103      	bne.n	800636a <xQueueGenericSend+0x7a>
 8006362:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006364:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006366:	2b01      	cmp	r3, #1
 8006368:	d101      	bne.n	800636e <xQueueGenericSend+0x7e>
 800636a:	2301      	movs	r3, #1
 800636c:	e000      	b.n	8006370 <xQueueGenericSend+0x80>
 800636e:	2300      	movs	r3, #0
 8006370:	2b00      	cmp	r3, #0
 8006372:	d10d      	bne.n	8006390 <xQueueGenericSend+0xa0>
	__asm volatile
 8006374:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006378:	b672      	cpsid	i
 800637a:	f383 8811 	msr	BASEPRI, r3
 800637e:	f3bf 8f6f 	isb	sy
 8006382:	f3bf 8f4f 	dsb	sy
 8006386:	b662      	cpsie	i
 8006388:	623b      	str	r3, [r7, #32]
}
 800638a:	bf00      	nop
 800638c:	bf00      	nop
 800638e:	e7fd      	b.n	800638c <xQueueGenericSend+0x9c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006390:	f001 fab2 	bl	80078f8 <xTaskGetSchedulerState>
 8006394:	4603      	mov	r3, r0
 8006396:	2b00      	cmp	r3, #0
 8006398:	d102      	bne.n	80063a0 <xQueueGenericSend+0xb0>
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	2b00      	cmp	r3, #0
 800639e:	d101      	bne.n	80063a4 <xQueueGenericSend+0xb4>
 80063a0:	2301      	movs	r3, #1
 80063a2:	e000      	b.n	80063a6 <xQueueGenericSend+0xb6>
 80063a4:	2300      	movs	r3, #0
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d10d      	bne.n	80063c6 <xQueueGenericSend+0xd6>
	__asm volatile
 80063aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063ae:	b672      	cpsid	i
 80063b0:	f383 8811 	msr	BASEPRI, r3
 80063b4:	f3bf 8f6f 	isb	sy
 80063b8:	f3bf 8f4f 	dsb	sy
 80063bc:	b662      	cpsie	i
 80063be:	61fb      	str	r3, [r7, #28]
}
 80063c0:	bf00      	nop
 80063c2:	bf00      	nop
 80063c4:	e7fd      	b.n	80063c2 <xQueueGenericSend+0xd2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80063c6:	f001 fff1 	bl	80083ac <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80063ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063cc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80063ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80063d2:	429a      	cmp	r2, r3
 80063d4:	d302      	bcc.n	80063dc <xQueueGenericSend+0xec>
 80063d6:	683b      	ldr	r3, [r7, #0]
 80063d8:	2b02      	cmp	r3, #2
 80063da:	d129      	bne.n	8006430 <xQueueGenericSend+0x140>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80063dc:	683a      	ldr	r2, [r7, #0]
 80063de:	68b9      	ldr	r1, [r7, #8]
 80063e0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80063e2:	f000 faa3 	bl	800692c <prvCopyDataToQueue>
 80063e6:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80063e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d010      	beq.n	8006412 <xQueueGenericSend+0x122>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80063f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063f2:	3324      	adds	r3, #36	@ 0x24
 80063f4:	4618      	mov	r0, r3
 80063f6:	f001 f8b1 	bl	800755c <xTaskRemoveFromEventList>
 80063fa:	4603      	mov	r3, r0
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d013      	beq.n	8006428 <xQueueGenericSend+0x138>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006400:	4b3f      	ldr	r3, [pc, #252]	@ (8006500 <xQueueGenericSend+0x210>)
 8006402:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006406:	601a      	str	r2, [r3, #0]
 8006408:	f3bf 8f4f 	dsb	sy
 800640c:	f3bf 8f6f 	isb	sy
 8006410:	e00a      	b.n	8006428 <xQueueGenericSend+0x138>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006412:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006414:	2b00      	cmp	r3, #0
 8006416:	d007      	beq.n	8006428 <xQueueGenericSend+0x138>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006418:	4b39      	ldr	r3, [pc, #228]	@ (8006500 <xQueueGenericSend+0x210>)
 800641a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800641e:	601a      	str	r2, [r3, #0]
 8006420:	f3bf 8f4f 	dsb	sy
 8006424:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006428:	f001 fff6 	bl	8008418 <vPortExitCritical>
				return pdPASS;
 800642c:	2301      	movs	r3, #1
 800642e:	e063      	b.n	80064f8 <xQueueGenericSend+0x208>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	2b00      	cmp	r3, #0
 8006434:	d103      	bne.n	800643e <xQueueGenericSend+0x14e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006436:	f001 ffef 	bl	8008418 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800643a:	2300      	movs	r3, #0
 800643c:	e05c      	b.n	80064f8 <xQueueGenericSend+0x208>
				}
				else if( xEntryTimeSet == pdFALSE )
 800643e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006440:	2b00      	cmp	r3, #0
 8006442:	d106      	bne.n	8006452 <xQueueGenericSend+0x162>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006444:	f107 0314 	add.w	r3, r7, #20
 8006448:	4618      	mov	r0, r3
 800644a:	f001 f8ed 	bl	8007628 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800644e:	2301      	movs	r3, #1
 8006450:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006452:	f001 ffe1 	bl	8008418 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006456:	f000 fe49 	bl	80070ec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800645a:	f001 ffa7 	bl	80083ac <vPortEnterCritical>
 800645e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006460:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006464:	b25b      	sxtb	r3, r3
 8006466:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800646a:	d103      	bne.n	8006474 <xQueueGenericSend+0x184>
 800646c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800646e:	2200      	movs	r2, #0
 8006470:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006474:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006476:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800647a:	b25b      	sxtb	r3, r3
 800647c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006480:	d103      	bne.n	800648a <xQueueGenericSend+0x19a>
 8006482:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006484:	2200      	movs	r2, #0
 8006486:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800648a:	f001 ffc5 	bl	8008418 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800648e:	1d3a      	adds	r2, r7, #4
 8006490:	f107 0314 	add.w	r3, r7, #20
 8006494:	4611      	mov	r1, r2
 8006496:	4618      	mov	r0, r3
 8006498:	f001 f8dc 	bl	8007654 <xTaskCheckForTimeOut>
 800649c:	4603      	mov	r3, r0
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d124      	bne.n	80064ec <xQueueGenericSend+0x1fc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80064a2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80064a4:	f000 fb3a 	bl	8006b1c <prvIsQueueFull>
 80064a8:	4603      	mov	r3, r0
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d018      	beq.n	80064e0 <xQueueGenericSend+0x1f0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80064ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064b0:	3310      	adds	r3, #16
 80064b2:	687a      	ldr	r2, [r7, #4]
 80064b4:	4611      	mov	r1, r2
 80064b6:	4618      	mov	r0, r3
 80064b8:	f000 fffa 	bl	80074b0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80064bc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80064be:	f000 fac5 	bl	8006a4c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80064c2:	f000 fe21 	bl	8007108 <xTaskResumeAll>
 80064c6:	4603      	mov	r3, r0
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	f47f af7c 	bne.w	80063c6 <xQueueGenericSend+0xd6>
				{
					portYIELD_WITHIN_API();
 80064ce:	4b0c      	ldr	r3, [pc, #48]	@ (8006500 <xQueueGenericSend+0x210>)
 80064d0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80064d4:	601a      	str	r2, [r3, #0]
 80064d6:	f3bf 8f4f 	dsb	sy
 80064da:	f3bf 8f6f 	isb	sy
 80064de:	e772      	b.n	80063c6 <xQueueGenericSend+0xd6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80064e0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80064e2:	f000 fab3 	bl	8006a4c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80064e6:	f000 fe0f 	bl	8007108 <xTaskResumeAll>
 80064ea:	e76c      	b.n	80063c6 <xQueueGenericSend+0xd6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80064ec:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80064ee:	f000 faad 	bl	8006a4c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80064f2:	f000 fe09 	bl	8007108 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80064f6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80064f8:	4618      	mov	r0, r3
 80064fa:	3738      	adds	r7, #56	@ 0x38
 80064fc:	46bd      	mov	sp, r7
 80064fe:	bd80      	pop	{r7, pc}
 8006500:	e000ed04 	.word	0xe000ed04

08006504 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006504:	b580      	push	{r7, lr}
 8006506:	b08e      	sub	sp, #56	@ 0x38
 8006508:	af00      	add	r7, sp, #0
 800650a:	60f8      	str	r0, [r7, #12]
 800650c:	60b9      	str	r1, [r7, #8]
 800650e:	607a      	str	r2, [r7, #4]
 8006510:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8006516:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006518:	2b00      	cmp	r3, #0
 800651a:	d10d      	bne.n	8006538 <xQueueGenericSendFromISR+0x34>
	__asm volatile
 800651c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006520:	b672      	cpsid	i
 8006522:	f383 8811 	msr	BASEPRI, r3
 8006526:	f3bf 8f6f 	isb	sy
 800652a:	f3bf 8f4f 	dsb	sy
 800652e:	b662      	cpsie	i
 8006530:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006532:	bf00      	nop
 8006534:	bf00      	nop
 8006536:	e7fd      	b.n	8006534 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006538:	68bb      	ldr	r3, [r7, #8]
 800653a:	2b00      	cmp	r3, #0
 800653c:	d103      	bne.n	8006546 <xQueueGenericSendFromISR+0x42>
 800653e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006540:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006542:	2b00      	cmp	r3, #0
 8006544:	d101      	bne.n	800654a <xQueueGenericSendFromISR+0x46>
 8006546:	2301      	movs	r3, #1
 8006548:	e000      	b.n	800654c <xQueueGenericSendFromISR+0x48>
 800654a:	2300      	movs	r3, #0
 800654c:	2b00      	cmp	r3, #0
 800654e:	d10d      	bne.n	800656c <xQueueGenericSendFromISR+0x68>
	__asm volatile
 8006550:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006554:	b672      	cpsid	i
 8006556:	f383 8811 	msr	BASEPRI, r3
 800655a:	f3bf 8f6f 	isb	sy
 800655e:	f3bf 8f4f 	dsb	sy
 8006562:	b662      	cpsie	i
 8006564:	623b      	str	r3, [r7, #32]
}
 8006566:	bf00      	nop
 8006568:	bf00      	nop
 800656a:	e7fd      	b.n	8006568 <xQueueGenericSendFromISR+0x64>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800656c:	683b      	ldr	r3, [r7, #0]
 800656e:	2b02      	cmp	r3, #2
 8006570:	d103      	bne.n	800657a <xQueueGenericSendFromISR+0x76>
 8006572:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006574:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006576:	2b01      	cmp	r3, #1
 8006578:	d101      	bne.n	800657e <xQueueGenericSendFromISR+0x7a>
 800657a:	2301      	movs	r3, #1
 800657c:	e000      	b.n	8006580 <xQueueGenericSendFromISR+0x7c>
 800657e:	2300      	movs	r3, #0
 8006580:	2b00      	cmp	r3, #0
 8006582:	d10d      	bne.n	80065a0 <xQueueGenericSendFromISR+0x9c>
	__asm volatile
 8006584:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006588:	b672      	cpsid	i
 800658a:	f383 8811 	msr	BASEPRI, r3
 800658e:	f3bf 8f6f 	isb	sy
 8006592:	f3bf 8f4f 	dsb	sy
 8006596:	b662      	cpsie	i
 8006598:	61fb      	str	r3, [r7, #28]
}
 800659a:	bf00      	nop
 800659c:	bf00      	nop
 800659e:	e7fd      	b.n	800659c <xQueueGenericSendFromISR+0x98>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80065a0:	f001 ffec 	bl	800857c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80065a4:	f3ef 8211 	mrs	r2, BASEPRI
 80065a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065ac:	b672      	cpsid	i
 80065ae:	f383 8811 	msr	BASEPRI, r3
 80065b2:	f3bf 8f6f 	isb	sy
 80065b6:	f3bf 8f4f 	dsb	sy
 80065ba:	b662      	cpsie	i
 80065bc:	61ba      	str	r2, [r7, #24]
 80065be:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80065c0:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80065c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80065c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065c6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80065c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80065cc:	429a      	cmp	r2, r3
 80065ce:	d302      	bcc.n	80065d6 <xQueueGenericSendFromISR+0xd2>
 80065d0:	683b      	ldr	r3, [r7, #0]
 80065d2:	2b02      	cmp	r3, #2
 80065d4:	d12c      	bne.n	8006630 <xQueueGenericSendFromISR+0x12c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80065d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065d8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80065dc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80065e0:	683a      	ldr	r2, [r7, #0]
 80065e2:	68b9      	ldr	r1, [r7, #8]
 80065e4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80065e6:	f000 f9a1 	bl	800692c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80065ea:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 80065ee:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80065f2:	d112      	bne.n	800661a <xQueueGenericSendFromISR+0x116>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80065f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d016      	beq.n	800662a <xQueueGenericSendFromISR+0x126>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80065fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065fe:	3324      	adds	r3, #36	@ 0x24
 8006600:	4618      	mov	r0, r3
 8006602:	f000 ffab 	bl	800755c <xTaskRemoveFromEventList>
 8006606:	4603      	mov	r3, r0
 8006608:	2b00      	cmp	r3, #0
 800660a:	d00e      	beq.n	800662a <xQueueGenericSendFromISR+0x126>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	2b00      	cmp	r3, #0
 8006610:	d00b      	beq.n	800662a <xQueueGenericSendFromISR+0x126>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	2201      	movs	r2, #1
 8006616:	601a      	str	r2, [r3, #0]
 8006618:	e007      	b.n	800662a <xQueueGenericSendFromISR+0x126>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800661a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800661e:	3301      	adds	r3, #1
 8006620:	b2db      	uxtb	r3, r3
 8006622:	b25a      	sxtb	r2, r3
 8006624:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006626:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800662a:	2301      	movs	r3, #1
 800662c:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 800662e:	e001      	b.n	8006634 <xQueueGenericSendFromISR+0x130>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006630:	2300      	movs	r3, #0
 8006632:	637b      	str	r3, [r7, #52]	@ 0x34
 8006634:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006636:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006638:	693b      	ldr	r3, [r7, #16]
 800663a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800663e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006640:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8006642:	4618      	mov	r0, r3
 8006644:	3738      	adds	r7, #56	@ 0x38
 8006646:	46bd      	mov	sp, r7
 8006648:	bd80      	pop	{r7, pc}
	...

0800664c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800664c:	b580      	push	{r7, lr}
 800664e:	b08c      	sub	sp, #48	@ 0x30
 8006650:	af00      	add	r7, sp, #0
 8006652:	60f8      	str	r0, [r7, #12]
 8006654:	60b9      	str	r1, [r7, #8]
 8006656:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006658:	2300      	movs	r3, #0
 800665a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006660:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006662:	2b00      	cmp	r3, #0
 8006664:	d10d      	bne.n	8006682 <xQueueReceive+0x36>
	__asm volatile
 8006666:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800666a:	b672      	cpsid	i
 800666c:	f383 8811 	msr	BASEPRI, r3
 8006670:	f3bf 8f6f 	isb	sy
 8006674:	f3bf 8f4f 	dsb	sy
 8006678:	b662      	cpsie	i
 800667a:	623b      	str	r3, [r7, #32]
}
 800667c:	bf00      	nop
 800667e:	bf00      	nop
 8006680:	e7fd      	b.n	800667e <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006682:	68bb      	ldr	r3, [r7, #8]
 8006684:	2b00      	cmp	r3, #0
 8006686:	d103      	bne.n	8006690 <xQueueReceive+0x44>
 8006688:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800668a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800668c:	2b00      	cmp	r3, #0
 800668e:	d101      	bne.n	8006694 <xQueueReceive+0x48>
 8006690:	2301      	movs	r3, #1
 8006692:	e000      	b.n	8006696 <xQueueReceive+0x4a>
 8006694:	2300      	movs	r3, #0
 8006696:	2b00      	cmp	r3, #0
 8006698:	d10d      	bne.n	80066b6 <xQueueReceive+0x6a>
	__asm volatile
 800669a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800669e:	b672      	cpsid	i
 80066a0:	f383 8811 	msr	BASEPRI, r3
 80066a4:	f3bf 8f6f 	isb	sy
 80066a8:	f3bf 8f4f 	dsb	sy
 80066ac:	b662      	cpsie	i
 80066ae:	61fb      	str	r3, [r7, #28]
}
 80066b0:	bf00      	nop
 80066b2:	bf00      	nop
 80066b4:	e7fd      	b.n	80066b2 <xQueueReceive+0x66>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80066b6:	f001 f91f 	bl	80078f8 <xTaskGetSchedulerState>
 80066ba:	4603      	mov	r3, r0
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d102      	bne.n	80066c6 <xQueueReceive+0x7a>
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d101      	bne.n	80066ca <xQueueReceive+0x7e>
 80066c6:	2301      	movs	r3, #1
 80066c8:	e000      	b.n	80066cc <xQueueReceive+0x80>
 80066ca:	2300      	movs	r3, #0
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d10d      	bne.n	80066ec <xQueueReceive+0xa0>
	__asm volatile
 80066d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066d4:	b672      	cpsid	i
 80066d6:	f383 8811 	msr	BASEPRI, r3
 80066da:	f3bf 8f6f 	isb	sy
 80066de:	f3bf 8f4f 	dsb	sy
 80066e2:	b662      	cpsie	i
 80066e4:	61bb      	str	r3, [r7, #24]
}
 80066e6:	bf00      	nop
 80066e8:	bf00      	nop
 80066ea:	e7fd      	b.n	80066e8 <xQueueReceive+0x9c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80066ec:	f001 fe5e 	bl	80083ac <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80066f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066f4:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80066f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d01f      	beq.n	800673c <xQueueReceive+0xf0>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80066fc:	68b9      	ldr	r1, [r7, #8]
 80066fe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006700:	f000 f97e 	bl	8006a00 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006704:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006706:	1e5a      	subs	r2, r3, #1
 8006708:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800670a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800670c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800670e:	691b      	ldr	r3, [r3, #16]
 8006710:	2b00      	cmp	r3, #0
 8006712:	d00f      	beq.n	8006734 <xQueueReceive+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006714:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006716:	3310      	adds	r3, #16
 8006718:	4618      	mov	r0, r3
 800671a:	f000 ff1f 	bl	800755c <xTaskRemoveFromEventList>
 800671e:	4603      	mov	r3, r0
 8006720:	2b00      	cmp	r3, #0
 8006722:	d007      	beq.n	8006734 <xQueueReceive+0xe8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006724:	4b3c      	ldr	r3, [pc, #240]	@ (8006818 <xQueueReceive+0x1cc>)
 8006726:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800672a:	601a      	str	r2, [r3, #0]
 800672c:	f3bf 8f4f 	dsb	sy
 8006730:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006734:	f001 fe70 	bl	8008418 <vPortExitCritical>
				return pdPASS;
 8006738:	2301      	movs	r3, #1
 800673a:	e069      	b.n	8006810 <xQueueReceive+0x1c4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	2b00      	cmp	r3, #0
 8006740:	d103      	bne.n	800674a <xQueueReceive+0xfe>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006742:	f001 fe69 	bl	8008418 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006746:	2300      	movs	r3, #0
 8006748:	e062      	b.n	8006810 <xQueueReceive+0x1c4>
				}
				else if( xEntryTimeSet == pdFALSE )
 800674a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800674c:	2b00      	cmp	r3, #0
 800674e:	d106      	bne.n	800675e <xQueueReceive+0x112>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006750:	f107 0310 	add.w	r3, r7, #16
 8006754:	4618      	mov	r0, r3
 8006756:	f000 ff67 	bl	8007628 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800675a:	2301      	movs	r3, #1
 800675c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800675e:	f001 fe5b 	bl	8008418 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006762:	f000 fcc3 	bl	80070ec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006766:	f001 fe21 	bl	80083ac <vPortEnterCritical>
 800676a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800676c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006770:	b25b      	sxtb	r3, r3
 8006772:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006776:	d103      	bne.n	8006780 <xQueueReceive+0x134>
 8006778:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800677a:	2200      	movs	r2, #0
 800677c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006780:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006782:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006786:	b25b      	sxtb	r3, r3
 8006788:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800678c:	d103      	bne.n	8006796 <xQueueReceive+0x14a>
 800678e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006790:	2200      	movs	r2, #0
 8006792:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006796:	f001 fe3f 	bl	8008418 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800679a:	1d3a      	adds	r2, r7, #4
 800679c:	f107 0310 	add.w	r3, r7, #16
 80067a0:	4611      	mov	r1, r2
 80067a2:	4618      	mov	r0, r3
 80067a4:	f000 ff56 	bl	8007654 <xTaskCheckForTimeOut>
 80067a8:	4603      	mov	r3, r0
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d123      	bne.n	80067f6 <xQueueReceive+0x1aa>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80067ae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80067b0:	f000 f99e 	bl	8006af0 <prvIsQueueEmpty>
 80067b4:	4603      	mov	r3, r0
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d017      	beq.n	80067ea <xQueueReceive+0x19e>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80067ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067bc:	3324      	adds	r3, #36	@ 0x24
 80067be:	687a      	ldr	r2, [r7, #4]
 80067c0:	4611      	mov	r1, r2
 80067c2:	4618      	mov	r0, r3
 80067c4:	f000 fe74 	bl	80074b0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80067c8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80067ca:	f000 f93f 	bl	8006a4c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80067ce:	f000 fc9b 	bl	8007108 <xTaskResumeAll>
 80067d2:	4603      	mov	r3, r0
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d189      	bne.n	80066ec <xQueueReceive+0xa0>
				{
					portYIELD_WITHIN_API();
 80067d8:	4b0f      	ldr	r3, [pc, #60]	@ (8006818 <xQueueReceive+0x1cc>)
 80067da:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80067de:	601a      	str	r2, [r3, #0]
 80067e0:	f3bf 8f4f 	dsb	sy
 80067e4:	f3bf 8f6f 	isb	sy
 80067e8:	e780      	b.n	80066ec <xQueueReceive+0xa0>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80067ea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80067ec:	f000 f92e 	bl	8006a4c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80067f0:	f000 fc8a 	bl	8007108 <xTaskResumeAll>
 80067f4:	e77a      	b.n	80066ec <xQueueReceive+0xa0>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80067f6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80067f8:	f000 f928 	bl	8006a4c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80067fc:	f000 fc84 	bl	8007108 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006800:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006802:	f000 f975 	bl	8006af0 <prvIsQueueEmpty>
 8006806:	4603      	mov	r3, r0
 8006808:	2b00      	cmp	r3, #0
 800680a:	f43f af6f 	beq.w	80066ec <xQueueReceive+0xa0>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800680e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006810:	4618      	mov	r0, r3
 8006812:	3730      	adds	r7, #48	@ 0x30
 8006814:	46bd      	mov	sp, r7
 8006816:	bd80      	pop	{r7, pc}
 8006818:	e000ed04 	.word	0xe000ed04

0800681c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800681c:	b580      	push	{r7, lr}
 800681e:	b08e      	sub	sp, #56	@ 0x38
 8006820:	af00      	add	r7, sp, #0
 8006822:	60f8      	str	r0, [r7, #12]
 8006824:	60b9      	str	r1, [r7, #8]
 8006826:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800682c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800682e:	2b00      	cmp	r3, #0
 8006830:	d10d      	bne.n	800684e <xQueueReceiveFromISR+0x32>
	__asm volatile
 8006832:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006836:	b672      	cpsid	i
 8006838:	f383 8811 	msr	BASEPRI, r3
 800683c:	f3bf 8f6f 	isb	sy
 8006840:	f3bf 8f4f 	dsb	sy
 8006844:	b662      	cpsie	i
 8006846:	623b      	str	r3, [r7, #32]
}
 8006848:	bf00      	nop
 800684a:	bf00      	nop
 800684c:	e7fd      	b.n	800684a <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800684e:	68bb      	ldr	r3, [r7, #8]
 8006850:	2b00      	cmp	r3, #0
 8006852:	d103      	bne.n	800685c <xQueueReceiveFromISR+0x40>
 8006854:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006856:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006858:	2b00      	cmp	r3, #0
 800685a:	d101      	bne.n	8006860 <xQueueReceiveFromISR+0x44>
 800685c:	2301      	movs	r3, #1
 800685e:	e000      	b.n	8006862 <xQueueReceiveFromISR+0x46>
 8006860:	2300      	movs	r3, #0
 8006862:	2b00      	cmp	r3, #0
 8006864:	d10d      	bne.n	8006882 <xQueueReceiveFromISR+0x66>
	__asm volatile
 8006866:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800686a:	b672      	cpsid	i
 800686c:	f383 8811 	msr	BASEPRI, r3
 8006870:	f3bf 8f6f 	isb	sy
 8006874:	f3bf 8f4f 	dsb	sy
 8006878:	b662      	cpsie	i
 800687a:	61fb      	str	r3, [r7, #28]
}
 800687c:	bf00      	nop
 800687e:	bf00      	nop
 8006880:	e7fd      	b.n	800687e <xQueueReceiveFromISR+0x62>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006882:	f001 fe7b 	bl	800857c <vPortValidateInterruptPriority>
	__asm volatile
 8006886:	f3ef 8211 	mrs	r2, BASEPRI
 800688a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800688e:	b672      	cpsid	i
 8006890:	f383 8811 	msr	BASEPRI, r3
 8006894:	f3bf 8f6f 	isb	sy
 8006898:	f3bf 8f4f 	dsb	sy
 800689c:	b662      	cpsie	i
 800689e:	61ba      	str	r2, [r7, #24]
 80068a0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80068a2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80068a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80068a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068aa:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80068ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d02f      	beq.n	8006912 <xQueueReceiveFromISR+0xf6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80068b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068b4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80068b8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80068bc:	68b9      	ldr	r1, [r7, #8]
 80068be:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80068c0:	f000 f89e 	bl	8006a00 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80068c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068c6:	1e5a      	subs	r2, r3, #1
 80068c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068ca:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80068cc:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80068d0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80068d4:	d112      	bne.n	80068fc <xQueueReceiveFromISR+0xe0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80068d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068d8:	691b      	ldr	r3, [r3, #16]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d016      	beq.n	800690c <xQueueReceiveFromISR+0xf0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80068de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068e0:	3310      	adds	r3, #16
 80068e2:	4618      	mov	r0, r3
 80068e4:	f000 fe3a 	bl	800755c <xTaskRemoveFromEventList>
 80068e8:	4603      	mov	r3, r0
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d00e      	beq.n	800690c <xQueueReceiveFromISR+0xf0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d00b      	beq.n	800690c <xQueueReceiveFromISR+0xf0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	2201      	movs	r2, #1
 80068f8:	601a      	str	r2, [r3, #0]
 80068fa:	e007      	b.n	800690c <xQueueReceiveFromISR+0xf0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80068fc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006900:	3301      	adds	r3, #1
 8006902:	b2db      	uxtb	r3, r3
 8006904:	b25a      	sxtb	r2, r3
 8006906:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006908:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800690c:	2301      	movs	r3, #1
 800690e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006910:	e001      	b.n	8006916 <xQueueReceiveFromISR+0xfa>
		}
		else
		{
			xReturn = pdFAIL;
 8006912:	2300      	movs	r3, #0
 8006914:	637b      	str	r3, [r7, #52]	@ 0x34
 8006916:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006918:	613b      	str	r3, [r7, #16]
	__asm volatile
 800691a:	693b      	ldr	r3, [r7, #16]
 800691c:	f383 8811 	msr	BASEPRI, r3
}
 8006920:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006922:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8006924:	4618      	mov	r0, r3
 8006926:	3738      	adds	r7, #56	@ 0x38
 8006928:	46bd      	mov	sp, r7
 800692a:	bd80      	pop	{r7, pc}

0800692c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800692c:	b580      	push	{r7, lr}
 800692e:	b086      	sub	sp, #24
 8006930:	af00      	add	r7, sp, #0
 8006932:	60f8      	str	r0, [r7, #12]
 8006934:	60b9      	str	r1, [r7, #8]
 8006936:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006938:	2300      	movs	r3, #0
 800693a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006940:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006946:	2b00      	cmp	r3, #0
 8006948:	d10d      	bne.n	8006966 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	2b00      	cmp	r3, #0
 8006950:	d14d      	bne.n	80069ee <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	689b      	ldr	r3, [r3, #8]
 8006956:	4618      	mov	r0, r3
 8006958:	f000 ffec 	bl	8007934 <xTaskPriorityDisinherit>
 800695c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	2200      	movs	r2, #0
 8006962:	609a      	str	r2, [r3, #8]
 8006964:	e043      	b.n	80069ee <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	2b00      	cmp	r3, #0
 800696a:	d119      	bne.n	80069a0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	6858      	ldr	r0, [r3, #4]
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006974:	461a      	mov	r2, r3
 8006976:	68b9      	ldr	r1, [r7, #8]
 8006978:	f002 fee7 	bl	800974a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	685a      	ldr	r2, [r3, #4]
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006984:	441a      	add	r2, r3
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	685a      	ldr	r2, [r3, #4]
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	689b      	ldr	r3, [r3, #8]
 8006992:	429a      	cmp	r2, r3
 8006994:	d32b      	bcc.n	80069ee <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	681a      	ldr	r2, [r3, #0]
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	605a      	str	r2, [r3, #4]
 800699e:	e026      	b.n	80069ee <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	68d8      	ldr	r0, [r3, #12]
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069a8:	461a      	mov	r2, r3
 80069aa:	68b9      	ldr	r1, [r7, #8]
 80069ac:	f002 fecd 	bl	800974a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	68da      	ldr	r2, [r3, #12]
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069b8:	425b      	negs	r3, r3
 80069ba:	441a      	add	r2, r3
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	68da      	ldr	r2, [r3, #12]
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	429a      	cmp	r2, r3
 80069ca:	d207      	bcs.n	80069dc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	689a      	ldr	r2, [r3, #8]
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069d4:	425b      	negs	r3, r3
 80069d6:	441a      	add	r2, r3
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	2b02      	cmp	r3, #2
 80069e0:	d105      	bne.n	80069ee <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80069e2:	693b      	ldr	r3, [r7, #16]
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d002      	beq.n	80069ee <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80069e8:	693b      	ldr	r3, [r7, #16]
 80069ea:	3b01      	subs	r3, #1
 80069ec:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80069ee:	693b      	ldr	r3, [r7, #16]
 80069f0:	1c5a      	adds	r2, r3, #1
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80069f6:	697b      	ldr	r3, [r7, #20]
}
 80069f8:	4618      	mov	r0, r3
 80069fa:	3718      	adds	r7, #24
 80069fc:	46bd      	mov	sp, r7
 80069fe:	bd80      	pop	{r7, pc}

08006a00 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006a00:	b580      	push	{r7, lr}
 8006a02:	b082      	sub	sp, #8
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	6078      	str	r0, [r7, #4]
 8006a08:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d018      	beq.n	8006a44 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	68da      	ldr	r2, [r3, #12]
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a1a:	441a      	add	r2, r3
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	68da      	ldr	r2, [r3, #12]
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	689b      	ldr	r3, [r3, #8]
 8006a28:	429a      	cmp	r2, r3
 8006a2a:	d303      	bcc.n	8006a34 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681a      	ldr	r2, [r3, #0]
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	68d9      	ldr	r1, [r3, #12]
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a3c:	461a      	mov	r2, r3
 8006a3e:	6838      	ldr	r0, [r7, #0]
 8006a40:	f002 fe83 	bl	800974a <memcpy>
	}
}
 8006a44:	bf00      	nop
 8006a46:	3708      	adds	r7, #8
 8006a48:	46bd      	mov	sp, r7
 8006a4a:	bd80      	pop	{r7, pc}

08006a4c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006a4c:	b580      	push	{r7, lr}
 8006a4e:	b084      	sub	sp, #16
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006a54:	f001 fcaa 	bl	80083ac <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006a5e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006a60:	e011      	b.n	8006a86 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d012      	beq.n	8006a90 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	3324      	adds	r3, #36	@ 0x24
 8006a6e:	4618      	mov	r0, r3
 8006a70:	f000 fd74 	bl	800755c <xTaskRemoveFromEventList>
 8006a74:	4603      	mov	r3, r0
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d001      	beq.n	8006a7e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006a7a:	f000 fe53 	bl	8007724 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006a7e:	7bfb      	ldrb	r3, [r7, #15]
 8006a80:	3b01      	subs	r3, #1
 8006a82:	b2db      	uxtb	r3, r3
 8006a84:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006a86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	dce9      	bgt.n	8006a62 <prvUnlockQueue+0x16>
 8006a8e:	e000      	b.n	8006a92 <prvUnlockQueue+0x46>
					break;
 8006a90:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	22ff      	movs	r2, #255	@ 0xff
 8006a96:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8006a9a:	f001 fcbd 	bl	8008418 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006a9e:	f001 fc85 	bl	80083ac <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006aa8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006aaa:	e011      	b.n	8006ad0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	691b      	ldr	r3, [r3, #16]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d012      	beq.n	8006ada <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	3310      	adds	r3, #16
 8006ab8:	4618      	mov	r0, r3
 8006aba:	f000 fd4f 	bl	800755c <xTaskRemoveFromEventList>
 8006abe:	4603      	mov	r3, r0
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d001      	beq.n	8006ac8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006ac4:	f000 fe2e 	bl	8007724 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006ac8:	7bbb      	ldrb	r3, [r7, #14]
 8006aca:	3b01      	subs	r3, #1
 8006acc:	b2db      	uxtb	r3, r3
 8006ace:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006ad0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	dce9      	bgt.n	8006aac <prvUnlockQueue+0x60>
 8006ad8:	e000      	b.n	8006adc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006ada:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	22ff      	movs	r2, #255	@ 0xff
 8006ae0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8006ae4:	f001 fc98 	bl	8008418 <vPortExitCritical>
}
 8006ae8:	bf00      	nop
 8006aea:	3710      	adds	r7, #16
 8006aec:	46bd      	mov	sp, r7
 8006aee:	bd80      	pop	{r7, pc}

08006af0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006af0:	b580      	push	{r7, lr}
 8006af2:	b084      	sub	sp, #16
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006af8:	f001 fc58 	bl	80083ac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d102      	bne.n	8006b0a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006b04:	2301      	movs	r3, #1
 8006b06:	60fb      	str	r3, [r7, #12]
 8006b08:	e001      	b.n	8006b0e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006b0a:	2300      	movs	r3, #0
 8006b0c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006b0e:	f001 fc83 	bl	8008418 <vPortExitCritical>

	return xReturn;
 8006b12:	68fb      	ldr	r3, [r7, #12]
}
 8006b14:	4618      	mov	r0, r3
 8006b16:	3710      	adds	r7, #16
 8006b18:	46bd      	mov	sp, r7
 8006b1a:	bd80      	pop	{r7, pc}

08006b1c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006b1c:	b580      	push	{r7, lr}
 8006b1e:	b084      	sub	sp, #16
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006b24:	f001 fc42 	bl	80083ac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b30:	429a      	cmp	r2, r3
 8006b32:	d102      	bne.n	8006b3a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006b34:	2301      	movs	r3, #1
 8006b36:	60fb      	str	r3, [r7, #12]
 8006b38:	e001      	b.n	8006b3e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006b3e:	f001 fc6b 	bl	8008418 <vPortExitCritical>

	return xReturn;
 8006b42:	68fb      	ldr	r3, [r7, #12]
}
 8006b44:	4618      	mov	r0, r3
 8006b46:	3710      	adds	r7, #16
 8006b48:	46bd      	mov	sp, r7
 8006b4a:	bd80      	pop	{r7, pc}

08006b4c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006b4c:	b480      	push	{r7}
 8006b4e:	b085      	sub	sp, #20
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	6078      	str	r0, [r7, #4]
 8006b54:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006b56:	2300      	movs	r3, #0
 8006b58:	60fb      	str	r3, [r7, #12]
 8006b5a:	e014      	b.n	8006b86 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006b5c:	4a0f      	ldr	r2, [pc, #60]	@ (8006b9c <vQueueAddToRegistry+0x50>)
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d10b      	bne.n	8006b80 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006b68:	490c      	ldr	r1, [pc, #48]	@ (8006b9c <vQueueAddToRegistry+0x50>)
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	683a      	ldr	r2, [r7, #0]
 8006b6e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006b72:	4a0a      	ldr	r2, [pc, #40]	@ (8006b9c <vQueueAddToRegistry+0x50>)
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	00db      	lsls	r3, r3, #3
 8006b78:	4413      	add	r3, r2
 8006b7a:	687a      	ldr	r2, [r7, #4]
 8006b7c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006b7e:	e006      	b.n	8006b8e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	3301      	adds	r3, #1
 8006b84:	60fb      	str	r3, [r7, #12]
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	2b07      	cmp	r3, #7
 8006b8a:	d9e7      	bls.n	8006b5c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006b8c:	bf00      	nop
 8006b8e:	bf00      	nop
 8006b90:	3714      	adds	r7, #20
 8006b92:	46bd      	mov	sp, r7
 8006b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b98:	4770      	bx	lr
 8006b9a:	bf00      	nop
 8006b9c:	200010f0 	.word	0x200010f0

08006ba0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006ba0:	b580      	push	{r7, lr}
 8006ba2:	b086      	sub	sp, #24
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	60f8      	str	r0, [r7, #12]
 8006ba8:	60b9      	str	r1, [r7, #8]
 8006baa:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006bb0:	f001 fbfc 	bl	80083ac <vPortEnterCritical>
 8006bb4:	697b      	ldr	r3, [r7, #20]
 8006bb6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006bba:	b25b      	sxtb	r3, r3
 8006bbc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006bc0:	d103      	bne.n	8006bca <vQueueWaitForMessageRestricted+0x2a>
 8006bc2:	697b      	ldr	r3, [r7, #20]
 8006bc4:	2200      	movs	r2, #0
 8006bc6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006bca:	697b      	ldr	r3, [r7, #20]
 8006bcc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006bd0:	b25b      	sxtb	r3, r3
 8006bd2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006bd6:	d103      	bne.n	8006be0 <vQueueWaitForMessageRestricted+0x40>
 8006bd8:	697b      	ldr	r3, [r7, #20]
 8006bda:	2200      	movs	r2, #0
 8006bdc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006be0:	f001 fc1a 	bl	8008418 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006be4:	697b      	ldr	r3, [r7, #20]
 8006be6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d106      	bne.n	8006bfa <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006bec:	697b      	ldr	r3, [r7, #20]
 8006bee:	3324      	adds	r3, #36	@ 0x24
 8006bf0:	687a      	ldr	r2, [r7, #4]
 8006bf2:	68b9      	ldr	r1, [r7, #8]
 8006bf4:	4618      	mov	r0, r3
 8006bf6:	f000 fc83 	bl	8007500 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006bfa:	6978      	ldr	r0, [r7, #20]
 8006bfc:	f7ff ff26 	bl	8006a4c <prvUnlockQueue>
	}
 8006c00:	bf00      	nop
 8006c02:	3718      	adds	r7, #24
 8006c04:	46bd      	mov	sp, r7
 8006c06:	bd80      	pop	{r7, pc}

08006c08 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006c08:	b580      	push	{r7, lr}
 8006c0a:	b08e      	sub	sp, #56	@ 0x38
 8006c0c:	af04      	add	r7, sp, #16
 8006c0e:	60f8      	str	r0, [r7, #12]
 8006c10:	60b9      	str	r1, [r7, #8]
 8006c12:	607a      	str	r2, [r7, #4]
 8006c14:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006c16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d10d      	bne.n	8006c38 <xTaskCreateStatic+0x30>
	__asm volatile
 8006c1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c20:	b672      	cpsid	i
 8006c22:	f383 8811 	msr	BASEPRI, r3
 8006c26:	f3bf 8f6f 	isb	sy
 8006c2a:	f3bf 8f4f 	dsb	sy
 8006c2e:	b662      	cpsie	i
 8006c30:	623b      	str	r3, [r7, #32]
}
 8006c32:	bf00      	nop
 8006c34:	bf00      	nop
 8006c36:	e7fd      	b.n	8006c34 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8006c38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d10d      	bne.n	8006c5a <xTaskCreateStatic+0x52>
	__asm volatile
 8006c3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c42:	b672      	cpsid	i
 8006c44:	f383 8811 	msr	BASEPRI, r3
 8006c48:	f3bf 8f6f 	isb	sy
 8006c4c:	f3bf 8f4f 	dsb	sy
 8006c50:	b662      	cpsie	i
 8006c52:	61fb      	str	r3, [r7, #28]
}
 8006c54:	bf00      	nop
 8006c56:	bf00      	nop
 8006c58:	e7fd      	b.n	8006c56 <xTaskCreateStatic+0x4e>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006c5a:	23a8      	movs	r3, #168	@ 0xa8
 8006c5c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006c5e:	693b      	ldr	r3, [r7, #16]
 8006c60:	2ba8      	cmp	r3, #168	@ 0xa8
 8006c62:	d00d      	beq.n	8006c80 <xTaskCreateStatic+0x78>
	__asm volatile
 8006c64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c68:	b672      	cpsid	i
 8006c6a:	f383 8811 	msr	BASEPRI, r3
 8006c6e:	f3bf 8f6f 	isb	sy
 8006c72:	f3bf 8f4f 	dsb	sy
 8006c76:	b662      	cpsie	i
 8006c78:	61bb      	str	r3, [r7, #24]
}
 8006c7a:	bf00      	nop
 8006c7c:	bf00      	nop
 8006c7e:	e7fd      	b.n	8006c7c <xTaskCreateStatic+0x74>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006c80:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006c82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d01e      	beq.n	8006cc6 <xTaskCreateStatic+0xbe>
 8006c88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d01b      	beq.n	8006cc6 <xTaskCreateStatic+0xbe>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006c8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c90:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006c92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c94:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006c96:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006c98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c9a:	2202      	movs	r2, #2
 8006c9c:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006ca0:	2300      	movs	r3, #0
 8006ca2:	9303      	str	r3, [sp, #12]
 8006ca4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ca6:	9302      	str	r3, [sp, #8]
 8006ca8:	f107 0314 	add.w	r3, r7, #20
 8006cac:	9301      	str	r3, [sp, #4]
 8006cae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cb0:	9300      	str	r3, [sp, #0]
 8006cb2:	683b      	ldr	r3, [r7, #0]
 8006cb4:	687a      	ldr	r2, [r7, #4]
 8006cb6:	68b9      	ldr	r1, [r7, #8]
 8006cb8:	68f8      	ldr	r0, [r7, #12]
 8006cba:	f000 f851 	bl	8006d60 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006cbe:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006cc0:	f000 f8f8 	bl	8006eb4 <prvAddNewTaskToReadyList>
 8006cc4:	e001      	b.n	8006cca <xTaskCreateStatic+0xc2>
		}
		else
		{
			xReturn = NULL;
 8006cc6:	2300      	movs	r3, #0
 8006cc8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006cca:	697b      	ldr	r3, [r7, #20]
	}
 8006ccc:	4618      	mov	r0, r3
 8006cce:	3728      	adds	r7, #40	@ 0x28
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	bd80      	pop	{r7, pc}

08006cd4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006cd4:	b580      	push	{r7, lr}
 8006cd6:	b08c      	sub	sp, #48	@ 0x30
 8006cd8:	af04      	add	r7, sp, #16
 8006cda:	60f8      	str	r0, [r7, #12]
 8006cdc:	60b9      	str	r1, [r7, #8]
 8006cde:	603b      	str	r3, [r7, #0]
 8006ce0:	4613      	mov	r3, r2
 8006ce2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006ce4:	88fb      	ldrh	r3, [r7, #6]
 8006ce6:	009b      	lsls	r3, r3, #2
 8006ce8:	4618      	mov	r0, r3
 8006cea:	f001 fc8d 	bl	8008608 <pvPortMalloc>
 8006cee:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006cf0:	697b      	ldr	r3, [r7, #20]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d00e      	beq.n	8006d14 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006cf6:	20a8      	movs	r0, #168	@ 0xa8
 8006cf8:	f001 fc86 	bl	8008608 <pvPortMalloc>
 8006cfc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006cfe:	69fb      	ldr	r3, [r7, #28]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d003      	beq.n	8006d0c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006d04:	69fb      	ldr	r3, [r7, #28]
 8006d06:	697a      	ldr	r2, [r7, #20]
 8006d08:	631a      	str	r2, [r3, #48]	@ 0x30
 8006d0a:	e005      	b.n	8006d18 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006d0c:	6978      	ldr	r0, [r7, #20]
 8006d0e:	f001 fd49 	bl	80087a4 <vPortFree>
 8006d12:	e001      	b.n	8006d18 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006d14:	2300      	movs	r3, #0
 8006d16:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006d18:	69fb      	ldr	r3, [r7, #28]
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d017      	beq.n	8006d4e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006d1e:	69fb      	ldr	r3, [r7, #28]
 8006d20:	2200      	movs	r2, #0
 8006d22:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006d26:	88fa      	ldrh	r2, [r7, #6]
 8006d28:	2300      	movs	r3, #0
 8006d2a:	9303      	str	r3, [sp, #12]
 8006d2c:	69fb      	ldr	r3, [r7, #28]
 8006d2e:	9302      	str	r3, [sp, #8]
 8006d30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d32:	9301      	str	r3, [sp, #4]
 8006d34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d36:	9300      	str	r3, [sp, #0]
 8006d38:	683b      	ldr	r3, [r7, #0]
 8006d3a:	68b9      	ldr	r1, [r7, #8]
 8006d3c:	68f8      	ldr	r0, [r7, #12]
 8006d3e:	f000 f80f 	bl	8006d60 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006d42:	69f8      	ldr	r0, [r7, #28]
 8006d44:	f000 f8b6 	bl	8006eb4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006d48:	2301      	movs	r3, #1
 8006d4a:	61bb      	str	r3, [r7, #24]
 8006d4c:	e002      	b.n	8006d54 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006d4e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006d52:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006d54:	69bb      	ldr	r3, [r7, #24]
	}
 8006d56:	4618      	mov	r0, r3
 8006d58:	3720      	adds	r7, #32
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	bd80      	pop	{r7, pc}
	...

08006d60 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006d60:	b580      	push	{r7, lr}
 8006d62:	b088      	sub	sp, #32
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	60f8      	str	r0, [r7, #12]
 8006d68:	60b9      	str	r1, [r7, #8]
 8006d6a:	607a      	str	r2, [r7, #4]
 8006d6c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006d6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d70:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	009b      	lsls	r3, r3, #2
 8006d76:	461a      	mov	r2, r3
 8006d78:	21a5      	movs	r1, #165	@ 0xa5
 8006d7a:	f002 fc08 	bl	800958e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006d7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d80:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006d82:	6879      	ldr	r1, [r7, #4]
 8006d84:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8006d88:	440b      	add	r3, r1
 8006d8a:	009b      	lsls	r3, r3, #2
 8006d8c:	4413      	add	r3, r2
 8006d8e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006d90:	69bb      	ldr	r3, [r7, #24]
 8006d92:	f023 0307 	bic.w	r3, r3, #7
 8006d96:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006d98:	69bb      	ldr	r3, [r7, #24]
 8006d9a:	f003 0307 	and.w	r3, r3, #7
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d00d      	beq.n	8006dbe <prvInitialiseNewTask+0x5e>
	__asm volatile
 8006da2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006da6:	b672      	cpsid	i
 8006da8:	f383 8811 	msr	BASEPRI, r3
 8006dac:	f3bf 8f6f 	isb	sy
 8006db0:	f3bf 8f4f 	dsb	sy
 8006db4:	b662      	cpsie	i
 8006db6:	617b      	str	r3, [r7, #20]
}
 8006db8:	bf00      	nop
 8006dba:	bf00      	nop
 8006dbc:	e7fd      	b.n	8006dba <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006dbe:	68bb      	ldr	r3, [r7, #8]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d01f      	beq.n	8006e04 <prvInitialiseNewTask+0xa4>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006dc4:	2300      	movs	r3, #0
 8006dc6:	61fb      	str	r3, [r7, #28]
 8006dc8:	e012      	b.n	8006df0 <prvInitialiseNewTask+0x90>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006dca:	68ba      	ldr	r2, [r7, #8]
 8006dcc:	69fb      	ldr	r3, [r7, #28]
 8006dce:	4413      	add	r3, r2
 8006dd0:	7819      	ldrb	r1, [r3, #0]
 8006dd2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006dd4:	69fb      	ldr	r3, [r7, #28]
 8006dd6:	4413      	add	r3, r2
 8006dd8:	3334      	adds	r3, #52	@ 0x34
 8006dda:	460a      	mov	r2, r1
 8006ddc:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006dde:	68ba      	ldr	r2, [r7, #8]
 8006de0:	69fb      	ldr	r3, [r7, #28]
 8006de2:	4413      	add	r3, r2
 8006de4:	781b      	ldrb	r3, [r3, #0]
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d006      	beq.n	8006df8 <prvInitialiseNewTask+0x98>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006dea:	69fb      	ldr	r3, [r7, #28]
 8006dec:	3301      	adds	r3, #1
 8006dee:	61fb      	str	r3, [r7, #28]
 8006df0:	69fb      	ldr	r3, [r7, #28]
 8006df2:	2b0f      	cmp	r3, #15
 8006df4:	d9e9      	bls.n	8006dca <prvInitialiseNewTask+0x6a>
 8006df6:	e000      	b.n	8006dfa <prvInitialiseNewTask+0x9a>
			{
				break;
 8006df8:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006dfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dfc:	2200      	movs	r2, #0
 8006dfe:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006e02:	e003      	b.n	8006e0c <prvInitialiseNewTask+0xac>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006e04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e06:	2200      	movs	r2, #0
 8006e08:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006e0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e0e:	2b37      	cmp	r3, #55	@ 0x37
 8006e10:	d901      	bls.n	8006e16 <prvInitialiseNewTask+0xb6>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006e12:	2337      	movs	r3, #55	@ 0x37
 8006e14:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006e16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e18:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006e1a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006e1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e1e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006e20:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006e22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e24:	2200      	movs	r2, #0
 8006e26:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006e28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e2a:	3304      	adds	r3, #4
 8006e2c:	4618      	mov	r0, r3
 8006e2e:	f7ff f871 	bl	8005f14 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006e32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e34:	3318      	adds	r3, #24
 8006e36:	4618      	mov	r0, r3
 8006e38:	f7ff f86c 	bl	8005f14 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006e3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e3e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006e40:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006e42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e44:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006e48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e4a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006e4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e4e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006e50:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006e52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e54:	2200      	movs	r2, #0
 8006e56:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006e5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e5c:	2200      	movs	r2, #0
 8006e5e:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006e62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e64:	3354      	adds	r3, #84	@ 0x54
 8006e66:	224c      	movs	r2, #76	@ 0x4c
 8006e68:	2100      	movs	r1, #0
 8006e6a:	4618      	mov	r0, r3
 8006e6c:	f002 fb8f 	bl	800958e <memset>
 8006e70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e72:	4a0d      	ldr	r2, [pc, #52]	@ (8006ea8 <prvInitialiseNewTask+0x148>)
 8006e74:	659a      	str	r2, [r3, #88]	@ 0x58
 8006e76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e78:	4a0c      	ldr	r2, [pc, #48]	@ (8006eac <prvInitialiseNewTask+0x14c>)
 8006e7a:	65da      	str	r2, [r3, #92]	@ 0x5c
 8006e7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e7e:	4a0c      	ldr	r2, [pc, #48]	@ (8006eb0 <prvInitialiseNewTask+0x150>)
 8006e80:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006e82:	683a      	ldr	r2, [r7, #0]
 8006e84:	68f9      	ldr	r1, [r7, #12]
 8006e86:	69b8      	ldr	r0, [r7, #24]
 8006e88:	f001 f984 	bl	8008194 <pxPortInitialiseStack>
 8006e8c:	4602      	mov	r2, r0
 8006e8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e90:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006e92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d002      	beq.n	8006e9e <prvInitialiseNewTask+0x13e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006e98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e9a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006e9c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006e9e:	bf00      	nop
 8006ea0:	3720      	adds	r7, #32
 8006ea2:	46bd      	mov	sp, r7
 8006ea4:	bd80      	pop	{r7, pc}
 8006ea6:	bf00      	nop
 8006ea8:	2000537c 	.word	0x2000537c
 8006eac:	200053e4 	.word	0x200053e4
 8006eb0:	2000544c 	.word	0x2000544c

08006eb4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006eb4:	b580      	push	{r7, lr}
 8006eb6:	b082      	sub	sp, #8
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006ebc:	f001 fa76 	bl	80083ac <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006ec0:	4b2d      	ldr	r3, [pc, #180]	@ (8006f78 <prvAddNewTaskToReadyList+0xc4>)
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	3301      	adds	r3, #1
 8006ec6:	4a2c      	ldr	r2, [pc, #176]	@ (8006f78 <prvAddNewTaskToReadyList+0xc4>)
 8006ec8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006eca:	4b2c      	ldr	r3, [pc, #176]	@ (8006f7c <prvAddNewTaskToReadyList+0xc8>)
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d109      	bne.n	8006ee6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006ed2:	4a2a      	ldr	r2, [pc, #168]	@ (8006f7c <prvAddNewTaskToReadyList+0xc8>)
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006ed8:	4b27      	ldr	r3, [pc, #156]	@ (8006f78 <prvAddNewTaskToReadyList+0xc4>)
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	2b01      	cmp	r3, #1
 8006ede:	d110      	bne.n	8006f02 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006ee0:	f000 fc44 	bl	800776c <prvInitialiseTaskLists>
 8006ee4:	e00d      	b.n	8006f02 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006ee6:	4b26      	ldr	r3, [pc, #152]	@ (8006f80 <prvAddNewTaskToReadyList+0xcc>)
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d109      	bne.n	8006f02 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006eee:	4b23      	ldr	r3, [pc, #140]	@ (8006f7c <prvAddNewTaskToReadyList+0xc8>)
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ef8:	429a      	cmp	r2, r3
 8006efa:	d802      	bhi.n	8006f02 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006efc:	4a1f      	ldr	r2, [pc, #124]	@ (8006f7c <prvAddNewTaskToReadyList+0xc8>)
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006f02:	4b20      	ldr	r3, [pc, #128]	@ (8006f84 <prvAddNewTaskToReadyList+0xd0>)
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	3301      	adds	r3, #1
 8006f08:	4a1e      	ldr	r2, [pc, #120]	@ (8006f84 <prvAddNewTaskToReadyList+0xd0>)
 8006f0a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006f0c:	4b1d      	ldr	r3, [pc, #116]	@ (8006f84 <prvAddNewTaskToReadyList+0xd0>)
 8006f0e:	681a      	ldr	r2, [r3, #0]
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f18:	4b1b      	ldr	r3, [pc, #108]	@ (8006f88 <prvAddNewTaskToReadyList+0xd4>)
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	429a      	cmp	r2, r3
 8006f1e:	d903      	bls.n	8006f28 <prvAddNewTaskToReadyList+0x74>
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f24:	4a18      	ldr	r2, [pc, #96]	@ (8006f88 <prvAddNewTaskToReadyList+0xd4>)
 8006f26:	6013      	str	r3, [r2, #0]
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f2c:	4613      	mov	r3, r2
 8006f2e:	009b      	lsls	r3, r3, #2
 8006f30:	4413      	add	r3, r2
 8006f32:	009b      	lsls	r3, r3, #2
 8006f34:	4a15      	ldr	r2, [pc, #84]	@ (8006f8c <prvAddNewTaskToReadyList+0xd8>)
 8006f36:	441a      	add	r2, r3
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	3304      	adds	r3, #4
 8006f3c:	4619      	mov	r1, r3
 8006f3e:	4610      	mov	r0, r2
 8006f40:	f7fe fff5 	bl	8005f2e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006f44:	f001 fa68 	bl	8008418 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006f48:	4b0d      	ldr	r3, [pc, #52]	@ (8006f80 <prvAddNewTaskToReadyList+0xcc>)
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d00e      	beq.n	8006f6e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006f50:	4b0a      	ldr	r3, [pc, #40]	@ (8006f7c <prvAddNewTaskToReadyList+0xc8>)
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f5a:	429a      	cmp	r2, r3
 8006f5c:	d207      	bcs.n	8006f6e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006f5e:	4b0c      	ldr	r3, [pc, #48]	@ (8006f90 <prvAddNewTaskToReadyList+0xdc>)
 8006f60:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006f64:	601a      	str	r2, [r3, #0]
 8006f66:	f3bf 8f4f 	dsb	sy
 8006f6a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006f6e:	bf00      	nop
 8006f70:	3708      	adds	r7, #8
 8006f72:	46bd      	mov	sp, r7
 8006f74:	bd80      	pop	{r7, pc}
 8006f76:	bf00      	nop
 8006f78:	20001604 	.word	0x20001604
 8006f7c:	20001130 	.word	0x20001130
 8006f80:	20001610 	.word	0x20001610
 8006f84:	20001620 	.word	0x20001620
 8006f88:	2000160c 	.word	0x2000160c
 8006f8c:	20001134 	.word	0x20001134
 8006f90:	e000ed04 	.word	0xe000ed04

08006f94 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006f94:	b580      	push	{r7, lr}
 8006f96:	b084      	sub	sp, #16
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006f9c:	2300      	movs	r3, #0
 8006f9e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d01a      	beq.n	8006fdc <vTaskDelay+0x48>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006fa6:	4b15      	ldr	r3, [pc, #84]	@ (8006ffc <vTaskDelay+0x68>)
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d00d      	beq.n	8006fca <vTaskDelay+0x36>
	__asm volatile
 8006fae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fb2:	b672      	cpsid	i
 8006fb4:	f383 8811 	msr	BASEPRI, r3
 8006fb8:	f3bf 8f6f 	isb	sy
 8006fbc:	f3bf 8f4f 	dsb	sy
 8006fc0:	b662      	cpsie	i
 8006fc2:	60bb      	str	r3, [r7, #8]
}
 8006fc4:	bf00      	nop
 8006fc6:	bf00      	nop
 8006fc8:	e7fd      	b.n	8006fc6 <vTaskDelay+0x32>
			vTaskSuspendAll();
 8006fca:	f000 f88f 	bl	80070ec <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006fce:	2100      	movs	r1, #0
 8006fd0:	6878      	ldr	r0, [r7, #4]
 8006fd2:	f000 fd23 	bl	8007a1c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006fd6:	f000 f897 	bl	8007108 <xTaskResumeAll>
 8006fda:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d107      	bne.n	8006ff2 <vTaskDelay+0x5e>
		{
			portYIELD_WITHIN_API();
 8006fe2:	4b07      	ldr	r3, [pc, #28]	@ (8007000 <vTaskDelay+0x6c>)
 8006fe4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006fe8:	601a      	str	r2, [r3, #0]
 8006fea:	f3bf 8f4f 	dsb	sy
 8006fee:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006ff2:	bf00      	nop
 8006ff4:	3710      	adds	r7, #16
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	bd80      	pop	{r7, pc}
 8006ffa:	bf00      	nop
 8006ffc:	2000162c 	.word	0x2000162c
 8007000:	e000ed04 	.word	0xe000ed04

08007004 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007004:	b580      	push	{r7, lr}
 8007006:	b08a      	sub	sp, #40	@ 0x28
 8007008:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800700a:	2300      	movs	r3, #0
 800700c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800700e:	2300      	movs	r3, #0
 8007010:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007012:	463a      	mov	r2, r7
 8007014:	1d39      	adds	r1, r7, #4
 8007016:	f107 0308 	add.w	r3, r7, #8
 800701a:	4618      	mov	r0, r3
 800701c:	f7fe ff26 	bl	8005e6c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007020:	6839      	ldr	r1, [r7, #0]
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	68ba      	ldr	r2, [r7, #8]
 8007026:	9202      	str	r2, [sp, #8]
 8007028:	9301      	str	r3, [sp, #4]
 800702a:	2300      	movs	r3, #0
 800702c:	9300      	str	r3, [sp, #0]
 800702e:	2300      	movs	r3, #0
 8007030:	460a      	mov	r2, r1
 8007032:	4926      	ldr	r1, [pc, #152]	@ (80070cc <vTaskStartScheduler+0xc8>)
 8007034:	4826      	ldr	r0, [pc, #152]	@ (80070d0 <vTaskStartScheduler+0xcc>)
 8007036:	f7ff fde7 	bl	8006c08 <xTaskCreateStatic>
 800703a:	4603      	mov	r3, r0
 800703c:	4a25      	ldr	r2, [pc, #148]	@ (80070d4 <vTaskStartScheduler+0xd0>)
 800703e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007040:	4b24      	ldr	r3, [pc, #144]	@ (80070d4 <vTaskStartScheduler+0xd0>)
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	2b00      	cmp	r3, #0
 8007046:	d002      	beq.n	800704e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007048:	2301      	movs	r3, #1
 800704a:	617b      	str	r3, [r7, #20]
 800704c:	e001      	b.n	8007052 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800704e:	2300      	movs	r3, #0
 8007050:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007052:	697b      	ldr	r3, [r7, #20]
 8007054:	2b01      	cmp	r3, #1
 8007056:	d102      	bne.n	800705e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007058:	f000 fd34 	bl	8007ac4 <xTimerCreateTimerTask>
 800705c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800705e:	697b      	ldr	r3, [r7, #20]
 8007060:	2b01      	cmp	r3, #1
 8007062:	d11d      	bne.n	80070a0 <vTaskStartScheduler+0x9c>
	__asm volatile
 8007064:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007068:	b672      	cpsid	i
 800706a:	f383 8811 	msr	BASEPRI, r3
 800706e:	f3bf 8f6f 	isb	sy
 8007072:	f3bf 8f4f 	dsb	sy
 8007076:	b662      	cpsie	i
 8007078:	613b      	str	r3, [r7, #16]
}
 800707a:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800707c:	4b16      	ldr	r3, [pc, #88]	@ (80070d8 <vTaskStartScheduler+0xd4>)
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	3354      	adds	r3, #84	@ 0x54
 8007082:	4a16      	ldr	r2, [pc, #88]	@ (80070dc <vTaskStartScheduler+0xd8>)
 8007084:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007086:	4b16      	ldr	r3, [pc, #88]	@ (80070e0 <vTaskStartScheduler+0xdc>)
 8007088:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800708c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800708e:	4b15      	ldr	r3, [pc, #84]	@ (80070e4 <vTaskStartScheduler+0xe0>)
 8007090:	2201      	movs	r2, #1
 8007092:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007094:	4b14      	ldr	r3, [pc, #80]	@ (80070e8 <vTaskStartScheduler+0xe4>)
 8007096:	2200      	movs	r2, #0
 8007098:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800709a:	f001 f909 	bl	80082b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800709e:	e011      	b.n	80070c4 <vTaskStartScheduler+0xc0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80070a0:	697b      	ldr	r3, [r7, #20]
 80070a2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80070a6:	d10d      	bne.n	80070c4 <vTaskStartScheduler+0xc0>
	__asm volatile
 80070a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070ac:	b672      	cpsid	i
 80070ae:	f383 8811 	msr	BASEPRI, r3
 80070b2:	f3bf 8f6f 	isb	sy
 80070b6:	f3bf 8f4f 	dsb	sy
 80070ba:	b662      	cpsie	i
 80070bc:	60fb      	str	r3, [r7, #12]
}
 80070be:	bf00      	nop
 80070c0:	bf00      	nop
 80070c2:	e7fd      	b.n	80070c0 <vTaskStartScheduler+0xbc>
}
 80070c4:	bf00      	nop
 80070c6:	3718      	adds	r7, #24
 80070c8:	46bd      	mov	sp, r7
 80070ca:	bd80      	pop	{r7, pc}
 80070cc:	0800b568 	.word	0x0800b568
 80070d0:	0800773d 	.word	0x0800773d
 80070d4:	20001628 	.word	0x20001628
 80070d8:	20001130 	.word	0x20001130
 80070dc:	2000001c 	.word	0x2000001c
 80070e0:	20001624 	.word	0x20001624
 80070e4:	20001610 	.word	0x20001610
 80070e8:	20001608 	.word	0x20001608

080070ec <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80070ec:	b480      	push	{r7}
 80070ee:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80070f0:	4b04      	ldr	r3, [pc, #16]	@ (8007104 <vTaskSuspendAll+0x18>)
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	3301      	adds	r3, #1
 80070f6:	4a03      	ldr	r2, [pc, #12]	@ (8007104 <vTaskSuspendAll+0x18>)
 80070f8:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80070fa:	bf00      	nop
 80070fc:	46bd      	mov	sp, r7
 80070fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007102:	4770      	bx	lr
 8007104:	2000162c 	.word	0x2000162c

08007108 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007108:	b580      	push	{r7, lr}
 800710a:	b084      	sub	sp, #16
 800710c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800710e:	2300      	movs	r3, #0
 8007110:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007112:	2300      	movs	r3, #0
 8007114:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007116:	4b43      	ldr	r3, [pc, #268]	@ (8007224 <xTaskResumeAll+0x11c>)
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	2b00      	cmp	r3, #0
 800711c:	d10d      	bne.n	800713a <xTaskResumeAll+0x32>
	__asm volatile
 800711e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007122:	b672      	cpsid	i
 8007124:	f383 8811 	msr	BASEPRI, r3
 8007128:	f3bf 8f6f 	isb	sy
 800712c:	f3bf 8f4f 	dsb	sy
 8007130:	b662      	cpsie	i
 8007132:	603b      	str	r3, [r7, #0]
}
 8007134:	bf00      	nop
 8007136:	bf00      	nop
 8007138:	e7fd      	b.n	8007136 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800713a:	f001 f937 	bl	80083ac <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800713e:	4b39      	ldr	r3, [pc, #228]	@ (8007224 <xTaskResumeAll+0x11c>)
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	3b01      	subs	r3, #1
 8007144:	4a37      	ldr	r2, [pc, #220]	@ (8007224 <xTaskResumeAll+0x11c>)
 8007146:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007148:	4b36      	ldr	r3, [pc, #216]	@ (8007224 <xTaskResumeAll+0x11c>)
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	2b00      	cmp	r3, #0
 800714e:	d162      	bne.n	8007216 <xTaskResumeAll+0x10e>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007150:	4b35      	ldr	r3, [pc, #212]	@ (8007228 <xTaskResumeAll+0x120>)
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	2b00      	cmp	r3, #0
 8007156:	d05e      	beq.n	8007216 <xTaskResumeAll+0x10e>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007158:	e02f      	b.n	80071ba <xTaskResumeAll+0xb2>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800715a:	4b34      	ldr	r3, [pc, #208]	@ (800722c <xTaskResumeAll+0x124>)
 800715c:	68db      	ldr	r3, [r3, #12]
 800715e:	68db      	ldr	r3, [r3, #12]
 8007160:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	3318      	adds	r3, #24
 8007166:	4618      	mov	r0, r3
 8007168:	f7fe ff3e 	bl	8005fe8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	3304      	adds	r3, #4
 8007170:	4618      	mov	r0, r3
 8007172:	f7fe ff39 	bl	8005fe8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800717a:	4b2d      	ldr	r3, [pc, #180]	@ (8007230 <xTaskResumeAll+0x128>)
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	429a      	cmp	r2, r3
 8007180:	d903      	bls.n	800718a <xTaskResumeAll+0x82>
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007186:	4a2a      	ldr	r2, [pc, #168]	@ (8007230 <xTaskResumeAll+0x128>)
 8007188:	6013      	str	r3, [r2, #0]
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800718e:	4613      	mov	r3, r2
 8007190:	009b      	lsls	r3, r3, #2
 8007192:	4413      	add	r3, r2
 8007194:	009b      	lsls	r3, r3, #2
 8007196:	4a27      	ldr	r2, [pc, #156]	@ (8007234 <xTaskResumeAll+0x12c>)
 8007198:	441a      	add	r2, r3
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	3304      	adds	r3, #4
 800719e:	4619      	mov	r1, r3
 80071a0:	4610      	mov	r0, r2
 80071a2:	f7fe fec4 	bl	8005f2e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80071aa:	4b23      	ldr	r3, [pc, #140]	@ (8007238 <xTaskResumeAll+0x130>)
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071b0:	429a      	cmp	r2, r3
 80071b2:	d302      	bcc.n	80071ba <xTaskResumeAll+0xb2>
					{
						xYieldPending = pdTRUE;
 80071b4:	4b21      	ldr	r3, [pc, #132]	@ (800723c <xTaskResumeAll+0x134>)
 80071b6:	2201      	movs	r2, #1
 80071b8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80071ba:	4b1c      	ldr	r3, [pc, #112]	@ (800722c <xTaskResumeAll+0x124>)
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d1cb      	bne.n	800715a <xTaskResumeAll+0x52>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d001      	beq.n	80071cc <xTaskResumeAll+0xc4>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80071c8:	f000 fb76 	bl	80078b8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80071cc:	4b1c      	ldr	r3, [pc, #112]	@ (8007240 <xTaskResumeAll+0x138>)
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d010      	beq.n	80071fa <xTaskResumeAll+0xf2>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80071d8:	f000 f846 	bl	8007268 <xTaskIncrementTick>
 80071dc:	4603      	mov	r3, r0
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d002      	beq.n	80071e8 <xTaskResumeAll+0xe0>
							{
								xYieldPending = pdTRUE;
 80071e2:	4b16      	ldr	r3, [pc, #88]	@ (800723c <xTaskResumeAll+0x134>)
 80071e4:	2201      	movs	r2, #1
 80071e6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	3b01      	subs	r3, #1
 80071ec:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d1f1      	bne.n	80071d8 <xTaskResumeAll+0xd0>

						uxPendedTicks = 0;
 80071f4:	4b12      	ldr	r3, [pc, #72]	@ (8007240 <xTaskResumeAll+0x138>)
 80071f6:	2200      	movs	r2, #0
 80071f8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80071fa:	4b10      	ldr	r3, [pc, #64]	@ (800723c <xTaskResumeAll+0x134>)
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d009      	beq.n	8007216 <xTaskResumeAll+0x10e>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007202:	2301      	movs	r3, #1
 8007204:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007206:	4b0f      	ldr	r3, [pc, #60]	@ (8007244 <xTaskResumeAll+0x13c>)
 8007208:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800720c:	601a      	str	r2, [r3, #0]
 800720e:	f3bf 8f4f 	dsb	sy
 8007212:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007216:	f001 f8ff 	bl	8008418 <vPortExitCritical>

	return xAlreadyYielded;
 800721a:	68bb      	ldr	r3, [r7, #8]
}
 800721c:	4618      	mov	r0, r3
 800721e:	3710      	adds	r7, #16
 8007220:	46bd      	mov	sp, r7
 8007222:	bd80      	pop	{r7, pc}
 8007224:	2000162c 	.word	0x2000162c
 8007228:	20001604 	.word	0x20001604
 800722c:	200015c4 	.word	0x200015c4
 8007230:	2000160c 	.word	0x2000160c
 8007234:	20001134 	.word	0x20001134
 8007238:	20001130 	.word	0x20001130
 800723c:	20001618 	.word	0x20001618
 8007240:	20001614 	.word	0x20001614
 8007244:	e000ed04 	.word	0xe000ed04

08007248 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007248:	b480      	push	{r7}
 800724a:	b083      	sub	sp, #12
 800724c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800724e:	4b05      	ldr	r3, [pc, #20]	@ (8007264 <xTaskGetTickCount+0x1c>)
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007254:	687b      	ldr	r3, [r7, #4]
}
 8007256:	4618      	mov	r0, r3
 8007258:	370c      	adds	r7, #12
 800725a:	46bd      	mov	sp, r7
 800725c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007260:	4770      	bx	lr
 8007262:	bf00      	nop
 8007264:	20001608 	.word	0x20001608

08007268 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007268:	b580      	push	{r7, lr}
 800726a:	b086      	sub	sp, #24
 800726c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800726e:	2300      	movs	r3, #0
 8007270:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007272:	4b50      	ldr	r3, [pc, #320]	@ (80073b4 <xTaskIncrementTick+0x14c>)
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	2b00      	cmp	r3, #0
 8007278:	f040 808c 	bne.w	8007394 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800727c:	4b4e      	ldr	r3, [pc, #312]	@ (80073b8 <xTaskIncrementTick+0x150>)
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	3301      	adds	r3, #1
 8007282:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007284:	4a4c      	ldr	r2, [pc, #304]	@ (80073b8 <xTaskIncrementTick+0x150>)
 8007286:	693b      	ldr	r3, [r7, #16]
 8007288:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800728a:	693b      	ldr	r3, [r7, #16]
 800728c:	2b00      	cmp	r3, #0
 800728e:	d123      	bne.n	80072d8 <xTaskIncrementTick+0x70>
		{
			taskSWITCH_DELAYED_LISTS();
 8007290:	4b4a      	ldr	r3, [pc, #296]	@ (80073bc <xTaskIncrementTick+0x154>)
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	2b00      	cmp	r3, #0
 8007298:	d00d      	beq.n	80072b6 <xTaskIncrementTick+0x4e>
	__asm volatile
 800729a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800729e:	b672      	cpsid	i
 80072a0:	f383 8811 	msr	BASEPRI, r3
 80072a4:	f3bf 8f6f 	isb	sy
 80072a8:	f3bf 8f4f 	dsb	sy
 80072ac:	b662      	cpsie	i
 80072ae:	603b      	str	r3, [r7, #0]
}
 80072b0:	bf00      	nop
 80072b2:	bf00      	nop
 80072b4:	e7fd      	b.n	80072b2 <xTaskIncrementTick+0x4a>
 80072b6:	4b41      	ldr	r3, [pc, #260]	@ (80073bc <xTaskIncrementTick+0x154>)
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	60fb      	str	r3, [r7, #12]
 80072bc:	4b40      	ldr	r3, [pc, #256]	@ (80073c0 <xTaskIncrementTick+0x158>)
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	4a3e      	ldr	r2, [pc, #248]	@ (80073bc <xTaskIncrementTick+0x154>)
 80072c2:	6013      	str	r3, [r2, #0]
 80072c4:	4a3e      	ldr	r2, [pc, #248]	@ (80073c0 <xTaskIncrementTick+0x158>)
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	6013      	str	r3, [r2, #0]
 80072ca:	4b3e      	ldr	r3, [pc, #248]	@ (80073c4 <xTaskIncrementTick+0x15c>)
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	3301      	adds	r3, #1
 80072d0:	4a3c      	ldr	r2, [pc, #240]	@ (80073c4 <xTaskIncrementTick+0x15c>)
 80072d2:	6013      	str	r3, [r2, #0]
 80072d4:	f000 faf0 	bl	80078b8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80072d8:	4b3b      	ldr	r3, [pc, #236]	@ (80073c8 <xTaskIncrementTick+0x160>)
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	693a      	ldr	r2, [r7, #16]
 80072de:	429a      	cmp	r2, r3
 80072e0:	d349      	bcc.n	8007376 <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80072e2:	4b36      	ldr	r3, [pc, #216]	@ (80073bc <xTaskIncrementTick+0x154>)
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d104      	bne.n	80072f6 <xTaskIncrementTick+0x8e>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80072ec:	4b36      	ldr	r3, [pc, #216]	@ (80073c8 <xTaskIncrementTick+0x160>)
 80072ee:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80072f2:	601a      	str	r2, [r3, #0]
					break;
 80072f4:	e03f      	b.n	8007376 <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80072f6:	4b31      	ldr	r3, [pc, #196]	@ (80073bc <xTaskIncrementTick+0x154>)
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	68db      	ldr	r3, [r3, #12]
 80072fc:	68db      	ldr	r3, [r3, #12]
 80072fe:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007300:	68bb      	ldr	r3, [r7, #8]
 8007302:	685b      	ldr	r3, [r3, #4]
 8007304:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007306:	693a      	ldr	r2, [r7, #16]
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	429a      	cmp	r2, r3
 800730c:	d203      	bcs.n	8007316 <xTaskIncrementTick+0xae>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800730e:	4a2e      	ldr	r2, [pc, #184]	@ (80073c8 <xTaskIncrementTick+0x160>)
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007314:	e02f      	b.n	8007376 <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007316:	68bb      	ldr	r3, [r7, #8]
 8007318:	3304      	adds	r3, #4
 800731a:	4618      	mov	r0, r3
 800731c:	f7fe fe64 	bl	8005fe8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007320:	68bb      	ldr	r3, [r7, #8]
 8007322:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007324:	2b00      	cmp	r3, #0
 8007326:	d004      	beq.n	8007332 <xTaskIncrementTick+0xca>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007328:	68bb      	ldr	r3, [r7, #8]
 800732a:	3318      	adds	r3, #24
 800732c:	4618      	mov	r0, r3
 800732e:	f7fe fe5b 	bl	8005fe8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007332:	68bb      	ldr	r3, [r7, #8]
 8007334:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007336:	4b25      	ldr	r3, [pc, #148]	@ (80073cc <xTaskIncrementTick+0x164>)
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	429a      	cmp	r2, r3
 800733c:	d903      	bls.n	8007346 <xTaskIncrementTick+0xde>
 800733e:	68bb      	ldr	r3, [r7, #8]
 8007340:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007342:	4a22      	ldr	r2, [pc, #136]	@ (80073cc <xTaskIncrementTick+0x164>)
 8007344:	6013      	str	r3, [r2, #0]
 8007346:	68bb      	ldr	r3, [r7, #8]
 8007348:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800734a:	4613      	mov	r3, r2
 800734c:	009b      	lsls	r3, r3, #2
 800734e:	4413      	add	r3, r2
 8007350:	009b      	lsls	r3, r3, #2
 8007352:	4a1f      	ldr	r2, [pc, #124]	@ (80073d0 <xTaskIncrementTick+0x168>)
 8007354:	441a      	add	r2, r3
 8007356:	68bb      	ldr	r3, [r7, #8]
 8007358:	3304      	adds	r3, #4
 800735a:	4619      	mov	r1, r3
 800735c:	4610      	mov	r0, r2
 800735e:	f7fe fde6 	bl	8005f2e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007362:	68bb      	ldr	r3, [r7, #8]
 8007364:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007366:	4b1b      	ldr	r3, [pc, #108]	@ (80073d4 <xTaskIncrementTick+0x16c>)
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800736c:	429a      	cmp	r2, r3
 800736e:	d3b8      	bcc.n	80072e2 <xTaskIncrementTick+0x7a>
						{
							xSwitchRequired = pdTRUE;
 8007370:	2301      	movs	r3, #1
 8007372:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007374:	e7b5      	b.n	80072e2 <xTaskIncrementTick+0x7a>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007376:	4b17      	ldr	r3, [pc, #92]	@ (80073d4 <xTaskIncrementTick+0x16c>)
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800737c:	4914      	ldr	r1, [pc, #80]	@ (80073d0 <xTaskIncrementTick+0x168>)
 800737e:	4613      	mov	r3, r2
 8007380:	009b      	lsls	r3, r3, #2
 8007382:	4413      	add	r3, r2
 8007384:	009b      	lsls	r3, r3, #2
 8007386:	440b      	add	r3, r1
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	2b01      	cmp	r3, #1
 800738c:	d907      	bls.n	800739e <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 800738e:	2301      	movs	r3, #1
 8007390:	617b      	str	r3, [r7, #20]
 8007392:	e004      	b.n	800739e <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8007394:	4b10      	ldr	r3, [pc, #64]	@ (80073d8 <xTaskIncrementTick+0x170>)
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	3301      	adds	r3, #1
 800739a:	4a0f      	ldr	r2, [pc, #60]	@ (80073d8 <xTaskIncrementTick+0x170>)
 800739c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800739e:	4b0f      	ldr	r3, [pc, #60]	@ (80073dc <xTaskIncrementTick+0x174>)
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d001      	beq.n	80073aa <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 80073a6:	2301      	movs	r3, #1
 80073a8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80073aa:	697b      	ldr	r3, [r7, #20]
}
 80073ac:	4618      	mov	r0, r3
 80073ae:	3718      	adds	r7, #24
 80073b0:	46bd      	mov	sp, r7
 80073b2:	bd80      	pop	{r7, pc}
 80073b4:	2000162c 	.word	0x2000162c
 80073b8:	20001608 	.word	0x20001608
 80073bc:	200015bc 	.word	0x200015bc
 80073c0:	200015c0 	.word	0x200015c0
 80073c4:	2000161c 	.word	0x2000161c
 80073c8:	20001624 	.word	0x20001624
 80073cc:	2000160c 	.word	0x2000160c
 80073d0:	20001134 	.word	0x20001134
 80073d4:	20001130 	.word	0x20001130
 80073d8:	20001614 	.word	0x20001614
 80073dc:	20001618 	.word	0x20001618

080073e0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80073e0:	b480      	push	{r7}
 80073e2:	b085      	sub	sp, #20
 80073e4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80073e6:	4b2c      	ldr	r3, [pc, #176]	@ (8007498 <vTaskSwitchContext+0xb8>)
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d003      	beq.n	80073f6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80073ee:	4b2b      	ldr	r3, [pc, #172]	@ (800749c <vTaskSwitchContext+0xbc>)
 80073f0:	2201      	movs	r2, #1
 80073f2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80073f4:	e049      	b.n	800748a <vTaskSwitchContext+0xaa>
		xYieldPending = pdFALSE;
 80073f6:	4b29      	ldr	r3, [pc, #164]	@ (800749c <vTaskSwitchContext+0xbc>)
 80073f8:	2200      	movs	r2, #0
 80073fa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80073fc:	4b28      	ldr	r3, [pc, #160]	@ (80074a0 <vTaskSwitchContext+0xc0>)
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	60fb      	str	r3, [r7, #12]
 8007402:	e013      	b.n	800742c <vTaskSwitchContext+0x4c>
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	2b00      	cmp	r3, #0
 8007408:	d10d      	bne.n	8007426 <vTaskSwitchContext+0x46>
	__asm volatile
 800740a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800740e:	b672      	cpsid	i
 8007410:	f383 8811 	msr	BASEPRI, r3
 8007414:	f3bf 8f6f 	isb	sy
 8007418:	f3bf 8f4f 	dsb	sy
 800741c:	b662      	cpsie	i
 800741e:	607b      	str	r3, [r7, #4]
}
 8007420:	bf00      	nop
 8007422:	bf00      	nop
 8007424:	e7fd      	b.n	8007422 <vTaskSwitchContext+0x42>
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	3b01      	subs	r3, #1
 800742a:	60fb      	str	r3, [r7, #12]
 800742c:	491d      	ldr	r1, [pc, #116]	@ (80074a4 <vTaskSwitchContext+0xc4>)
 800742e:	68fa      	ldr	r2, [r7, #12]
 8007430:	4613      	mov	r3, r2
 8007432:	009b      	lsls	r3, r3, #2
 8007434:	4413      	add	r3, r2
 8007436:	009b      	lsls	r3, r3, #2
 8007438:	440b      	add	r3, r1
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	2b00      	cmp	r3, #0
 800743e:	d0e1      	beq.n	8007404 <vTaskSwitchContext+0x24>
 8007440:	68fa      	ldr	r2, [r7, #12]
 8007442:	4613      	mov	r3, r2
 8007444:	009b      	lsls	r3, r3, #2
 8007446:	4413      	add	r3, r2
 8007448:	009b      	lsls	r3, r3, #2
 800744a:	4a16      	ldr	r2, [pc, #88]	@ (80074a4 <vTaskSwitchContext+0xc4>)
 800744c:	4413      	add	r3, r2
 800744e:	60bb      	str	r3, [r7, #8]
 8007450:	68bb      	ldr	r3, [r7, #8]
 8007452:	685b      	ldr	r3, [r3, #4]
 8007454:	685a      	ldr	r2, [r3, #4]
 8007456:	68bb      	ldr	r3, [r7, #8]
 8007458:	605a      	str	r2, [r3, #4]
 800745a:	68bb      	ldr	r3, [r7, #8]
 800745c:	685a      	ldr	r2, [r3, #4]
 800745e:	68bb      	ldr	r3, [r7, #8]
 8007460:	3308      	adds	r3, #8
 8007462:	429a      	cmp	r2, r3
 8007464:	d104      	bne.n	8007470 <vTaskSwitchContext+0x90>
 8007466:	68bb      	ldr	r3, [r7, #8]
 8007468:	685b      	ldr	r3, [r3, #4]
 800746a:	685a      	ldr	r2, [r3, #4]
 800746c:	68bb      	ldr	r3, [r7, #8]
 800746e:	605a      	str	r2, [r3, #4]
 8007470:	68bb      	ldr	r3, [r7, #8]
 8007472:	685b      	ldr	r3, [r3, #4]
 8007474:	68db      	ldr	r3, [r3, #12]
 8007476:	4a0c      	ldr	r2, [pc, #48]	@ (80074a8 <vTaskSwitchContext+0xc8>)
 8007478:	6013      	str	r3, [r2, #0]
 800747a:	4a09      	ldr	r2, [pc, #36]	@ (80074a0 <vTaskSwitchContext+0xc0>)
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007480:	4b09      	ldr	r3, [pc, #36]	@ (80074a8 <vTaskSwitchContext+0xc8>)
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	3354      	adds	r3, #84	@ 0x54
 8007486:	4a09      	ldr	r2, [pc, #36]	@ (80074ac <vTaskSwitchContext+0xcc>)
 8007488:	6013      	str	r3, [r2, #0]
}
 800748a:	bf00      	nop
 800748c:	3714      	adds	r7, #20
 800748e:	46bd      	mov	sp, r7
 8007490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007494:	4770      	bx	lr
 8007496:	bf00      	nop
 8007498:	2000162c 	.word	0x2000162c
 800749c:	20001618 	.word	0x20001618
 80074a0:	2000160c 	.word	0x2000160c
 80074a4:	20001134 	.word	0x20001134
 80074a8:	20001130 	.word	0x20001130
 80074ac:	2000001c 	.word	0x2000001c

080074b0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80074b0:	b580      	push	{r7, lr}
 80074b2:	b084      	sub	sp, #16
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	6078      	str	r0, [r7, #4]
 80074b8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d10d      	bne.n	80074dc <vTaskPlaceOnEventList+0x2c>
	__asm volatile
 80074c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074c4:	b672      	cpsid	i
 80074c6:	f383 8811 	msr	BASEPRI, r3
 80074ca:	f3bf 8f6f 	isb	sy
 80074ce:	f3bf 8f4f 	dsb	sy
 80074d2:	b662      	cpsie	i
 80074d4:	60fb      	str	r3, [r7, #12]
}
 80074d6:	bf00      	nop
 80074d8:	bf00      	nop
 80074da:	e7fd      	b.n	80074d8 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80074dc:	4b07      	ldr	r3, [pc, #28]	@ (80074fc <vTaskPlaceOnEventList+0x4c>)
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	3318      	adds	r3, #24
 80074e2:	4619      	mov	r1, r3
 80074e4:	6878      	ldr	r0, [r7, #4]
 80074e6:	f7fe fd46 	bl	8005f76 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80074ea:	2101      	movs	r1, #1
 80074ec:	6838      	ldr	r0, [r7, #0]
 80074ee:	f000 fa95 	bl	8007a1c <prvAddCurrentTaskToDelayedList>
}
 80074f2:	bf00      	nop
 80074f4:	3710      	adds	r7, #16
 80074f6:	46bd      	mov	sp, r7
 80074f8:	bd80      	pop	{r7, pc}
 80074fa:	bf00      	nop
 80074fc:	20001130 	.word	0x20001130

08007500 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007500:	b580      	push	{r7, lr}
 8007502:	b086      	sub	sp, #24
 8007504:	af00      	add	r7, sp, #0
 8007506:	60f8      	str	r0, [r7, #12]
 8007508:	60b9      	str	r1, [r7, #8]
 800750a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	2b00      	cmp	r3, #0
 8007510:	d10d      	bne.n	800752e <vTaskPlaceOnEventListRestricted+0x2e>
	__asm volatile
 8007512:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007516:	b672      	cpsid	i
 8007518:	f383 8811 	msr	BASEPRI, r3
 800751c:	f3bf 8f6f 	isb	sy
 8007520:	f3bf 8f4f 	dsb	sy
 8007524:	b662      	cpsie	i
 8007526:	617b      	str	r3, [r7, #20]
}
 8007528:	bf00      	nop
 800752a:	bf00      	nop
 800752c:	e7fd      	b.n	800752a <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800752e:	4b0a      	ldr	r3, [pc, #40]	@ (8007558 <vTaskPlaceOnEventListRestricted+0x58>)
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	3318      	adds	r3, #24
 8007534:	4619      	mov	r1, r3
 8007536:	68f8      	ldr	r0, [r7, #12]
 8007538:	f7fe fcf9 	bl	8005f2e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	2b00      	cmp	r3, #0
 8007540:	d002      	beq.n	8007548 <vTaskPlaceOnEventListRestricted+0x48>
		{
			xTicksToWait = portMAX_DELAY;
 8007542:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007546:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007548:	6879      	ldr	r1, [r7, #4]
 800754a:	68b8      	ldr	r0, [r7, #8]
 800754c:	f000 fa66 	bl	8007a1c <prvAddCurrentTaskToDelayedList>
	}
 8007550:	bf00      	nop
 8007552:	3718      	adds	r7, #24
 8007554:	46bd      	mov	sp, r7
 8007556:	bd80      	pop	{r7, pc}
 8007558:	20001130 	.word	0x20001130

0800755c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800755c:	b580      	push	{r7, lr}
 800755e:	b086      	sub	sp, #24
 8007560:	af00      	add	r7, sp, #0
 8007562:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	68db      	ldr	r3, [r3, #12]
 8007568:	68db      	ldr	r3, [r3, #12]
 800756a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800756c:	693b      	ldr	r3, [r7, #16]
 800756e:	2b00      	cmp	r3, #0
 8007570:	d10d      	bne.n	800758e <xTaskRemoveFromEventList+0x32>
	__asm volatile
 8007572:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007576:	b672      	cpsid	i
 8007578:	f383 8811 	msr	BASEPRI, r3
 800757c:	f3bf 8f6f 	isb	sy
 8007580:	f3bf 8f4f 	dsb	sy
 8007584:	b662      	cpsie	i
 8007586:	60fb      	str	r3, [r7, #12]
}
 8007588:	bf00      	nop
 800758a:	bf00      	nop
 800758c:	e7fd      	b.n	800758a <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800758e:	693b      	ldr	r3, [r7, #16]
 8007590:	3318      	adds	r3, #24
 8007592:	4618      	mov	r0, r3
 8007594:	f7fe fd28 	bl	8005fe8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007598:	4b1d      	ldr	r3, [pc, #116]	@ (8007610 <xTaskRemoveFromEventList+0xb4>)
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	2b00      	cmp	r3, #0
 800759e:	d11d      	bne.n	80075dc <xTaskRemoveFromEventList+0x80>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80075a0:	693b      	ldr	r3, [r7, #16]
 80075a2:	3304      	adds	r3, #4
 80075a4:	4618      	mov	r0, r3
 80075a6:	f7fe fd1f 	bl	8005fe8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80075aa:	693b      	ldr	r3, [r7, #16]
 80075ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80075ae:	4b19      	ldr	r3, [pc, #100]	@ (8007614 <xTaskRemoveFromEventList+0xb8>)
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	429a      	cmp	r2, r3
 80075b4:	d903      	bls.n	80075be <xTaskRemoveFromEventList+0x62>
 80075b6:	693b      	ldr	r3, [r7, #16]
 80075b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075ba:	4a16      	ldr	r2, [pc, #88]	@ (8007614 <xTaskRemoveFromEventList+0xb8>)
 80075bc:	6013      	str	r3, [r2, #0]
 80075be:	693b      	ldr	r3, [r7, #16]
 80075c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80075c2:	4613      	mov	r3, r2
 80075c4:	009b      	lsls	r3, r3, #2
 80075c6:	4413      	add	r3, r2
 80075c8:	009b      	lsls	r3, r3, #2
 80075ca:	4a13      	ldr	r2, [pc, #76]	@ (8007618 <xTaskRemoveFromEventList+0xbc>)
 80075cc:	441a      	add	r2, r3
 80075ce:	693b      	ldr	r3, [r7, #16]
 80075d0:	3304      	adds	r3, #4
 80075d2:	4619      	mov	r1, r3
 80075d4:	4610      	mov	r0, r2
 80075d6:	f7fe fcaa 	bl	8005f2e <vListInsertEnd>
 80075da:	e005      	b.n	80075e8 <xTaskRemoveFromEventList+0x8c>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80075dc:	693b      	ldr	r3, [r7, #16]
 80075de:	3318      	adds	r3, #24
 80075e0:	4619      	mov	r1, r3
 80075e2:	480e      	ldr	r0, [pc, #56]	@ (800761c <xTaskRemoveFromEventList+0xc0>)
 80075e4:	f7fe fca3 	bl	8005f2e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80075e8:	693b      	ldr	r3, [r7, #16]
 80075ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80075ec:	4b0c      	ldr	r3, [pc, #48]	@ (8007620 <xTaskRemoveFromEventList+0xc4>)
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075f2:	429a      	cmp	r2, r3
 80075f4:	d905      	bls.n	8007602 <xTaskRemoveFromEventList+0xa6>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80075f6:	2301      	movs	r3, #1
 80075f8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80075fa:	4b0a      	ldr	r3, [pc, #40]	@ (8007624 <xTaskRemoveFromEventList+0xc8>)
 80075fc:	2201      	movs	r2, #1
 80075fe:	601a      	str	r2, [r3, #0]
 8007600:	e001      	b.n	8007606 <xTaskRemoveFromEventList+0xaa>
	}
	else
	{
		xReturn = pdFALSE;
 8007602:	2300      	movs	r3, #0
 8007604:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007606:	697b      	ldr	r3, [r7, #20]
}
 8007608:	4618      	mov	r0, r3
 800760a:	3718      	adds	r7, #24
 800760c:	46bd      	mov	sp, r7
 800760e:	bd80      	pop	{r7, pc}
 8007610:	2000162c 	.word	0x2000162c
 8007614:	2000160c 	.word	0x2000160c
 8007618:	20001134 	.word	0x20001134
 800761c:	200015c4 	.word	0x200015c4
 8007620:	20001130 	.word	0x20001130
 8007624:	20001618 	.word	0x20001618

08007628 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007628:	b480      	push	{r7}
 800762a:	b083      	sub	sp, #12
 800762c:	af00      	add	r7, sp, #0
 800762e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007630:	4b06      	ldr	r3, [pc, #24]	@ (800764c <vTaskInternalSetTimeOutState+0x24>)
 8007632:	681a      	ldr	r2, [r3, #0]
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007638:	4b05      	ldr	r3, [pc, #20]	@ (8007650 <vTaskInternalSetTimeOutState+0x28>)
 800763a:	681a      	ldr	r2, [r3, #0]
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	605a      	str	r2, [r3, #4]
}
 8007640:	bf00      	nop
 8007642:	370c      	adds	r7, #12
 8007644:	46bd      	mov	sp, r7
 8007646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800764a:	4770      	bx	lr
 800764c:	2000161c 	.word	0x2000161c
 8007650:	20001608 	.word	0x20001608

08007654 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007654:	b580      	push	{r7, lr}
 8007656:	b088      	sub	sp, #32
 8007658:	af00      	add	r7, sp, #0
 800765a:	6078      	str	r0, [r7, #4]
 800765c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	2b00      	cmp	r3, #0
 8007662:	d10d      	bne.n	8007680 <xTaskCheckForTimeOut+0x2c>
	__asm volatile
 8007664:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007668:	b672      	cpsid	i
 800766a:	f383 8811 	msr	BASEPRI, r3
 800766e:	f3bf 8f6f 	isb	sy
 8007672:	f3bf 8f4f 	dsb	sy
 8007676:	b662      	cpsie	i
 8007678:	613b      	str	r3, [r7, #16]
}
 800767a:	bf00      	nop
 800767c:	bf00      	nop
 800767e:	e7fd      	b.n	800767c <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8007680:	683b      	ldr	r3, [r7, #0]
 8007682:	2b00      	cmp	r3, #0
 8007684:	d10d      	bne.n	80076a2 <xTaskCheckForTimeOut+0x4e>
	__asm volatile
 8007686:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800768a:	b672      	cpsid	i
 800768c:	f383 8811 	msr	BASEPRI, r3
 8007690:	f3bf 8f6f 	isb	sy
 8007694:	f3bf 8f4f 	dsb	sy
 8007698:	b662      	cpsie	i
 800769a:	60fb      	str	r3, [r7, #12]
}
 800769c:	bf00      	nop
 800769e:	bf00      	nop
 80076a0:	e7fd      	b.n	800769e <xTaskCheckForTimeOut+0x4a>

	taskENTER_CRITICAL();
 80076a2:	f000 fe83 	bl	80083ac <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80076a6:	4b1d      	ldr	r3, [pc, #116]	@ (800771c <xTaskCheckForTimeOut+0xc8>)
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	685b      	ldr	r3, [r3, #4]
 80076b0:	69ba      	ldr	r2, [r7, #24]
 80076b2:	1ad3      	subs	r3, r2, r3
 80076b4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80076b6:	683b      	ldr	r3, [r7, #0]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80076be:	d102      	bne.n	80076c6 <xTaskCheckForTimeOut+0x72>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80076c0:	2300      	movs	r3, #0
 80076c2:	61fb      	str	r3, [r7, #28]
 80076c4:	e023      	b.n	800770e <xTaskCheckForTimeOut+0xba>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681a      	ldr	r2, [r3, #0]
 80076ca:	4b15      	ldr	r3, [pc, #84]	@ (8007720 <xTaskCheckForTimeOut+0xcc>)
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	429a      	cmp	r2, r3
 80076d0:	d007      	beq.n	80076e2 <xTaskCheckForTimeOut+0x8e>
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	685b      	ldr	r3, [r3, #4]
 80076d6:	69ba      	ldr	r2, [r7, #24]
 80076d8:	429a      	cmp	r2, r3
 80076da:	d302      	bcc.n	80076e2 <xTaskCheckForTimeOut+0x8e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80076dc:	2301      	movs	r3, #1
 80076de:	61fb      	str	r3, [r7, #28]
 80076e0:	e015      	b.n	800770e <xTaskCheckForTimeOut+0xba>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80076e2:	683b      	ldr	r3, [r7, #0]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	697a      	ldr	r2, [r7, #20]
 80076e8:	429a      	cmp	r2, r3
 80076ea:	d20b      	bcs.n	8007704 <xTaskCheckForTimeOut+0xb0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80076ec:	683b      	ldr	r3, [r7, #0]
 80076ee:	681a      	ldr	r2, [r3, #0]
 80076f0:	697b      	ldr	r3, [r7, #20]
 80076f2:	1ad2      	subs	r2, r2, r3
 80076f4:	683b      	ldr	r3, [r7, #0]
 80076f6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80076f8:	6878      	ldr	r0, [r7, #4]
 80076fa:	f7ff ff95 	bl	8007628 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80076fe:	2300      	movs	r3, #0
 8007700:	61fb      	str	r3, [r7, #28]
 8007702:	e004      	b.n	800770e <xTaskCheckForTimeOut+0xba>
		}
		else
		{
			*pxTicksToWait = 0;
 8007704:	683b      	ldr	r3, [r7, #0]
 8007706:	2200      	movs	r2, #0
 8007708:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800770a:	2301      	movs	r3, #1
 800770c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800770e:	f000 fe83 	bl	8008418 <vPortExitCritical>

	return xReturn;
 8007712:	69fb      	ldr	r3, [r7, #28]
}
 8007714:	4618      	mov	r0, r3
 8007716:	3720      	adds	r7, #32
 8007718:	46bd      	mov	sp, r7
 800771a:	bd80      	pop	{r7, pc}
 800771c:	20001608 	.word	0x20001608
 8007720:	2000161c 	.word	0x2000161c

08007724 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007724:	b480      	push	{r7}
 8007726:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007728:	4b03      	ldr	r3, [pc, #12]	@ (8007738 <vTaskMissedYield+0x14>)
 800772a:	2201      	movs	r2, #1
 800772c:	601a      	str	r2, [r3, #0]
}
 800772e:	bf00      	nop
 8007730:	46bd      	mov	sp, r7
 8007732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007736:	4770      	bx	lr
 8007738:	20001618 	.word	0x20001618

0800773c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800773c:	b580      	push	{r7, lr}
 800773e:	b082      	sub	sp, #8
 8007740:	af00      	add	r7, sp, #0
 8007742:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007744:	f000 f852 	bl	80077ec <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007748:	4b06      	ldr	r3, [pc, #24]	@ (8007764 <prvIdleTask+0x28>)
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	2b01      	cmp	r3, #1
 800774e:	d9f9      	bls.n	8007744 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007750:	4b05      	ldr	r3, [pc, #20]	@ (8007768 <prvIdleTask+0x2c>)
 8007752:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007756:	601a      	str	r2, [r3, #0]
 8007758:	f3bf 8f4f 	dsb	sy
 800775c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007760:	e7f0      	b.n	8007744 <prvIdleTask+0x8>
 8007762:	bf00      	nop
 8007764:	20001134 	.word	0x20001134
 8007768:	e000ed04 	.word	0xe000ed04

0800776c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800776c:	b580      	push	{r7, lr}
 800776e:	b082      	sub	sp, #8
 8007770:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007772:	2300      	movs	r3, #0
 8007774:	607b      	str	r3, [r7, #4]
 8007776:	e00c      	b.n	8007792 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007778:	687a      	ldr	r2, [r7, #4]
 800777a:	4613      	mov	r3, r2
 800777c:	009b      	lsls	r3, r3, #2
 800777e:	4413      	add	r3, r2
 8007780:	009b      	lsls	r3, r3, #2
 8007782:	4a12      	ldr	r2, [pc, #72]	@ (80077cc <prvInitialiseTaskLists+0x60>)
 8007784:	4413      	add	r3, r2
 8007786:	4618      	mov	r0, r3
 8007788:	f7fe fba4 	bl	8005ed4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	3301      	adds	r3, #1
 8007790:	607b      	str	r3, [r7, #4]
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	2b37      	cmp	r3, #55	@ 0x37
 8007796:	d9ef      	bls.n	8007778 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007798:	480d      	ldr	r0, [pc, #52]	@ (80077d0 <prvInitialiseTaskLists+0x64>)
 800779a:	f7fe fb9b 	bl	8005ed4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800779e:	480d      	ldr	r0, [pc, #52]	@ (80077d4 <prvInitialiseTaskLists+0x68>)
 80077a0:	f7fe fb98 	bl	8005ed4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80077a4:	480c      	ldr	r0, [pc, #48]	@ (80077d8 <prvInitialiseTaskLists+0x6c>)
 80077a6:	f7fe fb95 	bl	8005ed4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80077aa:	480c      	ldr	r0, [pc, #48]	@ (80077dc <prvInitialiseTaskLists+0x70>)
 80077ac:	f7fe fb92 	bl	8005ed4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80077b0:	480b      	ldr	r0, [pc, #44]	@ (80077e0 <prvInitialiseTaskLists+0x74>)
 80077b2:	f7fe fb8f 	bl	8005ed4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80077b6:	4b0b      	ldr	r3, [pc, #44]	@ (80077e4 <prvInitialiseTaskLists+0x78>)
 80077b8:	4a05      	ldr	r2, [pc, #20]	@ (80077d0 <prvInitialiseTaskLists+0x64>)
 80077ba:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80077bc:	4b0a      	ldr	r3, [pc, #40]	@ (80077e8 <prvInitialiseTaskLists+0x7c>)
 80077be:	4a05      	ldr	r2, [pc, #20]	@ (80077d4 <prvInitialiseTaskLists+0x68>)
 80077c0:	601a      	str	r2, [r3, #0]
}
 80077c2:	bf00      	nop
 80077c4:	3708      	adds	r7, #8
 80077c6:	46bd      	mov	sp, r7
 80077c8:	bd80      	pop	{r7, pc}
 80077ca:	bf00      	nop
 80077cc:	20001134 	.word	0x20001134
 80077d0:	20001594 	.word	0x20001594
 80077d4:	200015a8 	.word	0x200015a8
 80077d8:	200015c4 	.word	0x200015c4
 80077dc:	200015d8 	.word	0x200015d8
 80077e0:	200015f0 	.word	0x200015f0
 80077e4:	200015bc 	.word	0x200015bc
 80077e8:	200015c0 	.word	0x200015c0

080077ec <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80077ec:	b580      	push	{r7, lr}
 80077ee:	b082      	sub	sp, #8
 80077f0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80077f2:	e019      	b.n	8007828 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80077f4:	f000 fdda 	bl	80083ac <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80077f8:	4b10      	ldr	r3, [pc, #64]	@ (800783c <prvCheckTasksWaitingTermination+0x50>)
 80077fa:	68db      	ldr	r3, [r3, #12]
 80077fc:	68db      	ldr	r3, [r3, #12]
 80077fe:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	3304      	adds	r3, #4
 8007804:	4618      	mov	r0, r3
 8007806:	f7fe fbef 	bl	8005fe8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800780a:	4b0d      	ldr	r3, [pc, #52]	@ (8007840 <prvCheckTasksWaitingTermination+0x54>)
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	3b01      	subs	r3, #1
 8007810:	4a0b      	ldr	r2, [pc, #44]	@ (8007840 <prvCheckTasksWaitingTermination+0x54>)
 8007812:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007814:	4b0b      	ldr	r3, [pc, #44]	@ (8007844 <prvCheckTasksWaitingTermination+0x58>)
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	3b01      	subs	r3, #1
 800781a:	4a0a      	ldr	r2, [pc, #40]	@ (8007844 <prvCheckTasksWaitingTermination+0x58>)
 800781c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800781e:	f000 fdfb 	bl	8008418 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007822:	6878      	ldr	r0, [r7, #4]
 8007824:	f000 f810 	bl	8007848 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007828:	4b06      	ldr	r3, [pc, #24]	@ (8007844 <prvCheckTasksWaitingTermination+0x58>)
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	2b00      	cmp	r3, #0
 800782e:	d1e1      	bne.n	80077f4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007830:	bf00      	nop
 8007832:	bf00      	nop
 8007834:	3708      	adds	r7, #8
 8007836:	46bd      	mov	sp, r7
 8007838:	bd80      	pop	{r7, pc}
 800783a:	bf00      	nop
 800783c:	200015d8 	.word	0x200015d8
 8007840:	20001604 	.word	0x20001604
 8007844:	200015ec 	.word	0x200015ec

08007848 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007848:	b580      	push	{r7, lr}
 800784a:	b084      	sub	sp, #16
 800784c:	af00      	add	r7, sp, #0
 800784e:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	3354      	adds	r3, #84	@ 0x54
 8007854:	4618      	mov	r0, r3
 8007856:	f001 feb7 	bl	80095c8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8007860:	2b00      	cmp	r3, #0
 8007862:	d108      	bne.n	8007876 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007868:	4618      	mov	r0, r3
 800786a:	f000 ff9b 	bl	80087a4 <vPortFree>
				vPortFree( pxTCB );
 800786e:	6878      	ldr	r0, [r7, #4]
 8007870:	f000 ff98 	bl	80087a4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007874:	e01b      	b.n	80078ae <prvDeleteTCB+0x66>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800787c:	2b01      	cmp	r3, #1
 800787e:	d103      	bne.n	8007888 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007880:	6878      	ldr	r0, [r7, #4]
 8007882:	f000 ff8f 	bl	80087a4 <vPortFree>
	}
 8007886:	e012      	b.n	80078ae <prvDeleteTCB+0x66>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800788e:	2b02      	cmp	r3, #2
 8007890:	d00d      	beq.n	80078ae <prvDeleteTCB+0x66>
	__asm volatile
 8007892:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007896:	b672      	cpsid	i
 8007898:	f383 8811 	msr	BASEPRI, r3
 800789c:	f3bf 8f6f 	isb	sy
 80078a0:	f3bf 8f4f 	dsb	sy
 80078a4:	b662      	cpsie	i
 80078a6:	60fb      	str	r3, [r7, #12]
}
 80078a8:	bf00      	nop
 80078aa:	bf00      	nop
 80078ac:	e7fd      	b.n	80078aa <prvDeleteTCB+0x62>
	}
 80078ae:	bf00      	nop
 80078b0:	3710      	adds	r7, #16
 80078b2:	46bd      	mov	sp, r7
 80078b4:	bd80      	pop	{r7, pc}
	...

080078b8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80078b8:	b480      	push	{r7}
 80078ba:	b083      	sub	sp, #12
 80078bc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80078be:	4b0c      	ldr	r3, [pc, #48]	@ (80078f0 <prvResetNextTaskUnblockTime+0x38>)
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d104      	bne.n	80078d2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80078c8:	4b0a      	ldr	r3, [pc, #40]	@ (80078f4 <prvResetNextTaskUnblockTime+0x3c>)
 80078ca:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80078ce:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80078d0:	e008      	b.n	80078e4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80078d2:	4b07      	ldr	r3, [pc, #28]	@ (80078f0 <prvResetNextTaskUnblockTime+0x38>)
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	68db      	ldr	r3, [r3, #12]
 80078d8:	68db      	ldr	r3, [r3, #12]
 80078da:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	685b      	ldr	r3, [r3, #4]
 80078e0:	4a04      	ldr	r2, [pc, #16]	@ (80078f4 <prvResetNextTaskUnblockTime+0x3c>)
 80078e2:	6013      	str	r3, [r2, #0]
}
 80078e4:	bf00      	nop
 80078e6:	370c      	adds	r7, #12
 80078e8:	46bd      	mov	sp, r7
 80078ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ee:	4770      	bx	lr
 80078f0:	200015bc 	.word	0x200015bc
 80078f4:	20001624 	.word	0x20001624

080078f8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80078f8:	b480      	push	{r7}
 80078fa:	b083      	sub	sp, #12
 80078fc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80078fe:	4b0b      	ldr	r3, [pc, #44]	@ (800792c <xTaskGetSchedulerState+0x34>)
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	2b00      	cmp	r3, #0
 8007904:	d102      	bne.n	800790c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007906:	2301      	movs	r3, #1
 8007908:	607b      	str	r3, [r7, #4]
 800790a:	e008      	b.n	800791e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800790c:	4b08      	ldr	r3, [pc, #32]	@ (8007930 <xTaskGetSchedulerState+0x38>)
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	2b00      	cmp	r3, #0
 8007912:	d102      	bne.n	800791a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007914:	2302      	movs	r3, #2
 8007916:	607b      	str	r3, [r7, #4]
 8007918:	e001      	b.n	800791e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800791a:	2300      	movs	r3, #0
 800791c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800791e:	687b      	ldr	r3, [r7, #4]
	}
 8007920:	4618      	mov	r0, r3
 8007922:	370c      	adds	r7, #12
 8007924:	46bd      	mov	sp, r7
 8007926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800792a:	4770      	bx	lr
 800792c:	20001610 	.word	0x20001610
 8007930:	2000162c 	.word	0x2000162c

08007934 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007934:	b580      	push	{r7, lr}
 8007936:	b086      	sub	sp, #24
 8007938:	af00      	add	r7, sp, #0
 800793a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007940:	2300      	movs	r3, #0
 8007942:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	2b00      	cmp	r3, #0
 8007948:	d05c      	beq.n	8007a04 <xTaskPriorityDisinherit+0xd0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800794a:	4b31      	ldr	r3, [pc, #196]	@ (8007a10 <xTaskPriorityDisinherit+0xdc>)
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	693a      	ldr	r2, [r7, #16]
 8007950:	429a      	cmp	r2, r3
 8007952:	d00d      	beq.n	8007970 <xTaskPriorityDisinherit+0x3c>
	__asm volatile
 8007954:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007958:	b672      	cpsid	i
 800795a:	f383 8811 	msr	BASEPRI, r3
 800795e:	f3bf 8f6f 	isb	sy
 8007962:	f3bf 8f4f 	dsb	sy
 8007966:	b662      	cpsie	i
 8007968:	60fb      	str	r3, [r7, #12]
}
 800796a:	bf00      	nop
 800796c:	bf00      	nop
 800796e:	e7fd      	b.n	800796c <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8007970:	693b      	ldr	r3, [r7, #16]
 8007972:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007974:	2b00      	cmp	r3, #0
 8007976:	d10d      	bne.n	8007994 <xTaskPriorityDisinherit+0x60>
	__asm volatile
 8007978:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800797c:	b672      	cpsid	i
 800797e:	f383 8811 	msr	BASEPRI, r3
 8007982:	f3bf 8f6f 	isb	sy
 8007986:	f3bf 8f4f 	dsb	sy
 800798a:	b662      	cpsie	i
 800798c:	60bb      	str	r3, [r7, #8]
}
 800798e:	bf00      	nop
 8007990:	bf00      	nop
 8007992:	e7fd      	b.n	8007990 <xTaskPriorityDisinherit+0x5c>
			( pxTCB->uxMutexesHeld )--;
 8007994:	693b      	ldr	r3, [r7, #16]
 8007996:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007998:	1e5a      	subs	r2, r3, #1
 800799a:	693b      	ldr	r3, [r7, #16]
 800799c:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800799e:	693b      	ldr	r3, [r7, #16]
 80079a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80079a2:	693b      	ldr	r3, [r7, #16]
 80079a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80079a6:	429a      	cmp	r2, r3
 80079a8:	d02c      	beq.n	8007a04 <xTaskPriorityDisinherit+0xd0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80079aa:	693b      	ldr	r3, [r7, #16]
 80079ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d128      	bne.n	8007a04 <xTaskPriorityDisinherit+0xd0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80079b2:	693b      	ldr	r3, [r7, #16]
 80079b4:	3304      	adds	r3, #4
 80079b6:	4618      	mov	r0, r3
 80079b8:	f7fe fb16 	bl	8005fe8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80079bc:	693b      	ldr	r3, [r7, #16]
 80079be:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80079c0:	693b      	ldr	r3, [r7, #16]
 80079c2:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80079c4:	693b      	ldr	r3, [r7, #16]
 80079c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079c8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80079cc:	693b      	ldr	r3, [r7, #16]
 80079ce:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80079d0:	693b      	ldr	r3, [r7, #16]
 80079d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80079d4:	4b0f      	ldr	r3, [pc, #60]	@ (8007a14 <xTaskPriorityDisinherit+0xe0>)
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	429a      	cmp	r2, r3
 80079da:	d903      	bls.n	80079e4 <xTaskPriorityDisinherit+0xb0>
 80079dc:	693b      	ldr	r3, [r7, #16]
 80079de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079e0:	4a0c      	ldr	r2, [pc, #48]	@ (8007a14 <xTaskPriorityDisinherit+0xe0>)
 80079e2:	6013      	str	r3, [r2, #0]
 80079e4:	693b      	ldr	r3, [r7, #16]
 80079e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80079e8:	4613      	mov	r3, r2
 80079ea:	009b      	lsls	r3, r3, #2
 80079ec:	4413      	add	r3, r2
 80079ee:	009b      	lsls	r3, r3, #2
 80079f0:	4a09      	ldr	r2, [pc, #36]	@ (8007a18 <xTaskPriorityDisinherit+0xe4>)
 80079f2:	441a      	add	r2, r3
 80079f4:	693b      	ldr	r3, [r7, #16]
 80079f6:	3304      	adds	r3, #4
 80079f8:	4619      	mov	r1, r3
 80079fa:	4610      	mov	r0, r2
 80079fc:	f7fe fa97 	bl	8005f2e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007a00:	2301      	movs	r3, #1
 8007a02:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007a04:	697b      	ldr	r3, [r7, #20]
	}
 8007a06:	4618      	mov	r0, r3
 8007a08:	3718      	adds	r7, #24
 8007a0a:	46bd      	mov	sp, r7
 8007a0c:	bd80      	pop	{r7, pc}
 8007a0e:	bf00      	nop
 8007a10:	20001130 	.word	0x20001130
 8007a14:	2000160c 	.word	0x2000160c
 8007a18:	20001134 	.word	0x20001134

08007a1c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007a1c:	b580      	push	{r7, lr}
 8007a1e:	b084      	sub	sp, #16
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	6078      	str	r0, [r7, #4]
 8007a24:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007a26:	4b21      	ldr	r3, [pc, #132]	@ (8007aac <prvAddCurrentTaskToDelayedList+0x90>)
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007a2c:	4b20      	ldr	r3, [pc, #128]	@ (8007ab0 <prvAddCurrentTaskToDelayedList+0x94>)
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	3304      	adds	r3, #4
 8007a32:	4618      	mov	r0, r3
 8007a34:	f7fe fad8 	bl	8005fe8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007a3e:	d10a      	bne.n	8007a56 <prvAddCurrentTaskToDelayedList+0x3a>
 8007a40:	683b      	ldr	r3, [r7, #0]
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d007      	beq.n	8007a56 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007a46:	4b1a      	ldr	r3, [pc, #104]	@ (8007ab0 <prvAddCurrentTaskToDelayedList+0x94>)
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	3304      	adds	r3, #4
 8007a4c:	4619      	mov	r1, r3
 8007a4e:	4819      	ldr	r0, [pc, #100]	@ (8007ab4 <prvAddCurrentTaskToDelayedList+0x98>)
 8007a50:	f7fe fa6d 	bl	8005f2e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007a54:	e026      	b.n	8007aa4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007a56:	68fa      	ldr	r2, [r7, #12]
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	4413      	add	r3, r2
 8007a5c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007a5e:	4b14      	ldr	r3, [pc, #80]	@ (8007ab0 <prvAddCurrentTaskToDelayedList+0x94>)
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	68ba      	ldr	r2, [r7, #8]
 8007a64:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007a66:	68ba      	ldr	r2, [r7, #8]
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	429a      	cmp	r2, r3
 8007a6c:	d209      	bcs.n	8007a82 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007a6e:	4b12      	ldr	r3, [pc, #72]	@ (8007ab8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007a70:	681a      	ldr	r2, [r3, #0]
 8007a72:	4b0f      	ldr	r3, [pc, #60]	@ (8007ab0 <prvAddCurrentTaskToDelayedList+0x94>)
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	3304      	adds	r3, #4
 8007a78:	4619      	mov	r1, r3
 8007a7a:	4610      	mov	r0, r2
 8007a7c:	f7fe fa7b 	bl	8005f76 <vListInsert>
}
 8007a80:	e010      	b.n	8007aa4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007a82:	4b0e      	ldr	r3, [pc, #56]	@ (8007abc <prvAddCurrentTaskToDelayedList+0xa0>)
 8007a84:	681a      	ldr	r2, [r3, #0]
 8007a86:	4b0a      	ldr	r3, [pc, #40]	@ (8007ab0 <prvAddCurrentTaskToDelayedList+0x94>)
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	3304      	adds	r3, #4
 8007a8c:	4619      	mov	r1, r3
 8007a8e:	4610      	mov	r0, r2
 8007a90:	f7fe fa71 	bl	8005f76 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007a94:	4b0a      	ldr	r3, [pc, #40]	@ (8007ac0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	68ba      	ldr	r2, [r7, #8]
 8007a9a:	429a      	cmp	r2, r3
 8007a9c:	d202      	bcs.n	8007aa4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007a9e:	4a08      	ldr	r2, [pc, #32]	@ (8007ac0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007aa0:	68bb      	ldr	r3, [r7, #8]
 8007aa2:	6013      	str	r3, [r2, #0]
}
 8007aa4:	bf00      	nop
 8007aa6:	3710      	adds	r7, #16
 8007aa8:	46bd      	mov	sp, r7
 8007aaa:	bd80      	pop	{r7, pc}
 8007aac:	20001608 	.word	0x20001608
 8007ab0:	20001130 	.word	0x20001130
 8007ab4:	200015f0 	.word	0x200015f0
 8007ab8:	200015c0 	.word	0x200015c0
 8007abc:	200015bc 	.word	0x200015bc
 8007ac0:	20001624 	.word	0x20001624

08007ac4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007ac4:	b580      	push	{r7, lr}
 8007ac6:	b08a      	sub	sp, #40	@ 0x28
 8007ac8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007aca:	2300      	movs	r3, #0
 8007acc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007ace:	f000 fb21 	bl	8008114 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007ad2:	4b1e      	ldr	r3, [pc, #120]	@ (8007b4c <xTimerCreateTimerTask+0x88>)
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d021      	beq.n	8007b1e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007ada:	2300      	movs	r3, #0
 8007adc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007ade:	2300      	movs	r3, #0
 8007ae0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007ae2:	1d3a      	adds	r2, r7, #4
 8007ae4:	f107 0108 	add.w	r1, r7, #8
 8007ae8:	f107 030c 	add.w	r3, r7, #12
 8007aec:	4618      	mov	r0, r3
 8007aee:	f7fe f9d7 	bl	8005ea0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007af2:	6879      	ldr	r1, [r7, #4]
 8007af4:	68bb      	ldr	r3, [r7, #8]
 8007af6:	68fa      	ldr	r2, [r7, #12]
 8007af8:	9202      	str	r2, [sp, #8]
 8007afa:	9301      	str	r3, [sp, #4]
 8007afc:	2302      	movs	r3, #2
 8007afe:	9300      	str	r3, [sp, #0]
 8007b00:	2300      	movs	r3, #0
 8007b02:	460a      	mov	r2, r1
 8007b04:	4912      	ldr	r1, [pc, #72]	@ (8007b50 <xTimerCreateTimerTask+0x8c>)
 8007b06:	4813      	ldr	r0, [pc, #76]	@ (8007b54 <xTimerCreateTimerTask+0x90>)
 8007b08:	f7ff f87e 	bl	8006c08 <xTaskCreateStatic>
 8007b0c:	4603      	mov	r3, r0
 8007b0e:	4a12      	ldr	r2, [pc, #72]	@ (8007b58 <xTimerCreateTimerTask+0x94>)
 8007b10:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007b12:	4b11      	ldr	r3, [pc, #68]	@ (8007b58 <xTimerCreateTimerTask+0x94>)
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d001      	beq.n	8007b1e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007b1a:	2301      	movs	r3, #1
 8007b1c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007b1e:	697b      	ldr	r3, [r7, #20]
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d10d      	bne.n	8007b40 <xTimerCreateTimerTask+0x7c>
	__asm volatile
 8007b24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b28:	b672      	cpsid	i
 8007b2a:	f383 8811 	msr	BASEPRI, r3
 8007b2e:	f3bf 8f6f 	isb	sy
 8007b32:	f3bf 8f4f 	dsb	sy
 8007b36:	b662      	cpsie	i
 8007b38:	613b      	str	r3, [r7, #16]
}
 8007b3a:	bf00      	nop
 8007b3c:	bf00      	nop
 8007b3e:	e7fd      	b.n	8007b3c <xTimerCreateTimerTask+0x78>
	return xReturn;
 8007b40:	697b      	ldr	r3, [r7, #20]
}
 8007b42:	4618      	mov	r0, r3
 8007b44:	3718      	adds	r7, #24
 8007b46:	46bd      	mov	sp, r7
 8007b48:	bd80      	pop	{r7, pc}
 8007b4a:	bf00      	nop
 8007b4c:	20001660 	.word	0x20001660
 8007b50:	0800b570 	.word	0x0800b570
 8007b54:	08007c9d 	.word	0x08007c9d
 8007b58:	20001664 	.word	0x20001664

08007b5c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007b5c:	b580      	push	{r7, lr}
 8007b5e:	b08a      	sub	sp, #40	@ 0x28
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	60f8      	str	r0, [r7, #12]
 8007b64:	60b9      	str	r1, [r7, #8]
 8007b66:	607a      	str	r2, [r7, #4]
 8007b68:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007b6a:	2300      	movs	r3, #0
 8007b6c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d10d      	bne.n	8007b90 <xTimerGenericCommand+0x34>
	__asm volatile
 8007b74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b78:	b672      	cpsid	i
 8007b7a:	f383 8811 	msr	BASEPRI, r3
 8007b7e:	f3bf 8f6f 	isb	sy
 8007b82:	f3bf 8f4f 	dsb	sy
 8007b86:	b662      	cpsie	i
 8007b88:	623b      	str	r3, [r7, #32]
}
 8007b8a:	bf00      	nop
 8007b8c:	bf00      	nop
 8007b8e:	e7fd      	b.n	8007b8c <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007b90:	4b19      	ldr	r3, [pc, #100]	@ (8007bf8 <xTimerGenericCommand+0x9c>)
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d02a      	beq.n	8007bee <xTimerGenericCommand+0x92>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007b98:	68bb      	ldr	r3, [r7, #8]
 8007b9a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007ba4:	68bb      	ldr	r3, [r7, #8]
 8007ba6:	2b05      	cmp	r3, #5
 8007ba8:	dc18      	bgt.n	8007bdc <xTimerGenericCommand+0x80>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007baa:	f7ff fea5 	bl	80078f8 <xTaskGetSchedulerState>
 8007bae:	4603      	mov	r3, r0
 8007bb0:	2b02      	cmp	r3, #2
 8007bb2:	d109      	bne.n	8007bc8 <xTimerGenericCommand+0x6c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007bb4:	4b10      	ldr	r3, [pc, #64]	@ (8007bf8 <xTimerGenericCommand+0x9c>)
 8007bb6:	6818      	ldr	r0, [r3, #0]
 8007bb8:	f107 0110 	add.w	r1, r7, #16
 8007bbc:	2300      	movs	r3, #0
 8007bbe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007bc0:	f7fe fb96 	bl	80062f0 <xQueueGenericSend>
 8007bc4:	6278      	str	r0, [r7, #36]	@ 0x24
 8007bc6:	e012      	b.n	8007bee <xTimerGenericCommand+0x92>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007bc8:	4b0b      	ldr	r3, [pc, #44]	@ (8007bf8 <xTimerGenericCommand+0x9c>)
 8007bca:	6818      	ldr	r0, [r3, #0]
 8007bcc:	f107 0110 	add.w	r1, r7, #16
 8007bd0:	2300      	movs	r3, #0
 8007bd2:	2200      	movs	r2, #0
 8007bd4:	f7fe fb8c 	bl	80062f0 <xQueueGenericSend>
 8007bd8:	6278      	str	r0, [r7, #36]	@ 0x24
 8007bda:	e008      	b.n	8007bee <xTimerGenericCommand+0x92>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007bdc:	4b06      	ldr	r3, [pc, #24]	@ (8007bf8 <xTimerGenericCommand+0x9c>)
 8007bde:	6818      	ldr	r0, [r3, #0]
 8007be0:	f107 0110 	add.w	r1, r7, #16
 8007be4:	2300      	movs	r3, #0
 8007be6:	683a      	ldr	r2, [r7, #0]
 8007be8:	f7fe fc8c 	bl	8006504 <xQueueGenericSendFromISR>
 8007bec:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007bee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007bf0:	4618      	mov	r0, r3
 8007bf2:	3728      	adds	r7, #40	@ 0x28
 8007bf4:	46bd      	mov	sp, r7
 8007bf6:	bd80      	pop	{r7, pc}
 8007bf8:	20001660 	.word	0x20001660

08007bfc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007bfc:	b580      	push	{r7, lr}
 8007bfe:	b088      	sub	sp, #32
 8007c00:	af02      	add	r7, sp, #8
 8007c02:	6078      	str	r0, [r7, #4]
 8007c04:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007c06:	4b24      	ldr	r3, [pc, #144]	@ (8007c98 <prvProcessExpiredTimer+0x9c>)
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	68db      	ldr	r3, [r3, #12]
 8007c0c:	68db      	ldr	r3, [r3, #12]
 8007c0e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007c10:	697b      	ldr	r3, [r7, #20]
 8007c12:	3304      	adds	r3, #4
 8007c14:	4618      	mov	r0, r3
 8007c16:	f7fe f9e7 	bl	8005fe8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007c1a:	697b      	ldr	r3, [r7, #20]
 8007c1c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007c20:	f003 0304 	and.w	r3, r3, #4
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d025      	beq.n	8007c74 <prvProcessExpiredTimer+0x78>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007c28:	697b      	ldr	r3, [r7, #20]
 8007c2a:	699a      	ldr	r2, [r3, #24]
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	18d1      	adds	r1, r2, r3
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	683a      	ldr	r2, [r7, #0]
 8007c34:	6978      	ldr	r0, [r7, #20]
 8007c36:	f000 f8d7 	bl	8007de8 <prvInsertTimerInActiveList>
 8007c3a:	4603      	mov	r3, r0
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d022      	beq.n	8007c86 <prvProcessExpiredTimer+0x8a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007c40:	2300      	movs	r3, #0
 8007c42:	9300      	str	r3, [sp, #0]
 8007c44:	2300      	movs	r3, #0
 8007c46:	687a      	ldr	r2, [r7, #4]
 8007c48:	2100      	movs	r1, #0
 8007c4a:	6978      	ldr	r0, [r7, #20]
 8007c4c:	f7ff ff86 	bl	8007b5c <xTimerGenericCommand>
 8007c50:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007c52:	693b      	ldr	r3, [r7, #16]
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d116      	bne.n	8007c86 <prvProcessExpiredTimer+0x8a>
	__asm volatile
 8007c58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c5c:	b672      	cpsid	i
 8007c5e:	f383 8811 	msr	BASEPRI, r3
 8007c62:	f3bf 8f6f 	isb	sy
 8007c66:	f3bf 8f4f 	dsb	sy
 8007c6a:	b662      	cpsie	i
 8007c6c:	60fb      	str	r3, [r7, #12]
}
 8007c6e:	bf00      	nop
 8007c70:	bf00      	nop
 8007c72:	e7fd      	b.n	8007c70 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007c74:	697b      	ldr	r3, [r7, #20]
 8007c76:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007c7a:	f023 0301 	bic.w	r3, r3, #1
 8007c7e:	b2da      	uxtb	r2, r3
 8007c80:	697b      	ldr	r3, [r7, #20]
 8007c82:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007c86:	697b      	ldr	r3, [r7, #20]
 8007c88:	6a1b      	ldr	r3, [r3, #32]
 8007c8a:	6978      	ldr	r0, [r7, #20]
 8007c8c:	4798      	blx	r3
}
 8007c8e:	bf00      	nop
 8007c90:	3718      	adds	r7, #24
 8007c92:	46bd      	mov	sp, r7
 8007c94:	bd80      	pop	{r7, pc}
 8007c96:	bf00      	nop
 8007c98:	20001658 	.word	0x20001658

08007c9c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007c9c:	b580      	push	{r7, lr}
 8007c9e:	b084      	sub	sp, #16
 8007ca0:	af00      	add	r7, sp, #0
 8007ca2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007ca4:	f107 0308 	add.w	r3, r7, #8
 8007ca8:	4618      	mov	r0, r3
 8007caa:	f000 f859 	bl	8007d60 <prvGetNextExpireTime>
 8007cae:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007cb0:	68bb      	ldr	r3, [r7, #8]
 8007cb2:	4619      	mov	r1, r3
 8007cb4:	68f8      	ldr	r0, [r7, #12]
 8007cb6:	f000 f805 	bl	8007cc4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007cba:	f000 f8d7 	bl	8007e6c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007cbe:	bf00      	nop
 8007cc0:	e7f0      	b.n	8007ca4 <prvTimerTask+0x8>
	...

08007cc4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007cc4:	b580      	push	{r7, lr}
 8007cc6:	b084      	sub	sp, #16
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	6078      	str	r0, [r7, #4]
 8007ccc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007cce:	f7ff fa0d 	bl	80070ec <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007cd2:	f107 0308 	add.w	r3, r7, #8
 8007cd6:	4618      	mov	r0, r3
 8007cd8:	f000 f866 	bl	8007da8 <prvSampleTimeNow>
 8007cdc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007cde:	68bb      	ldr	r3, [r7, #8]
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d130      	bne.n	8007d46 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007ce4:	683b      	ldr	r3, [r7, #0]
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d10a      	bne.n	8007d00 <prvProcessTimerOrBlockTask+0x3c>
 8007cea:	687a      	ldr	r2, [r7, #4]
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	429a      	cmp	r2, r3
 8007cf0:	d806      	bhi.n	8007d00 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007cf2:	f7ff fa09 	bl	8007108 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007cf6:	68f9      	ldr	r1, [r7, #12]
 8007cf8:	6878      	ldr	r0, [r7, #4]
 8007cfa:	f7ff ff7f 	bl	8007bfc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007cfe:	e024      	b.n	8007d4a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007d00:	683b      	ldr	r3, [r7, #0]
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d008      	beq.n	8007d18 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007d06:	4b13      	ldr	r3, [pc, #76]	@ (8007d54 <prvProcessTimerOrBlockTask+0x90>)
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d101      	bne.n	8007d14 <prvProcessTimerOrBlockTask+0x50>
 8007d10:	2301      	movs	r3, #1
 8007d12:	e000      	b.n	8007d16 <prvProcessTimerOrBlockTask+0x52>
 8007d14:	2300      	movs	r3, #0
 8007d16:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007d18:	4b0f      	ldr	r3, [pc, #60]	@ (8007d58 <prvProcessTimerOrBlockTask+0x94>)
 8007d1a:	6818      	ldr	r0, [r3, #0]
 8007d1c:	687a      	ldr	r2, [r7, #4]
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	1ad3      	subs	r3, r2, r3
 8007d22:	683a      	ldr	r2, [r7, #0]
 8007d24:	4619      	mov	r1, r3
 8007d26:	f7fe ff3b 	bl	8006ba0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007d2a:	f7ff f9ed 	bl	8007108 <xTaskResumeAll>
 8007d2e:	4603      	mov	r3, r0
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d10a      	bne.n	8007d4a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007d34:	4b09      	ldr	r3, [pc, #36]	@ (8007d5c <prvProcessTimerOrBlockTask+0x98>)
 8007d36:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007d3a:	601a      	str	r2, [r3, #0]
 8007d3c:	f3bf 8f4f 	dsb	sy
 8007d40:	f3bf 8f6f 	isb	sy
}
 8007d44:	e001      	b.n	8007d4a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007d46:	f7ff f9df 	bl	8007108 <xTaskResumeAll>
}
 8007d4a:	bf00      	nop
 8007d4c:	3710      	adds	r7, #16
 8007d4e:	46bd      	mov	sp, r7
 8007d50:	bd80      	pop	{r7, pc}
 8007d52:	bf00      	nop
 8007d54:	2000165c 	.word	0x2000165c
 8007d58:	20001660 	.word	0x20001660
 8007d5c:	e000ed04 	.word	0xe000ed04

08007d60 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007d60:	b480      	push	{r7}
 8007d62:	b085      	sub	sp, #20
 8007d64:	af00      	add	r7, sp, #0
 8007d66:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007d68:	4b0e      	ldr	r3, [pc, #56]	@ (8007da4 <prvGetNextExpireTime+0x44>)
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d101      	bne.n	8007d76 <prvGetNextExpireTime+0x16>
 8007d72:	2201      	movs	r2, #1
 8007d74:	e000      	b.n	8007d78 <prvGetNextExpireTime+0x18>
 8007d76:	2200      	movs	r2, #0
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d105      	bne.n	8007d90 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007d84:	4b07      	ldr	r3, [pc, #28]	@ (8007da4 <prvGetNextExpireTime+0x44>)
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	68db      	ldr	r3, [r3, #12]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	60fb      	str	r3, [r7, #12]
 8007d8e:	e001      	b.n	8007d94 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007d90:	2300      	movs	r3, #0
 8007d92:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007d94:	68fb      	ldr	r3, [r7, #12]
}
 8007d96:	4618      	mov	r0, r3
 8007d98:	3714      	adds	r7, #20
 8007d9a:	46bd      	mov	sp, r7
 8007d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da0:	4770      	bx	lr
 8007da2:	bf00      	nop
 8007da4:	20001658 	.word	0x20001658

08007da8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007da8:	b580      	push	{r7, lr}
 8007daa:	b084      	sub	sp, #16
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007db0:	f7ff fa4a 	bl	8007248 <xTaskGetTickCount>
 8007db4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007db6:	4b0b      	ldr	r3, [pc, #44]	@ (8007de4 <prvSampleTimeNow+0x3c>)
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	68fa      	ldr	r2, [r7, #12]
 8007dbc:	429a      	cmp	r2, r3
 8007dbe:	d205      	bcs.n	8007dcc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007dc0:	f000 f940 	bl	8008044 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	2201      	movs	r2, #1
 8007dc8:	601a      	str	r2, [r3, #0]
 8007dca:	e002      	b.n	8007dd2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	2200      	movs	r2, #0
 8007dd0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007dd2:	4a04      	ldr	r2, [pc, #16]	@ (8007de4 <prvSampleTimeNow+0x3c>)
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007dd8:	68fb      	ldr	r3, [r7, #12]
}
 8007dda:	4618      	mov	r0, r3
 8007ddc:	3710      	adds	r7, #16
 8007dde:	46bd      	mov	sp, r7
 8007de0:	bd80      	pop	{r7, pc}
 8007de2:	bf00      	nop
 8007de4:	20001668 	.word	0x20001668

08007de8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007de8:	b580      	push	{r7, lr}
 8007dea:	b086      	sub	sp, #24
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	60f8      	str	r0, [r7, #12]
 8007df0:	60b9      	str	r1, [r7, #8]
 8007df2:	607a      	str	r2, [r7, #4]
 8007df4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007df6:	2300      	movs	r3, #0
 8007df8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	68ba      	ldr	r2, [r7, #8]
 8007dfe:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	68fa      	ldr	r2, [r7, #12]
 8007e04:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007e06:	68ba      	ldr	r2, [r7, #8]
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	429a      	cmp	r2, r3
 8007e0c:	d812      	bhi.n	8007e34 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007e0e:	687a      	ldr	r2, [r7, #4]
 8007e10:	683b      	ldr	r3, [r7, #0]
 8007e12:	1ad2      	subs	r2, r2, r3
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	699b      	ldr	r3, [r3, #24]
 8007e18:	429a      	cmp	r2, r3
 8007e1a:	d302      	bcc.n	8007e22 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007e1c:	2301      	movs	r3, #1
 8007e1e:	617b      	str	r3, [r7, #20]
 8007e20:	e01b      	b.n	8007e5a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007e22:	4b10      	ldr	r3, [pc, #64]	@ (8007e64 <prvInsertTimerInActiveList+0x7c>)
 8007e24:	681a      	ldr	r2, [r3, #0]
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	3304      	adds	r3, #4
 8007e2a:	4619      	mov	r1, r3
 8007e2c:	4610      	mov	r0, r2
 8007e2e:	f7fe f8a2 	bl	8005f76 <vListInsert>
 8007e32:	e012      	b.n	8007e5a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007e34:	687a      	ldr	r2, [r7, #4]
 8007e36:	683b      	ldr	r3, [r7, #0]
 8007e38:	429a      	cmp	r2, r3
 8007e3a:	d206      	bcs.n	8007e4a <prvInsertTimerInActiveList+0x62>
 8007e3c:	68ba      	ldr	r2, [r7, #8]
 8007e3e:	683b      	ldr	r3, [r7, #0]
 8007e40:	429a      	cmp	r2, r3
 8007e42:	d302      	bcc.n	8007e4a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007e44:	2301      	movs	r3, #1
 8007e46:	617b      	str	r3, [r7, #20]
 8007e48:	e007      	b.n	8007e5a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007e4a:	4b07      	ldr	r3, [pc, #28]	@ (8007e68 <prvInsertTimerInActiveList+0x80>)
 8007e4c:	681a      	ldr	r2, [r3, #0]
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	3304      	adds	r3, #4
 8007e52:	4619      	mov	r1, r3
 8007e54:	4610      	mov	r0, r2
 8007e56:	f7fe f88e 	bl	8005f76 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007e5a:	697b      	ldr	r3, [r7, #20]
}
 8007e5c:	4618      	mov	r0, r3
 8007e5e:	3718      	adds	r7, #24
 8007e60:	46bd      	mov	sp, r7
 8007e62:	bd80      	pop	{r7, pc}
 8007e64:	2000165c 	.word	0x2000165c
 8007e68:	20001658 	.word	0x20001658

08007e6c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007e6c:	b580      	push	{r7, lr}
 8007e6e:	b08e      	sub	sp, #56	@ 0x38
 8007e70:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007e72:	e0d4      	b.n	800801e <prvProcessReceivedCommands+0x1b2>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	da1b      	bge.n	8007eb2 <prvProcessReceivedCommands+0x46>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007e7a:	1d3b      	adds	r3, r7, #4
 8007e7c:	3304      	adds	r3, #4
 8007e7e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007e80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d10d      	bne.n	8007ea2 <prvProcessReceivedCommands+0x36>
	__asm volatile
 8007e86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e8a:	b672      	cpsid	i
 8007e8c:	f383 8811 	msr	BASEPRI, r3
 8007e90:	f3bf 8f6f 	isb	sy
 8007e94:	f3bf 8f4f 	dsb	sy
 8007e98:	b662      	cpsie	i
 8007e9a:	61fb      	str	r3, [r7, #28]
}
 8007e9c:	bf00      	nop
 8007e9e:	bf00      	nop
 8007ea0:	e7fd      	b.n	8007e9e <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007ea2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007ea8:	6850      	ldr	r0, [r2, #4]
 8007eaa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007eac:	6892      	ldr	r2, [r2, #8]
 8007eae:	4611      	mov	r1, r2
 8007eb0:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	f2c0 80b2 	blt.w	800801e <prvProcessReceivedCommands+0x1b2>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007ebe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ec0:	695b      	ldr	r3, [r3, #20]
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d004      	beq.n	8007ed0 <prvProcessReceivedCommands+0x64>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007ec6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ec8:	3304      	adds	r3, #4
 8007eca:	4618      	mov	r0, r3
 8007ecc:	f7fe f88c 	bl	8005fe8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007ed0:	463b      	mov	r3, r7
 8007ed2:	4618      	mov	r0, r3
 8007ed4:	f7ff ff68 	bl	8007da8 <prvSampleTimeNow>
 8007ed8:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	2b09      	cmp	r3, #9
 8007ede:	f200 809b 	bhi.w	8008018 <prvProcessReceivedCommands+0x1ac>
 8007ee2:	a201      	add	r2, pc, #4	@ (adr r2, 8007ee8 <prvProcessReceivedCommands+0x7c>)
 8007ee4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ee8:	08007f11 	.word	0x08007f11
 8007eec:	08007f11 	.word	0x08007f11
 8007ef0:	08007f11 	.word	0x08007f11
 8007ef4:	08007f8b 	.word	0x08007f8b
 8007ef8:	08007f9f 	.word	0x08007f9f
 8007efc:	08007fef 	.word	0x08007fef
 8007f00:	08007f11 	.word	0x08007f11
 8007f04:	08007f11 	.word	0x08007f11
 8007f08:	08007f8b 	.word	0x08007f8b
 8007f0c:	08007f9f 	.word	0x08007f9f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007f10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f12:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007f16:	f043 0301 	orr.w	r3, r3, #1
 8007f1a:	b2da      	uxtb	r2, r3
 8007f1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f1e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007f22:	68ba      	ldr	r2, [r7, #8]
 8007f24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f26:	699b      	ldr	r3, [r3, #24]
 8007f28:	18d1      	adds	r1, r2, r3
 8007f2a:	68bb      	ldr	r3, [r7, #8]
 8007f2c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007f2e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007f30:	f7ff ff5a 	bl	8007de8 <prvInsertTimerInActiveList>
 8007f34:	4603      	mov	r3, r0
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d070      	beq.n	800801c <prvProcessReceivedCommands+0x1b0>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007f3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f3c:	6a1b      	ldr	r3, [r3, #32]
 8007f3e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007f40:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007f42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f44:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007f48:	f003 0304 	and.w	r3, r3, #4
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d065      	beq.n	800801c <prvProcessReceivedCommands+0x1b0>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007f50:	68ba      	ldr	r2, [r7, #8]
 8007f52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f54:	699b      	ldr	r3, [r3, #24]
 8007f56:	441a      	add	r2, r3
 8007f58:	2300      	movs	r3, #0
 8007f5a:	9300      	str	r3, [sp, #0]
 8007f5c:	2300      	movs	r3, #0
 8007f5e:	2100      	movs	r1, #0
 8007f60:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007f62:	f7ff fdfb 	bl	8007b5c <xTimerGenericCommand>
 8007f66:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007f68:	6a3b      	ldr	r3, [r7, #32]
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d156      	bne.n	800801c <prvProcessReceivedCommands+0x1b0>
	__asm volatile
 8007f6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f72:	b672      	cpsid	i
 8007f74:	f383 8811 	msr	BASEPRI, r3
 8007f78:	f3bf 8f6f 	isb	sy
 8007f7c:	f3bf 8f4f 	dsb	sy
 8007f80:	b662      	cpsie	i
 8007f82:	61bb      	str	r3, [r7, #24]
}
 8007f84:	bf00      	nop
 8007f86:	bf00      	nop
 8007f88:	e7fd      	b.n	8007f86 <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007f8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f8c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007f90:	f023 0301 	bic.w	r3, r3, #1
 8007f94:	b2da      	uxtb	r2, r3
 8007f96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f98:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8007f9c:	e03f      	b.n	800801e <prvProcessReceivedCommands+0x1b2>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007f9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fa0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007fa4:	f043 0301 	orr.w	r3, r3, #1
 8007fa8:	b2da      	uxtb	r2, r3
 8007faa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fac:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007fb0:	68ba      	ldr	r2, [r7, #8]
 8007fb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fb4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007fb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fb8:	699b      	ldr	r3, [r3, #24]
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d10d      	bne.n	8007fda <prvProcessReceivedCommands+0x16e>
	__asm volatile
 8007fbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fc2:	b672      	cpsid	i
 8007fc4:	f383 8811 	msr	BASEPRI, r3
 8007fc8:	f3bf 8f6f 	isb	sy
 8007fcc:	f3bf 8f4f 	dsb	sy
 8007fd0:	b662      	cpsie	i
 8007fd2:	617b      	str	r3, [r7, #20]
}
 8007fd4:	bf00      	nop
 8007fd6:	bf00      	nop
 8007fd8:	e7fd      	b.n	8007fd6 <prvProcessReceivedCommands+0x16a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007fda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fdc:	699a      	ldr	r2, [r3, #24]
 8007fde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fe0:	18d1      	adds	r1, r2, r3
 8007fe2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fe4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007fe6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007fe8:	f7ff fefe 	bl	8007de8 <prvInsertTimerInActiveList>
					break;
 8007fec:	e017      	b.n	800801e <prvProcessReceivedCommands+0x1b2>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007fee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ff0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007ff4:	f003 0302 	and.w	r3, r3, #2
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d103      	bne.n	8008004 <prvProcessReceivedCommands+0x198>
						{
							vPortFree( pxTimer );
 8007ffc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007ffe:	f000 fbd1 	bl	80087a4 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008002:	e00c      	b.n	800801e <prvProcessReceivedCommands+0x1b2>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008004:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008006:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800800a:	f023 0301 	bic.w	r3, r3, #1
 800800e:	b2da      	uxtb	r2, r3
 8008010:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008012:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8008016:	e002      	b.n	800801e <prvProcessReceivedCommands+0x1b2>

				default	:
					/* Don't expect to get here. */
					break;
 8008018:	bf00      	nop
 800801a:	e000      	b.n	800801e <prvProcessReceivedCommands+0x1b2>
					break;
 800801c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800801e:	4b08      	ldr	r3, [pc, #32]	@ (8008040 <prvProcessReceivedCommands+0x1d4>)
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	1d39      	adds	r1, r7, #4
 8008024:	2200      	movs	r2, #0
 8008026:	4618      	mov	r0, r3
 8008028:	f7fe fb10 	bl	800664c <xQueueReceive>
 800802c:	4603      	mov	r3, r0
 800802e:	2b00      	cmp	r3, #0
 8008030:	f47f af20 	bne.w	8007e74 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8008034:	bf00      	nop
 8008036:	bf00      	nop
 8008038:	3730      	adds	r7, #48	@ 0x30
 800803a:	46bd      	mov	sp, r7
 800803c:	bd80      	pop	{r7, pc}
 800803e:	bf00      	nop
 8008040:	20001660 	.word	0x20001660

08008044 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008044:	b580      	push	{r7, lr}
 8008046:	b088      	sub	sp, #32
 8008048:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800804a:	e04b      	b.n	80080e4 <prvSwitchTimerLists+0xa0>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800804c:	4b2f      	ldr	r3, [pc, #188]	@ (800810c <prvSwitchTimerLists+0xc8>)
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	68db      	ldr	r3, [r3, #12]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008056:	4b2d      	ldr	r3, [pc, #180]	@ (800810c <prvSwitchTimerLists+0xc8>)
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	68db      	ldr	r3, [r3, #12]
 800805c:	68db      	ldr	r3, [r3, #12]
 800805e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	3304      	adds	r3, #4
 8008064:	4618      	mov	r0, r3
 8008066:	f7fd ffbf 	bl	8005fe8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	6a1b      	ldr	r3, [r3, #32]
 800806e:	68f8      	ldr	r0, [r7, #12]
 8008070:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008078:	f003 0304 	and.w	r3, r3, #4
 800807c:	2b00      	cmp	r3, #0
 800807e:	d031      	beq.n	80080e4 <prvSwitchTimerLists+0xa0>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	699b      	ldr	r3, [r3, #24]
 8008084:	693a      	ldr	r2, [r7, #16]
 8008086:	4413      	add	r3, r2
 8008088:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800808a:	68ba      	ldr	r2, [r7, #8]
 800808c:	693b      	ldr	r3, [r7, #16]
 800808e:	429a      	cmp	r2, r3
 8008090:	d90e      	bls.n	80080b0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	68ba      	ldr	r2, [r7, #8]
 8008096:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	68fa      	ldr	r2, [r7, #12]
 800809c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800809e:	4b1b      	ldr	r3, [pc, #108]	@ (800810c <prvSwitchTimerLists+0xc8>)
 80080a0:	681a      	ldr	r2, [r3, #0]
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	3304      	adds	r3, #4
 80080a6:	4619      	mov	r1, r3
 80080a8:	4610      	mov	r0, r2
 80080aa:	f7fd ff64 	bl	8005f76 <vListInsert>
 80080ae:	e019      	b.n	80080e4 <prvSwitchTimerLists+0xa0>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80080b0:	2300      	movs	r3, #0
 80080b2:	9300      	str	r3, [sp, #0]
 80080b4:	2300      	movs	r3, #0
 80080b6:	693a      	ldr	r2, [r7, #16]
 80080b8:	2100      	movs	r1, #0
 80080ba:	68f8      	ldr	r0, [r7, #12]
 80080bc:	f7ff fd4e 	bl	8007b5c <xTimerGenericCommand>
 80080c0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d10d      	bne.n	80080e4 <prvSwitchTimerLists+0xa0>
	__asm volatile
 80080c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080cc:	b672      	cpsid	i
 80080ce:	f383 8811 	msr	BASEPRI, r3
 80080d2:	f3bf 8f6f 	isb	sy
 80080d6:	f3bf 8f4f 	dsb	sy
 80080da:	b662      	cpsie	i
 80080dc:	603b      	str	r3, [r7, #0]
}
 80080de:	bf00      	nop
 80080e0:	bf00      	nop
 80080e2:	e7fd      	b.n	80080e0 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80080e4:	4b09      	ldr	r3, [pc, #36]	@ (800810c <prvSwitchTimerLists+0xc8>)
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d1ae      	bne.n	800804c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80080ee:	4b07      	ldr	r3, [pc, #28]	@ (800810c <prvSwitchTimerLists+0xc8>)
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80080f4:	4b06      	ldr	r3, [pc, #24]	@ (8008110 <prvSwitchTimerLists+0xcc>)
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	4a04      	ldr	r2, [pc, #16]	@ (800810c <prvSwitchTimerLists+0xc8>)
 80080fa:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80080fc:	4a04      	ldr	r2, [pc, #16]	@ (8008110 <prvSwitchTimerLists+0xcc>)
 80080fe:	697b      	ldr	r3, [r7, #20]
 8008100:	6013      	str	r3, [r2, #0]
}
 8008102:	bf00      	nop
 8008104:	3718      	adds	r7, #24
 8008106:	46bd      	mov	sp, r7
 8008108:	bd80      	pop	{r7, pc}
 800810a:	bf00      	nop
 800810c:	20001658 	.word	0x20001658
 8008110:	2000165c 	.word	0x2000165c

08008114 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008114:	b580      	push	{r7, lr}
 8008116:	b082      	sub	sp, #8
 8008118:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800811a:	f000 f947 	bl	80083ac <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800811e:	4b15      	ldr	r3, [pc, #84]	@ (8008174 <prvCheckForValidListAndQueue+0x60>)
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	2b00      	cmp	r3, #0
 8008124:	d120      	bne.n	8008168 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008126:	4814      	ldr	r0, [pc, #80]	@ (8008178 <prvCheckForValidListAndQueue+0x64>)
 8008128:	f7fd fed4 	bl	8005ed4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800812c:	4813      	ldr	r0, [pc, #76]	@ (800817c <prvCheckForValidListAndQueue+0x68>)
 800812e:	f7fd fed1 	bl	8005ed4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008132:	4b13      	ldr	r3, [pc, #76]	@ (8008180 <prvCheckForValidListAndQueue+0x6c>)
 8008134:	4a10      	ldr	r2, [pc, #64]	@ (8008178 <prvCheckForValidListAndQueue+0x64>)
 8008136:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008138:	4b12      	ldr	r3, [pc, #72]	@ (8008184 <prvCheckForValidListAndQueue+0x70>)
 800813a:	4a10      	ldr	r2, [pc, #64]	@ (800817c <prvCheckForValidListAndQueue+0x68>)
 800813c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800813e:	2300      	movs	r3, #0
 8008140:	9300      	str	r3, [sp, #0]
 8008142:	4b11      	ldr	r3, [pc, #68]	@ (8008188 <prvCheckForValidListAndQueue+0x74>)
 8008144:	4a11      	ldr	r2, [pc, #68]	@ (800818c <prvCheckForValidListAndQueue+0x78>)
 8008146:	2110      	movs	r1, #16
 8008148:	200a      	movs	r0, #10
 800814a:	f7fd ffe3 	bl	8006114 <xQueueGenericCreateStatic>
 800814e:	4603      	mov	r3, r0
 8008150:	4a08      	ldr	r2, [pc, #32]	@ (8008174 <prvCheckForValidListAndQueue+0x60>)
 8008152:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008154:	4b07      	ldr	r3, [pc, #28]	@ (8008174 <prvCheckForValidListAndQueue+0x60>)
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	2b00      	cmp	r3, #0
 800815a:	d005      	beq.n	8008168 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800815c:	4b05      	ldr	r3, [pc, #20]	@ (8008174 <prvCheckForValidListAndQueue+0x60>)
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	490b      	ldr	r1, [pc, #44]	@ (8008190 <prvCheckForValidListAndQueue+0x7c>)
 8008162:	4618      	mov	r0, r3
 8008164:	f7fe fcf2 	bl	8006b4c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008168:	f000 f956 	bl	8008418 <vPortExitCritical>
}
 800816c:	bf00      	nop
 800816e:	46bd      	mov	sp, r7
 8008170:	bd80      	pop	{r7, pc}
 8008172:	bf00      	nop
 8008174:	20001660 	.word	0x20001660
 8008178:	20001630 	.word	0x20001630
 800817c:	20001644 	.word	0x20001644
 8008180:	20001658 	.word	0x20001658
 8008184:	2000165c 	.word	0x2000165c
 8008188:	2000170c 	.word	0x2000170c
 800818c:	2000166c 	.word	0x2000166c
 8008190:	0800b578 	.word	0x0800b578

08008194 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008194:	b480      	push	{r7}
 8008196:	b085      	sub	sp, #20
 8008198:	af00      	add	r7, sp, #0
 800819a:	60f8      	str	r0, [r7, #12]
 800819c:	60b9      	str	r1, [r7, #8]
 800819e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	3b04      	subs	r3, #4
 80081a4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80081ac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	3b04      	subs	r3, #4
 80081b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80081b4:	68bb      	ldr	r3, [r7, #8]
 80081b6:	f023 0201 	bic.w	r2, r3, #1
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	3b04      	subs	r3, #4
 80081c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80081c4:	4a0c      	ldr	r2, [pc, #48]	@ (80081f8 <pxPortInitialiseStack+0x64>)
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	3b14      	subs	r3, #20
 80081ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80081d0:	687a      	ldr	r2, [r7, #4]
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	3b04      	subs	r3, #4
 80081da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	f06f 0202 	mvn.w	r2, #2
 80081e2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	3b20      	subs	r3, #32
 80081e8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80081ea:	68fb      	ldr	r3, [r7, #12]
}
 80081ec:	4618      	mov	r0, r3
 80081ee:	3714      	adds	r7, #20
 80081f0:	46bd      	mov	sp, r7
 80081f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f6:	4770      	bx	lr
 80081f8:	080081fd 	.word	0x080081fd

080081fc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80081fc:	b480      	push	{r7}
 80081fe:	b085      	sub	sp, #20
 8008200:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008202:	2300      	movs	r3, #0
 8008204:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008206:	4b15      	ldr	r3, [pc, #84]	@ (800825c <prvTaskExitError+0x60>)
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800820e:	d00d      	beq.n	800822c <prvTaskExitError+0x30>
	__asm volatile
 8008210:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008214:	b672      	cpsid	i
 8008216:	f383 8811 	msr	BASEPRI, r3
 800821a:	f3bf 8f6f 	isb	sy
 800821e:	f3bf 8f4f 	dsb	sy
 8008222:	b662      	cpsie	i
 8008224:	60fb      	str	r3, [r7, #12]
}
 8008226:	bf00      	nop
 8008228:	bf00      	nop
 800822a:	e7fd      	b.n	8008228 <prvTaskExitError+0x2c>
	__asm volatile
 800822c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008230:	b672      	cpsid	i
 8008232:	f383 8811 	msr	BASEPRI, r3
 8008236:	f3bf 8f6f 	isb	sy
 800823a:	f3bf 8f4f 	dsb	sy
 800823e:	b662      	cpsie	i
 8008240:	60bb      	str	r3, [r7, #8]
}
 8008242:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008244:	bf00      	nop
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	2b00      	cmp	r3, #0
 800824a:	d0fc      	beq.n	8008246 <prvTaskExitError+0x4a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800824c:	bf00      	nop
 800824e:	bf00      	nop
 8008250:	3714      	adds	r7, #20
 8008252:	46bd      	mov	sp, r7
 8008254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008258:	4770      	bx	lr
 800825a:	bf00      	nop
 800825c:	2000000c 	.word	0x2000000c

08008260 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008260:	4b07      	ldr	r3, [pc, #28]	@ (8008280 <pxCurrentTCBConst2>)
 8008262:	6819      	ldr	r1, [r3, #0]
 8008264:	6808      	ldr	r0, [r1, #0]
 8008266:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800826a:	f380 8809 	msr	PSP, r0
 800826e:	f3bf 8f6f 	isb	sy
 8008272:	f04f 0000 	mov.w	r0, #0
 8008276:	f380 8811 	msr	BASEPRI, r0
 800827a:	4770      	bx	lr
 800827c:	f3af 8000 	nop.w

08008280 <pxCurrentTCBConst2>:
 8008280:	20001130 	.word	0x20001130
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008284:	bf00      	nop
 8008286:	bf00      	nop

08008288 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008288:	4808      	ldr	r0, [pc, #32]	@ (80082ac <prvPortStartFirstTask+0x24>)
 800828a:	6800      	ldr	r0, [r0, #0]
 800828c:	6800      	ldr	r0, [r0, #0]
 800828e:	f380 8808 	msr	MSP, r0
 8008292:	f04f 0000 	mov.w	r0, #0
 8008296:	f380 8814 	msr	CONTROL, r0
 800829a:	b662      	cpsie	i
 800829c:	b661      	cpsie	f
 800829e:	f3bf 8f4f 	dsb	sy
 80082a2:	f3bf 8f6f 	isb	sy
 80082a6:	df00      	svc	0
 80082a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80082aa:	bf00      	nop
 80082ac:	e000ed08 	.word	0xe000ed08

080082b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80082b0:	b580      	push	{r7, lr}
 80082b2:	b084      	sub	sp, #16
 80082b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80082b6:	4b37      	ldr	r3, [pc, #220]	@ (8008394 <xPortStartScheduler+0xe4>)
 80082b8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	781b      	ldrb	r3, [r3, #0]
 80082be:	b2db      	uxtb	r3, r3
 80082c0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	22ff      	movs	r2, #255	@ 0xff
 80082c6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	781b      	ldrb	r3, [r3, #0]
 80082cc:	b2db      	uxtb	r3, r3
 80082ce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80082d0:	78fb      	ldrb	r3, [r7, #3]
 80082d2:	b2db      	uxtb	r3, r3
 80082d4:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80082d8:	b2da      	uxtb	r2, r3
 80082da:	4b2f      	ldr	r3, [pc, #188]	@ (8008398 <xPortStartScheduler+0xe8>)
 80082dc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80082de:	4b2f      	ldr	r3, [pc, #188]	@ (800839c <xPortStartScheduler+0xec>)
 80082e0:	2207      	movs	r2, #7
 80082e2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80082e4:	e009      	b.n	80082fa <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80082e6:	4b2d      	ldr	r3, [pc, #180]	@ (800839c <xPortStartScheduler+0xec>)
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	3b01      	subs	r3, #1
 80082ec:	4a2b      	ldr	r2, [pc, #172]	@ (800839c <xPortStartScheduler+0xec>)
 80082ee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80082f0:	78fb      	ldrb	r3, [r7, #3]
 80082f2:	b2db      	uxtb	r3, r3
 80082f4:	005b      	lsls	r3, r3, #1
 80082f6:	b2db      	uxtb	r3, r3
 80082f8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80082fa:	78fb      	ldrb	r3, [r7, #3]
 80082fc:	b2db      	uxtb	r3, r3
 80082fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008302:	2b80      	cmp	r3, #128	@ 0x80
 8008304:	d0ef      	beq.n	80082e6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008306:	4b25      	ldr	r3, [pc, #148]	@ (800839c <xPortStartScheduler+0xec>)
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	f1c3 0307 	rsb	r3, r3, #7
 800830e:	2b04      	cmp	r3, #4
 8008310:	d00d      	beq.n	800832e <xPortStartScheduler+0x7e>
	__asm volatile
 8008312:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008316:	b672      	cpsid	i
 8008318:	f383 8811 	msr	BASEPRI, r3
 800831c:	f3bf 8f6f 	isb	sy
 8008320:	f3bf 8f4f 	dsb	sy
 8008324:	b662      	cpsie	i
 8008326:	60bb      	str	r3, [r7, #8]
}
 8008328:	bf00      	nop
 800832a:	bf00      	nop
 800832c:	e7fd      	b.n	800832a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800832e:	4b1b      	ldr	r3, [pc, #108]	@ (800839c <xPortStartScheduler+0xec>)
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	021b      	lsls	r3, r3, #8
 8008334:	4a19      	ldr	r2, [pc, #100]	@ (800839c <xPortStartScheduler+0xec>)
 8008336:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008338:	4b18      	ldr	r3, [pc, #96]	@ (800839c <xPortStartScheduler+0xec>)
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008340:	4a16      	ldr	r2, [pc, #88]	@ (800839c <xPortStartScheduler+0xec>)
 8008342:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	b2da      	uxtb	r2, r3
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800834c:	4b14      	ldr	r3, [pc, #80]	@ (80083a0 <xPortStartScheduler+0xf0>)
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	4a13      	ldr	r2, [pc, #76]	@ (80083a0 <xPortStartScheduler+0xf0>)
 8008352:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008356:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008358:	4b11      	ldr	r3, [pc, #68]	@ (80083a0 <xPortStartScheduler+0xf0>)
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	4a10      	ldr	r2, [pc, #64]	@ (80083a0 <xPortStartScheduler+0xf0>)
 800835e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8008362:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008364:	f000 f8dc 	bl	8008520 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008368:	4b0e      	ldr	r3, [pc, #56]	@ (80083a4 <xPortStartScheduler+0xf4>)
 800836a:	2200      	movs	r2, #0
 800836c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800836e:	f000 f8fb 	bl	8008568 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008372:	4b0d      	ldr	r3, [pc, #52]	@ (80083a8 <xPortStartScheduler+0xf8>)
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	4a0c      	ldr	r2, [pc, #48]	@ (80083a8 <xPortStartScheduler+0xf8>)
 8008378:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800837c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800837e:	f7ff ff83 	bl	8008288 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008382:	f7ff f82d 	bl	80073e0 <vTaskSwitchContext>
	prvTaskExitError();
 8008386:	f7ff ff39 	bl	80081fc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800838a:	2300      	movs	r3, #0
}
 800838c:	4618      	mov	r0, r3
 800838e:	3710      	adds	r7, #16
 8008390:	46bd      	mov	sp, r7
 8008392:	bd80      	pop	{r7, pc}
 8008394:	e000e400 	.word	0xe000e400
 8008398:	2000175c 	.word	0x2000175c
 800839c:	20001760 	.word	0x20001760
 80083a0:	e000ed20 	.word	0xe000ed20
 80083a4:	2000000c 	.word	0x2000000c
 80083a8:	e000ef34 	.word	0xe000ef34

080083ac <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80083ac:	b480      	push	{r7}
 80083ae:	b083      	sub	sp, #12
 80083b0:	af00      	add	r7, sp, #0
	__asm volatile
 80083b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083b6:	b672      	cpsid	i
 80083b8:	f383 8811 	msr	BASEPRI, r3
 80083bc:	f3bf 8f6f 	isb	sy
 80083c0:	f3bf 8f4f 	dsb	sy
 80083c4:	b662      	cpsie	i
 80083c6:	607b      	str	r3, [r7, #4]
}
 80083c8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80083ca:	4b11      	ldr	r3, [pc, #68]	@ (8008410 <vPortEnterCritical+0x64>)
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	3301      	adds	r3, #1
 80083d0:	4a0f      	ldr	r2, [pc, #60]	@ (8008410 <vPortEnterCritical+0x64>)
 80083d2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80083d4:	4b0e      	ldr	r3, [pc, #56]	@ (8008410 <vPortEnterCritical+0x64>)
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	2b01      	cmp	r3, #1
 80083da:	d112      	bne.n	8008402 <vPortEnterCritical+0x56>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80083dc:	4b0d      	ldr	r3, [pc, #52]	@ (8008414 <vPortEnterCritical+0x68>)
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	b2db      	uxtb	r3, r3
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d00d      	beq.n	8008402 <vPortEnterCritical+0x56>
	__asm volatile
 80083e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083ea:	b672      	cpsid	i
 80083ec:	f383 8811 	msr	BASEPRI, r3
 80083f0:	f3bf 8f6f 	isb	sy
 80083f4:	f3bf 8f4f 	dsb	sy
 80083f8:	b662      	cpsie	i
 80083fa:	603b      	str	r3, [r7, #0]
}
 80083fc:	bf00      	nop
 80083fe:	bf00      	nop
 8008400:	e7fd      	b.n	80083fe <vPortEnterCritical+0x52>
	}
}
 8008402:	bf00      	nop
 8008404:	370c      	adds	r7, #12
 8008406:	46bd      	mov	sp, r7
 8008408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800840c:	4770      	bx	lr
 800840e:	bf00      	nop
 8008410:	2000000c 	.word	0x2000000c
 8008414:	e000ed04 	.word	0xe000ed04

08008418 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008418:	b480      	push	{r7}
 800841a:	b083      	sub	sp, #12
 800841c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800841e:	4b13      	ldr	r3, [pc, #76]	@ (800846c <vPortExitCritical+0x54>)
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	2b00      	cmp	r3, #0
 8008424:	d10d      	bne.n	8008442 <vPortExitCritical+0x2a>
	__asm volatile
 8008426:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800842a:	b672      	cpsid	i
 800842c:	f383 8811 	msr	BASEPRI, r3
 8008430:	f3bf 8f6f 	isb	sy
 8008434:	f3bf 8f4f 	dsb	sy
 8008438:	b662      	cpsie	i
 800843a:	607b      	str	r3, [r7, #4]
}
 800843c:	bf00      	nop
 800843e:	bf00      	nop
 8008440:	e7fd      	b.n	800843e <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8008442:	4b0a      	ldr	r3, [pc, #40]	@ (800846c <vPortExitCritical+0x54>)
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	3b01      	subs	r3, #1
 8008448:	4a08      	ldr	r2, [pc, #32]	@ (800846c <vPortExitCritical+0x54>)
 800844a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800844c:	4b07      	ldr	r3, [pc, #28]	@ (800846c <vPortExitCritical+0x54>)
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	2b00      	cmp	r3, #0
 8008452:	d105      	bne.n	8008460 <vPortExitCritical+0x48>
 8008454:	2300      	movs	r3, #0
 8008456:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008458:	683b      	ldr	r3, [r7, #0]
 800845a:	f383 8811 	msr	BASEPRI, r3
}
 800845e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008460:	bf00      	nop
 8008462:	370c      	adds	r7, #12
 8008464:	46bd      	mov	sp, r7
 8008466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800846a:	4770      	bx	lr
 800846c:	2000000c 	.word	0x2000000c

08008470 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008470:	f3ef 8009 	mrs	r0, PSP
 8008474:	f3bf 8f6f 	isb	sy
 8008478:	4b15      	ldr	r3, [pc, #84]	@ (80084d0 <pxCurrentTCBConst>)
 800847a:	681a      	ldr	r2, [r3, #0]
 800847c:	f01e 0f10 	tst.w	lr, #16
 8008480:	bf08      	it	eq
 8008482:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008486:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800848a:	6010      	str	r0, [r2, #0]
 800848c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008490:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8008494:	b672      	cpsid	i
 8008496:	f380 8811 	msr	BASEPRI, r0
 800849a:	f3bf 8f4f 	dsb	sy
 800849e:	f3bf 8f6f 	isb	sy
 80084a2:	b662      	cpsie	i
 80084a4:	f7fe ff9c 	bl	80073e0 <vTaskSwitchContext>
 80084a8:	f04f 0000 	mov.w	r0, #0
 80084ac:	f380 8811 	msr	BASEPRI, r0
 80084b0:	bc09      	pop	{r0, r3}
 80084b2:	6819      	ldr	r1, [r3, #0]
 80084b4:	6808      	ldr	r0, [r1, #0]
 80084b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084ba:	f01e 0f10 	tst.w	lr, #16
 80084be:	bf08      	it	eq
 80084c0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80084c4:	f380 8809 	msr	PSP, r0
 80084c8:	f3bf 8f6f 	isb	sy
 80084cc:	4770      	bx	lr
 80084ce:	bf00      	nop

080084d0 <pxCurrentTCBConst>:
 80084d0:	20001130 	.word	0x20001130
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80084d4:	bf00      	nop
 80084d6:	bf00      	nop

080084d8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80084d8:	b580      	push	{r7, lr}
 80084da:	b082      	sub	sp, #8
 80084dc:	af00      	add	r7, sp, #0
	__asm volatile
 80084de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084e2:	b672      	cpsid	i
 80084e4:	f383 8811 	msr	BASEPRI, r3
 80084e8:	f3bf 8f6f 	isb	sy
 80084ec:	f3bf 8f4f 	dsb	sy
 80084f0:	b662      	cpsie	i
 80084f2:	607b      	str	r3, [r7, #4]
}
 80084f4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80084f6:	f7fe feb7 	bl	8007268 <xTaskIncrementTick>
 80084fa:	4603      	mov	r3, r0
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d003      	beq.n	8008508 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008500:	4b06      	ldr	r3, [pc, #24]	@ (800851c <SysTick_Handler+0x44>)
 8008502:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008506:	601a      	str	r2, [r3, #0]
 8008508:	2300      	movs	r3, #0
 800850a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800850c:	683b      	ldr	r3, [r7, #0]
 800850e:	f383 8811 	msr	BASEPRI, r3
}
 8008512:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008514:	bf00      	nop
 8008516:	3708      	adds	r7, #8
 8008518:	46bd      	mov	sp, r7
 800851a:	bd80      	pop	{r7, pc}
 800851c:	e000ed04 	.word	0xe000ed04

08008520 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008520:	b480      	push	{r7}
 8008522:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008524:	4b0b      	ldr	r3, [pc, #44]	@ (8008554 <vPortSetupTimerInterrupt+0x34>)
 8008526:	2200      	movs	r2, #0
 8008528:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800852a:	4b0b      	ldr	r3, [pc, #44]	@ (8008558 <vPortSetupTimerInterrupt+0x38>)
 800852c:	2200      	movs	r2, #0
 800852e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008530:	4b0a      	ldr	r3, [pc, #40]	@ (800855c <vPortSetupTimerInterrupt+0x3c>)
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	4a0a      	ldr	r2, [pc, #40]	@ (8008560 <vPortSetupTimerInterrupt+0x40>)
 8008536:	fba2 2303 	umull	r2, r3, r2, r3
 800853a:	099b      	lsrs	r3, r3, #6
 800853c:	4a09      	ldr	r2, [pc, #36]	@ (8008564 <vPortSetupTimerInterrupt+0x44>)
 800853e:	3b01      	subs	r3, #1
 8008540:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008542:	4b04      	ldr	r3, [pc, #16]	@ (8008554 <vPortSetupTimerInterrupt+0x34>)
 8008544:	2207      	movs	r2, #7
 8008546:	601a      	str	r2, [r3, #0]
}
 8008548:	bf00      	nop
 800854a:	46bd      	mov	sp, r7
 800854c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008550:	4770      	bx	lr
 8008552:	bf00      	nop
 8008554:	e000e010 	.word	0xe000e010
 8008558:	e000e018 	.word	0xe000e018
 800855c:	20000000 	.word	0x20000000
 8008560:	10624dd3 	.word	0x10624dd3
 8008564:	e000e014 	.word	0xe000e014

08008568 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008568:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8008578 <vPortEnableVFP+0x10>
 800856c:	6801      	ldr	r1, [r0, #0]
 800856e:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8008572:	6001      	str	r1, [r0, #0]
 8008574:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008576:	bf00      	nop
 8008578:	e000ed88 	.word	0xe000ed88

0800857c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800857c:	b480      	push	{r7}
 800857e:	b085      	sub	sp, #20
 8008580:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008582:	f3ef 8305 	mrs	r3, IPSR
 8008586:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	2b0f      	cmp	r3, #15
 800858c:	d917      	bls.n	80085be <vPortValidateInterruptPriority+0x42>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800858e:	4a1a      	ldr	r2, [pc, #104]	@ (80085f8 <vPortValidateInterruptPriority+0x7c>)
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	4413      	add	r3, r2
 8008594:	781b      	ldrb	r3, [r3, #0]
 8008596:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008598:	4b18      	ldr	r3, [pc, #96]	@ (80085fc <vPortValidateInterruptPriority+0x80>)
 800859a:	781b      	ldrb	r3, [r3, #0]
 800859c:	7afa      	ldrb	r2, [r7, #11]
 800859e:	429a      	cmp	r2, r3
 80085a0:	d20d      	bcs.n	80085be <vPortValidateInterruptPriority+0x42>
	__asm volatile
 80085a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085a6:	b672      	cpsid	i
 80085a8:	f383 8811 	msr	BASEPRI, r3
 80085ac:	f3bf 8f6f 	isb	sy
 80085b0:	f3bf 8f4f 	dsb	sy
 80085b4:	b662      	cpsie	i
 80085b6:	607b      	str	r3, [r7, #4]
}
 80085b8:	bf00      	nop
 80085ba:	bf00      	nop
 80085bc:	e7fd      	b.n	80085ba <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80085be:	4b10      	ldr	r3, [pc, #64]	@ (8008600 <vPortValidateInterruptPriority+0x84>)
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80085c6:	4b0f      	ldr	r3, [pc, #60]	@ (8008604 <vPortValidateInterruptPriority+0x88>)
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	429a      	cmp	r2, r3
 80085cc:	d90d      	bls.n	80085ea <vPortValidateInterruptPriority+0x6e>
	__asm volatile
 80085ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085d2:	b672      	cpsid	i
 80085d4:	f383 8811 	msr	BASEPRI, r3
 80085d8:	f3bf 8f6f 	isb	sy
 80085dc:	f3bf 8f4f 	dsb	sy
 80085e0:	b662      	cpsie	i
 80085e2:	603b      	str	r3, [r7, #0]
}
 80085e4:	bf00      	nop
 80085e6:	bf00      	nop
 80085e8:	e7fd      	b.n	80085e6 <vPortValidateInterruptPriority+0x6a>
	}
 80085ea:	bf00      	nop
 80085ec:	3714      	adds	r7, #20
 80085ee:	46bd      	mov	sp, r7
 80085f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f4:	4770      	bx	lr
 80085f6:	bf00      	nop
 80085f8:	e000e3f0 	.word	0xe000e3f0
 80085fc:	2000175c 	.word	0x2000175c
 8008600:	e000ed0c 	.word	0xe000ed0c
 8008604:	20001760 	.word	0x20001760

08008608 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008608:	b580      	push	{r7, lr}
 800860a:	b08a      	sub	sp, #40	@ 0x28
 800860c:	af00      	add	r7, sp, #0
 800860e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008610:	2300      	movs	r3, #0
 8008612:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008614:	f7fe fd6a 	bl	80070ec <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008618:	4b5d      	ldr	r3, [pc, #372]	@ (8008790 <pvPortMalloc+0x188>)
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	2b00      	cmp	r3, #0
 800861e:	d101      	bne.n	8008624 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008620:	f000 f920 	bl	8008864 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008624:	4b5b      	ldr	r3, [pc, #364]	@ (8008794 <pvPortMalloc+0x18c>)
 8008626:	681a      	ldr	r2, [r3, #0]
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	4013      	ands	r3, r2
 800862c:	2b00      	cmp	r3, #0
 800862e:	f040 8094 	bne.w	800875a <pvPortMalloc+0x152>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	2b00      	cmp	r3, #0
 8008636:	d020      	beq.n	800867a <pvPortMalloc+0x72>
			{
				xWantedSize += xHeapStructSize;
 8008638:	2208      	movs	r2, #8
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	4413      	add	r3, r2
 800863e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	f003 0307 	and.w	r3, r3, #7
 8008646:	2b00      	cmp	r3, #0
 8008648:	d017      	beq.n	800867a <pvPortMalloc+0x72>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	f023 0307 	bic.w	r3, r3, #7
 8008650:	3308      	adds	r3, #8
 8008652:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	f003 0307 	and.w	r3, r3, #7
 800865a:	2b00      	cmp	r3, #0
 800865c:	d00d      	beq.n	800867a <pvPortMalloc+0x72>
	__asm volatile
 800865e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008662:	b672      	cpsid	i
 8008664:	f383 8811 	msr	BASEPRI, r3
 8008668:	f3bf 8f6f 	isb	sy
 800866c:	f3bf 8f4f 	dsb	sy
 8008670:	b662      	cpsie	i
 8008672:	617b      	str	r3, [r7, #20]
}
 8008674:	bf00      	nop
 8008676:	bf00      	nop
 8008678:	e7fd      	b.n	8008676 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	2b00      	cmp	r3, #0
 800867e:	d06c      	beq.n	800875a <pvPortMalloc+0x152>
 8008680:	4b45      	ldr	r3, [pc, #276]	@ (8008798 <pvPortMalloc+0x190>)
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	687a      	ldr	r2, [r7, #4]
 8008686:	429a      	cmp	r2, r3
 8008688:	d867      	bhi.n	800875a <pvPortMalloc+0x152>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800868a:	4b44      	ldr	r3, [pc, #272]	@ (800879c <pvPortMalloc+0x194>)
 800868c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800868e:	4b43      	ldr	r3, [pc, #268]	@ (800879c <pvPortMalloc+0x194>)
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008694:	e004      	b.n	80086a0 <pvPortMalloc+0x98>
				{
					pxPreviousBlock = pxBlock;
 8008696:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008698:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800869a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80086a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086a2:	685b      	ldr	r3, [r3, #4]
 80086a4:	687a      	ldr	r2, [r7, #4]
 80086a6:	429a      	cmp	r2, r3
 80086a8:	d903      	bls.n	80086b2 <pvPortMalloc+0xaa>
 80086aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d1f1      	bne.n	8008696 <pvPortMalloc+0x8e>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80086b2:	4b37      	ldr	r3, [pc, #220]	@ (8008790 <pvPortMalloc+0x188>)
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80086b8:	429a      	cmp	r2, r3
 80086ba:	d04e      	beq.n	800875a <pvPortMalloc+0x152>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80086bc:	6a3b      	ldr	r3, [r7, #32]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	2208      	movs	r2, #8
 80086c2:	4413      	add	r3, r2
 80086c4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80086c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086c8:	681a      	ldr	r2, [r3, #0]
 80086ca:	6a3b      	ldr	r3, [r7, #32]
 80086cc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80086ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086d0:	685a      	ldr	r2, [r3, #4]
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	1ad2      	subs	r2, r2, r3
 80086d6:	2308      	movs	r3, #8
 80086d8:	005b      	lsls	r3, r3, #1
 80086da:	429a      	cmp	r2, r3
 80086dc:	d922      	bls.n	8008724 <pvPortMalloc+0x11c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80086de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	4413      	add	r3, r2
 80086e4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80086e6:	69bb      	ldr	r3, [r7, #24]
 80086e8:	f003 0307 	and.w	r3, r3, #7
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d00d      	beq.n	800870c <pvPortMalloc+0x104>
	__asm volatile
 80086f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086f4:	b672      	cpsid	i
 80086f6:	f383 8811 	msr	BASEPRI, r3
 80086fa:	f3bf 8f6f 	isb	sy
 80086fe:	f3bf 8f4f 	dsb	sy
 8008702:	b662      	cpsie	i
 8008704:	613b      	str	r3, [r7, #16]
}
 8008706:	bf00      	nop
 8008708:	bf00      	nop
 800870a:	e7fd      	b.n	8008708 <pvPortMalloc+0x100>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800870c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800870e:	685a      	ldr	r2, [r3, #4]
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	1ad2      	subs	r2, r2, r3
 8008714:	69bb      	ldr	r3, [r7, #24]
 8008716:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008718:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800871a:	687a      	ldr	r2, [r7, #4]
 800871c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800871e:	69b8      	ldr	r0, [r7, #24]
 8008720:	f000 f902 	bl	8008928 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008724:	4b1c      	ldr	r3, [pc, #112]	@ (8008798 <pvPortMalloc+0x190>)
 8008726:	681a      	ldr	r2, [r3, #0]
 8008728:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800872a:	685b      	ldr	r3, [r3, #4]
 800872c:	1ad3      	subs	r3, r2, r3
 800872e:	4a1a      	ldr	r2, [pc, #104]	@ (8008798 <pvPortMalloc+0x190>)
 8008730:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008732:	4b19      	ldr	r3, [pc, #100]	@ (8008798 <pvPortMalloc+0x190>)
 8008734:	681a      	ldr	r2, [r3, #0]
 8008736:	4b1a      	ldr	r3, [pc, #104]	@ (80087a0 <pvPortMalloc+0x198>)
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	429a      	cmp	r2, r3
 800873c:	d203      	bcs.n	8008746 <pvPortMalloc+0x13e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800873e:	4b16      	ldr	r3, [pc, #88]	@ (8008798 <pvPortMalloc+0x190>)
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	4a17      	ldr	r2, [pc, #92]	@ (80087a0 <pvPortMalloc+0x198>)
 8008744:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008748:	685a      	ldr	r2, [r3, #4]
 800874a:	4b12      	ldr	r3, [pc, #72]	@ (8008794 <pvPortMalloc+0x18c>)
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	431a      	orrs	r2, r3
 8008750:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008752:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008754:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008756:	2200      	movs	r2, #0
 8008758:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800875a:	f7fe fcd5 	bl	8007108 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800875e:	69fb      	ldr	r3, [r7, #28]
 8008760:	f003 0307 	and.w	r3, r3, #7
 8008764:	2b00      	cmp	r3, #0
 8008766:	d00d      	beq.n	8008784 <pvPortMalloc+0x17c>
	__asm volatile
 8008768:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800876c:	b672      	cpsid	i
 800876e:	f383 8811 	msr	BASEPRI, r3
 8008772:	f3bf 8f6f 	isb	sy
 8008776:	f3bf 8f4f 	dsb	sy
 800877a:	b662      	cpsie	i
 800877c:	60fb      	str	r3, [r7, #12]
}
 800877e:	bf00      	nop
 8008780:	bf00      	nop
 8008782:	e7fd      	b.n	8008780 <pvPortMalloc+0x178>
	return pvReturn;
 8008784:	69fb      	ldr	r3, [r7, #28]
}
 8008786:	4618      	mov	r0, r3
 8008788:	3728      	adds	r7, #40	@ 0x28
 800878a:	46bd      	mov	sp, r7
 800878c:	bd80      	pop	{r7, pc}
 800878e:	bf00      	nop
 8008790:	2000536c 	.word	0x2000536c
 8008794:	20005378 	.word	0x20005378
 8008798:	20005370 	.word	0x20005370
 800879c:	20005364 	.word	0x20005364
 80087a0:	20005374 	.word	0x20005374

080087a4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80087a4:	b580      	push	{r7, lr}
 80087a6:	b086      	sub	sp, #24
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d04e      	beq.n	8008854 <vPortFree+0xb0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80087b6:	2308      	movs	r3, #8
 80087b8:	425b      	negs	r3, r3
 80087ba:	697a      	ldr	r2, [r7, #20]
 80087bc:	4413      	add	r3, r2
 80087be:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80087c0:	697b      	ldr	r3, [r7, #20]
 80087c2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80087c4:	693b      	ldr	r3, [r7, #16]
 80087c6:	685a      	ldr	r2, [r3, #4]
 80087c8:	4b24      	ldr	r3, [pc, #144]	@ (800885c <vPortFree+0xb8>)
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	4013      	ands	r3, r2
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d10d      	bne.n	80087ee <vPortFree+0x4a>
	__asm volatile
 80087d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087d6:	b672      	cpsid	i
 80087d8:	f383 8811 	msr	BASEPRI, r3
 80087dc:	f3bf 8f6f 	isb	sy
 80087e0:	f3bf 8f4f 	dsb	sy
 80087e4:	b662      	cpsie	i
 80087e6:	60fb      	str	r3, [r7, #12]
}
 80087e8:	bf00      	nop
 80087ea:	bf00      	nop
 80087ec:	e7fd      	b.n	80087ea <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80087ee:	693b      	ldr	r3, [r7, #16]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d00d      	beq.n	8008812 <vPortFree+0x6e>
	__asm volatile
 80087f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087fa:	b672      	cpsid	i
 80087fc:	f383 8811 	msr	BASEPRI, r3
 8008800:	f3bf 8f6f 	isb	sy
 8008804:	f3bf 8f4f 	dsb	sy
 8008808:	b662      	cpsie	i
 800880a:	60bb      	str	r3, [r7, #8]
}
 800880c:	bf00      	nop
 800880e:	bf00      	nop
 8008810:	e7fd      	b.n	800880e <vPortFree+0x6a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008812:	693b      	ldr	r3, [r7, #16]
 8008814:	685a      	ldr	r2, [r3, #4]
 8008816:	4b11      	ldr	r3, [pc, #68]	@ (800885c <vPortFree+0xb8>)
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	4013      	ands	r3, r2
 800881c:	2b00      	cmp	r3, #0
 800881e:	d019      	beq.n	8008854 <vPortFree+0xb0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008820:	693b      	ldr	r3, [r7, #16]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	2b00      	cmp	r3, #0
 8008826:	d115      	bne.n	8008854 <vPortFree+0xb0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008828:	693b      	ldr	r3, [r7, #16]
 800882a:	685a      	ldr	r2, [r3, #4]
 800882c:	4b0b      	ldr	r3, [pc, #44]	@ (800885c <vPortFree+0xb8>)
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	43db      	mvns	r3, r3
 8008832:	401a      	ands	r2, r3
 8008834:	693b      	ldr	r3, [r7, #16]
 8008836:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008838:	f7fe fc58 	bl	80070ec <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800883c:	693b      	ldr	r3, [r7, #16]
 800883e:	685a      	ldr	r2, [r3, #4]
 8008840:	4b07      	ldr	r3, [pc, #28]	@ (8008860 <vPortFree+0xbc>)
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	4413      	add	r3, r2
 8008846:	4a06      	ldr	r2, [pc, #24]	@ (8008860 <vPortFree+0xbc>)
 8008848:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800884a:	6938      	ldr	r0, [r7, #16]
 800884c:	f000 f86c 	bl	8008928 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8008850:	f7fe fc5a 	bl	8007108 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008854:	bf00      	nop
 8008856:	3718      	adds	r7, #24
 8008858:	46bd      	mov	sp, r7
 800885a:	bd80      	pop	{r7, pc}
 800885c:	20005378 	.word	0x20005378
 8008860:	20005370 	.word	0x20005370

08008864 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008864:	b480      	push	{r7}
 8008866:	b085      	sub	sp, #20
 8008868:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800886a:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800886e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008870:	4b27      	ldr	r3, [pc, #156]	@ (8008910 <prvHeapInit+0xac>)
 8008872:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	f003 0307 	and.w	r3, r3, #7
 800887a:	2b00      	cmp	r3, #0
 800887c:	d00c      	beq.n	8008898 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	3307      	adds	r3, #7
 8008882:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	f023 0307 	bic.w	r3, r3, #7
 800888a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800888c:	68ba      	ldr	r2, [r7, #8]
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	1ad3      	subs	r3, r2, r3
 8008892:	4a1f      	ldr	r2, [pc, #124]	@ (8008910 <prvHeapInit+0xac>)
 8008894:	4413      	add	r3, r2
 8008896:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800889c:	4a1d      	ldr	r2, [pc, #116]	@ (8008914 <prvHeapInit+0xb0>)
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80088a2:	4b1c      	ldr	r3, [pc, #112]	@ (8008914 <prvHeapInit+0xb0>)
 80088a4:	2200      	movs	r2, #0
 80088a6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	68ba      	ldr	r2, [r7, #8]
 80088ac:	4413      	add	r3, r2
 80088ae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80088b0:	2208      	movs	r2, #8
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	1a9b      	subs	r3, r3, r2
 80088b6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	f023 0307 	bic.w	r3, r3, #7
 80088be:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	4a15      	ldr	r2, [pc, #84]	@ (8008918 <prvHeapInit+0xb4>)
 80088c4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80088c6:	4b14      	ldr	r3, [pc, #80]	@ (8008918 <prvHeapInit+0xb4>)
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	2200      	movs	r2, #0
 80088cc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80088ce:	4b12      	ldr	r3, [pc, #72]	@ (8008918 <prvHeapInit+0xb4>)
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	2200      	movs	r2, #0
 80088d4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80088da:	683b      	ldr	r3, [r7, #0]
 80088dc:	68fa      	ldr	r2, [r7, #12]
 80088de:	1ad2      	subs	r2, r2, r3
 80088e0:	683b      	ldr	r3, [r7, #0]
 80088e2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80088e4:	4b0c      	ldr	r3, [pc, #48]	@ (8008918 <prvHeapInit+0xb4>)
 80088e6:	681a      	ldr	r2, [r3, #0]
 80088e8:	683b      	ldr	r3, [r7, #0]
 80088ea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80088ec:	683b      	ldr	r3, [r7, #0]
 80088ee:	685b      	ldr	r3, [r3, #4]
 80088f0:	4a0a      	ldr	r2, [pc, #40]	@ (800891c <prvHeapInit+0xb8>)
 80088f2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80088f4:	683b      	ldr	r3, [r7, #0]
 80088f6:	685b      	ldr	r3, [r3, #4]
 80088f8:	4a09      	ldr	r2, [pc, #36]	@ (8008920 <prvHeapInit+0xbc>)
 80088fa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80088fc:	4b09      	ldr	r3, [pc, #36]	@ (8008924 <prvHeapInit+0xc0>)
 80088fe:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8008902:	601a      	str	r2, [r3, #0]
}
 8008904:	bf00      	nop
 8008906:	3714      	adds	r7, #20
 8008908:	46bd      	mov	sp, r7
 800890a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800890e:	4770      	bx	lr
 8008910:	20001764 	.word	0x20001764
 8008914:	20005364 	.word	0x20005364
 8008918:	2000536c 	.word	0x2000536c
 800891c:	20005374 	.word	0x20005374
 8008920:	20005370 	.word	0x20005370
 8008924:	20005378 	.word	0x20005378

08008928 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008928:	b480      	push	{r7}
 800892a:	b085      	sub	sp, #20
 800892c:	af00      	add	r7, sp, #0
 800892e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008930:	4b28      	ldr	r3, [pc, #160]	@ (80089d4 <prvInsertBlockIntoFreeList+0xac>)
 8008932:	60fb      	str	r3, [r7, #12]
 8008934:	e002      	b.n	800893c <prvInsertBlockIntoFreeList+0x14>
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	60fb      	str	r3, [r7, #12]
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	687a      	ldr	r2, [r7, #4]
 8008942:	429a      	cmp	r2, r3
 8008944:	d8f7      	bhi.n	8008936 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	685b      	ldr	r3, [r3, #4]
 800894e:	68ba      	ldr	r2, [r7, #8]
 8008950:	4413      	add	r3, r2
 8008952:	687a      	ldr	r2, [r7, #4]
 8008954:	429a      	cmp	r2, r3
 8008956:	d108      	bne.n	800896a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	685a      	ldr	r2, [r3, #4]
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	685b      	ldr	r3, [r3, #4]
 8008960:	441a      	add	r2, r3
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	685b      	ldr	r3, [r3, #4]
 8008972:	68ba      	ldr	r2, [r7, #8]
 8008974:	441a      	add	r2, r3
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	429a      	cmp	r2, r3
 800897c:	d118      	bne.n	80089b0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	681a      	ldr	r2, [r3, #0]
 8008982:	4b15      	ldr	r3, [pc, #84]	@ (80089d8 <prvInsertBlockIntoFreeList+0xb0>)
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	429a      	cmp	r2, r3
 8008988:	d00d      	beq.n	80089a6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	685a      	ldr	r2, [r3, #4]
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	685b      	ldr	r3, [r3, #4]
 8008994:	441a      	add	r2, r3
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	681a      	ldr	r2, [r3, #0]
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	601a      	str	r2, [r3, #0]
 80089a4:	e008      	b.n	80089b8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80089a6:	4b0c      	ldr	r3, [pc, #48]	@ (80089d8 <prvInsertBlockIntoFreeList+0xb0>)
 80089a8:	681a      	ldr	r2, [r3, #0]
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	601a      	str	r2, [r3, #0]
 80089ae:	e003      	b.n	80089b8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	681a      	ldr	r2, [r3, #0]
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80089b8:	68fa      	ldr	r2, [r7, #12]
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	429a      	cmp	r2, r3
 80089be:	d002      	beq.n	80089c6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	687a      	ldr	r2, [r7, #4]
 80089c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80089c6:	bf00      	nop
 80089c8:	3714      	adds	r7, #20
 80089ca:	46bd      	mov	sp, r7
 80089cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d0:	4770      	bx	lr
 80089d2:	bf00      	nop
 80089d4:	20005364 	.word	0x20005364
 80089d8:	2000536c 	.word	0x2000536c

080089dc <srand>:
 80089dc:	b538      	push	{r3, r4, r5, lr}
 80089de:	4b10      	ldr	r3, [pc, #64]	@ (8008a20 <srand+0x44>)
 80089e0:	681d      	ldr	r5, [r3, #0]
 80089e2:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80089e4:	4604      	mov	r4, r0
 80089e6:	b9b3      	cbnz	r3, 8008a16 <srand+0x3a>
 80089e8:	2018      	movs	r0, #24
 80089ea:	f001 fd7f 	bl	800a4ec <malloc>
 80089ee:	4602      	mov	r2, r0
 80089f0:	6328      	str	r0, [r5, #48]	@ 0x30
 80089f2:	b920      	cbnz	r0, 80089fe <srand+0x22>
 80089f4:	4b0b      	ldr	r3, [pc, #44]	@ (8008a24 <srand+0x48>)
 80089f6:	480c      	ldr	r0, [pc, #48]	@ (8008a28 <srand+0x4c>)
 80089f8:	2146      	movs	r1, #70	@ 0x46
 80089fa:	f000 feb5 	bl	8009768 <__assert_func>
 80089fe:	490b      	ldr	r1, [pc, #44]	@ (8008a2c <srand+0x50>)
 8008a00:	4b0b      	ldr	r3, [pc, #44]	@ (8008a30 <srand+0x54>)
 8008a02:	e9c0 1300 	strd	r1, r3, [r0]
 8008a06:	4b0b      	ldr	r3, [pc, #44]	@ (8008a34 <srand+0x58>)
 8008a08:	6083      	str	r3, [r0, #8]
 8008a0a:	230b      	movs	r3, #11
 8008a0c:	8183      	strh	r3, [r0, #12]
 8008a0e:	2100      	movs	r1, #0
 8008a10:	2001      	movs	r0, #1
 8008a12:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8008a16:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8008a18:	2200      	movs	r2, #0
 8008a1a:	611c      	str	r4, [r3, #16]
 8008a1c:	615a      	str	r2, [r3, #20]
 8008a1e:	bd38      	pop	{r3, r4, r5, pc}
 8008a20:	2000001c 	.word	0x2000001c
 8008a24:	0800b61c 	.word	0x0800b61c
 8008a28:	0800b633 	.word	0x0800b633
 8008a2c:	abcd330e 	.word	0xabcd330e
 8008a30:	e66d1234 	.word	0xe66d1234
 8008a34:	0005deec 	.word	0x0005deec

08008a38 <rand>:
 8008a38:	4b16      	ldr	r3, [pc, #88]	@ (8008a94 <rand+0x5c>)
 8008a3a:	b510      	push	{r4, lr}
 8008a3c:	681c      	ldr	r4, [r3, #0]
 8008a3e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8008a40:	b9b3      	cbnz	r3, 8008a70 <rand+0x38>
 8008a42:	2018      	movs	r0, #24
 8008a44:	f001 fd52 	bl	800a4ec <malloc>
 8008a48:	4602      	mov	r2, r0
 8008a4a:	6320      	str	r0, [r4, #48]	@ 0x30
 8008a4c:	b920      	cbnz	r0, 8008a58 <rand+0x20>
 8008a4e:	4b12      	ldr	r3, [pc, #72]	@ (8008a98 <rand+0x60>)
 8008a50:	4812      	ldr	r0, [pc, #72]	@ (8008a9c <rand+0x64>)
 8008a52:	2152      	movs	r1, #82	@ 0x52
 8008a54:	f000 fe88 	bl	8009768 <__assert_func>
 8008a58:	4911      	ldr	r1, [pc, #68]	@ (8008aa0 <rand+0x68>)
 8008a5a:	4b12      	ldr	r3, [pc, #72]	@ (8008aa4 <rand+0x6c>)
 8008a5c:	e9c0 1300 	strd	r1, r3, [r0]
 8008a60:	4b11      	ldr	r3, [pc, #68]	@ (8008aa8 <rand+0x70>)
 8008a62:	6083      	str	r3, [r0, #8]
 8008a64:	230b      	movs	r3, #11
 8008a66:	8183      	strh	r3, [r0, #12]
 8008a68:	2100      	movs	r1, #0
 8008a6a:	2001      	movs	r0, #1
 8008a6c:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8008a70:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8008a72:	480e      	ldr	r0, [pc, #56]	@ (8008aac <rand+0x74>)
 8008a74:	690b      	ldr	r3, [r1, #16]
 8008a76:	694c      	ldr	r4, [r1, #20]
 8008a78:	4a0d      	ldr	r2, [pc, #52]	@ (8008ab0 <rand+0x78>)
 8008a7a:	4358      	muls	r0, r3
 8008a7c:	fb02 0004 	mla	r0, r2, r4, r0
 8008a80:	fba3 3202 	umull	r3, r2, r3, r2
 8008a84:	3301      	adds	r3, #1
 8008a86:	eb40 0002 	adc.w	r0, r0, r2
 8008a8a:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8008a8e:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8008a92:	bd10      	pop	{r4, pc}
 8008a94:	2000001c 	.word	0x2000001c
 8008a98:	0800b61c 	.word	0x0800b61c
 8008a9c:	0800b633 	.word	0x0800b633
 8008aa0:	abcd330e 	.word	0xabcd330e
 8008aa4:	e66d1234 	.word	0xe66d1234
 8008aa8:	0005deec 	.word	0x0005deec
 8008aac:	5851f42d 	.word	0x5851f42d
 8008ab0:	4c957f2d 	.word	0x4c957f2d

08008ab4 <__cvt>:
 8008ab4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008ab8:	ec57 6b10 	vmov	r6, r7, d0
 8008abc:	2f00      	cmp	r7, #0
 8008abe:	460c      	mov	r4, r1
 8008ac0:	4619      	mov	r1, r3
 8008ac2:	463b      	mov	r3, r7
 8008ac4:	bfbb      	ittet	lt
 8008ac6:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8008aca:	461f      	movlt	r7, r3
 8008acc:	2300      	movge	r3, #0
 8008ace:	232d      	movlt	r3, #45	@ 0x2d
 8008ad0:	700b      	strb	r3, [r1, #0]
 8008ad2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008ad4:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8008ad8:	4691      	mov	r9, r2
 8008ada:	f023 0820 	bic.w	r8, r3, #32
 8008ade:	bfbc      	itt	lt
 8008ae0:	4632      	movlt	r2, r6
 8008ae2:	4616      	movlt	r6, r2
 8008ae4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008ae8:	d005      	beq.n	8008af6 <__cvt+0x42>
 8008aea:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8008aee:	d100      	bne.n	8008af2 <__cvt+0x3e>
 8008af0:	3401      	adds	r4, #1
 8008af2:	2102      	movs	r1, #2
 8008af4:	e000      	b.n	8008af8 <__cvt+0x44>
 8008af6:	2103      	movs	r1, #3
 8008af8:	ab03      	add	r3, sp, #12
 8008afa:	9301      	str	r3, [sp, #4]
 8008afc:	ab02      	add	r3, sp, #8
 8008afe:	9300      	str	r3, [sp, #0]
 8008b00:	ec47 6b10 	vmov	d0, r6, r7
 8008b04:	4653      	mov	r3, sl
 8008b06:	4622      	mov	r2, r4
 8008b08:	f000 fed6 	bl	80098b8 <_dtoa_r>
 8008b0c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8008b10:	4605      	mov	r5, r0
 8008b12:	d119      	bne.n	8008b48 <__cvt+0x94>
 8008b14:	f019 0f01 	tst.w	r9, #1
 8008b18:	d00e      	beq.n	8008b38 <__cvt+0x84>
 8008b1a:	eb00 0904 	add.w	r9, r0, r4
 8008b1e:	2200      	movs	r2, #0
 8008b20:	2300      	movs	r3, #0
 8008b22:	4630      	mov	r0, r6
 8008b24:	4639      	mov	r1, r7
 8008b26:	f7f7 ffef 	bl	8000b08 <__aeabi_dcmpeq>
 8008b2a:	b108      	cbz	r0, 8008b30 <__cvt+0x7c>
 8008b2c:	f8cd 900c 	str.w	r9, [sp, #12]
 8008b30:	2230      	movs	r2, #48	@ 0x30
 8008b32:	9b03      	ldr	r3, [sp, #12]
 8008b34:	454b      	cmp	r3, r9
 8008b36:	d31e      	bcc.n	8008b76 <__cvt+0xc2>
 8008b38:	9b03      	ldr	r3, [sp, #12]
 8008b3a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008b3c:	1b5b      	subs	r3, r3, r5
 8008b3e:	4628      	mov	r0, r5
 8008b40:	6013      	str	r3, [r2, #0]
 8008b42:	b004      	add	sp, #16
 8008b44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b48:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008b4c:	eb00 0904 	add.w	r9, r0, r4
 8008b50:	d1e5      	bne.n	8008b1e <__cvt+0x6a>
 8008b52:	7803      	ldrb	r3, [r0, #0]
 8008b54:	2b30      	cmp	r3, #48	@ 0x30
 8008b56:	d10a      	bne.n	8008b6e <__cvt+0xba>
 8008b58:	2200      	movs	r2, #0
 8008b5a:	2300      	movs	r3, #0
 8008b5c:	4630      	mov	r0, r6
 8008b5e:	4639      	mov	r1, r7
 8008b60:	f7f7 ffd2 	bl	8000b08 <__aeabi_dcmpeq>
 8008b64:	b918      	cbnz	r0, 8008b6e <__cvt+0xba>
 8008b66:	f1c4 0401 	rsb	r4, r4, #1
 8008b6a:	f8ca 4000 	str.w	r4, [sl]
 8008b6e:	f8da 3000 	ldr.w	r3, [sl]
 8008b72:	4499      	add	r9, r3
 8008b74:	e7d3      	b.n	8008b1e <__cvt+0x6a>
 8008b76:	1c59      	adds	r1, r3, #1
 8008b78:	9103      	str	r1, [sp, #12]
 8008b7a:	701a      	strb	r2, [r3, #0]
 8008b7c:	e7d9      	b.n	8008b32 <__cvt+0x7e>

08008b7e <__exponent>:
 8008b7e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008b80:	2900      	cmp	r1, #0
 8008b82:	bfba      	itte	lt
 8008b84:	4249      	neglt	r1, r1
 8008b86:	232d      	movlt	r3, #45	@ 0x2d
 8008b88:	232b      	movge	r3, #43	@ 0x2b
 8008b8a:	2909      	cmp	r1, #9
 8008b8c:	7002      	strb	r2, [r0, #0]
 8008b8e:	7043      	strb	r3, [r0, #1]
 8008b90:	dd29      	ble.n	8008be6 <__exponent+0x68>
 8008b92:	f10d 0307 	add.w	r3, sp, #7
 8008b96:	461d      	mov	r5, r3
 8008b98:	270a      	movs	r7, #10
 8008b9a:	461a      	mov	r2, r3
 8008b9c:	fbb1 f6f7 	udiv	r6, r1, r7
 8008ba0:	fb07 1416 	mls	r4, r7, r6, r1
 8008ba4:	3430      	adds	r4, #48	@ 0x30
 8008ba6:	f802 4c01 	strb.w	r4, [r2, #-1]
 8008baa:	460c      	mov	r4, r1
 8008bac:	2c63      	cmp	r4, #99	@ 0x63
 8008bae:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8008bb2:	4631      	mov	r1, r6
 8008bb4:	dcf1      	bgt.n	8008b9a <__exponent+0x1c>
 8008bb6:	3130      	adds	r1, #48	@ 0x30
 8008bb8:	1e94      	subs	r4, r2, #2
 8008bba:	f803 1c01 	strb.w	r1, [r3, #-1]
 8008bbe:	1c41      	adds	r1, r0, #1
 8008bc0:	4623      	mov	r3, r4
 8008bc2:	42ab      	cmp	r3, r5
 8008bc4:	d30a      	bcc.n	8008bdc <__exponent+0x5e>
 8008bc6:	f10d 0309 	add.w	r3, sp, #9
 8008bca:	1a9b      	subs	r3, r3, r2
 8008bcc:	42ac      	cmp	r4, r5
 8008bce:	bf88      	it	hi
 8008bd0:	2300      	movhi	r3, #0
 8008bd2:	3302      	adds	r3, #2
 8008bd4:	4403      	add	r3, r0
 8008bd6:	1a18      	subs	r0, r3, r0
 8008bd8:	b003      	add	sp, #12
 8008bda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008bdc:	f813 6b01 	ldrb.w	r6, [r3], #1
 8008be0:	f801 6f01 	strb.w	r6, [r1, #1]!
 8008be4:	e7ed      	b.n	8008bc2 <__exponent+0x44>
 8008be6:	2330      	movs	r3, #48	@ 0x30
 8008be8:	3130      	adds	r1, #48	@ 0x30
 8008bea:	7083      	strb	r3, [r0, #2]
 8008bec:	70c1      	strb	r1, [r0, #3]
 8008bee:	1d03      	adds	r3, r0, #4
 8008bf0:	e7f1      	b.n	8008bd6 <__exponent+0x58>
	...

08008bf4 <_printf_float>:
 8008bf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bf8:	b08d      	sub	sp, #52	@ 0x34
 8008bfa:	460c      	mov	r4, r1
 8008bfc:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8008c00:	4616      	mov	r6, r2
 8008c02:	461f      	mov	r7, r3
 8008c04:	4605      	mov	r5, r0
 8008c06:	f000 fccb 	bl	80095a0 <_localeconv_r>
 8008c0a:	6803      	ldr	r3, [r0, #0]
 8008c0c:	9304      	str	r3, [sp, #16]
 8008c0e:	4618      	mov	r0, r3
 8008c10:	f7f7 fb4e 	bl	80002b0 <strlen>
 8008c14:	2300      	movs	r3, #0
 8008c16:	930a      	str	r3, [sp, #40]	@ 0x28
 8008c18:	f8d8 3000 	ldr.w	r3, [r8]
 8008c1c:	9005      	str	r0, [sp, #20]
 8008c1e:	3307      	adds	r3, #7
 8008c20:	f023 0307 	bic.w	r3, r3, #7
 8008c24:	f103 0208 	add.w	r2, r3, #8
 8008c28:	f894 a018 	ldrb.w	sl, [r4, #24]
 8008c2c:	f8d4 b000 	ldr.w	fp, [r4]
 8008c30:	f8c8 2000 	str.w	r2, [r8]
 8008c34:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008c38:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8008c3c:	9307      	str	r3, [sp, #28]
 8008c3e:	f8cd 8018 	str.w	r8, [sp, #24]
 8008c42:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8008c46:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008c4a:	4b9c      	ldr	r3, [pc, #624]	@ (8008ebc <_printf_float+0x2c8>)
 8008c4c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008c50:	f7f7 ff8c 	bl	8000b6c <__aeabi_dcmpun>
 8008c54:	bb70      	cbnz	r0, 8008cb4 <_printf_float+0xc0>
 8008c56:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008c5a:	4b98      	ldr	r3, [pc, #608]	@ (8008ebc <_printf_float+0x2c8>)
 8008c5c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008c60:	f7f7 ff66 	bl	8000b30 <__aeabi_dcmple>
 8008c64:	bb30      	cbnz	r0, 8008cb4 <_printf_float+0xc0>
 8008c66:	2200      	movs	r2, #0
 8008c68:	2300      	movs	r3, #0
 8008c6a:	4640      	mov	r0, r8
 8008c6c:	4649      	mov	r1, r9
 8008c6e:	f7f7 ff55 	bl	8000b1c <__aeabi_dcmplt>
 8008c72:	b110      	cbz	r0, 8008c7a <_printf_float+0x86>
 8008c74:	232d      	movs	r3, #45	@ 0x2d
 8008c76:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008c7a:	4a91      	ldr	r2, [pc, #580]	@ (8008ec0 <_printf_float+0x2cc>)
 8008c7c:	4b91      	ldr	r3, [pc, #580]	@ (8008ec4 <_printf_float+0x2d0>)
 8008c7e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8008c82:	bf8c      	ite	hi
 8008c84:	4690      	movhi	r8, r2
 8008c86:	4698      	movls	r8, r3
 8008c88:	2303      	movs	r3, #3
 8008c8a:	6123      	str	r3, [r4, #16]
 8008c8c:	f02b 0304 	bic.w	r3, fp, #4
 8008c90:	6023      	str	r3, [r4, #0]
 8008c92:	f04f 0900 	mov.w	r9, #0
 8008c96:	9700      	str	r7, [sp, #0]
 8008c98:	4633      	mov	r3, r6
 8008c9a:	aa0b      	add	r2, sp, #44	@ 0x2c
 8008c9c:	4621      	mov	r1, r4
 8008c9e:	4628      	mov	r0, r5
 8008ca0:	f000 f9d2 	bl	8009048 <_printf_common>
 8008ca4:	3001      	adds	r0, #1
 8008ca6:	f040 808d 	bne.w	8008dc4 <_printf_float+0x1d0>
 8008caa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008cae:	b00d      	add	sp, #52	@ 0x34
 8008cb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008cb4:	4642      	mov	r2, r8
 8008cb6:	464b      	mov	r3, r9
 8008cb8:	4640      	mov	r0, r8
 8008cba:	4649      	mov	r1, r9
 8008cbc:	f7f7 ff56 	bl	8000b6c <__aeabi_dcmpun>
 8008cc0:	b140      	cbz	r0, 8008cd4 <_printf_float+0xe0>
 8008cc2:	464b      	mov	r3, r9
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	bfbc      	itt	lt
 8008cc8:	232d      	movlt	r3, #45	@ 0x2d
 8008cca:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8008cce:	4a7e      	ldr	r2, [pc, #504]	@ (8008ec8 <_printf_float+0x2d4>)
 8008cd0:	4b7e      	ldr	r3, [pc, #504]	@ (8008ecc <_printf_float+0x2d8>)
 8008cd2:	e7d4      	b.n	8008c7e <_printf_float+0x8a>
 8008cd4:	6863      	ldr	r3, [r4, #4]
 8008cd6:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8008cda:	9206      	str	r2, [sp, #24]
 8008cdc:	1c5a      	adds	r2, r3, #1
 8008cde:	d13b      	bne.n	8008d58 <_printf_float+0x164>
 8008ce0:	2306      	movs	r3, #6
 8008ce2:	6063      	str	r3, [r4, #4]
 8008ce4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8008ce8:	2300      	movs	r3, #0
 8008cea:	6022      	str	r2, [r4, #0]
 8008cec:	9303      	str	r3, [sp, #12]
 8008cee:	ab0a      	add	r3, sp, #40	@ 0x28
 8008cf0:	e9cd a301 	strd	sl, r3, [sp, #4]
 8008cf4:	ab09      	add	r3, sp, #36	@ 0x24
 8008cf6:	9300      	str	r3, [sp, #0]
 8008cf8:	6861      	ldr	r1, [r4, #4]
 8008cfa:	ec49 8b10 	vmov	d0, r8, r9
 8008cfe:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8008d02:	4628      	mov	r0, r5
 8008d04:	f7ff fed6 	bl	8008ab4 <__cvt>
 8008d08:	9b06      	ldr	r3, [sp, #24]
 8008d0a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008d0c:	2b47      	cmp	r3, #71	@ 0x47
 8008d0e:	4680      	mov	r8, r0
 8008d10:	d129      	bne.n	8008d66 <_printf_float+0x172>
 8008d12:	1cc8      	adds	r0, r1, #3
 8008d14:	db02      	blt.n	8008d1c <_printf_float+0x128>
 8008d16:	6863      	ldr	r3, [r4, #4]
 8008d18:	4299      	cmp	r1, r3
 8008d1a:	dd41      	ble.n	8008da0 <_printf_float+0x1ac>
 8008d1c:	f1aa 0a02 	sub.w	sl, sl, #2
 8008d20:	fa5f fa8a 	uxtb.w	sl, sl
 8008d24:	3901      	subs	r1, #1
 8008d26:	4652      	mov	r2, sl
 8008d28:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8008d2c:	9109      	str	r1, [sp, #36]	@ 0x24
 8008d2e:	f7ff ff26 	bl	8008b7e <__exponent>
 8008d32:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008d34:	1813      	adds	r3, r2, r0
 8008d36:	2a01      	cmp	r2, #1
 8008d38:	4681      	mov	r9, r0
 8008d3a:	6123      	str	r3, [r4, #16]
 8008d3c:	dc02      	bgt.n	8008d44 <_printf_float+0x150>
 8008d3e:	6822      	ldr	r2, [r4, #0]
 8008d40:	07d2      	lsls	r2, r2, #31
 8008d42:	d501      	bpl.n	8008d48 <_printf_float+0x154>
 8008d44:	3301      	adds	r3, #1
 8008d46:	6123      	str	r3, [r4, #16]
 8008d48:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d0a2      	beq.n	8008c96 <_printf_float+0xa2>
 8008d50:	232d      	movs	r3, #45	@ 0x2d
 8008d52:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008d56:	e79e      	b.n	8008c96 <_printf_float+0xa2>
 8008d58:	9a06      	ldr	r2, [sp, #24]
 8008d5a:	2a47      	cmp	r2, #71	@ 0x47
 8008d5c:	d1c2      	bne.n	8008ce4 <_printf_float+0xf0>
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d1c0      	bne.n	8008ce4 <_printf_float+0xf0>
 8008d62:	2301      	movs	r3, #1
 8008d64:	e7bd      	b.n	8008ce2 <_printf_float+0xee>
 8008d66:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008d6a:	d9db      	bls.n	8008d24 <_printf_float+0x130>
 8008d6c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8008d70:	d118      	bne.n	8008da4 <_printf_float+0x1b0>
 8008d72:	2900      	cmp	r1, #0
 8008d74:	6863      	ldr	r3, [r4, #4]
 8008d76:	dd0b      	ble.n	8008d90 <_printf_float+0x19c>
 8008d78:	6121      	str	r1, [r4, #16]
 8008d7a:	b913      	cbnz	r3, 8008d82 <_printf_float+0x18e>
 8008d7c:	6822      	ldr	r2, [r4, #0]
 8008d7e:	07d0      	lsls	r0, r2, #31
 8008d80:	d502      	bpl.n	8008d88 <_printf_float+0x194>
 8008d82:	3301      	adds	r3, #1
 8008d84:	440b      	add	r3, r1
 8008d86:	6123      	str	r3, [r4, #16]
 8008d88:	65a1      	str	r1, [r4, #88]	@ 0x58
 8008d8a:	f04f 0900 	mov.w	r9, #0
 8008d8e:	e7db      	b.n	8008d48 <_printf_float+0x154>
 8008d90:	b913      	cbnz	r3, 8008d98 <_printf_float+0x1a4>
 8008d92:	6822      	ldr	r2, [r4, #0]
 8008d94:	07d2      	lsls	r2, r2, #31
 8008d96:	d501      	bpl.n	8008d9c <_printf_float+0x1a8>
 8008d98:	3302      	adds	r3, #2
 8008d9a:	e7f4      	b.n	8008d86 <_printf_float+0x192>
 8008d9c:	2301      	movs	r3, #1
 8008d9e:	e7f2      	b.n	8008d86 <_printf_float+0x192>
 8008da0:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8008da4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008da6:	4299      	cmp	r1, r3
 8008da8:	db05      	blt.n	8008db6 <_printf_float+0x1c2>
 8008daa:	6823      	ldr	r3, [r4, #0]
 8008dac:	6121      	str	r1, [r4, #16]
 8008dae:	07d8      	lsls	r0, r3, #31
 8008db0:	d5ea      	bpl.n	8008d88 <_printf_float+0x194>
 8008db2:	1c4b      	adds	r3, r1, #1
 8008db4:	e7e7      	b.n	8008d86 <_printf_float+0x192>
 8008db6:	2900      	cmp	r1, #0
 8008db8:	bfd4      	ite	le
 8008dba:	f1c1 0202 	rsble	r2, r1, #2
 8008dbe:	2201      	movgt	r2, #1
 8008dc0:	4413      	add	r3, r2
 8008dc2:	e7e0      	b.n	8008d86 <_printf_float+0x192>
 8008dc4:	6823      	ldr	r3, [r4, #0]
 8008dc6:	055a      	lsls	r2, r3, #21
 8008dc8:	d407      	bmi.n	8008dda <_printf_float+0x1e6>
 8008dca:	6923      	ldr	r3, [r4, #16]
 8008dcc:	4642      	mov	r2, r8
 8008dce:	4631      	mov	r1, r6
 8008dd0:	4628      	mov	r0, r5
 8008dd2:	47b8      	blx	r7
 8008dd4:	3001      	adds	r0, #1
 8008dd6:	d12b      	bne.n	8008e30 <_printf_float+0x23c>
 8008dd8:	e767      	b.n	8008caa <_printf_float+0xb6>
 8008dda:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008dde:	f240 80dd 	bls.w	8008f9c <_printf_float+0x3a8>
 8008de2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008de6:	2200      	movs	r2, #0
 8008de8:	2300      	movs	r3, #0
 8008dea:	f7f7 fe8d 	bl	8000b08 <__aeabi_dcmpeq>
 8008dee:	2800      	cmp	r0, #0
 8008df0:	d033      	beq.n	8008e5a <_printf_float+0x266>
 8008df2:	4a37      	ldr	r2, [pc, #220]	@ (8008ed0 <_printf_float+0x2dc>)
 8008df4:	2301      	movs	r3, #1
 8008df6:	4631      	mov	r1, r6
 8008df8:	4628      	mov	r0, r5
 8008dfa:	47b8      	blx	r7
 8008dfc:	3001      	adds	r0, #1
 8008dfe:	f43f af54 	beq.w	8008caa <_printf_float+0xb6>
 8008e02:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8008e06:	4543      	cmp	r3, r8
 8008e08:	db02      	blt.n	8008e10 <_printf_float+0x21c>
 8008e0a:	6823      	ldr	r3, [r4, #0]
 8008e0c:	07d8      	lsls	r0, r3, #31
 8008e0e:	d50f      	bpl.n	8008e30 <_printf_float+0x23c>
 8008e10:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008e14:	4631      	mov	r1, r6
 8008e16:	4628      	mov	r0, r5
 8008e18:	47b8      	blx	r7
 8008e1a:	3001      	adds	r0, #1
 8008e1c:	f43f af45 	beq.w	8008caa <_printf_float+0xb6>
 8008e20:	f04f 0900 	mov.w	r9, #0
 8008e24:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8008e28:	f104 0a1a 	add.w	sl, r4, #26
 8008e2c:	45c8      	cmp	r8, r9
 8008e2e:	dc09      	bgt.n	8008e44 <_printf_float+0x250>
 8008e30:	6823      	ldr	r3, [r4, #0]
 8008e32:	079b      	lsls	r3, r3, #30
 8008e34:	f100 8103 	bmi.w	800903e <_printf_float+0x44a>
 8008e38:	68e0      	ldr	r0, [r4, #12]
 8008e3a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008e3c:	4298      	cmp	r0, r3
 8008e3e:	bfb8      	it	lt
 8008e40:	4618      	movlt	r0, r3
 8008e42:	e734      	b.n	8008cae <_printf_float+0xba>
 8008e44:	2301      	movs	r3, #1
 8008e46:	4652      	mov	r2, sl
 8008e48:	4631      	mov	r1, r6
 8008e4a:	4628      	mov	r0, r5
 8008e4c:	47b8      	blx	r7
 8008e4e:	3001      	adds	r0, #1
 8008e50:	f43f af2b 	beq.w	8008caa <_printf_float+0xb6>
 8008e54:	f109 0901 	add.w	r9, r9, #1
 8008e58:	e7e8      	b.n	8008e2c <_printf_float+0x238>
 8008e5a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	dc39      	bgt.n	8008ed4 <_printf_float+0x2e0>
 8008e60:	4a1b      	ldr	r2, [pc, #108]	@ (8008ed0 <_printf_float+0x2dc>)
 8008e62:	2301      	movs	r3, #1
 8008e64:	4631      	mov	r1, r6
 8008e66:	4628      	mov	r0, r5
 8008e68:	47b8      	blx	r7
 8008e6a:	3001      	adds	r0, #1
 8008e6c:	f43f af1d 	beq.w	8008caa <_printf_float+0xb6>
 8008e70:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8008e74:	ea59 0303 	orrs.w	r3, r9, r3
 8008e78:	d102      	bne.n	8008e80 <_printf_float+0x28c>
 8008e7a:	6823      	ldr	r3, [r4, #0]
 8008e7c:	07d9      	lsls	r1, r3, #31
 8008e7e:	d5d7      	bpl.n	8008e30 <_printf_float+0x23c>
 8008e80:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008e84:	4631      	mov	r1, r6
 8008e86:	4628      	mov	r0, r5
 8008e88:	47b8      	blx	r7
 8008e8a:	3001      	adds	r0, #1
 8008e8c:	f43f af0d 	beq.w	8008caa <_printf_float+0xb6>
 8008e90:	f04f 0a00 	mov.w	sl, #0
 8008e94:	f104 0b1a 	add.w	fp, r4, #26
 8008e98:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e9a:	425b      	negs	r3, r3
 8008e9c:	4553      	cmp	r3, sl
 8008e9e:	dc01      	bgt.n	8008ea4 <_printf_float+0x2b0>
 8008ea0:	464b      	mov	r3, r9
 8008ea2:	e793      	b.n	8008dcc <_printf_float+0x1d8>
 8008ea4:	2301      	movs	r3, #1
 8008ea6:	465a      	mov	r2, fp
 8008ea8:	4631      	mov	r1, r6
 8008eaa:	4628      	mov	r0, r5
 8008eac:	47b8      	blx	r7
 8008eae:	3001      	adds	r0, #1
 8008eb0:	f43f aefb 	beq.w	8008caa <_printf_float+0xb6>
 8008eb4:	f10a 0a01 	add.w	sl, sl, #1
 8008eb8:	e7ee      	b.n	8008e98 <_printf_float+0x2a4>
 8008eba:	bf00      	nop
 8008ebc:	7fefffff 	.word	0x7fefffff
 8008ec0:	0800b68f 	.word	0x0800b68f
 8008ec4:	0800b68b 	.word	0x0800b68b
 8008ec8:	0800b697 	.word	0x0800b697
 8008ecc:	0800b693 	.word	0x0800b693
 8008ed0:	0800b69b 	.word	0x0800b69b
 8008ed4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008ed6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008eda:	4553      	cmp	r3, sl
 8008edc:	bfa8      	it	ge
 8008ede:	4653      	movge	r3, sl
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	4699      	mov	r9, r3
 8008ee4:	dc36      	bgt.n	8008f54 <_printf_float+0x360>
 8008ee6:	f04f 0b00 	mov.w	fp, #0
 8008eea:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008eee:	f104 021a 	add.w	r2, r4, #26
 8008ef2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008ef4:	9306      	str	r3, [sp, #24]
 8008ef6:	eba3 0309 	sub.w	r3, r3, r9
 8008efa:	455b      	cmp	r3, fp
 8008efc:	dc31      	bgt.n	8008f62 <_printf_float+0x36e>
 8008efe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008f00:	459a      	cmp	sl, r3
 8008f02:	dc3a      	bgt.n	8008f7a <_printf_float+0x386>
 8008f04:	6823      	ldr	r3, [r4, #0]
 8008f06:	07da      	lsls	r2, r3, #31
 8008f08:	d437      	bmi.n	8008f7a <_printf_float+0x386>
 8008f0a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008f0c:	ebaa 0903 	sub.w	r9, sl, r3
 8008f10:	9b06      	ldr	r3, [sp, #24]
 8008f12:	ebaa 0303 	sub.w	r3, sl, r3
 8008f16:	4599      	cmp	r9, r3
 8008f18:	bfa8      	it	ge
 8008f1a:	4699      	movge	r9, r3
 8008f1c:	f1b9 0f00 	cmp.w	r9, #0
 8008f20:	dc33      	bgt.n	8008f8a <_printf_float+0x396>
 8008f22:	f04f 0800 	mov.w	r8, #0
 8008f26:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008f2a:	f104 0b1a 	add.w	fp, r4, #26
 8008f2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008f30:	ebaa 0303 	sub.w	r3, sl, r3
 8008f34:	eba3 0309 	sub.w	r3, r3, r9
 8008f38:	4543      	cmp	r3, r8
 8008f3a:	f77f af79 	ble.w	8008e30 <_printf_float+0x23c>
 8008f3e:	2301      	movs	r3, #1
 8008f40:	465a      	mov	r2, fp
 8008f42:	4631      	mov	r1, r6
 8008f44:	4628      	mov	r0, r5
 8008f46:	47b8      	blx	r7
 8008f48:	3001      	adds	r0, #1
 8008f4a:	f43f aeae 	beq.w	8008caa <_printf_float+0xb6>
 8008f4e:	f108 0801 	add.w	r8, r8, #1
 8008f52:	e7ec      	b.n	8008f2e <_printf_float+0x33a>
 8008f54:	4642      	mov	r2, r8
 8008f56:	4631      	mov	r1, r6
 8008f58:	4628      	mov	r0, r5
 8008f5a:	47b8      	blx	r7
 8008f5c:	3001      	adds	r0, #1
 8008f5e:	d1c2      	bne.n	8008ee6 <_printf_float+0x2f2>
 8008f60:	e6a3      	b.n	8008caa <_printf_float+0xb6>
 8008f62:	2301      	movs	r3, #1
 8008f64:	4631      	mov	r1, r6
 8008f66:	4628      	mov	r0, r5
 8008f68:	9206      	str	r2, [sp, #24]
 8008f6a:	47b8      	blx	r7
 8008f6c:	3001      	adds	r0, #1
 8008f6e:	f43f ae9c 	beq.w	8008caa <_printf_float+0xb6>
 8008f72:	9a06      	ldr	r2, [sp, #24]
 8008f74:	f10b 0b01 	add.w	fp, fp, #1
 8008f78:	e7bb      	b.n	8008ef2 <_printf_float+0x2fe>
 8008f7a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008f7e:	4631      	mov	r1, r6
 8008f80:	4628      	mov	r0, r5
 8008f82:	47b8      	blx	r7
 8008f84:	3001      	adds	r0, #1
 8008f86:	d1c0      	bne.n	8008f0a <_printf_float+0x316>
 8008f88:	e68f      	b.n	8008caa <_printf_float+0xb6>
 8008f8a:	9a06      	ldr	r2, [sp, #24]
 8008f8c:	464b      	mov	r3, r9
 8008f8e:	4442      	add	r2, r8
 8008f90:	4631      	mov	r1, r6
 8008f92:	4628      	mov	r0, r5
 8008f94:	47b8      	blx	r7
 8008f96:	3001      	adds	r0, #1
 8008f98:	d1c3      	bne.n	8008f22 <_printf_float+0x32e>
 8008f9a:	e686      	b.n	8008caa <_printf_float+0xb6>
 8008f9c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008fa0:	f1ba 0f01 	cmp.w	sl, #1
 8008fa4:	dc01      	bgt.n	8008faa <_printf_float+0x3b6>
 8008fa6:	07db      	lsls	r3, r3, #31
 8008fa8:	d536      	bpl.n	8009018 <_printf_float+0x424>
 8008faa:	2301      	movs	r3, #1
 8008fac:	4642      	mov	r2, r8
 8008fae:	4631      	mov	r1, r6
 8008fb0:	4628      	mov	r0, r5
 8008fb2:	47b8      	blx	r7
 8008fb4:	3001      	adds	r0, #1
 8008fb6:	f43f ae78 	beq.w	8008caa <_printf_float+0xb6>
 8008fba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008fbe:	4631      	mov	r1, r6
 8008fc0:	4628      	mov	r0, r5
 8008fc2:	47b8      	blx	r7
 8008fc4:	3001      	adds	r0, #1
 8008fc6:	f43f ae70 	beq.w	8008caa <_printf_float+0xb6>
 8008fca:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008fce:	2200      	movs	r2, #0
 8008fd0:	2300      	movs	r3, #0
 8008fd2:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8008fd6:	f7f7 fd97 	bl	8000b08 <__aeabi_dcmpeq>
 8008fda:	b9c0      	cbnz	r0, 800900e <_printf_float+0x41a>
 8008fdc:	4653      	mov	r3, sl
 8008fde:	f108 0201 	add.w	r2, r8, #1
 8008fe2:	4631      	mov	r1, r6
 8008fe4:	4628      	mov	r0, r5
 8008fe6:	47b8      	blx	r7
 8008fe8:	3001      	adds	r0, #1
 8008fea:	d10c      	bne.n	8009006 <_printf_float+0x412>
 8008fec:	e65d      	b.n	8008caa <_printf_float+0xb6>
 8008fee:	2301      	movs	r3, #1
 8008ff0:	465a      	mov	r2, fp
 8008ff2:	4631      	mov	r1, r6
 8008ff4:	4628      	mov	r0, r5
 8008ff6:	47b8      	blx	r7
 8008ff8:	3001      	adds	r0, #1
 8008ffa:	f43f ae56 	beq.w	8008caa <_printf_float+0xb6>
 8008ffe:	f108 0801 	add.w	r8, r8, #1
 8009002:	45d0      	cmp	r8, sl
 8009004:	dbf3      	blt.n	8008fee <_printf_float+0x3fa>
 8009006:	464b      	mov	r3, r9
 8009008:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800900c:	e6df      	b.n	8008dce <_printf_float+0x1da>
 800900e:	f04f 0800 	mov.w	r8, #0
 8009012:	f104 0b1a 	add.w	fp, r4, #26
 8009016:	e7f4      	b.n	8009002 <_printf_float+0x40e>
 8009018:	2301      	movs	r3, #1
 800901a:	4642      	mov	r2, r8
 800901c:	e7e1      	b.n	8008fe2 <_printf_float+0x3ee>
 800901e:	2301      	movs	r3, #1
 8009020:	464a      	mov	r2, r9
 8009022:	4631      	mov	r1, r6
 8009024:	4628      	mov	r0, r5
 8009026:	47b8      	blx	r7
 8009028:	3001      	adds	r0, #1
 800902a:	f43f ae3e 	beq.w	8008caa <_printf_float+0xb6>
 800902e:	f108 0801 	add.w	r8, r8, #1
 8009032:	68e3      	ldr	r3, [r4, #12]
 8009034:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009036:	1a5b      	subs	r3, r3, r1
 8009038:	4543      	cmp	r3, r8
 800903a:	dcf0      	bgt.n	800901e <_printf_float+0x42a>
 800903c:	e6fc      	b.n	8008e38 <_printf_float+0x244>
 800903e:	f04f 0800 	mov.w	r8, #0
 8009042:	f104 0919 	add.w	r9, r4, #25
 8009046:	e7f4      	b.n	8009032 <_printf_float+0x43e>

08009048 <_printf_common>:
 8009048:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800904c:	4616      	mov	r6, r2
 800904e:	4698      	mov	r8, r3
 8009050:	688a      	ldr	r2, [r1, #8]
 8009052:	690b      	ldr	r3, [r1, #16]
 8009054:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009058:	4293      	cmp	r3, r2
 800905a:	bfb8      	it	lt
 800905c:	4613      	movlt	r3, r2
 800905e:	6033      	str	r3, [r6, #0]
 8009060:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009064:	4607      	mov	r7, r0
 8009066:	460c      	mov	r4, r1
 8009068:	b10a      	cbz	r2, 800906e <_printf_common+0x26>
 800906a:	3301      	adds	r3, #1
 800906c:	6033      	str	r3, [r6, #0]
 800906e:	6823      	ldr	r3, [r4, #0]
 8009070:	0699      	lsls	r1, r3, #26
 8009072:	bf42      	ittt	mi
 8009074:	6833      	ldrmi	r3, [r6, #0]
 8009076:	3302      	addmi	r3, #2
 8009078:	6033      	strmi	r3, [r6, #0]
 800907a:	6825      	ldr	r5, [r4, #0]
 800907c:	f015 0506 	ands.w	r5, r5, #6
 8009080:	d106      	bne.n	8009090 <_printf_common+0x48>
 8009082:	f104 0a19 	add.w	sl, r4, #25
 8009086:	68e3      	ldr	r3, [r4, #12]
 8009088:	6832      	ldr	r2, [r6, #0]
 800908a:	1a9b      	subs	r3, r3, r2
 800908c:	42ab      	cmp	r3, r5
 800908e:	dc26      	bgt.n	80090de <_printf_common+0x96>
 8009090:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009094:	6822      	ldr	r2, [r4, #0]
 8009096:	3b00      	subs	r3, #0
 8009098:	bf18      	it	ne
 800909a:	2301      	movne	r3, #1
 800909c:	0692      	lsls	r2, r2, #26
 800909e:	d42b      	bmi.n	80090f8 <_printf_common+0xb0>
 80090a0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80090a4:	4641      	mov	r1, r8
 80090a6:	4638      	mov	r0, r7
 80090a8:	47c8      	blx	r9
 80090aa:	3001      	adds	r0, #1
 80090ac:	d01e      	beq.n	80090ec <_printf_common+0xa4>
 80090ae:	6823      	ldr	r3, [r4, #0]
 80090b0:	6922      	ldr	r2, [r4, #16]
 80090b2:	f003 0306 	and.w	r3, r3, #6
 80090b6:	2b04      	cmp	r3, #4
 80090b8:	bf02      	ittt	eq
 80090ba:	68e5      	ldreq	r5, [r4, #12]
 80090bc:	6833      	ldreq	r3, [r6, #0]
 80090be:	1aed      	subeq	r5, r5, r3
 80090c0:	68a3      	ldr	r3, [r4, #8]
 80090c2:	bf0c      	ite	eq
 80090c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80090c8:	2500      	movne	r5, #0
 80090ca:	4293      	cmp	r3, r2
 80090cc:	bfc4      	itt	gt
 80090ce:	1a9b      	subgt	r3, r3, r2
 80090d0:	18ed      	addgt	r5, r5, r3
 80090d2:	2600      	movs	r6, #0
 80090d4:	341a      	adds	r4, #26
 80090d6:	42b5      	cmp	r5, r6
 80090d8:	d11a      	bne.n	8009110 <_printf_common+0xc8>
 80090da:	2000      	movs	r0, #0
 80090dc:	e008      	b.n	80090f0 <_printf_common+0xa8>
 80090de:	2301      	movs	r3, #1
 80090e0:	4652      	mov	r2, sl
 80090e2:	4641      	mov	r1, r8
 80090e4:	4638      	mov	r0, r7
 80090e6:	47c8      	blx	r9
 80090e8:	3001      	adds	r0, #1
 80090ea:	d103      	bne.n	80090f4 <_printf_common+0xac>
 80090ec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80090f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80090f4:	3501      	adds	r5, #1
 80090f6:	e7c6      	b.n	8009086 <_printf_common+0x3e>
 80090f8:	18e1      	adds	r1, r4, r3
 80090fa:	1c5a      	adds	r2, r3, #1
 80090fc:	2030      	movs	r0, #48	@ 0x30
 80090fe:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009102:	4422      	add	r2, r4
 8009104:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009108:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800910c:	3302      	adds	r3, #2
 800910e:	e7c7      	b.n	80090a0 <_printf_common+0x58>
 8009110:	2301      	movs	r3, #1
 8009112:	4622      	mov	r2, r4
 8009114:	4641      	mov	r1, r8
 8009116:	4638      	mov	r0, r7
 8009118:	47c8      	blx	r9
 800911a:	3001      	adds	r0, #1
 800911c:	d0e6      	beq.n	80090ec <_printf_common+0xa4>
 800911e:	3601      	adds	r6, #1
 8009120:	e7d9      	b.n	80090d6 <_printf_common+0x8e>
	...

08009124 <_printf_i>:
 8009124:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009128:	7e0f      	ldrb	r7, [r1, #24]
 800912a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800912c:	2f78      	cmp	r7, #120	@ 0x78
 800912e:	4691      	mov	r9, r2
 8009130:	4680      	mov	r8, r0
 8009132:	460c      	mov	r4, r1
 8009134:	469a      	mov	sl, r3
 8009136:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800913a:	d807      	bhi.n	800914c <_printf_i+0x28>
 800913c:	2f62      	cmp	r7, #98	@ 0x62
 800913e:	d80a      	bhi.n	8009156 <_printf_i+0x32>
 8009140:	2f00      	cmp	r7, #0
 8009142:	f000 80d1 	beq.w	80092e8 <_printf_i+0x1c4>
 8009146:	2f58      	cmp	r7, #88	@ 0x58
 8009148:	f000 80b8 	beq.w	80092bc <_printf_i+0x198>
 800914c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009150:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009154:	e03a      	b.n	80091cc <_printf_i+0xa8>
 8009156:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800915a:	2b15      	cmp	r3, #21
 800915c:	d8f6      	bhi.n	800914c <_printf_i+0x28>
 800915e:	a101      	add	r1, pc, #4	@ (adr r1, 8009164 <_printf_i+0x40>)
 8009160:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009164:	080091bd 	.word	0x080091bd
 8009168:	080091d1 	.word	0x080091d1
 800916c:	0800914d 	.word	0x0800914d
 8009170:	0800914d 	.word	0x0800914d
 8009174:	0800914d 	.word	0x0800914d
 8009178:	0800914d 	.word	0x0800914d
 800917c:	080091d1 	.word	0x080091d1
 8009180:	0800914d 	.word	0x0800914d
 8009184:	0800914d 	.word	0x0800914d
 8009188:	0800914d 	.word	0x0800914d
 800918c:	0800914d 	.word	0x0800914d
 8009190:	080092cf 	.word	0x080092cf
 8009194:	080091fb 	.word	0x080091fb
 8009198:	08009289 	.word	0x08009289
 800919c:	0800914d 	.word	0x0800914d
 80091a0:	0800914d 	.word	0x0800914d
 80091a4:	080092f1 	.word	0x080092f1
 80091a8:	0800914d 	.word	0x0800914d
 80091ac:	080091fb 	.word	0x080091fb
 80091b0:	0800914d 	.word	0x0800914d
 80091b4:	0800914d 	.word	0x0800914d
 80091b8:	08009291 	.word	0x08009291
 80091bc:	6833      	ldr	r3, [r6, #0]
 80091be:	1d1a      	adds	r2, r3, #4
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	6032      	str	r2, [r6, #0]
 80091c4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80091c8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80091cc:	2301      	movs	r3, #1
 80091ce:	e09c      	b.n	800930a <_printf_i+0x1e6>
 80091d0:	6833      	ldr	r3, [r6, #0]
 80091d2:	6820      	ldr	r0, [r4, #0]
 80091d4:	1d19      	adds	r1, r3, #4
 80091d6:	6031      	str	r1, [r6, #0]
 80091d8:	0606      	lsls	r6, r0, #24
 80091da:	d501      	bpl.n	80091e0 <_printf_i+0xbc>
 80091dc:	681d      	ldr	r5, [r3, #0]
 80091de:	e003      	b.n	80091e8 <_printf_i+0xc4>
 80091e0:	0645      	lsls	r5, r0, #25
 80091e2:	d5fb      	bpl.n	80091dc <_printf_i+0xb8>
 80091e4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80091e8:	2d00      	cmp	r5, #0
 80091ea:	da03      	bge.n	80091f4 <_printf_i+0xd0>
 80091ec:	232d      	movs	r3, #45	@ 0x2d
 80091ee:	426d      	negs	r5, r5
 80091f0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80091f4:	4858      	ldr	r0, [pc, #352]	@ (8009358 <_printf_i+0x234>)
 80091f6:	230a      	movs	r3, #10
 80091f8:	e011      	b.n	800921e <_printf_i+0xfa>
 80091fa:	6821      	ldr	r1, [r4, #0]
 80091fc:	6833      	ldr	r3, [r6, #0]
 80091fe:	0608      	lsls	r0, r1, #24
 8009200:	f853 5b04 	ldr.w	r5, [r3], #4
 8009204:	d402      	bmi.n	800920c <_printf_i+0xe8>
 8009206:	0649      	lsls	r1, r1, #25
 8009208:	bf48      	it	mi
 800920a:	b2ad      	uxthmi	r5, r5
 800920c:	2f6f      	cmp	r7, #111	@ 0x6f
 800920e:	4852      	ldr	r0, [pc, #328]	@ (8009358 <_printf_i+0x234>)
 8009210:	6033      	str	r3, [r6, #0]
 8009212:	bf14      	ite	ne
 8009214:	230a      	movne	r3, #10
 8009216:	2308      	moveq	r3, #8
 8009218:	2100      	movs	r1, #0
 800921a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800921e:	6866      	ldr	r6, [r4, #4]
 8009220:	60a6      	str	r6, [r4, #8]
 8009222:	2e00      	cmp	r6, #0
 8009224:	db05      	blt.n	8009232 <_printf_i+0x10e>
 8009226:	6821      	ldr	r1, [r4, #0]
 8009228:	432e      	orrs	r6, r5
 800922a:	f021 0104 	bic.w	r1, r1, #4
 800922e:	6021      	str	r1, [r4, #0]
 8009230:	d04b      	beq.n	80092ca <_printf_i+0x1a6>
 8009232:	4616      	mov	r6, r2
 8009234:	fbb5 f1f3 	udiv	r1, r5, r3
 8009238:	fb03 5711 	mls	r7, r3, r1, r5
 800923c:	5dc7      	ldrb	r7, [r0, r7]
 800923e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009242:	462f      	mov	r7, r5
 8009244:	42bb      	cmp	r3, r7
 8009246:	460d      	mov	r5, r1
 8009248:	d9f4      	bls.n	8009234 <_printf_i+0x110>
 800924a:	2b08      	cmp	r3, #8
 800924c:	d10b      	bne.n	8009266 <_printf_i+0x142>
 800924e:	6823      	ldr	r3, [r4, #0]
 8009250:	07df      	lsls	r7, r3, #31
 8009252:	d508      	bpl.n	8009266 <_printf_i+0x142>
 8009254:	6923      	ldr	r3, [r4, #16]
 8009256:	6861      	ldr	r1, [r4, #4]
 8009258:	4299      	cmp	r1, r3
 800925a:	bfde      	ittt	le
 800925c:	2330      	movle	r3, #48	@ 0x30
 800925e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009262:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8009266:	1b92      	subs	r2, r2, r6
 8009268:	6122      	str	r2, [r4, #16]
 800926a:	f8cd a000 	str.w	sl, [sp]
 800926e:	464b      	mov	r3, r9
 8009270:	aa03      	add	r2, sp, #12
 8009272:	4621      	mov	r1, r4
 8009274:	4640      	mov	r0, r8
 8009276:	f7ff fee7 	bl	8009048 <_printf_common>
 800927a:	3001      	adds	r0, #1
 800927c:	d14a      	bne.n	8009314 <_printf_i+0x1f0>
 800927e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009282:	b004      	add	sp, #16
 8009284:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009288:	6823      	ldr	r3, [r4, #0]
 800928a:	f043 0320 	orr.w	r3, r3, #32
 800928e:	6023      	str	r3, [r4, #0]
 8009290:	4832      	ldr	r0, [pc, #200]	@ (800935c <_printf_i+0x238>)
 8009292:	2778      	movs	r7, #120	@ 0x78
 8009294:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009298:	6823      	ldr	r3, [r4, #0]
 800929a:	6831      	ldr	r1, [r6, #0]
 800929c:	061f      	lsls	r7, r3, #24
 800929e:	f851 5b04 	ldr.w	r5, [r1], #4
 80092a2:	d402      	bmi.n	80092aa <_printf_i+0x186>
 80092a4:	065f      	lsls	r7, r3, #25
 80092a6:	bf48      	it	mi
 80092a8:	b2ad      	uxthmi	r5, r5
 80092aa:	6031      	str	r1, [r6, #0]
 80092ac:	07d9      	lsls	r1, r3, #31
 80092ae:	bf44      	itt	mi
 80092b0:	f043 0320 	orrmi.w	r3, r3, #32
 80092b4:	6023      	strmi	r3, [r4, #0]
 80092b6:	b11d      	cbz	r5, 80092c0 <_printf_i+0x19c>
 80092b8:	2310      	movs	r3, #16
 80092ba:	e7ad      	b.n	8009218 <_printf_i+0xf4>
 80092bc:	4826      	ldr	r0, [pc, #152]	@ (8009358 <_printf_i+0x234>)
 80092be:	e7e9      	b.n	8009294 <_printf_i+0x170>
 80092c0:	6823      	ldr	r3, [r4, #0]
 80092c2:	f023 0320 	bic.w	r3, r3, #32
 80092c6:	6023      	str	r3, [r4, #0]
 80092c8:	e7f6      	b.n	80092b8 <_printf_i+0x194>
 80092ca:	4616      	mov	r6, r2
 80092cc:	e7bd      	b.n	800924a <_printf_i+0x126>
 80092ce:	6833      	ldr	r3, [r6, #0]
 80092d0:	6825      	ldr	r5, [r4, #0]
 80092d2:	6961      	ldr	r1, [r4, #20]
 80092d4:	1d18      	adds	r0, r3, #4
 80092d6:	6030      	str	r0, [r6, #0]
 80092d8:	062e      	lsls	r6, r5, #24
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	d501      	bpl.n	80092e2 <_printf_i+0x1be>
 80092de:	6019      	str	r1, [r3, #0]
 80092e0:	e002      	b.n	80092e8 <_printf_i+0x1c4>
 80092e2:	0668      	lsls	r0, r5, #25
 80092e4:	d5fb      	bpl.n	80092de <_printf_i+0x1ba>
 80092e6:	8019      	strh	r1, [r3, #0]
 80092e8:	2300      	movs	r3, #0
 80092ea:	6123      	str	r3, [r4, #16]
 80092ec:	4616      	mov	r6, r2
 80092ee:	e7bc      	b.n	800926a <_printf_i+0x146>
 80092f0:	6833      	ldr	r3, [r6, #0]
 80092f2:	1d1a      	adds	r2, r3, #4
 80092f4:	6032      	str	r2, [r6, #0]
 80092f6:	681e      	ldr	r6, [r3, #0]
 80092f8:	6862      	ldr	r2, [r4, #4]
 80092fa:	2100      	movs	r1, #0
 80092fc:	4630      	mov	r0, r6
 80092fe:	f7f6 ff87 	bl	8000210 <memchr>
 8009302:	b108      	cbz	r0, 8009308 <_printf_i+0x1e4>
 8009304:	1b80      	subs	r0, r0, r6
 8009306:	6060      	str	r0, [r4, #4]
 8009308:	6863      	ldr	r3, [r4, #4]
 800930a:	6123      	str	r3, [r4, #16]
 800930c:	2300      	movs	r3, #0
 800930e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009312:	e7aa      	b.n	800926a <_printf_i+0x146>
 8009314:	6923      	ldr	r3, [r4, #16]
 8009316:	4632      	mov	r2, r6
 8009318:	4649      	mov	r1, r9
 800931a:	4640      	mov	r0, r8
 800931c:	47d0      	blx	sl
 800931e:	3001      	adds	r0, #1
 8009320:	d0ad      	beq.n	800927e <_printf_i+0x15a>
 8009322:	6823      	ldr	r3, [r4, #0]
 8009324:	079b      	lsls	r3, r3, #30
 8009326:	d413      	bmi.n	8009350 <_printf_i+0x22c>
 8009328:	68e0      	ldr	r0, [r4, #12]
 800932a:	9b03      	ldr	r3, [sp, #12]
 800932c:	4298      	cmp	r0, r3
 800932e:	bfb8      	it	lt
 8009330:	4618      	movlt	r0, r3
 8009332:	e7a6      	b.n	8009282 <_printf_i+0x15e>
 8009334:	2301      	movs	r3, #1
 8009336:	4632      	mov	r2, r6
 8009338:	4649      	mov	r1, r9
 800933a:	4640      	mov	r0, r8
 800933c:	47d0      	blx	sl
 800933e:	3001      	adds	r0, #1
 8009340:	d09d      	beq.n	800927e <_printf_i+0x15a>
 8009342:	3501      	adds	r5, #1
 8009344:	68e3      	ldr	r3, [r4, #12]
 8009346:	9903      	ldr	r1, [sp, #12]
 8009348:	1a5b      	subs	r3, r3, r1
 800934a:	42ab      	cmp	r3, r5
 800934c:	dcf2      	bgt.n	8009334 <_printf_i+0x210>
 800934e:	e7eb      	b.n	8009328 <_printf_i+0x204>
 8009350:	2500      	movs	r5, #0
 8009352:	f104 0619 	add.w	r6, r4, #25
 8009356:	e7f5      	b.n	8009344 <_printf_i+0x220>
 8009358:	0800b69d 	.word	0x0800b69d
 800935c:	0800b6ae 	.word	0x0800b6ae

08009360 <std>:
 8009360:	2300      	movs	r3, #0
 8009362:	b510      	push	{r4, lr}
 8009364:	4604      	mov	r4, r0
 8009366:	e9c0 3300 	strd	r3, r3, [r0]
 800936a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800936e:	6083      	str	r3, [r0, #8]
 8009370:	8181      	strh	r1, [r0, #12]
 8009372:	6643      	str	r3, [r0, #100]	@ 0x64
 8009374:	81c2      	strh	r2, [r0, #14]
 8009376:	6183      	str	r3, [r0, #24]
 8009378:	4619      	mov	r1, r3
 800937a:	2208      	movs	r2, #8
 800937c:	305c      	adds	r0, #92	@ 0x5c
 800937e:	f000 f906 	bl	800958e <memset>
 8009382:	4b0d      	ldr	r3, [pc, #52]	@ (80093b8 <std+0x58>)
 8009384:	6263      	str	r3, [r4, #36]	@ 0x24
 8009386:	4b0d      	ldr	r3, [pc, #52]	@ (80093bc <std+0x5c>)
 8009388:	62a3      	str	r3, [r4, #40]	@ 0x28
 800938a:	4b0d      	ldr	r3, [pc, #52]	@ (80093c0 <std+0x60>)
 800938c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800938e:	4b0d      	ldr	r3, [pc, #52]	@ (80093c4 <std+0x64>)
 8009390:	6323      	str	r3, [r4, #48]	@ 0x30
 8009392:	4b0d      	ldr	r3, [pc, #52]	@ (80093c8 <std+0x68>)
 8009394:	6224      	str	r4, [r4, #32]
 8009396:	429c      	cmp	r4, r3
 8009398:	d006      	beq.n	80093a8 <std+0x48>
 800939a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800939e:	4294      	cmp	r4, r2
 80093a0:	d002      	beq.n	80093a8 <std+0x48>
 80093a2:	33d0      	adds	r3, #208	@ 0xd0
 80093a4:	429c      	cmp	r4, r3
 80093a6:	d105      	bne.n	80093b4 <std+0x54>
 80093a8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80093ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80093b0:	f000 b9c8 	b.w	8009744 <__retarget_lock_init_recursive>
 80093b4:	bd10      	pop	{r4, pc}
 80093b6:	bf00      	nop
 80093b8:	08009509 	.word	0x08009509
 80093bc:	0800952b 	.word	0x0800952b
 80093c0:	08009563 	.word	0x08009563
 80093c4:	08009587 	.word	0x08009587
 80093c8:	2000537c 	.word	0x2000537c

080093cc <stdio_exit_handler>:
 80093cc:	4a02      	ldr	r2, [pc, #8]	@ (80093d8 <stdio_exit_handler+0xc>)
 80093ce:	4903      	ldr	r1, [pc, #12]	@ (80093dc <stdio_exit_handler+0x10>)
 80093d0:	4803      	ldr	r0, [pc, #12]	@ (80093e0 <stdio_exit_handler+0x14>)
 80093d2:	f000 b869 	b.w	80094a8 <_fwalk_sglue>
 80093d6:	bf00      	nop
 80093d8:	20000010 	.word	0x20000010
 80093dc:	0800b0d9 	.word	0x0800b0d9
 80093e0:	20000020 	.word	0x20000020

080093e4 <cleanup_stdio>:
 80093e4:	6841      	ldr	r1, [r0, #4]
 80093e6:	4b0c      	ldr	r3, [pc, #48]	@ (8009418 <cleanup_stdio+0x34>)
 80093e8:	4299      	cmp	r1, r3
 80093ea:	b510      	push	{r4, lr}
 80093ec:	4604      	mov	r4, r0
 80093ee:	d001      	beq.n	80093f4 <cleanup_stdio+0x10>
 80093f0:	f001 fe72 	bl	800b0d8 <_fflush_r>
 80093f4:	68a1      	ldr	r1, [r4, #8]
 80093f6:	4b09      	ldr	r3, [pc, #36]	@ (800941c <cleanup_stdio+0x38>)
 80093f8:	4299      	cmp	r1, r3
 80093fa:	d002      	beq.n	8009402 <cleanup_stdio+0x1e>
 80093fc:	4620      	mov	r0, r4
 80093fe:	f001 fe6b 	bl	800b0d8 <_fflush_r>
 8009402:	68e1      	ldr	r1, [r4, #12]
 8009404:	4b06      	ldr	r3, [pc, #24]	@ (8009420 <cleanup_stdio+0x3c>)
 8009406:	4299      	cmp	r1, r3
 8009408:	d004      	beq.n	8009414 <cleanup_stdio+0x30>
 800940a:	4620      	mov	r0, r4
 800940c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009410:	f001 be62 	b.w	800b0d8 <_fflush_r>
 8009414:	bd10      	pop	{r4, pc}
 8009416:	bf00      	nop
 8009418:	2000537c 	.word	0x2000537c
 800941c:	200053e4 	.word	0x200053e4
 8009420:	2000544c 	.word	0x2000544c

08009424 <global_stdio_init.part.0>:
 8009424:	b510      	push	{r4, lr}
 8009426:	4b0b      	ldr	r3, [pc, #44]	@ (8009454 <global_stdio_init.part.0+0x30>)
 8009428:	4c0b      	ldr	r4, [pc, #44]	@ (8009458 <global_stdio_init.part.0+0x34>)
 800942a:	4a0c      	ldr	r2, [pc, #48]	@ (800945c <global_stdio_init.part.0+0x38>)
 800942c:	601a      	str	r2, [r3, #0]
 800942e:	4620      	mov	r0, r4
 8009430:	2200      	movs	r2, #0
 8009432:	2104      	movs	r1, #4
 8009434:	f7ff ff94 	bl	8009360 <std>
 8009438:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800943c:	2201      	movs	r2, #1
 800943e:	2109      	movs	r1, #9
 8009440:	f7ff ff8e 	bl	8009360 <std>
 8009444:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009448:	2202      	movs	r2, #2
 800944a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800944e:	2112      	movs	r1, #18
 8009450:	f7ff bf86 	b.w	8009360 <std>
 8009454:	200054b4 	.word	0x200054b4
 8009458:	2000537c 	.word	0x2000537c
 800945c:	080093cd 	.word	0x080093cd

08009460 <__sfp_lock_acquire>:
 8009460:	4801      	ldr	r0, [pc, #4]	@ (8009468 <__sfp_lock_acquire+0x8>)
 8009462:	f000 b970 	b.w	8009746 <__retarget_lock_acquire_recursive>
 8009466:	bf00      	nop
 8009468:	200054bd 	.word	0x200054bd

0800946c <__sfp_lock_release>:
 800946c:	4801      	ldr	r0, [pc, #4]	@ (8009474 <__sfp_lock_release+0x8>)
 800946e:	f000 b96b 	b.w	8009748 <__retarget_lock_release_recursive>
 8009472:	bf00      	nop
 8009474:	200054bd 	.word	0x200054bd

08009478 <__sinit>:
 8009478:	b510      	push	{r4, lr}
 800947a:	4604      	mov	r4, r0
 800947c:	f7ff fff0 	bl	8009460 <__sfp_lock_acquire>
 8009480:	6a23      	ldr	r3, [r4, #32]
 8009482:	b11b      	cbz	r3, 800948c <__sinit+0x14>
 8009484:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009488:	f7ff bff0 	b.w	800946c <__sfp_lock_release>
 800948c:	4b04      	ldr	r3, [pc, #16]	@ (80094a0 <__sinit+0x28>)
 800948e:	6223      	str	r3, [r4, #32]
 8009490:	4b04      	ldr	r3, [pc, #16]	@ (80094a4 <__sinit+0x2c>)
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	2b00      	cmp	r3, #0
 8009496:	d1f5      	bne.n	8009484 <__sinit+0xc>
 8009498:	f7ff ffc4 	bl	8009424 <global_stdio_init.part.0>
 800949c:	e7f2      	b.n	8009484 <__sinit+0xc>
 800949e:	bf00      	nop
 80094a0:	080093e5 	.word	0x080093e5
 80094a4:	200054b4 	.word	0x200054b4

080094a8 <_fwalk_sglue>:
 80094a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80094ac:	4607      	mov	r7, r0
 80094ae:	4688      	mov	r8, r1
 80094b0:	4614      	mov	r4, r2
 80094b2:	2600      	movs	r6, #0
 80094b4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80094b8:	f1b9 0901 	subs.w	r9, r9, #1
 80094bc:	d505      	bpl.n	80094ca <_fwalk_sglue+0x22>
 80094be:	6824      	ldr	r4, [r4, #0]
 80094c0:	2c00      	cmp	r4, #0
 80094c2:	d1f7      	bne.n	80094b4 <_fwalk_sglue+0xc>
 80094c4:	4630      	mov	r0, r6
 80094c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80094ca:	89ab      	ldrh	r3, [r5, #12]
 80094cc:	2b01      	cmp	r3, #1
 80094ce:	d907      	bls.n	80094e0 <_fwalk_sglue+0x38>
 80094d0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80094d4:	3301      	adds	r3, #1
 80094d6:	d003      	beq.n	80094e0 <_fwalk_sglue+0x38>
 80094d8:	4629      	mov	r1, r5
 80094da:	4638      	mov	r0, r7
 80094dc:	47c0      	blx	r8
 80094de:	4306      	orrs	r6, r0
 80094e0:	3568      	adds	r5, #104	@ 0x68
 80094e2:	e7e9      	b.n	80094b8 <_fwalk_sglue+0x10>

080094e4 <iprintf>:
 80094e4:	b40f      	push	{r0, r1, r2, r3}
 80094e6:	b507      	push	{r0, r1, r2, lr}
 80094e8:	4906      	ldr	r1, [pc, #24]	@ (8009504 <iprintf+0x20>)
 80094ea:	ab04      	add	r3, sp, #16
 80094ec:	6808      	ldr	r0, [r1, #0]
 80094ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80094f2:	6881      	ldr	r1, [r0, #8]
 80094f4:	9301      	str	r3, [sp, #4]
 80094f6:	f001 fc53 	bl	800ada0 <_vfiprintf_r>
 80094fa:	b003      	add	sp, #12
 80094fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8009500:	b004      	add	sp, #16
 8009502:	4770      	bx	lr
 8009504:	2000001c 	.word	0x2000001c

08009508 <__sread>:
 8009508:	b510      	push	{r4, lr}
 800950a:	460c      	mov	r4, r1
 800950c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009510:	f000 f8ca 	bl	80096a8 <_read_r>
 8009514:	2800      	cmp	r0, #0
 8009516:	bfab      	itete	ge
 8009518:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800951a:	89a3      	ldrhlt	r3, [r4, #12]
 800951c:	181b      	addge	r3, r3, r0
 800951e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009522:	bfac      	ite	ge
 8009524:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009526:	81a3      	strhlt	r3, [r4, #12]
 8009528:	bd10      	pop	{r4, pc}

0800952a <__swrite>:
 800952a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800952e:	461f      	mov	r7, r3
 8009530:	898b      	ldrh	r3, [r1, #12]
 8009532:	05db      	lsls	r3, r3, #23
 8009534:	4605      	mov	r5, r0
 8009536:	460c      	mov	r4, r1
 8009538:	4616      	mov	r6, r2
 800953a:	d505      	bpl.n	8009548 <__swrite+0x1e>
 800953c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009540:	2302      	movs	r3, #2
 8009542:	2200      	movs	r2, #0
 8009544:	f000 f89e 	bl	8009684 <_lseek_r>
 8009548:	89a3      	ldrh	r3, [r4, #12]
 800954a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800954e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009552:	81a3      	strh	r3, [r4, #12]
 8009554:	4632      	mov	r2, r6
 8009556:	463b      	mov	r3, r7
 8009558:	4628      	mov	r0, r5
 800955a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800955e:	f000 b8b5 	b.w	80096cc <_write_r>

08009562 <__sseek>:
 8009562:	b510      	push	{r4, lr}
 8009564:	460c      	mov	r4, r1
 8009566:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800956a:	f000 f88b 	bl	8009684 <_lseek_r>
 800956e:	1c43      	adds	r3, r0, #1
 8009570:	89a3      	ldrh	r3, [r4, #12]
 8009572:	bf15      	itete	ne
 8009574:	6560      	strne	r0, [r4, #84]	@ 0x54
 8009576:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800957a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800957e:	81a3      	strheq	r3, [r4, #12]
 8009580:	bf18      	it	ne
 8009582:	81a3      	strhne	r3, [r4, #12]
 8009584:	bd10      	pop	{r4, pc}

08009586 <__sclose>:
 8009586:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800958a:	f000 b80d 	b.w	80095a8 <_close_r>

0800958e <memset>:
 800958e:	4402      	add	r2, r0
 8009590:	4603      	mov	r3, r0
 8009592:	4293      	cmp	r3, r2
 8009594:	d100      	bne.n	8009598 <memset+0xa>
 8009596:	4770      	bx	lr
 8009598:	f803 1b01 	strb.w	r1, [r3], #1
 800959c:	e7f9      	b.n	8009592 <memset+0x4>
	...

080095a0 <_localeconv_r>:
 80095a0:	4800      	ldr	r0, [pc, #0]	@ (80095a4 <_localeconv_r+0x4>)
 80095a2:	4770      	bx	lr
 80095a4:	2000015c 	.word	0x2000015c

080095a8 <_close_r>:
 80095a8:	b538      	push	{r3, r4, r5, lr}
 80095aa:	4d06      	ldr	r5, [pc, #24]	@ (80095c4 <_close_r+0x1c>)
 80095ac:	2300      	movs	r3, #0
 80095ae:	4604      	mov	r4, r0
 80095b0:	4608      	mov	r0, r1
 80095b2:	602b      	str	r3, [r5, #0]
 80095b4:	f7f8 f8ae 	bl	8001714 <_close>
 80095b8:	1c43      	adds	r3, r0, #1
 80095ba:	d102      	bne.n	80095c2 <_close_r+0x1a>
 80095bc:	682b      	ldr	r3, [r5, #0]
 80095be:	b103      	cbz	r3, 80095c2 <_close_r+0x1a>
 80095c0:	6023      	str	r3, [r4, #0]
 80095c2:	bd38      	pop	{r3, r4, r5, pc}
 80095c4:	200054b8 	.word	0x200054b8

080095c8 <_reclaim_reent>:
 80095c8:	4b2d      	ldr	r3, [pc, #180]	@ (8009680 <_reclaim_reent+0xb8>)
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	4283      	cmp	r3, r0
 80095ce:	b570      	push	{r4, r5, r6, lr}
 80095d0:	4604      	mov	r4, r0
 80095d2:	d053      	beq.n	800967c <_reclaim_reent+0xb4>
 80095d4:	69c3      	ldr	r3, [r0, #28]
 80095d6:	b31b      	cbz	r3, 8009620 <_reclaim_reent+0x58>
 80095d8:	68db      	ldr	r3, [r3, #12]
 80095da:	b163      	cbz	r3, 80095f6 <_reclaim_reent+0x2e>
 80095dc:	2500      	movs	r5, #0
 80095de:	69e3      	ldr	r3, [r4, #28]
 80095e0:	68db      	ldr	r3, [r3, #12]
 80095e2:	5959      	ldr	r1, [r3, r5]
 80095e4:	b9b1      	cbnz	r1, 8009614 <_reclaim_reent+0x4c>
 80095e6:	3504      	adds	r5, #4
 80095e8:	2d80      	cmp	r5, #128	@ 0x80
 80095ea:	d1f8      	bne.n	80095de <_reclaim_reent+0x16>
 80095ec:	69e3      	ldr	r3, [r4, #28]
 80095ee:	4620      	mov	r0, r4
 80095f0:	68d9      	ldr	r1, [r3, #12]
 80095f2:	f000 ff31 	bl	800a458 <_free_r>
 80095f6:	69e3      	ldr	r3, [r4, #28]
 80095f8:	6819      	ldr	r1, [r3, #0]
 80095fa:	b111      	cbz	r1, 8009602 <_reclaim_reent+0x3a>
 80095fc:	4620      	mov	r0, r4
 80095fe:	f000 ff2b 	bl	800a458 <_free_r>
 8009602:	69e3      	ldr	r3, [r4, #28]
 8009604:	689d      	ldr	r5, [r3, #8]
 8009606:	b15d      	cbz	r5, 8009620 <_reclaim_reent+0x58>
 8009608:	4629      	mov	r1, r5
 800960a:	4620      	mov	r0, r4
 800960c:	682d      	ldr	r5, [r5, #0]
 800960e:	f000 ff23 	bl	800a458 <_free_r>
 8009612:	e7f8      	b.n	8009606 <_reclaim_reent+0x3e>
 8009614:	680e      	ldr	r6, [r1, #0]
 8009616:	4620      	mov	r0, r4
 8009618:	f000 ff1e 	bl	800a458 <_free_r>
 800961c:	4631      	mov	r1, r6
 800961e:	e7e1      	b.n	80095e4 <_reclaim_reent+0x1c>
 8009620:	6961      	ldr	r1, [r4, #20]
 8009622:	b111      	cbz	r1, 800962a <_reclaim_reent+0x62>
 8009624:	4620      	mov	r0, r4
 8009626:	f000 ff17 	bl	800a458 <_free_r>
 800962a:	69e1      	ldr	r1, [r4, #28]
 800962c:	b111      	cbz	r1, 8009634 <_reclaim_reent+0x6c>
 800962e:	4620      	mov	r0, r4
 8009630:	f000 ff12 	bl	800a458 <_free_r>
 8009634:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8009636:	b111      	cbz	r1, 800963e <_reclaim_reent+0x76>
 8009638:	4620      	mov	r0, r4
 800963a:	f000 ff0d 	bl	800a458 <_free_r>
 800963e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009640:	b111      	cbz	r1, 8009648 <_reclaim_reent+0x80>
 8009642:	4620      	mov	r0, r4
 8009644:	f000 ff08 	bl	800a458 <_free_r>
 8009648:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800964a:	b111      	cbz	r1, 8009652 <_reclaim_reent+0x8a>
 800964c:	4620      	mov	r0, r4
 800964e:	f000 ff03 	bl	800a458 <_free_r>
 8009652:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8009654:	b111      	cbz	r1, 800965c <_reclaim_reent+0x94>
 8009656:	4620      	mov	r0, r4
 8009658:	f000 fefe 	bl	800a458 <_free_r>
 800965c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800965e:	b111      	cbz	r1, 8009666 <_reclaim_reent+0x9e>
 8009660:	4620      	mov	r0, r4
 8009662:	f000 fef9 	bl	800a458 <_free_r>
 8009666:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8009668:	b111      	cbz	r1, 8009670 <_reclaim_reent+0xa8>
 800966a:	4620      	mov	r0, r4
 800966c:	f000 fef4 	bl	800a458 <_free_r>
 8009670:	6a23      	ldr	r3, [r4, #32]
 8009672:	b11b      	cbz	r3, 800967c <_reclaim_reent+0xb4>
 8009674:	4620      	mov	r0, r4
 8009676:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800967a:	4718      	bx	r3
 800967c:	bd70      	pop	{r4, r5, r6, pc}
 800967e:	bf00      	nop
 8009680:	2000001c 	.word	0x2000001c

08009684 <_lseek_r>:
 8009684:	b538      	push	{r3, r4, r5, lr}
 8009686:	4d07      	ldr	r5, [pc, #28]	@ (80096a4 <_lseek_r+0x20>)
 8009688:	4604      	mov	r4, r0
 800968a:	4608      	mov	r0, r1
 800968c:	4611      	mov	r1, r2
 800968e:	2200      	movs	r2, #0
 8009690:	602a      	str	r2, [r5, #0]
 8009692:	461a      	mov	r2, r3
 8009694:	f7f8 f865 	bl	8001762 <_lseek>
 8009698:	1c43      	adds	r3, r0, #1
 800969a:	d102      	bne.n	80096a2 <_lseek_r+0x1e>
 800969c:	682b      	ldr	r3, [r5, #0]
 800969e:	b103      	cbz	r3, 80096a2 <_lseek_r+0x1e>
 80096a0:	6023      	str	r3, [r4, #0]
 80096a2:	bd38      	pop	{r3, r4, r5, pc}
 80096a4:	200054b8 	.word	0x200054b8

080096a8 <_read_r>:
 80096a8:	b538      	push	{r3, r4, r5, lr}
 80096aa:	4d07      	ldr	r5, [pc, #28]	@ (80096c8 <_read_r+0x20>)
 80096ac:	4604      	mov	r4, r0
 80096ae:	4608      	mov	r0, r1
 80096b0:	4611      	mov	r1, r2
 80096b2:	2200      	movs	r2, #0
 80096b4:	602a      	str	r2, [r5, #0]
 80096b6:	461a      	mov	r2, r3
 80096b8:	f7f8 f80f 	bl	80016da <_read>
 80096bc:	1c43      	adds	r3, r0, #1
 80096be:	d102      	bne.n	80096c6 <_read_r+0x1e>
 80096c0:	682b      	ldr	r3, [r5, #0]
 80096c2:	b103      	cbz	r3, 80096c6 <_read_r+0x1e>
 80096c4:	6023      	str	r3, [r4, #0]
 80096c6:	bd38      	pop	{r3, r4, r5, pc}
 80096c8:	200054b8 	.word	0x200054b8

080096cc <_write_r>:
 80096cc:	b538      	push	{r3, r4, r5, lr}
 80096ce:	4d07      	ldr	r5, [pc, #28]	@ (80096ec <_write_r+0x20>)
 80096d0:	4604      	mov	r4, r0
 80096d2:	4608      	mov	r0, r1
 80096d4:	4611      	mov	r1, r2
 80096d6:	2200      	movs	r2, #0
 80096d8:	602a      	str	r2, [r5, #0]
 80096da:	461a      	mov	r2, r3
 80096dc:	f7f7 fc1a 	bl	8000f14 <_write>
 80096e0:	1c43      	adds	r3, r0, #1
 80096e2:	d102      	bne.n	80096ea <_write_r+0x1e>
 80096e4:	682b      	ldr	r3, [r5, #0]
 80096e6:	b103      	cbz	r3, 80096ea <_write_r+0x1e>
 80096e8:	6023      	str	r3, [r4, #0]
 80096ea:	bd38      	pop	{r3, r4, r5, pc}
 80096ec:	200054b8 	.word	0x200054b8

080096f0 <__errno>:
 80096f0:	4b01      	ldr	r3, [pc, #4]	@ (80096f8 <__errno+0x8>)
 80096f2:	6818      	ldr	r0, [r3, #0]
 80096f4:	4770      	bx	lr
 80096f6:	bf00      	nop
 80096f8:	2000001c 	.word	0x2000001c

080096fc <__libc_init_array>:
 80096fc:	b570      	push	{r4, r5, r6, lr}
 80096fe:	4d0d      	ldr	r5, [pc, #52]	@ (8009734 <__libc_init_array+0x38>)
 8009700:	4c0d      	ldr	r4, [pc, #52]	@ (8009738 <__libc_init_array+0x3c>)
 8009702:	1b64      	subs	r4, r4, r5
 8009704:	10a4      	asrs	r4, r4, #2
 8009706:	2600      	movs	r6, #0
 8009708:	42a6      	cmp	r6, r4
 800970a:	d109      	bne.n	8009720 <__libc_init_array+0x24>
 800970c:	4d0b      	ldr	r5, [pc, #44]	@ (800973c <__libc_init_array+0x40>)
 800970e:	4c0c      	ldr	r4, [pc, #48]	@ (8009740 <__libc_init_array+0x44>)
 8009710:	f001 fec2 	bl	800b498 <_init>
 8009714:	1b64      	subs	r4, r4, r5
 8009716:	10a4      	asrs	r4, r4, #2
 8009718:	2600      	movs	r6, #0
 800971a:	42a6      	cmp	r6, r4
 800971c:	d105      	bne.n	800972a <__libc_init_array+0x2e>
 800971e:	bd70      	pop	{r4, r5, r6, pc}
 8009720:	f855 3b04 	ldr.w	r3, [r5], #4
 8009724:	4798      	blx	r3
 8009726:	3601      	adds	r6, #1
 8009728:	e7ee      	b.n	8009708 <__libc_init_array+0xc>
 800972a:	f855 3b04 	ldr.w	r3, [r5], #4
 800972e:	4798      	blx	r3
 8009730:	3601      	adds	r6, #1
 8009732:	e7f2      	b.n	800971a <__libc_init_array+0x1e>
 8009734:	0800b9f4 	.word	0x0800b9f4
 8009738:	0800b9f4 	.word	0x0800b9f4
 800973c:	0800b9f4 	.word	0x0800b9f4
 8009740:	0800b9f8 	.word	0x0800b9f8

08009744 <__retarget_lock_init_recursive>:
 8009744:	4770      	bx	lr

08009746 <__retarget_lock_acquire_recursive>:
 8009746:	4770      	bx	lr

08009748 <__retarget_lock_release_recursive>:
 8009748:	4770      	bx	lr

0800974a <memcpy>:
 800974a:	440a      	add	r2, r1
 800974c:	4291      	cmp	r1, r2
 800974e:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8009752:	d100      	bne.n	8009756 <memcpy+0xc>
 8009754:	4770      	bx	lr
 8009756:	b510      	push	{r4, lr}
 8009758:	f811 4b01 	ldrb.w	r4, [r1], #1
 800975c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009760:	4291      	cmp	r1, r2
 8009762:	d1f9      	bne.n	8009758 <memcpy+0xe>
 8009764:	bd10      	pop	{r4, pc}
	...

08009768 <__assert_func>:
 8009768:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800976a:	4614      	mov	r4, r2
 800976c:	461a      	mov	r2, r3
 800976e:	4b09      	ldr	r3, [pc, #36]	@ (8009794 <__assert_func+0x2c>)
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	4605      	mov	r5, r0
 8009774:	68d8      	ldr	r0, [r3, #12]
 8009776:	b14c      	cbz	r4, 800978c <__assert_func+0x24>
 8009778:	4b07      	ldr	r3, [pc, #28]	@ (8009798 <__assert_func+0x30>)
 800977a:	9100      	str	r1, [sp, #0]
 800977c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009780:	4906      	ldr	r1, [pc, #24]	@ (800979c <__assert_func+0x34>)
 8009782:	462b      	mov	r3, r5
 8009784:	f001 fcd0 	bl	800b128 <fiprintf>
 8009788:	f001 fd84 	bl	800b294 <abort>
 800978c:	4b04      	ldr	r3, [pc, #16]	@ (80097a0 <__assert_func+0x38>)
 800978e:	461c      	mov	r4, r3
 8009790:	e7f3      	b.n	800977a <__assert_func+0x12>
 8009792:	bf00      	nop
 8009794:	2000001c 	.word	0x2000001c
 8009798:	0800b6bf 	.word	0x0800b6bf
 800979c:	0800b6cc 	.word	0x0800b6cc
 80097a0:	0800b6fa 	.word	0x0800b6fa

080097a4 <quorem>:
 80097a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097a8:	6903      	ldr	r3, [r0, #16]
 80097aa:	690c      	ldr	r4, [r1, #16]
 80097ac:	42a3      	cmp	r3, r4
 80097ae:	4607      	mov	r7, r0
 80097b0:	db7e      	blt.n	80098b0 <quorem+0x10c>
 80097b2:	3c01      	subs	r4, #1
 80097b4:	f101 0814 	add.w	r8, r1, #20
 80097b8:	00a3      	lsls	r3, r4, #2
 80097ba:	f100 0514 	add.w	r5, r0, #20
 80097be:	9300      	str	r3, [sp, #0]
 80097c0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80097c4:	9301      	str	r3, [sp, #4]
 80097c6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80097ca:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80097ce:	3301      	adds	r3, #1
 80097d0:	429a      	cmp	r2, r3
 80097d2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80097d6:	fbb2 f6f3 	udiv	r6, r2, r3
 80097da:	d32e      	bcc.n	800983a <quorem+0x96>
 80097dc:	f04f 0a00 	mov.w	sl, #0
 80097e0:	46c4      	mov	ip, r8
 80097e2:	46ae      	mov	lr, r5
 80097e4:	46d3      	mov	fp, sl
 80097e6:	f85c 3b04 	ldr.w	r3, [ip], #4
 80097ea:	b298      	uxth	r0, r3
 80097ec:	fb06 a000 	mla	r0, r6, r0, sl
 80097f0:	0c02      	lsrs	r2, r0, #16
 80097f2:	0c1b      	lsrs	r3, r3, #16
 80097f4:	fb06 2303 	mla	r3, r6, r3, r2
 80097f8:	f8de 2000 	ldr.w	r2, [lr]
 80097fc:	b280      	uxth	r0, r0
 80097fe:	b292      	uxth	r2, r2
 8009800:	1a12      	subs	r2, r2, r0
 8009802:	445a      	add	r2, fp
 8009804:	f8de 0000 	ldr.w	r0, [lr]
 8009808:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800980c:	b29b      	uxth	r3, r3
 800980e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8009812:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8009816:	b292      	uxth	r2, r2
 8009818:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800981c:	45e1      	cmp	r9, ip
 800981e:	f84e 2b04 	str.w	r2, [lr], #4
 8009822:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8009826:	d2de      	bcs.n	80097e6 <quorem+0x42>
 8009828:	9b00      	ldr	r3, [sp, #0]
 800982a:	58eb      	ldr	r3, [r5, r3]
 800982c:	b92b      	cbnz	r3, 800983a <quorem+0x96>
 800982e:	9b01      	ldr	r3, [sp, #4]
 8009830:	3b04      	subs	r3, #4
 8009832:	429d      	cmp	r5, r3
 8009834:	461a      	mov	r2, r3
 8009836:	d32f      	bcc.n	8009898 <quorem+0xf4>
 8009838:	613c      	str	r4, [r7, #16]
 800983a:	4638      	mov	r0, r7
 800983c:	f001 f97e 	bl	800ab3c <__mcmp>
 8009840:	2800      	cmp	r0, #0
 8009842:	db25      	blt.n	8009890 <quorem+0xec>
 8009844:	4629      	mov	r1, r5
 8009846:	2000      	movs	r0, #0
 8009848:	f858 2b04 	ldr.w	r2, [r8], #4
 800984c:	f8d1 c000 	ldr.w	ip, [r1]
 8009850:	fa1f fe82 	uxth.w	lr, r2
 8009854:	fa1f f38c 	uxth.w	r3, ip
 8009858:	eba3 030e 	sub.w	r3, r3, lr
 800985c:	4403      	add	r3, r0
 800985e:	0c12      	lsrs	r2, r2, #16
 8009860:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8009864:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8009868:	b29b      	uxth	r3, r3
 800986a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800986e:	45c1      	cmp	r9, r8
 8009870:	f841 3b04 	str.w	r3, [r1], #4
 8009874:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009878:	d2e6      	bcs.n	8009848 <quorem+0xa4>
 800987a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800987e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009882:	b922      	cbnz	r2, 800988e <quorem+0xea>
 8009884:	3b04      	subs	r3, #4
 8009886:	429d      	cmp	r5, r3
 8009888:	461a      	mov	r2, r3
 800988a:	d30b      	bcc.n	80098a4 <quorem+0x100>
 800988c:	613c      	str	r4, [r7, #16]
 800988e:	3601      	adds	r6, #1
 8009890:	4630      	mov	r0, r6
 8009892:	b003      	add	sp, #12
 8009894:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009898:	6812      	ldr	r2, [r2, #0]
 800989a:	3b04      	subs	r3, #4
 800989c:	2a00      	cmp	r2, #0
 800989e:	d1cb      	bne.n	8009838 <quorem+0x94>
 80098a0:	3c01      	subs	r4, #1
 80098a2:	e7c6      	b.n	8009832 <quorem+0x8e>
 80098a4:	6812      	ldr	r2, [r2, #0]
 80098a6:	3b04      	subs	r3, #4
 80098a8:	2a00      	cmp	r2, #0
 80098aa:	d1ef      	bne.n	800988c <quorem+0xe8>
 80098ac:	3c01      	subs	r4, #1
 80098ae:	e7ea      	b.n	8009886 <quorem+0xe2>
 80098b0:	2000      	movs	r0, #0
 80098b2:	e7ee      	b.n	8009892 <quorem+0xee>
 80098b4:	0000      	movs	r0, r0
	...

080098b8 <_dtoa_r>:
 80098b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098bc:	69c7      	ldr	r7, [r0, #28]
 80098be:	b097      	sub	sp, #92	@ 0x5c
 80098c0:	ed8d 0b04 	vstr	d0, [sp, #16]
 80098c4:	ec55 4b10 	vmov	r4, r5, d0
 80098c8:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 80098ca:	9107      	str	r1, [sp, #28]
 80098cc:	4681      	mov	r9, r0
 80098ce:	920c      	str	r2, [sp, #48]	@ 0x30
 80098d0:	9311      	str	r3, [sp, #68]	@ 0x44
 80098d2:	b97f      	cbnz	r7, 80098f4 <_dtoa_r+0x3c>
 80098d4:	2010      	movs	r0, #16
 80098d6:	f000 fe09 	bl	800a4ec <malloc>
 80098da:	4602      	mov	r2, r0
 80098dc:	f8c9 001c 	str.w	r0, [r9, #28]
 80098e0:	b920      	cbnz	r0, 80098ec <_dtoa_r+0x34>
 80098e2:	4ba9      	ldr	r3, [pc, #676]	@ (8009b88 <_dtoa_r+0x2d0>)
 80098e4:	21ef      	movs	r1, #239	@ 0xef
 80098e6:	48a9      	ldr	r0, [pc, #676]	@ (8009b8c <_dtoa_r+0x2d4>)
 80098e8:	f7ff ff3e 	bl	8009768 <__assert_func>
 80098ec:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80098f0:	6007      	str	r7, [r0, #0]
 80098f2:	60c7      	str	r7, [r0, #12]
 80098f4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80098f8:	6819      	ldr	r1, [r3, #0]
 80098fa:	b159      	cbz	r1, 8009914 <_dtoa_r+0x5c>
 80098fc:	685a      	ldr	r2, [r3, #4]
 80098fe:	604a      	str	r2, [r1, #4]
 8009900:	2301      	movs	r3, #1
 8009902:	4093      	lsls	r3, r2
 8009904:	608b      	str	r3, [r1, #8]
 8009906:	4648      	mov	r0, r9
 8009908:	f000 fee6 	bl	800a6d8 <_Bfree>
 800990c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8009910:	2200      	movs	r2, #0
 8009912:	601a      	str	r2, [r3, #0]
 8009914:	1e2b      	subs	r3, r5, #0
 8009916:	bfb9      	ittee	lt
 8009918:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800991c:	9305      	strlt	r3, [sp, #20]
 800991e:	2300      	movge	r3, #0
 8009920:	6033      	strge	r3, [r6, #0]
 8009922:	9f05      	ldr	r7, [sp, #20]
 8009924:	4b9a      	ldr	r3, [pc, #616]	@ (8009b90 <_dtoa_r+0x2d8>)
 8009926:	bfbc      	itt	lt
 8009928:	2201      	movlt	r2, #1
 800992a:	6032      	strlt	r2, [r6, #0]
 800992c:	43bb      	bics	r3, r7
 800992e:	d112      	bne.n	8009956 <_dtoa_r+0x9e>
 8009930:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8009932:	f242 730f 	movw	r3, #9999	@ 0x270f
 8009936:	6013      	str	r3, [r2, #0]
 8009938:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800993c:	4323      	orrs	r3, r4
 800993e:	f000 855a 	beq.w	800a3f6 <_dtoa_r+0xb3e>
 8009942:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009944:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8009ba4 <_dtoa_r+0x2ec>
 8009948:	2b00      	cmp	r3, #0
 800994a:	f000 855c 	beq.w	800a406 <_dtoa_r+0xb4e>
 800994e:	f10a 0303 	add.w	r3, sl, #3
 8009952:	f000 bd56 	b.w	800a402 <_dtoa_r+0xb4a>
 8009956:	ed9d 7b04 	vldr	d7, [sp, #16]
 800995a:	2200      	movs	r2, #0
 800995c:	ec51 0b17 	vmov	r0, r1, d7
 8009960:	2300      	movs	r3, #0
 8009962:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8009966:	f7f7 f8cf 	bl	8000b08 <__aeabi_dcmpeq>
 800996a:	4680      	mov	r8, r0
 800996c:	b158      	cbz	r0, 8009986 <_dtoa_r+0xce>
 800996e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8009970:	2301      	movs	r3, #1
 8009972:	6013      	str	r3, [r2, #0]
 8009974:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009976:	b113      	cbz	r3, 800997e <_dtoa_r+0xc6>
 8009978:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800997a:	4b86      	ldr	r3, [pc, #536]	@ (8009b94 <_dtoa_r+0x2dc>)
 800997c:	6013      	str	r3, [r2, #0]
 800997e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8009ba8 <_dtoa_r+0x2f0>
 8009982:	f000 bd40 	b.w	800a406 <_dtoa_r+0xb4e>
 8009986:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800998a:	aa14      	add	r2, sp, #80	@ 0x50
 800998c:	a915      	add	r1, sp, #84	@ 0x54
 800998e:	4648      	mov	r0, r9
 8009990:	f001 f984 	bl	800ac9c <__d2b>
 8009994:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8009998:	9002      	str	r0, [sp, #8]
 800999a:	2e00      	cmp	r6, #0
 800999c:	d078      	beq.n	8009a90 <_dtoa_r+0x1d8>
 800999e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80099a0:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 80099a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80099a8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80099ac:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80099b0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80099b4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80099b8:	4619      	mov	r1, r3
 80099ba:	2200      	movs	r2, #0
 80099bc:	4b76      	ldr	r3, [pc, #472]	@ (8009b98 <_dtoa_r+0x2e0>)
 80099be:	f7f6 fc83 	bl	80002c8 <__aeabi_dsub>
 80099c2:	a36b      	add	r3, pc, #428	@ (adr r3, 8009b70 <_dtoa_r+0x2b8>)
 80099c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099c8:	f7f6 fe36 	bl	8000638 <__aeabi_dmul>
 80099cc:	a36a      	add	r3, pc, #424	@ (adr r3, 8009b78 <_dtoa_r+0x2c0>)
 80099ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099d2:	f7f6 fc7b 	bl	80002cc <__adddf3>
 80099d6:	4604      	mov	r4, r0
 80099d8:	4630      	mov	r0, r6
 80099da:	460d      	mov	r5, r1
 80099dc:	f7f6 fdc2 	bl	8000564 <__aeabi_i2d>
 80099e0:	a367      	add	r3, pc, #412	@ (adr r3, 8009b80 <_dtoa_r+0x2c8>)
 80099e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099e6:	f7f6 fe27 	bl	8000638 <__aeabi_dmul>
 80099ea:	4602      	mov	r2, r0
 80099ec:	460b      	mov	r3, r1
 80099ee:	4620      	mov	r0, r4
 80099f0:	4629      	mov	r1, r5
 80099f2:	f7f6 fc6b 	bl	80002cc <__adddf3>
 80099f6:	4604      	mov	r4, r0
 80099f8:	460d      	mov	r5, r1
 80099fa:	f7f7 f8cd 	bl	8000b98 <__aeabi_d2iz>
 80099fe:	2200      	movs	r2, #0
 8009a00:	4607      	mov	r7, r0
 8009a02:	2300      	movs	r3, #0
 8009a04:	4620      	mov	r0, r4
 8009a06:	4629      	mov	r1, r5
 8009a08:	f7f7 f888 	bl	8000b1c <__aeabi_dcmplt>
 8009a0c:	b140      	cbz	r0, 8009a20 <_dtoa_r+0x168>
 8009a0e:	4638      	mov	r0, r7
 8009a10:	f7f6 fda8 	bl	8000564 <__aeabi_i2d>
 8009a14:	4622      	mov	r2, r4
 8009a16:	462b      	mov	r3, r5
 8009a18:	f7f7 f876 	bl	8000b08 <__aeabi_dcmpeq>
 8009a1c:	b900      	cbnz	r0, 8009a20 <_dtoa_r+0x168>
 8009a1e:	3f01      	subs	r7, #1
 8009a20:	2f16      	cmp	r7, #22
 8009a22:	d852      	bhi.n	8009aca <_dtoa_r+0x212>
 8009a24:	4b5d      	ldr	r3, [pc, #372]	@ (8009b9c <_dtoa_r+0x2e4>)
 8009a26:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009a2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a2e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8009a32:	f7f7 f873 	bl	8000b1c <__aeabi_dcmplt>
 8009a36:	2800      	cmp	r0, #0
 8009a38:	d049      	beq.n	8009ace <_dtoa_r+0x216>
 8009a3a:	3f01      	subs	r7, #1
 8009a3c:	2300      	movs	r3, #0
 8009a3e:	9310      	str	r3, [sp, #64]	@ 0x40
 8009a40:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8009a42:	1b9b      	subs	r3, r3, r6
 8009a44:	1e5a      	subs	r2, r3, #1
 8009a46:	bf45      	ittet	mi
 8009a48:	f1c3 0301 	rsbmi	r3, r3, #1
 8009a4c:	9300      	strmi	r3, [sp, #0]
 8009a4e:	2300      	movpl	r3, #0
 8009a50:	2300      	movmi	r3, #0
 8009a52:	9206      	str	r2, [sp, #24]
 8009a54:	bf54      	ite	pl
 8009a56:	9300      	strpl	r3, [sp, #0]
 8009a58:	9306      	strmi	r3, [sp, #24]
 8009a5a:	2f00      	cmp	r7, #0
 8009a5c:	db39      	blt.n	8009ad2 <_dtoa_r+0x21a>
 8009a5e:	9b06      	ldr	r3, [sp, #24]
 8009a60:	970d      	str	r7, [sp, #52]	@ 0x34
 8009a62:	443b      	add	r3, r7
 8009a64:	9306      	str	r3, [sp, #24]
 8009a66:	2300      	movs	r3, #0
 8009a68:	9308      	str	r3, [sp, #32]
 8009a6a:	9b07      	ldr	r3, [sp, #28]
 8009a6c:	2b09      	cmp	r3, #9
 8009a6e:	d863      	bhi.n	8009b38 <_dtoa_r+0x280>
 8009a70:	2b05      	cmp	r3, #5
 8009a72:	bfc4      	itt	gt
 8009a74:	3b04      	subgt	r3, #4
 8009a76:	9307      	strgt	r3, [sp, #28]
 8009a78:	9b07      	ldr	r3, [sp, #28]
 8009a7a:	f1a3 0302 	sub.w	r3, r3, #2
 8009a7e:	bfcc      	ite	gt
 8009a80:	2400      	movgt	r4, #0
 8009a82:	2401      	movle	r4, #1
 8009a84:	2b03      	cmp	r3, #3
 8009a86:	d863      	bhi.n	8009b50 <_dtoa_r+0x298>
 8009a88:	e8df f003 	tbb	[pc, r3]
 8009a8c:	2b375452 	.word	0x2b375452
 8009a90:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8009a94:	441e      	add	r6, r3
 8009a96:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8009a9a:	2b20      	cmp	r3, #32
 8009a9c:	bfc1      	itttt	gt
 8009a9e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8009aa2:	409f      	lslgt	r7, r3
 8009aa4:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8009aa8:	fa24 f303 	lsrgt.w	r3, r4, r3
 8009aac:	bfd6      	itet	le
 8009aae:	f1c3 0320 	rsble	r3, r3, #32
 8009ab2:	ea47 0003 	orrgt.w	r0, r7, r3
 8009ab6:	fa04 f003 	lslle.w	r0, r4, r3
 8009aba:	f7f6 fd43 	bl	8000544 <__aeabi_ui2d>
 8009abe:	2201      	movs	r2, #1
 8009ac0:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8009ac4:	3e01      	subs	r6, #1
 8009ac6:	9212      	str	r2, [sp, #72]	@ 0x48
 8009ac8:	e776      	b.n	80099b8 <_dtoa_r+0x100>
 8009aca:	2301      	movs	r3, #1
 8009acc:	e7b7      	b.n	8009a3e <_dtoa_r+0x186>
 8009ace:	9010      	str	r0, [sp, #64]	@ 0x40
 8009ad0:	e7b6      	b.n	8009a40 <_dtoa_r+0x188>
 8009ad2:	9b00      	ldr	r3, [sp, #0]
 8009ad4:	1bdb      	subs	r3, r3, r7
 8009ad6:	9300      	str	r3, [sp, #0]
 8009ad8:	427b      	negs	r3, r7
 8009ada:	9308      	str	r3, [sp, #32]
 8009adc:	2300      	movs	r3, #0
 8009ade:	930d      	str	r3, [sp, #52]	@ 0x34
 8009ae0:	e7c3      	b.n	8009a6a <_dtoa_r+0x1b2>
 8009ae2:	2301      	movs	r3, #1
 8009ae4:	9309      	str	r3, [sp, #36]	@ 0x24
 8009ae6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009ae8:	eb07 0b03 	add.w	fp, r7, r3
 8009aec:	f10b 0301 	add.w	r3, fp, #1
 8009af0:	2b01      	cmp	r3, #1
 8009af2:	9303      	str	r3, [sp, #12]
 8009af4:	bfb8      	it	lt
 8009af6:	2301      	movlt	r3, #1
 8009af8:	e006      	b.n	8009b08 <_dtoa_r+0x250>
 8009afa:	2301      	movs	r3, #1
 8009afc:	9309      	str	r3, [sp, #36]	@ 0x24
 8009afe:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	dd28      	ble.n	8009b56 <_dtoa_r+0x29e>
 8009b04:	469b      	mov	fp, r3
 8009b06:	9303      	str	r3, [sp, #12]
 8009b08:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8009b0c:	2100      	movs	r1, #0
 8009b0e:	2204      	movs	r2, #4
 8009b10:	f102 0514 	add.w	r5, r2, #20
 8009b14:	429d      	cmp	r5, r3
 8009b16:	d926      	bls.n	8009b66 <_dtoa_r+0x2ae>
 8009b18:	6041      	str	r1, [r0, #4]
 8009b1a:	4648      	mov	r0, r9
 8009b1c:	f000 fd9c 	bl	800a658 <_Balloc>
 8009b20:	4682      	mov	sl, r0
 8009b22:	2800      	cmp	r0, #0
 8009b24:	d142      	bne.n	8009bac <_dtoa_r+0x2f4>
 8009b26:	4b1e      	ldr	r3, [pc, #120]	@ (8009ba0 <_dtoa_r+0x2e8>)
 8009b28:	4602      	mov	r2, r0
 8009b2a:	f240 11af 	movw	r1, #431	@ 0x1af
 8009b2e:	e6da      	b.n	80098e6 <_dtoa_r+0x2e>
 8009b30:	2300      	movs	r3, #0
 8009b32:	e7e3      	b.n	8009afc <_dtoa_r+0x244>
 8009b34:	2300      	movs	r3, #0
 8009b36:	e7d5      	b.n	8009ae4 <_dtoa_r+0x22c>
 8009b38:	2401      	movs	r4, #1
 8009b3a:	2300      	movs	r3, #0
 8009b3c:	9307      	str	r3, [sp, #28]
 8009b3e:	9409      	str	r4, [sp, #36]	@ 0x24
 8009b40:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 8009b44:	2200      	movs	r2, #0
 8009b46:	f8cd b00c 	str.w	fp, [sp, #12]
 8009b4a:	2312      	movs	r3, #18
 8009b4c:	920c      	str	r2, [sp, #48]	@ 0x30
 8009b4e:	e7db      	b.n	8009b08 <_dtoa_r+0x250>
 8009b50:	2301      	movs	r3, #1
 8009b52:	9309      	str	r3, [sp, #36]	@ 0x24
 8009b54:	e7f4      	b.n	8009b40 <_dtoa_r+0x288>
 8009b56:	f04f 0b01 	mov.w	fp, #1
 8009b5a:	f8cd b00c 	str.w	fp, [sp, #12]
 8009b5e:	465b      	mov	r3, fp
 8009b60:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8009b64:	e7d0      	b.n	8009b08 <_dtoa_r+0x250>
 8009b66:	3101      	adds	r1, #1
 8009b68:	0052      	lsls	r2, r2, #1
 8009b6a:	e7d1      	b.n	8009b10 <_dtoa_r+0x258>
 8009b6c:	f3af 8000 	nop.w
 8009b70:	636f4361 	.word	0x636f4361
 8009b74:	3fd287a7 	.word	0x3fd287a7
 8009b78:	8b60c8b3 	.word	0x8b60c8b3
 8009b7c:	3fc68a28 	.word	0x3fc68a28
 8009b80:	509f79fb 	.word	0x509f79fb
 8009b84:	3fd34413 	.word	0x3fd34413
 8009b88:	0800b61c 	.word	0x0800b61c
 8009b8c:	0800b708 	.word	0x0800b708
 8009b90:	7ff00000 	.word	0x7ff00000
 8009b94:	0800b69c 	.word	0x0800b69c
 8009b98:	3ff80000 	.word	0x3ff80000
 8009b9c:	0800b820 	.word	0x0800b820
 8009ba0:	0800b760 	.word	0x0800b760
 8009ba4:	0800b704 	.word	0x0800b704
 8009ba8:	0800b69b 	.word	0x0800b69b
 8009bac:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8009bb0:	6018      	str	r0, [r3, #0]
 8009bb2:	9b03      	ldr	r3, [sp, #12]
 8009bb4:	2b0e      	cmp	r3, #14
 8009bb6:	f200 80a1 	bhi.w	8009cfc <_dtoa_r+0x444>
 8009bba:	2c00      	cmp	r4, #0
 8009bbc:	f000 809e 	beq.w	8009cfc <_dtoa_r+0x444>
 8009bc0:	2f00      	cmp	r7, #0
 8009bc2:	dd33      	ble.n	8009c2c <_dtoa_r+0x374>
 8009bc4:	4b9c      	ldr	r3, [pc, #624]	@ (8009e38 <_dtoa_r+0x580>)
 8009bc6:	f007 020f 	and.w	r2, r7, #15
 8009bca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009bce:	ed93 7b00 	vldr	d7, [r3]
 8009bd2:	05f8      	lsls	r0, r7, #23
 8009bd4:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8009bd8:	ea4f 1427 	mov.w	r4, r7, asr #4
 8009bdc:	d516      	bpl.n	8009c0c <_dtoa_r+0x354>
 8009bde:	4b97      	ldr	r3, [pc, #604]	@ (8009e3c <_dtoa_r+0x584>)
 8009be0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8009be4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009be8:	f7f6 fe50 	bl	800088c <__aeabi_ddiv>
 8009bec:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009bf0:	f004 040f 	and.w	r4, r4, #15
 8009bf4:	2603      	movs	r6, #3
 8009bf6:	4d91      	ldr	r5, [pc, #580]	@ (8009e3c <_dtoa_r+0x584>)
 8009bf8:	b954      	cbnz	r4, 8009c10 <_dtoa_r+0x358>
 8009bfa:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8009bfe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009c02:	f7f6 fe43 	bl	800088c <__aeabi_ddiv>
 8009c06:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009c0a:	e028      	b.n	8009c5e <_dtoa_r+0x3a6>
 8009c0c:	2602      	movs	r6, #2
 8009c0e:	e7f2      	b.n	8009bf6 <_dtoa_r+0x33e>
 8009c10:	07e1      	lsls	r1, r4, #31
 8009c12:	d508      	bpl.n	8009c26 <_dtoa_r+0x36e>
 8009c14:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8009c18:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009c1c:	f7f6 fd0c 	bl	8000638 <__aeabi_dmul>
 8009c20:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8009c24:	3601      	adds	r6, #1
 8009c26:	1064      	asrs	r4, r4, #1
 8009c28:	3508      	adds	r5, #8
 8009c2a:	e7e5      	b.n	8009bf8 <_dtoa_r+0x340>
 8009c2c:	f000 80af 	beq.w	8009d8e <_dtoa_r+0x4d6>
 8009c30:	427c      	negs	r4, r7
 8009c32:	4b81      	ldr	r3, [pc, #516]	@ (8009e38 <_dtoa_r+0x580>)
 8009c34:	4d81      	ldr	r5, [pc, #516]	@ (8009e3c <_dtoa_r+0x584>)
 8009c36:	f004 020f 	and.w	r2, r4, #15
 8009c3a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009c3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c42:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8009c46:	f7f6 fcf7 	bl	8000638 <__aeabi_dmul>
 8009c4a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009c4e:	1124      	asrs	r4, r4, #4
 8009c50:	2300      	movs	r3, #0
 8009c52:	2602      	movs	r6, #2
 8009c54:	2c00      	cmp	r4, #0
 8009c56:	f040 808f 	bne.w	8009d78 <_dtoa_r+0x4c0>
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d1d3      	bne.n	8009c06 <_dtoa_r+0x34e>
 8009c5e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009c60:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	f000 8094 	beq.w	8009d92 <_dtoa_r+0x4da>
 8009c6a:	4b75      	ldr	r3, [pc, #468]	@ (8009e40 <_dtoa_r+0x588>)
 8009c6c:	2200      	movs	r2, #0
 8009c6e:	4620      	mov	r0, r4
 8009c70:	4629      	mov	r1, r5
 8009c72:	f7f6 ff53 	bl	8000b1c <__aeabi_dcmplt>
 8009c76:	2800      	cmp	r0, #0
 8009c78:	f000 808b 	beq.w	8009d92 <_dtoa_r+0x4da>
 8009c7c:	9b03      	ldr	r3, [sp, #12]
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	f000 8087 	beq.w	8009d92 <_dtoa_r+0x4da>
 8009c84:	f1bb 0f00 	cmp.w	fp, #0
 8009c88:	dd34      	ble.n	8009cf4 <_dtoa_r+0x43c>
 8009c8a:	4620      	mov	r0, r4
 8009c8c:	4b6d      	ldr	r3, [pc, #436]	@ (8009e44 <_dtoa_r+0x58c>)
 8009c8e:	2200      	movs	r2, #0
 8009c90:	4629      	mov	r1, r5
 8009c92:	f7f6 fcd1 	bl	8000638 <__aeabi_dmul>
 8009c96:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009c9a:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 8009c9e:	3601      	adds	r6, #1
 8009ca0:	465c      	mov	r4, fp
 8009ca2:	4630      	mov	r0, r6
 8009ca4:	f7f6 fc5e 	bl	8000564 <__aeabi_i2d>
 8009ca8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009cac:	f7f6 fcc4 	bl	8000638 <__aeabi_dmul>
 8009cb0:	4b65      	ldr	r3, [pc, #404]	@ (8009e48 <_dtoa_r+0x590>)
 8009cb2:	2200      	movs	r2, #0
 8009cb4:	f7f6 fb0a 	bl	80002cc <__adddf3>
 8009cb8:	4605      	mov	r5, r0
 8009cba:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8009cbe:	2c00      	cmp	r4, #0
 8009cc0:	d16a      	bne.n	8009d98 <_dtoa_r+0x4e0>
 8009cc2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009cc6:	4b61      	ldr	r3, [pc, #388]	@ (8009e4c <_dtoa_r+0x594>)
 8009cc8:	2200      	movs	r2, #0
 8009cca:	f7f6 fafd 	bl	80002c8 <__aeabi_dsub>
 8009cce:	4602      	mov	r2, r0
 8009cd0:	460b      	mov	r3, r1
 8009cd2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009cd6:	462a      	mov	r2, r5
 8009cd8:	4633      	mov	r3, r6
 8009cda:	f7f6 ff3d 	bl	8000b58 <__aeabi_dcmpgt>
 8009cde:	2800      	cmp	r0, #0
 8009ce0:	f040 8298 	bne.w	800a214 <_dtoa_r+0x95c>
 8009ce4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009ce8:	462a      	mov	r2, r5
 8009cea:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8009cee:	f7f6 ff15 	bl	8000b1c <__aeabi_dcmplt>
 8009cf2:	bb38      	cbnz	r0, 8009d44 <_dtoa_r+0x48c>
 8009cf4:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8009cf8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8009cfc:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	f2c0 8157 	blt.w	8009fb2 <_dtoa_r+0x6fa>
 8009d04:	2f0e      	cmp	r7, #14
 8009d06:	f300 8154 	bgt.w	8009fb2 <_dtoa_r+0x6fa>
 8009d0a:	4b4b      	ldr	r3, [pc, #300]	@ (8009e38 <_dtoa_r+0x580>)
 8009d0c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009d10:	ed93 7b00 	vldr	d7, [r3]
 8009d14:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	ed8d 7b00 	vstr	d7, [sp]
 8009d1c:	f280 80e5 	bge.w	8009eea <_dtoa_r+0x632>
 8009d20:	9b03      	ldr	r3, [sp, #12]
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	f300 80e1 	bgt.w	8009eea <_dtoa_r+0x632>
 8009d28:	d10c      	bne.n	8009d44 <_dtoa_r+0x48c>
 8009d2a:	4b48      	ldr	r3, [pc, #288]	@ (8009e4c <_dtoa_r+0x594>)
 8009d2c:	2200      	movs	r2, #0
 8009d2e:	ec51 0b17 	vmov	r0, r1, d7
 8009d32:	f7f6 fc81 	bl	8000638 <__aeabi_dmul>
 8009d36:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009d3a:	f7f6 ff03 	bl	8000b44 <__aeabi_dcmpge>
 8009d3e:	2800      	cmp	r0, #0
 8009d40:	f000 8266 	beq.w	800a210 <_dtoa_r+0x958>
 8009d44:	2400      	movs	r4, #0
 8009d46:	4625      	mov	r5, r4
 8009d48:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009d4a:	4656      	mov	r6, sl
 8009d4c:	ea6f 0803 	mvn.w	r8, r3
 8009d50:	2700      	movs	r7, #0
 8009d52:	4621      	mov	r1, r4
 8009d54:	4648      	mov	r0, r9
 8009d56:	f000 fcbf 	bl	800a6d8 <_Bfree>
 8009d5a:	2d00      	cmp	r5, #0
 8009d5c:	f000 80bd 	beq.w	8009eda <_dtoa_r+0x622>
 8009d60:	b12f      	cbz	r7, 8009d6e <_dtoa_r+0x4b6>
 8009d62:	42af      	cmp	r7, r5
 8009d64:	d003      	beq.n	8009d6e <_dtoa_r+0x4b6>
 8009d66:	4639      	mov	r1, r7
 8009d68:	4648      	mov	r0, r9
 8009d6a:	f000 fcb5 	bl	800a6d8 <_Bfree>
 8009d6e:	4629      	mov	r1, r5
 8009d70:	4648      	mov	r0, r9
 8009d72:	f000 fcb1 	bl	800a6d8 <_Bfree>
 8009d76:	e0b0      	b.n	8009eda <_dtoa_r+0x622>
 8009d78:	07e2      	lsls	r2, r4, #31
 8009d7a:	d505      	bpl.n	8009d88 <_dtoa_r+0x4d0>
 8009d7c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009d80:	f7f6 fc5a 	bl	8000638 <__aeabi_dmul>
 8009d84:	3601      	adds	r6, #1
 8009d86:	2301      	movs	r3, #1
 8009d88:	1064      	asrs	r4, r4, #1
 8009d8a:	3508      	adds	r5, #8
 8009d8c:	e762      	b.n	8009c54 <_dtoa_r+0x39c>
 8009d8e:	2602      	movs	r6, #2
 8009d90:	e765      	b.n	8009c5e <_dtoa_r+0x3a6>
 8009d92:	9c03      	ldr	r4, [sp, #12]
 8009d94:	46b8      	mov	r8, r7
 8009d96:	e784      	b.n	8009ca2 <_dtoa_r+0x3ea>
 8009d98:	4b27      	ldr	r3, [pc, #156]	@ (8009e38 <_dtoa_r+0x580>)
 8009d9a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009d9c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009da0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009da4:	4454      	add	r4, sl
 8009da6:	2900      	cmp	r1, #0
 8009da8:	d054      	beq.n	8009e54 <_dtoa_r+0x59c>
 8009daa:	4929      	ldr	r1, [pc, #164]	@ (8009e50 <_dtoa_r+0x598>)
 8009dac:	2000      	movs	r0, #0
 8009dae:	f7f6 fd6d 	bl	800088c <__aeabi_ddiv>
 8009db2:	4633      	mov	r3, r6
 8009db4:	462a      	mov	r2, r5
 8009db6:	f7f6 fa87 	bl	80002c8 <__aeabi_dsub>
 8009dba:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8009dbe:	4656      	mov	r6, sl
 8009dc0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009dc4:	f7f6 fee8 	bl	8000b98 <__aeabi_d2iz>
 8009dc8:	4605      	mov	r5, r0
 8009dca:	f7f6 fbcb 	bl	8000564 <__aeabi_i2d>
 8009dce:	4602      	mov	r2, r0
 8009dd0:	460b      	mov	r3, r1
 8009dd2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009dd6:	f7f6 fa77 	bl	80002c8 <__aeabi_dsub>
 8009dda:	3530      	adds	r5, #48	@ 0x30
 8009ddc:	4602      	mov	r2, r0
 8009dde:	460b      	mov	r3, r1
 8009de0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009de4:	f806 5b01 	strb.w	r5, [r6], #1
 8009de8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8009dec:	f7f6 fe96 	bl	8000b1c <__aeabi_dcmplt>
 8009df0:	2800      	cmp	r0, #0
 8009df2:	d172      	bne.n	8009eda <_dtoa_r+0x622>
 8009df4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009df8:	4911      	ldr	r1, [pc, #68]	@ (8009e40 <_dtoa_r+0x588>)
 8009dfa:	2000      	movs	r0, #0
 8009dfc:	f7f6 fa64 	bl	80002c8 <__aeabi_dsub>
 8009e00:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8009e04:	f7f6 fe8a 	bl	8000b1c <__aeabi_dcmplt>
 8009e08:	2800      	cmp	r0, #0
 8009e0a:	f040 80b4 	bne.w	8009f76 <_dtoa_r+0x6be>
 8009e0e:	42a6      	cmp	r6, r4
 8009e10:	f43f af70 	beq.w	8009cf4 <_dtoa_r+0x43c>
 8009e14:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8009e18:	4b0a      	ldr	r3, [pc, #40]	@ (8009e44 <_dtoa_r+0x58c>)
 8009e1a:	2200      	movs	r2, #0
 8009e1c:	f7f6 fc0c 	bl	8000638 <__aeabi_dmul>
 8009e20:	4b08      	ldr	r3, [pc, #32]	@ (8009e44 <_dtoa_r+0x58c>)
 8009e22:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8009e26:	2200      	movs	r2, #0
 8009e28:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009e2c:	f7f6 fc04 	bl	8000638 <__aeabi_dmul>
 8009e30:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009e34:	e7c4      	b.n	8009dc0 <_dtoa_r+0x508>
 8009e36:	bf00      	nop
 8009e38:	0800b820 	.word	0x0800b820
 8009e3c:	0800b7f8 	.word	0x0800b7f8
 8009e40:	3ff00000 	.word	0x3ff00000
 8009e44:	40240000 	.word	0x40240000
 8009e48:	401c0000 	.word	0x401c0000
 8009e4c:	40140000 	.word	0x40140000
 8009e50:	3fe00000 	.word	0x3fe00000
 8009e54:	4631      	mov	r1, r6
 8009e56:	4628      	mov	r0, r5
 8009e58:	f7f6 fbee 	bl	8000638 <__aeabi_dmul>
 8009e5c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8009e60:	9413      	str	r4, [sp, #76]	@ 0x4c
 8009e62:	4656      	mov	r6, sl
 8009e64:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009e68:	f7f6 fe96 	bl	8000b98 <__aeabi_d2iz>
 8009e6c:	4605      	mov	r5, r0
 8009e6e:	f7f6 fb79 	bl	8000564 <__aeabi_i2d>
 8009e72:	4602      	mov	r2, r0
 8009e74:	460b      	mov	r3, r1
 8009e76:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009e7a:	f7f6 fa25 	bl	80002c8 <__aeabi_dsub>
 8009e7e:	3530      	adds	r5, #48	@ 0x30
 8009e80:	f806 5b01 	strb.w	r5, [r6], #1
 8009e84:	4602      	mov	r2, r0
 8009e86:	460b      	mov	r3, r1
 8009e88:	42a6      	cmp	r6, r4
 8009e8a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009e8e:	f04f 0200 	mov.w	r2, #0
 8009e92:	d124      	bne.n	8009ede <_dtoa_r+0x626>
 8009e94:	4baf      	ldr	r3, [pc, #700]	@ (800a154 <_dtoa_r+0x89c>)
 8009e96:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8009e9a:	f7f6 fa17 	bl	80002cc <__adddf3>
 8009e9e:	4602      	mov	r2, r0
 8009ea0:	460b      	mov	r3, r1
 8009ea2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009ea6:	f7f6 fe57 	bl	8000b58 <__aeabi_dcmpgt>
 8009eaa:	2800      	cmp	r0, #0
 8009eac:	d163      	bne.n	8009f76 <_dtoa_r+0x6be>
 8009eae:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8009eb2:	49a8      	ldr	r1, [pc, #672]	@ (800a154 <_dtoa_r+0x89c>)
 8009eb4:	2000      	movs	r0, #0
 8009eb6:	f7f6 fa07 	bl	80002c8 <__aeabi_dsub>
 8009eba:	4602      	mov	r2, r0
 8009ebc:	460b      	mov	r3, r1
 8009ebe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009ec2:	f7f6 fe2b 	bl	8000b1c <__aeabi_dcmplt>
 8009ec6:	2800      	cmp	r0, #0
 8009ec8:	f43f af14 	beq.w	8009cf4 <_dtoa_r+0x43c>
 8009ecc:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8009ece:	1e73      	subs	r3, r6, #1
 8009ed0:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009ed2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009ed6:	2b30      	cmp	r3, #48	@ 0x30
 8009ed8:	d0f8      	beq.n	8009ecc <_dtoa_r+0x614>
 8009eda:	4647      	mov	r7, r8
 8009edc:	e03b      	b.n	8009f56 <_dtoa_r+0x69e>
 8009ede:	4b9e      	ldr	r3, [pc, #632]	@ (800a158 <_dtoa_r+0x8a0>)
 8009ee0:	f7f6 fbaa 	bl	8000638 <__aeabi_dmul>
 8009ee4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009ee8:	e7bc      	b.n	8009e64 <_dtoa_r+0x5ac>
 8009eea:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8009eee:	4656      	mov	r6, sl
 8009ef0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009ef4:	4620      	mov	r0, r4
 8009ef6:	4629      	mov	r1, r5
 8009ef8:	f7f6 fcc8 	bl	800088c <__aeabi_ddiv>
 8009efc:	f7f6 fe4c 	bl	8000b98 <__aeabi_d2iz>
 8009f00:	4680      	mov	r8, r0
 8009f02:	f7f6 fb2f 	bl	8000564 <__aeabi_i2d>
 8009f06:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009f0a:	f7f6 fb95 	bl	8000638 <__aeabi_dmul>
 8009f0e:	4602      	mov	r2, r0
 8009f10:	460b      	mov	r3, r1
 8009f12:	4620      	mov	r0, r4
 8009f14:	4629      	mov	r1, r5
 8009f16:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8009f1a:	f7f6 f9d5 	bl	80002c8 <__aeabi_dsub>
 8009f1e:	f806 4b01 	strb.w	r4, [r6], #1
 8009f22:	9d03      	ldr	r5, [sp, #12]
 8009f24:	eba6 040a 	sub.w	r4, r6, sl
 8009f28:	42a5      	cmp	r5, r4
 8009f2a:	4602      	mov	r2, r0
 8009f2c:	460b      	mov	r3, r1
 8009f2e:	d133      	bne.n	8009f98 <_dtoa_r+0x6e0>
 8009f30:	f7f6 f9cc 	bl	80002cc <__adddf3>
 8009f34:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009f38:	4604      	mov	r4, r0
 8009f3a:	460d      	mov	r5, r1
 8009f3c:	f7f6 fe0c 	bl	8000b58 <__aeabi_dcmpgt>
 8009f40:	b9c0      	cbnz	r0, 8009f74 <_dtoa_r+0x6bc>
 8009f42:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009f46:	4620      	mov	r0, r4
 8009f48:	4629      	mov	r1, r5
 8009f4a:	f7f6 fddd 	bl	8000b08 <__aeabi_dcmpeq>
 8009f4e:	b110      	cbz	r0, 8009f56 <_dtoa_r+0x69e>
 8009f50:	f018 0f01 	tst.w	r8, #1
 8009f54:	d10e      	bne.n	8009f74 <_dtoa_r+0x6bc>
 8009f56:	9902      	ldr	r1, [sp, #8]
 8009f58:	4648      	mov	r0, r9
 8009f5a:	f000 fbbd 	bl	800a6d8 <_Bfree>
 8009f5e:	2300      	movs	r3, #0
 8009f60:	7033      	strb	r3, [r6, #0]
 8009f62:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009f64:	3701      	adds	r7, #1
 8009f66:	601f      	str	r7, [r3, #0]
 8009f68:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	f000 824b 	beq.w	800a406 <_dtoa_r+0xb4e>
 8009f70:	601e      	str	r6, [r3, #0]
 8009f72:	e248      	b.n	800a406 <_dtoa_r+0xb4e>
 8009f74:	46b8      	mov	r8, r7
 8009f76:	4633      	mov	r3, r6
 8009f78:	461e      	mov	r6, r3
 8009f7a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009f7e:	2a39      	cmp	r2, #57	@ 0x39
 8009f80:	d106      	bne.n	8009f90 <_dtoa_r+0x6d8>
 8009f82:	459a      	cmp	sl, r3
 8009f84:	d1f8      	bne.n	8009f78 <_dtoa_r+0x6c0>
 8009f86:	2230      	movs	r2, #48	@ 0x30
 8009f88:	f108 0801 	add.w	r8, r8, #1
 8009f8c:	f88a 2000 	strb.w	r2, [sl]
 8009f90:	781a      	ldrb	r2, [r3, #0]
 8009f92:	3201      	adds	r2, #1
 8009f94:	701a      	strb	r2, [r3, #0]
 8009f96:	e7a0      	b.n	8009eda <_dtoa_r+0x622>
 8009f98:	4b6f      	ldr	r3, [pc, #444]	@ (800a158 <_dtoa_r+0x8a0>)
 8009f9a:	2200      	movs	r2, #0
 8009f9c:	f7f6 fb4c 	bl	8000638 <__aeabi_dmul>
 8009fa0:	2200      	movs	r2, #0
 8009fa2:	2300      	movs	r3, #0
 8009fa4:	4604      	mov	r4, r0
 8009fa6:	460d      	mov	r5, r1
 8009fa8:	f7f6 fdae 	bl	8000b08 <__aeabi_dcmpeq>
 8009fac:	2800      	cmp	r0, #0
 8009fae:	d09f      	beq.n	8009ef0 <_dtoa_r+0x638>
 8009fb0:	e7d1      	b.n	8009f56 <_dtoa_r+0x69e>
 8009fb2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009fb4:	2a00      	cmp	r2, #0
 8009fb6:	f000 80ea 	beq.w	800a18e <_dtoa_r+0x8d6>
 8009fba:	9a07      	ldr	r2, [sp, #28]
 8009fbc:	2a01      	cmp	r2, #1
 8009fbe:	f300 80cd 	bgt.w	800a15c <_dtoa_r+0x8a4>
 8009fc2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8009fc4:	2a00      	cmp	r2, #0
 8009fc6:	f000 80c1 	beq.w	800a14c <_dtoa_r+0x894>
 8009fca:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8009fce:	9c08      	ldr	r4, [sp, #32]
 8009fd0:	9e00      	ldr	r6, [sp, #0]
 8009fd2:	9a00      	ldr	r2, [sp, #0]
 8009fd4:	441a      	add	r2, r3
 8009fd6:	9200      	str	r2, [sp, #0]
 8009fd8:	9a06      	ldr	r2, [sp, #24]
 8009fda:	2101      	movs	r1, #1
 8009fdc:	441a      	add	r2, r3
 8009fde:	4648      	mov	r0, r9
 8009fe0:	9206      	str	r2, [sp, #24]
 8009fe2:	f000 fc2d 	bl	800a840 <__i2b>
 8009fe6:	4605      	mov	r5, r0
 8009fe8:	b166      	cbz	r6, 800a004 <_dtoa_r+0x74c>
 8009fea:	9b06      	ldr	r3, [sp, #24]
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	dd09      	ble.n	800a004 <_dtoa_r+0x74c>
 8009ff0:	42b3      	cmp	r3, r6
 8009ff2:	9a00      	ldr	r2, [sp, #0]
 8009ff4:	bfa8      	it	ge
 8009ff6:	4633      	movge	r3, r6
 8009ff8:	1ad2      	subs	r2, r2, r3
 8009ffa:	9200      	str	r2, [sp, #0]
 8009ffc:	9a06      	ldr	r2, [sp, #24]
 8009ffe:	1af6      	subs	r6, r6, r3
 800a000:	1ad3      	subs	r3, r2, r3
 800a002:	9306      	str	r3, [sp, #24]
 800a004:	9b08      	ldr	r3, [sp, #32]
 800a006:	b30b      	cbz	r3, 800a04c <_dtoa_r+0x794>
 800a008:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	f000 80c6 	beq.w	800a19c <_dtoa_r+0x8e4>
 800a010:	2c00      	cmp	r4, #0
 800a012:	f000 80c0 	beq.w	800a196 <_dtoa_r+0x8de>
 800a016:	4629      	mov	r1, r5
 800a018:	4622      	mov	r2, r4
 800a01a:	4648      	mov	r0, r9
 800a01c:	f000 fcc8 	bl	800a9b0 <__pow5mult>
 800a020:	9a02      	ldr	r2, [sp, #8]
 800a022:	4601      	mov	r1, r0
 800a024:	4605      	mov	r5, r0
 800a026:	4648      	mov	r0, r9
 800a028:	f000 fc20 	bl	800a86c <__multiply>
 800a02c:	9902      	ldr	r1, [sp, #8]
 800a02e:	4680      	mov	r8, r0
 800a030:	4648      	mov	r0, r9
 800a032:	f000 fb51 	bl	800a6d8 <_Bfree>
 800a036:	9b08      	ldr	r3, [sp, #32]
 800a038:	1b1b      	subs	r3, r3, r4
 800a03a:	9308      	str	r3, [sp, #32]
 800a03c:	f000 80b1 	beq.w	800a1a2 <_dtoa_r+0x8ea>
 800a040:	9a08      	ldr	r2, [sp, #32]
 800a042:	4641      	mov	r1, r8
 800a044:	4648      	mov	r0, r9
 800a046:	f000 fcb3 	bl	800a9b0 <__pow5mult>
 800a04a:	9002      	str	r0, [sp, #8]
 800a04c:	2101      	movs	r1, #1
 800a04e:	4648      	mov	r0, r9
 800a050:	f000 fbf6 	bl	800a840 <__i2b>
 800a054:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a056:	4604      	mov	r4, r0
 800a058:	2b00      	cmp	r3, #0
 800a05a:	f000 81d8 	beq.w	800a40e <_dtoa_r+0xb56>
 800a05e:	461a      	mov	r2, r3
 800a060:	4601      	mov	r1, r0
 800a062:	4648      	mov	r0, r9
 800a064:	f000 fca4 	bl	800a9b0 <__pow5mult>
 800a068:	9b07      	ldr	r3, [sp, #28]
 800a06a:	2b01      	cmp	r3, #1
 800a06c:	4604      	mov	r4, r0
 800a06e:	f300 809f 	bgt.w	800a1b0 <_dtoa_r+0x8f8>
 800a072:	9b04      	ldr	r3, [sp, #16]
 800a074:	2b00      	cmp	r3, #0
 800a076:	f040 8097 	bne.w	800a1a8 <_dtoa_r+0x8f0>
 800a07a:	9b05      	ldr	r3, [sp, #20]
 800a07c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a080:	2b00      	cmp	r3, #0
 800a082:	f040 8093 	bne.w	800a1ac <_dtoa_r+0x8f4>
 800a086:	9b05      	ldr	r3, [sp, #20]
 800a088:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a08c:	0d1b      	lsrs	r3, r3, #20
 800a08e:	051b      	lsls	r3, r3, #20
 800a090:	b133      	cbz	r3, 800a0a0 <_dtoa_r+0x7e8>
 800a092:	9b00      	ldr	r3, [sp, #0]
 800a094:	3301      	adds	r3, #1
 800a096:	9300      	str	r3, [sp, #0]
 800a098:	9b06      	ldr	r3, [sp, #24]
 800a09a:	3301      	adds	r3, #1
 800a09c:	9306      	str	r3, [sp, #24]
 800a09e:	2301      	movs	r3, #1
 800a0a0:	9308      	str	r3, [sp, #32]
 800a0a2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	f000 81b8 	beq.w	800a41a <_dtoa_r+0xb62>
 800a0aa:	6923      	ldr	r3, [r4, #16]
 800a0ac:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a0b0:	6918      	ldr	r0, [r3, #16]
 800a0b2:	f000 fb79 	bl	800a7a8 <__hi0bits>
 800a0b6:	f1c0 0020 	rsb	r0, r0, #32
 800a0ba:	9b06      	ldr	r3, [sp, #24]
 800a0bc:	4418      	add	r0, r3
 800a0be:	f010 001f 	ands.w	r0, r0, #31
 800a0c2:	f000 8082 	beq.w	800a1ca <_dtoa_r+0x912>
 800a0c6:	f1c0 0320 	rsb	r3, r0, #32
 800a0ca:	2b04      	cmp	r3, #4
 800a0cc:	dd73      	ble.n	800a1b6 <_dtoa_r+0x8fe>
 800a0ce:	9b00      	ldr	r3, [sp, #0]
 800a0d0:	f1c0 001c 	rsb	r0, r0, #28
 800a0d4:	4403      	add	r3, r0
 800a0d6:	9300      	str	r3, [sp, #0]
 800a0d8:	9b06      	ldr	r3, [sp, #24]
 800a0da:	4403      	add	r3, r0
 800a0dc:	4406      	add	r6, r0
 800a0de:	9306      	str	r3, [sp, #24]
 800a0e0:	9b00      	ldr	r3, [sp, #0]
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	dd05      	ble.n	800a0f2 <_dtoa_r+0x83a>
 800a0e6:	9902      	ldr	r1, [sp, #8]
 800a0e8:	461a      	mov	r2, r3
 800a0ea:	4648      	mov	r0, r9
 800a0ec:	f000 fcba 	bl	800aa64 <__lshift>
 800a0f0:	9002      	str	r0, [sp, #8]
 800a0f2:	9b06      	ldr	r3, [sp, #24]
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	dd05      	ble.n	800a104 <_dtoa_r+0x84c>
 800a0f8:	4621      	mov	r1, r4
 800a0fa:	461a      	mov	r2, r3
 800a0fc:	4648      	mov	r0, r9
 800a0fe:	f000 fcb1 	bl	800aa64 <__lshift>
 800a102:	4604      	mov	r4, r0
 800a104:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a106:	2b00      	cmp	r3, #0
 800a108:	d061      	beq.n	800a1ce <_dtoa_r+0x916>
 800a10a:	9802      	ldr	r0, [sp, #8]
 800a10c:	4621      	mov	r1, r4
 800a10e:	f000 fd15 	bl	800ab3c <__mcmp>
 800a112:	2800      	cmp	r0, #0
 800a114:	da5b      	bge.n	800a1ce <_dtoa_r+0x916>
 800a116:	2300      	movs	r3, #0
 800a118:	9902      	ldr	r1, [sp, #8]
 800a11a:	220a      	movs	r2, #10
 800a11c:	4648      	mov	r0, r9
 800a11e:	f000 fafd 	bl	800a71c <__multadd>
 800a122:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a124:	9002      	str	r0, [sp, #8]
 800a126:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	f000 8177 	beq.w	800a41e <_dtoa_r+0xb66>
 800a130:	4629      	mov	r1, r5
 800a132:	2300      	movs	r3, #0
 800a134:	220a      	movs	r2, #10
 800a136:	4648      	mov	r0, r9
 800a138:	f000 faf0 	bl	800a71c <__multadd>
 800a13c:	f1bb 0f00 	cmp.w	fp, #0
 800a140:	4605      	mov	r5, r0
 800a142:	dc6f      	bgt.n	800a224 <_dtoa_r+0x96c>
 800a144:	9b07      	ldr	r3, [sp, #28]
 800a146:	2b02      	cmp	r3, #2
 800a148:	dc49      	bgt.n	800a1de <_dtoa_r+0x926>
 800a14a:	e06b      	b.n	800a224 <_dtoa_r+0x96c>
 800a14c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800a14e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800a152:	e73c      	b.n	8009fce <_dtoa_r+0x716>
 800a154:	3fe00000 	.word	0x3fe00000
 800a158:	40240000 	.word	0x40240000
 800a15c:	9b03      	ldr	r3, [sp, #12]
 800a15e:	1e5c      	subs	r4, r3, #1
 800a160:	9b08      	ldr	r3, [sp, #32]
 800a162:	42a3      	cmp	r3, r4
 800a164:	db09      	blt.n	800a17a <_dtoa_r+0x8c2>
 800a166:	1b1c      	subs	r4, r3, r4
 800a168:	9b03      	ldr	r3, [sp, #12]
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	f6bf af30 	bge.w	8009fd0 <_dtoa_r+0x718>
 800a170:	9b00      	ldr	r3, [sp, #0]
 800a172:	9a03      	ldr	r2, [sp, #12]
 800a174:	1a9e      	subs	r6, r3, r2
 800a176:	2300      	movs	r3, #0
 800a178:	e72b      	b.n	8009fd2 <_dtoa_r+0x71a>
 800a17a:	9b08      	ldr	r3, [sp, #32]
 800a17c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a17e:	9408      	str	r4, [sp, #32]
 800a180:	1ae3      	subs	r3, r4, r3
 800a182:	441a      	add	r2, r3
 800a184:	9e00      	ldr	r6, [sp, #0]
 800a186:	9b03      	ldr	r3, [sp, #12]
 800a188:	920d      	str	r2, [sp, #52]	@ 0x34
 800a18a:	2400      	movs	r4, #0
 800a18c:	e721      	b.n	8009fd2 <_dtoa_r+0x71a>
 800a18e:	9c08      	ldr	r4, [sp, #32]
 800a190:	9e00      	ldr	r6, [sp, #0]
 800a192:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800a194:	e728      	b.n	8009fe8 <_dtoa_r+0x730>
 800a196:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800a19a:	e751      	b.n	800a040 <_dtoa_r+0x788>
 800a19c:	9a08      	ldr	r2, [sp, #32]
 800a19e:	9902      	ldr	r1, [sp, #8]
 800a1a0:	e750      	b.n	800a044 <_dtoa_r+0x78c>
 800a1a2:	f8cd 8008 	str.w	r8, [sp, #8]
 800a1a6:	e751      	b.n	800a04c <_dtoa_r+0x794>
 800a1a8:	2300      	movs	r3, #0
 800a1aa:	e779      	b.n	800a0a0 <_dtoa_r+0x7e8>
 800a1ac:	9b04      	ldr	r3, [sp, #16]
 800a1ae:	e777      	b.n	800a0a0 <_dtoa_r+0x7e8>
 800a1b0:	2300      	movs	r3, #0
 800a1b2:	9308      	str	r3, [sp, #32]
 800a1b4:	e779      	b.n	800a0aa <_dtoa_r+0x7f2>
 800a1b6:	d093      	beq.n	800a0e0 <_dtoa_r+0x828>
 800a1b8:	9a00      	ldr	r2, [sp, #0]
 800a1ba:	331c      	adds	r3, #28
 800a1bc:	441a      	add	r2, r3
 800a1be:	9200      	str	r2, [sp, #0]
 800a1c0:	9a06      	ldr	r2, [sp, #24]
 800a1c2:	441a      	add	r2, r3
 800a1c4:	441e      	add	r6, r3
 800a1c6:	9206      	str	r2, [sp, #24]
 800a1c8:	e78a      	b.n	800a0e0 <_dtoa_r+0x828>
 800a1ca:	4603      	mov	r3, r0
 800a1cc:	e7f4      	b.n	800a1b8 <_dtoa_r+0x900>
 800a1ce:	9b03      	ldr	r3, [sp, #12]
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	46b8      	mov	r8, r7
 800a1d4:	dc20      	bgt.n	800a218 <_dtoa_r+0x960>
 800a1d6:	469b      	mov	fp, r3
 800a1d8:	9b07      	ldr	r3, [sp, #28]
 800a1da:	2b02      	cmp	r3, #2
 800a1dc:	dd1e      	ble.n	800a21c <_dtoa_r+0x964>
 800a1de:	f1bb 0f00 	cmp.w	fp, #0
 800a1e2:	f47f adb1 	bne.w	8009d48 <_dtoa_r+0x490>
 800a1e6:	4621      	mov	r1, r4
 800a1e8:	465b      	mov	r3, fp
 800a1ea:	2205      	movs	r2, #5
 800a1ec:	4648      	mov	r0, r9
 800a1ee:	f000 fa95 	bl	800a71c <__multadd>
 800a1f2:	4601      	mov	r1, r0
 800a1f4:	4604      	mov	r4, r0
 800a1f6:	9802      	ldr	r0, [sp, #8]
 800a1f8:	f000 fca0 	bl	800ab3c <__mcmp>
 800a1fc:	2800      	cmp	r0, #0
 800a1fe:	f77f ada3 	ble.w	8009d48 <_dtoa_r+0x490>
 800a202:	4656      	mov	r6, sl
 800a204:	2331      	movs	r3, #49	@ 0x31
 800a206:	f806 3b01 	strb.w	r3, [r6], #1
 800a20a:	f108 0801 	add.w	r8, r8, #1
 800a20e:	e59f      	b.n	8009d50 <_dtoa_r+0x498>
 800a210:	9c03      	ldr	r4, [sp, #12]
 800a212:	46b8      	mov	r8, r7
 800a214:	4625      	mov	r5, r4
 800a216:	e7f4      	b.n	800a202 <_dtoa_r+0x94a>
 800a218:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800a21c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a21e:	2b00      	cmp	r3, #0
 800a220:	f000 8101 	beq.w	800a426 <_dtoa_r+0xb6e>
 800a224:	2e00      	cmp	r6, #0
 800a226:	dd05      	ble.n	800a234 <_dtoa_r+0x97c>
 800a228:	4629      	mov	r1, r5
 800a22a:	4632      	mov	r2, r6
 800a22c:	4648      	mov	r0, r9
 800a22e:	f000 fc19 	bl	800aa64 <__lshift>
 800a232:	4605      	mov	r5, r0
 800a234:	9b08      	ldr	r3, [sp, #32]
 800a236:	2b00      	cmp	r3, #0
 800a238:	d05c      	beq.n	800a2f4 <_dtoa_r+0xa3c>
 800a23a:	6869      	ldr	r1, [r5, #4]
 800a23c:	4648      	mov	r0, r9
 800a23e:	f000 fa0b 	bl	800a658 <_Balloc>
 800a242:	4606      	mov	r6, r0
 800a244:	b928      	cbnz	r0, 800a252 <_dtoa_r+0x99a>
 800a246:	4b82      	ldr	r3, [pc, #520]	@ (800a450 <_dtoa_r+0xb98>)
 800a248:	4602      	mov	r2, r0
 800a24a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800a24e:	f7ff bb4a 	b.w	80098e6 <_dtoa_r+0x2e>
 800a252:	692a      	ldr	r2, [r5, #16]
 800a254:	3202      	adds	r2, #2
 800a256:	0092      	lsls	r2, r2, #2
 800a258:	f105 010c 	add.w	r1, r5, #12
 800a25c:	300c      	adds	r0, #12
 800a25e:	f7ff fa74 	bl	800974a <memcpy>
 800a262:	2201      	movs	r2, #1
 800a264:	4631      	mov	r1, r6
 800a266:	4648      	mov	r0, r9
 800a268:	f000 fbfc 	bl	800aa64 <__lshift>
 800a26c:	f10a 0301 	add.w	r3, sl, #1
 800a270:	9300      	str	r3, [sp, #0]
 800a272:	eb0a 030b 	add.w	r3, sl, fp
 800a276:	9308      	str	r3, [sp, #32]
 800a278:	9b04      	ldr	r3, [sp, #16]
 800a27a:	f003 0301 	and.w	r3, r3, #1
 800a27e:	462f      	mov	r7, r5
 800a280:	9306      	str	r3, [sp, #24]
 800a282:	4605      	mov	r5, r0
 800a284:	9b00      	ldr	r3, [sp, #0]
 800a286:	9802      	ldr	r0, [sp, #8]
 800a288:	4621      	mov	r1, r4
 800a28a:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 800a28e:	f7ff fa89 	bl	80097a4 <quorem>
 800a292:	4603      	mov	r3, r0
 800a294:	3330      	adds	r3, #48	@ 0x30
 800a296:	9003      	str	r0, [sp, #12]
 800a298:	4639      	mov	r1, r7
 800a29a:	9802      	ldr	r0, [sp, #8]
 800a29c:	9309      	str	r3, [sp, #36]	@ 0x24
 800a29e:	f000 fc4d 	bl	800ab3c <__mcmp>
 800a2a2:	462a      	mov	r2, r5
 800a2a4:	9004      	str	r0, [sp, #16]
 800a2a6:	4621      	mov	r1, r4
 800a2a8:	4648      	mov	r0, r9
 800a2aa:	f000 fc63 	bl	800ab74 <__mdiff>
 800a2ae:	68c2      	ldr	r2, [r0, #12]
 800a2b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a2b2:	4606      	mov	r6, r0
 800a2b4:	bb02      	cbnz	r2, 800a2f8 <_dtoa_r+0xa40>
 800a2b6:	4601      	mov	r1, r0
 800a2b8:	9802      	ldr	r0, [sp, #8]
 800a2ba:	f000 fc3f 	bl	800ab3c <__mcmp>
 800a2be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a2c0:	4602      	mov	r2, r0
 800a2c2:	4631      	mov	r1, r6
 800a2c4:	4648      	mov	r0, r9
 800a2c6:	920c      	str	r2, [sp, #48]	@ 0x30
 800a2c8:	9309      	str	r3, [sp, #36]	@ 0x24
 800a2ca:	f000 fa05 	bl	800a6d8 <_Bfree>
 800a2ce:	9b07      	ldr	r3, [sp, #28]
 800a2d0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800a2d2:	9e00      	ldr	r6, [sp, #0]
 800a2d4:	ea42 0103 	orr.w	r1, r2, r3
 800a2d8:	9b06      	ldr	r3, [sp, #24]
 800a2da:	4319      	orrs	r1, r3
 800a2dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a2de:	d10d      	bne.n	800a2fc <_dtoa_r+0xa44>
 800a2e0:	2b39      	cmp	r3, #57	@ 0x39
 800a2e2:	d027      	beq.n	800a334 <_dtoa_r+0xa7c>
 800a2e4:	9a04      	ldr	r2, [sp, #16]
 800a2e6:	2a00      	cmp	r2, #0
 800a2e8:	dd01      	ble.n	800a2ee <_dtoa_r+0xa36>
 800a2ea:	9b03      	ldr	r3, [sp, #12]
 800a2ec:	3331      	adds	r3, #49	@ 0x31
 800a2ee:	f88b 3000 	strb.w	r3, [fp]
 800a2f2:	e52e      	b.n	8009d52 <_dtoa_r+0x49a>
 800a2f4:	4628      	mov	r0, r5
 800a2f6:	e7b9      	b.n	800a26c <_dtoa_r+0x9b4>
 800a2f8:	2201      	movs	r2, #1
 800a2fa:	e7e2      	b.n	800a2c2 <_dtoa_r+0xa0a>
 800a2fc:	9904      	ldr	r1, [sp, #16]
 800a2fe:	2900      	cmp	r1, #0
 800a300:	db04      	blt.n	800a30c <_dtoa_r+0xa54>
 800a302:	9807      	ldr	r0, [sp, #28]
 800a304:	4301      	orrs	r1, r0
 800a306:	9806      	ldr	r0, [sp, #24]
 800a308:	4301      	orrs	r1, r0
 800a30a:	d120      	bne.n	800a34e <_dtoa_r+0xa96>
 800a30c:	2a00      	cmp	r2, #0
 800a30e:	ddee      	ble.n	800a2ee <_dtoa_r+0xa36>
 800a310:	9902      	ldr	r1, [sp, #8]
 800a312:	9300      	str	r3, [sp, #0]
 800a314:	2201      	movs	r2, #1
 800a316:	4648      	mov	r0, r9
 800a318:	f000 fba4 	bl	800aa64 <__lshift>
 800a31c:	4621      	mov	r1, r4
 800a31e:	9002      	str	r0, [sp, #8]
 800a320:	f000 fc0c 	bl	800ab3c <__mcmp>
 800a324:	2800      	cmp	r0, #0
 800a326:	9b00      	ldr	r3, [sp, #0]
 800a328:	dc02      	bgt.n	800a330 <_dtoa_r+0xa78>
 800a32a:	d1e0      	bne.n	800a2ee <_dtoa_r+0xa36>
 800a32c:	07da      	lsls	r2, r3, #31
 800a32e:	d5de      	bpl.n	800a2ee <_dtoa_r+0xa36>
 800a330:	2b39      	cmp	r3, #57	@ 0x39
 800a332:	d1da      	bne.n	800a2ea <_dtoa_r+0xa32>
 800a334:	2339      	movs	r3, #57	@ 0x39
 800a336:	f88b 3000 	strb.w	r3, [fp]
 800a33a:	4633      	mov	r3, r6
 800a33c:	461e      	mov	r6, r3
 800a33e:	3b01      	subs	r3, #1
 800a340:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800a344:	2a39      	cmp	r2, #57	@ 0x39
 800a346:	d04e      	beq.n	800a3e6 <_dtoa_r+0xb2e>
 800a348:	3201      	adds	r2, #1
 800a34a:	701a      	strb	r2, [r3, #0]
 800a34c:	e501      	b.n	8009d52 <_dtoa_r+0x49a>
 800a34e:	2a00      	cmp	r2, #0
 800a350:	dd03      	ble.n	800a35a <_dtoa_r+0xaa2>
 800a352:	2b39      	cmp	r3, #57	@ 0x39
 800a354:	d0ee      	beq.n	800a334 <_dtoa_r+0xa7c>
 800a356:	3301      	adds	r3, #1
 800a358:	e7c9      	b.n	800a2ee <_dtoa_r+0xa36>
 800a35a:	9a00      	ldr	r2, [sp, #0]
 800a35c:	9908      	ldr	r1, [sp, #32]
 800a35e:	f802 3c01 	strb.w	r3, [r2, #-1]
 800a362:	428a      	cmp	r2, r1
 800a364:	d028      	beq.n	800a3b8 <_dtoa_r+0xb00>
 800a366:	9902      	ldr	r1, [sp, #8]
 800a368:	2300      	movs	r3, #0
 800a36a:	220a      	movs	r2, #10
 800a36c:	4648      	mov	r0, r9
 800a36e:	f000 f9d5 	bl	800a71c <__multadd>
 800a372:	42af      	cmp	r7, r5
 800a374:	9002      	str	r0, [sp, #8]
 800a376:	f04f 0300 	mov.w	r3, #0
 800a37a:	f04f 020a 	mov.w	r2, #10
 800a37e:	4639      	mov	r1, r7
 800a380:	4648      	mov	r0, r9
 800a382:	d107      	bne.n	800a394 <_dtoa_r+0xadc>
 800a384:	f000 f9ca 	bl	800a71c <__multadd>
 800a388:	4607      	mov	r7, r0
 800a38a:	4605      	mov	r5, r0
 800a38c:	9b00      	ldr	r3, [sp, #0]
 800a38e:	3301      	adds	r3, #1
 800a390:	9300      	str	r3, [sp, #0]
 800a392:	e777      	b.n	800a284 <_dtoa_r+0x9cc>
 800a394:	f000 f9c2 	bl	800a71c <__multadd>
 800a398:	4629      	mov	r1, r5
 800a39a:	4607      	mov	r7, r0
 800a39c:	2300      	movs	r3, #0
 800a39e:	220a      	movs	r2, #10
 800a3a0:	4648      	mov	r0, r9
 800a3a2:	f000 f9bb 	bl	800a71c <__multadd>
 800a3a6:	4605      	mov	r5, r0
 800a3a8:	e7f0      	b.n	800a38c <_dtoa_r+0xad4>
 800a3aa:	f1bb 0f00 	cmp.w	fp, #0
 800a3ae:	bfcc      	ite	gt
 800a3b0:	465e      	movgt	r6, fp
 800a3b2:	2601      	movle	r6, #1
 800a3b4:	4456      	add	r6, sl
 800a3b6:	2700      	movs	r7, #0
 800a3b8:	9902      	ldr	r1, [sp, #8]
 800a3ba:	9300      	str	r3, [sp, #0]
 800a3bc:	2201      	movs	r2, #1
 800a3be:	4648      	mov	r0, r9
 800a3c0:	f000 fb50 	bl	800aa64 <__lshift>
 800a3c4:	4621      	mov	r1, r4
 800a3c6:	9002      	str	r0, [sp, #8]
 800a3c8:	f000 fbb8 	bl	800ab3c <__mcmp>
 800a3cc:	2800      	cmp	r0, #0
 800a3ce:	dcb4      	bgt.n	800a33a <_dtoa_r+0xa82>
 800a3d0:	d102      	bne.n	800a3d8 <_dtoa_r+0xb20>
 800a3d2:	9b00      	ldr	r3, [sp, #0]
 800a3d4:	07db      	lsls	r3, r3, #31
 800a3d6:	d4b0      	bmi.n	800a33a <_dtoa_r+0xa82>
 800a3d8:	4633      	mov	r3, r6
 800a3da:	461e      	mov	r6, r3
 800a3dc:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a3e0:	2a30      	cmp	r2, #48	@ 0x30
 800a3e2:	d0fa      	beq.n	800a3da <_dtoa_r+0xb22>
 800a3e4:	e4b5      	b.n	8009d52 <_dtoa_r+0x49a>
 800a3e6:	459a      	cmp	sl, r3
 800a3e8:	d1a8      	bne.n	800a33c <_dtoa_r+0xa84>
 800a3ea:	2331      	movs	r3, #49	@ 0x31
 800a3ec:	f108 0801 	add.w	r8, r8, #1
 800a3f0:	f88a 3000 	strb.w	r3, [sl]
 800a3f4:	e4ad      	b.n	8009d52 <_dtoa_r+0x49a>
 800a3f6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800a3f8:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800a454 <_dtoa_r+0xb9c>
 800a3fc:	b11b      	cbz	r3, 800a406 <_dtoa_r+0xb4e>
 800a3fe:	f10a 0308 	add.w	r3, sl, #8
 800a402:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800a404:	6013      	str	r3, [r2, #0]
 800a406:	4650      	mov	r0, sl
 800a408:	b017      	add	sp, #92	@ 0x5c
 800a40a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a40e:	9b07      	ldr	r3, [sp, #28]
 800a410:	2b01      	cmp	r3, #1
 800a412:	f77f ae2e 	ble.w	800a072 <_dtoa_r+0x7ba>
 800a416:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a418:	9308      	str	r3, [sp, #32]
 800a41a:	2001      	movs	r0, #1
 800a41c:	e64d      	b.n	800a0ba <_dtoa_r+0x802>
 800a41e:	f1bb 0f00 	cmp.w	fp, #0
 800a422:	f77f aed9 	ble.w	800a1d8 <_dtoa_r+0x920>
 800a426:	4656      	mov	r6, sl
 800a428:	9802      	ldr	r0, [sp, #8]
 800a42a:	4621      	mov	r1, r4
 800a42c:	f7ff f9ba 	bl	80097a4 <quorem>
 800a430:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800a434:	f806 3b01 	strb.w	r3, [r6], #1
 800a438:	eba6 020a 	sub.w	r2, r6, sl
 800a43c:	4593      	cmp	fp, r2
 800a43e:	ddb4      	ble.n	800a3aa <_dtoa_r+0xaf2>
 800a440:	9902      	ldr	r1, [sp, #8]
 800a442:	2300      	movs	r3, #0
 800a444:	220a      	movs	r2, #10
 800a446:	4648      	mov	r0, r9
 800a448:	f000 f968 	bl	800a71c <__multadd>
 800a44c:	9002      	str	r0, [sp, #8]
 800a44e:	e7eb      	b.n	800a428 <_dtoa_r+0xb70>
 800a450:	0800b760 	.word	0x0800b760
 800a454:	0800b6fb 	.word	0x0800b6fb

0800a458 <_free_r>:
 800a458:	b538      	push	{r3, r4, r5, lr}
 800a45a:	4605      	mov	r5, r0
 800a45c:	2900      	cmp	r1, #0
 800a45e:	d041      	beq.n	800a4e4 <_free_r+0x8c>
 800a460:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a464:	1f0c      	subs	r4, r1, #4
 800a466:	2b00      	cmp	r3, #0
 800a468:	bfb8      	it	lt
 800a46a:	18e4      	addlt	r4, r4, r3
 800a46c:	f000 f8e8 	bl	800a640 <__malloc_lock>
 800a470:	4a1d      	ldr	r2, [pc, #116]	@ (800a4e8 <_free_r+0x90>)
 800a472:	6813      	ldr	r3, [r2, #0]
 800a474:	b933      	cbnz	r3, 800a484 <_free_r+0x2c>
 800a476:	6063      	str	r3, [r4, #4]
 800a478:	6014      	str	r4, [r2, #0]
 800a47a:	4628      	mov	r0, r5
 800a47c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a480:	f000 b8e4 	b.w	800a64c <__malloc_unlock>
 800a484:	42a3      	cmp	r3, r4
 800a486:	d908      	bls.n	800a49a <_free_r+0x42>
 800a488:	6820      	ldr	r0, [r4, #0]
 800a48a:	1821      	adds	r1, r4, r0
 800a48c:	428b      	cmp	r3, r1
 800a48e:	bf01      	itttt	eq
 800a490:	6819      	ldreq	r1, [r3, #0]
 800a492:	685b      	ldreq	r3, [r3, #4]
 800a494:	1809      	addeq	r1, r1, r0
 800a496:	6021      	streq	r1, [r4, #0]
 800a498:	e7ed      	b.n	800a476 <_free_r+0x1e>
 800a49a:	461a      	mov	r2, r3
 800a49c:	685b      	ldr	r3, [r3, #4]
 800a49e:	b10b      	cbz	r3, 800a4a4 <_free_r+0x4c>
 800a4a0:	42a3      	cmp	r3, r4
 800a4a2:	d9fa      	bls.n	800a49a <_free_r+0x42>
 800a4a4:	6811      	ldr	r1, [r2, #0]
 800a4a6:	1850      	adds	r0, r2, r1
 800a4a8:	42a0      	cmp	r0, r4
 800a4aa:	d10b      	bne.n	800a4c4 <_free_r+0x6c>
 800a4ac:	6820      	ldr	r0, [r4, #0]
 800a4ae:	4401      	add	r1, r0
 800a4b0:	1850      	adds	r0, r2, r1
 800a4b2:	4283      	cmp	r3, r0
 800a4b4:	6011      	str	r1, [r2, #0]
 800a4b6:	d1e0      	bne.n	800a47a <_free_r+0x22>
 800a4b8:	6818      	ldr	r0, [r3, #0]
 800a4ba:	685b      	ldr	r3, [r3, #4]
 800a4bc:	6053      	str	r3, [r2, #4]
 800a4be:	4408      	add	r0, r1
 800a4c0:	6010      	str	r0, [r2, #0]
 800a4c2:	e7da      	b.n	800a47a <_free_r+0x22>
 800a4c4:	d902      	bls.n	800a4cc <_free_r+0x74>
 800a4c6:	230c      	movs	r3, #12
 800a4c8:	602b      	str	r3, [r5, #0]
 800a4ca:	e7d6      	b.n	800a47a <_free_r+0x22>
 800a4cc:	6820      	ldr	r0, [r4, #0]
 800a4ce:	1821      	adds	r1, r4, r0
 800a4d0:	428b      	cmp	r3, r1
 800a4d2:	bf04      	itt	eq
 800a4d4:	6819      	ldreq	r1, [r3, #0]
 800a4d6:	685b      	ldreq	r3, [r3, #4]
 800a4d8:	6063      	str	r3, [r4, #4]
 800a4da:	bf04      	itt	eq
 800a4dc:	1809      	addeq	r1, r1, r0
 800a4de:	6021      	streq	r1, [r4, #0]
 800a4e0:	6054      	str	r4, [r2, #4]
 800a4e2:	e7ca      	b.n	800a47a <_free_r+0x22>
 800a4e4:	bd38      	pop	{r3, r4, r5, pc}
 800a4e6:	bf00      	nop
 800a4e8:	200054c4 	.word	0x200054c4

0800a4ec <malloc>:
 800a4ec:	4b02      	ldr	r3, [pc, #8]	@ (800a4f8 <malloc+0xc>)
 800a4ee:	4601      	mov	r1, r0
 800a4f0:	6818      	ldr	r0, [r3, #0]
 800a4f2:	f000 b825 	b.w	800a540 <_malloc_r>
 800a4f6:	bf00      	nop
 800a4f8:	2000001c 	.word	0x2000001c

0800a4fc <sbrk_aligned>:
 800a4fc:	b570      	push	{r4, r5, r6, lr}
 800a4fe:	4e0f      	ldr	r6, [pc, #60]	@ (800a53c <sbrk_aligned+0x40>)
 800a500:	460c      	mov	r4, r1
 800a502:	6831      	ldr	r1, [r6, #0]
 800a504:	4605      	mov	r5, r0
 800a506:	b911      	cbnz	r1, 800a50e <sbrk_aligned+0x12>
 800a508:	f000 feb4 	bl	800b274 <_sbrk_r>
 800a50c:	6030      	str	r0, [r6, #0]
 800a50e:	4621      	mov	r1, r4
 800a510:	4628      	mov	r0, r5
 800a512:	f000 feaf 	bl	800b274 <_sbrk_r>
 800a516:	1c43      	adds	r3, r0, #1
 800a518:	d103      	bne.n	800a522 <sbrk_aligned+0x26>
 800a51a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800a51e:	4620      	mov	r0, r4
 800a520:	bd70      	pop	{r4, r5, r6, pc}
 800a522:	1cc4      	adds	r4, r0, #3
 800a524:	f024 0403 	bic.w	r4, r4, #3
 800a528:	42a0      	cmp	r0, r4
 800a52a:	d0f8      	beq.n	800a51e <sbrk_aligned+0x22>
 800a52c:	1a21      	subs	r1, r4, r0
 800a52e:	4628      	mov	r0, r5
 800a530:	f000 fea0 	bl	800b274 <_sbrk_r>
 800a534:	3001      	adds	r0, #1
 800a536:	d1f2      	bne.n	800a51e <sbrk_aligned+0x22>
 800a538:	e7ef      	b.n	800a51a <sbrk_aligned+0x1e>
 800a53a:	bf00      	nop
 800a53c:	200054c0 	.word	0x200054c0

0800a540 <_malloc_r>:
 800a540:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a544:	1ccd      	adds	r5, r1, #3
 800a546:	f025 0503 	bic.w	r5, r5, #3
 800a54a:	3508      	adds	r5, #8
 800a54c:	2d0c      	cmp	r5, #12
 800a54e:	bf38      	it	cc
 800a550:	250c      	movcc	r5, #12
 800a552:	2d00      	cmp	r5, #0
 800a554:	4606      	mov	r6, r0
 800a556:	db01      	blt.n	800a55c <_malloc_r+0x1c>
 800a558:	42a9      	cmp	r1, r5
 800a55a:	d904      	bls.n	800a566 <_malloc_r+0x26>
 800a55c:	230c      	movs	r3, #12
 800a55e:	6033      	str	r3, [r6, #0]
 800a560:	2000      	movs	r0, #0
 800a562:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a566:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a63c <_malloc_r+0xfc>
 800a56a:	f000 f869 	bl	800a640 <__malloc_lock>
 800a56e:	f8d8 3000 	ldr.w	r3, [r8]
 800a572:	461c      	mov	r4, r3
 800a574:	bb44      	cbnz	r4, 800a5c8 <_malloc_r+0x88>
 800a576:	4629      	mov	r1, r5
 800a578:	4630      	mov	r0, r6
 800a57a:	f7ff ffbf 	bl	800a4fc <sbrk_aligned>
 800a57e:	1c43      	adds	r3, r0, #1
 800a580:	4604      	mov	r4, r0
 800a582:	d158      	bne.n	800a636 <_malloc_r+0xf6>
 800a584:	f8d8 4000 	ldr.w	r4, [r8]
 800a588:	4627      	mov	r7, r4
 800a58a:	2f00      	cmp	r7, #0
 800a58c:	d143      	bne.n	800a616 <_malloc_r+0xd6>
 800a58e:	2c00      	cmp	r4, #0
 800a590:	d04b      	beq.n	800a62a <_malloc_r+0xea>
 800a592:	6823      	ldr	r3, [r4, #0]
 800a594:	4639      	mov	r1, r7
 800a596:	4630      	mov	r0, r6
 800a598:	eb04 0903 	add.w	r9, r4, r3
 800a59c:	f000 fe6a 	bl	800b274 <_sbrk_r>
 800a5a0:	4581      	cmp	r9, r0
 800a5a2:	d142      	bne.n	800a62a <_malloc_r+0xea>
 800a5a4:	6821      	ldr	r1, [r4, #0]
 800a5a6:	1a6d      	subs	r5, r5, r1
 800a5a8:	4629      	mov	r1, r5
 800a5aa:	4630      	mov	r0, r6
 800a5ac:	f7ff ffa6 	bl	800a4fc <sbrk_aligned>
 800a5b0:	3001      	adds	r0, #1
 800a5b2:	d03a      	beq.n	800a62a <_malloc_r+0xea>
 800a5b4:	6823      	ldr	r3, [r4, #0]
 800a5b6:	442b      	add	r3, r5
 800a5b8:	6023      	str	r3, [r4, #0]
 800a5ba:	f8d8 3000 	ldr.w	r3, [r8]
 800a5be:	685a      	ldr	r2, [r3, #4]
 800a5c0:	bb62      	cbnz	r2, 800a61c <_malloc_r+0xdc>
 800a5c2:	f8c8 7000 	str.w	r7, [r8]
 800a5c6:	e00f      	b.n	800a5e8 <_malloc_r+0xa8>
 800a5c8:	6822      	ldr	r2, [r4, #0]
 800a5ca:	1b52      	subs	r2, r2, r5
 800a5cc:	d420      	bmi.n	800a610 <_malloc_r+0xd0>
 800a5ce:	2a0b      	cmp	r2, #11
 800a5d0:	d917      	bls.n	800a602 <_malloc_r+0xc2>
 800a5d2:	1961      	adds	r1, r4, r5
 800a5d4:	42a3      	cmp	r3, r4
 800a5d6:	6025      	str	r5, [r4, #0]
 800a5d8:	bf18      	it	ne
 800a5da:	6059      	strne	r1, [r3, #4]
 800a5dc:	6863      	ldr	r3, [r4, #4]
 800a5de:	bf08      	it	eq
 800a5e0:	f8c8 1000 	streq.w	r1, [r8]
 800a5e4:	5162      	str	r2, [r4, r5]
 800a5e6:	604b      	str	r3, [r1, #4]
 800a5e8:	4630      	mov	r0, r6
 800a5ea:	f000 f82f 	bl	800a64c <__malloc_unlock>
 800a5ee:	f104 000b 	add.w	r0, r4, #11
 800a5f2:	1d23      	adds	r3, r4, #4
 800a5f4:	f020 0007 	bic.w	r0, r0, #7
 800a5f8:	1ac2      	subs	r2, r0, r3
 800a5fa:	bf1c      	itt	ne
 800a5fc:	1a1b      	subne	r3, r3, r0
 800a5fe:	50a3      	strne	r3, [r4, r2]
 800a600:	e7af      	b.n	800a562 <_malloc_r+0x22>
 800a602:	6862      	ldr	r2, [r4, #4]
 800a604:	42a3      	cmp	r3, r4
 800a606:	bf0c      	ite	eq
 800a608:	f8c8 2000 	streq.w	r2, [r8]
 800a60c:	605a      	strne	r2, [r3, #4]
 800a60e:	e7eb      	b.n	800a5e8 <_malloc_r+0xa8>
 800a610:	4623      	mov	r3, r4
 800a612:	6864      	ldr	r4, [r4, #4]
 800a614:	e7ae      	b.n	800a574 <_malloc_r+0x34>
 800a616:	463c      	mov	r4, r7
 800a618:	687f      	ldr	r7, [r7, #4]
 800a61a:	e7b6      	b.n	800a58a <_malloc_r+0x4a>
 800a61c:	461a      	mov	r2, r3
 800a61e:	685b      	ldr	r3, [r3, #4]
 800a620:	42a3      	cmp	r3, r4
 800a622:	d1fb      	bne.n	800a61c <_malloc_r+0xdc>
 800a624:	2300      	movs	r3, #0
 800a626:	6053      	str	r3, [r2, #4]
 800a628:	e7de      	b.n	800a5e8 <_malloc_r+0xa8>
 800a62a:	230c      	movs	r3, #12
 800a62c:	6033      	str	r3, [r6, #0]
 800a62e:	4630      	mov	r0, r6
 800a630:	f000 f80c 	bl	800a64c <__malloc_unlock>
 800a634:	e794      	b.n	800a560 <_malloc_r+0x20>
 800a636:	6005      	str	r5, [r0, #0]
 800a638:	e7d6      	b.n	800a5e8 <_malloc_r+0xa8>
 800a63a:	bf00      	nop
 800a63c:	200054c4 	.word	0x200054c4

0800a640 <__malloc_lock>:
 800a640:	4801      	ldr	r0, [pc, #4]	@ (800a648 <__malloc_lock+0x8>)
 800a642:	f7ff b880 	b.w	8009746 <__retarget_lock_acquire_recursive>
 800a646:	bf00      	nop
 800a648:	200054bc 	.word	0x200054bc

0800a64c <__malloc_unlock>:
 800a64c:	4801      	ldr	r0, [pc, #4]	@ (800a654 <__malloc_unlock+0x8>)
 800a64e:	f7ff b87b 	b.w	8009748 <__retarget_lock_release_recursive>
 800a652:	bf00      	nop
 800a654:	200054bc 	.word	0x200054bc

0800a658 <_Balloc>:
 800a658:	b570      	push	{r4, r5, r6, lr}
 800a65a:	69c6      	ldr	r6, [r0, #28]
 800a65c:	4604      	mov	r4, r0
 800a65e:	460d      	mov	r5, r1
 800a660:	b976      	cbnz	r6, 800a680 <_Balloc+0x28>
 800a662:	2010      	movs	r0, #16
 800a664:	f7ff ff42 	bl	800a4ec <malloc>
 800a668:	4602      	mov	r2, r0
 800a66a:	61e0      	str	r0, [r4, #28]
 800a66c:	b920      	cbnz	r0, 800a678 <_Balloc+0x20>
 800a66e:	4b18      	ldr	r3, [pc, #96]	@ (800a6d0 <_Balloc+0x78>)
 800a670:	4818      	ldr	r0, [pc, #96]	@ (800a6d4 <_Balloc+0x7c>)
 800a672:	216b      	movs	r1, #107	@ 0x6b
 800a674:	f7ff f878 	bl	8009768 <__assert_func>
 800a678:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a67c:	6006      	str	r6, [r0, #0]
 800a67e:	60c6      	str	r6, [r0, #12]
 800a680:	69e6      	ldr	r6, [r4, #28]
 800a682:	68f3      	ldr	r3, [r6, #12]
 800a684:	b183      	cbz	r3, 800a6a8 <_Balloc+0x50>
 800a686:	69e3      	ldr	r3, [r4, #28]
 800a688:	68db      	ldr	r3, [r3, #12]
 800a68a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a68e:	b9b8      	cbnz	r0, 800a6c0 <_Balloc+0x68>
 800a690:	2101      	movs	r1, #1
 800a692:	fa01 f605 	lsl.w	r6, r1, r5
 800a696:	1d72      	adds	r2, r6, #5
 800a698:	0092      	lsls	r2, r2, #2
 800a69a:	4620      	mov	r0, r4
 800a69c:	f000 fe01 	bl	800b2a2 <_calloc_r>
 800a6a0:	b160      	cbz	r0, 800a6bc <_Balloc+0x64>
 800a6a2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a6a6:	e00e      	b.n	800a6c6 <_Balloc+0x6e>
 800a6a8:	2221      	movs	r2, #33	@ 0x21
 800a6aa:	2104      	movs	r1, #4
 800a6ac:	4620      	mov	r0, r4
 800a6ae:	f000 fdf8 	bl	800b2a2 <_calloc_r>
 800a6b2:	69e3      	ldr	r3, [r4, #28]
 800a6b4:	60f0      	str	r0, [r6, #12]
 800a6b6:	68db      	ldr	r3, [r3, #12]
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d1e4      	bne.n	800a686 <_Balloc+0x2e>
 800a6bc:	2000      	movs	r0, #0
 800a6be:	bd70      	pop	{r4, r5, r6, pc}
 800a6c0:	6802      	ldr	r2, [r0, #0]
 800a6c2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a6c6:	2300      	movs	r3, #0
 800a6c8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a6cc:	e7f7      	b.n	800a6be <_Balloc+0x66>
 800a6ce:	bf00      	nop
 800a6d0:	0800b61c 	.word	0x0800b61c
 800a6d4:	0800b771 	.word	0x0800b771

0800a6d8 <_Bfree>:
 800a6d8:	b570      	push	{r4, r5, r6, lr}
 800a6da:	69c6      	ldr	r6, [r0, #28]
 800a6dc:	4605      	mov	r5, r0
 800a6de:	460c      	mov	r4, r1
 800a6e0:	b976      	cbnz	r6, 800a700 <_Bfree+0x28>
 800a6e2:	2010      	movs	r0, #16
 800a6e4:	f7ff ff02 	bl	800a4ec <malloc>
 800a6e8:	4602      	mov	r2, r0
 800a6ea:	61e8      	str	r0, [r5, #28]
 800a6ec:	b920      	cbnz	r0, 800a6f8 <_Bfree+0x20>
 800a6ee:	4b09      	ldr	r3, [pc, #36]	@ (800a714 <_Bfree+0x3c>)
 800a6f0:	4809      	ldr	r0, [pc, #36]	@ (800a718 <_Bfree+0x40>)
 800a6f2:	218f      	movs	r1, #143	@ 0x8f
 800a6f4:	f7ff f838 	bl	8009768 <__assert_func>
 800a6f8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a6fc:	6006      	str	r6, [r0, #0]
 800a6fe:	60c6      	str	r6, [r0, #12]
 800a700:	b13c      	cbz	r4, 800a712 <_Bfree+0x3a>
 800a702:	69eb      	ldr	r3, [r5, #28]
 800a704:	6862      	ldr	r2, [r4, #4]
 800a706:	68db      	ldr	r3, [r3, #12]
 800a708:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a70c:	6021      	str	r1, [r4, #0]
 800a70e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a712:	bd70      	pop	{r4, r5, r6, pc}
 800a714:	0800b61c 	.word	0x0800b61c
 800a718:	0800b771 	.word	0x0800b771

0800a71c <__multadd>:
 800a71c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a720:	690d      	ldr	r5, [r1, #16]
 800a722:	4607      	mov	r7, r0
 800a724:	460c      	mov	r4, r1
 800a726:	461e      	mov	r6, r3
 800a728:	f101 0c14 	add.w	ip, r1, #20
 800a72c:	2000      	movs	r0, #0
 800a72e:	f8dc 3000 	ldr.w	r3, [ip]
 800a732:	b299      	uxth	r1, r3
 800a734:	fb02 6101 	mla	r1, r2, r1, r6
 800a738:	0c1e      	lsrs	r6, r3, #16
 800a73a:	0c0b      	lsrs	r3, r1, #16
 800a73c:	fb02 3306 	mla	r3, r2, r6, r3
 800a740:	b289      	uxth	r1, r1
 800a742:	3001      	adds	r0, #1
 800a744:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a748:	4285      	cmp	r5, r0
 800a74a:	f84c 1b04 	str.w	r1, [ip], #4
 800a74e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a752:	dcec      	bgt.n	800a72e <__multadd+0x12>
 800a754:	b30e      	cbz	r6, 800a79a <__multadd+0x7e>
 800a756:	68a3      	ldr	r3, [r4, #8]
 800a758:	42ab      	cmp	r3, r5
 800a75a:	dc19      	bgt.n	800a790 <__multadd+0x74>
 800a75c:	6861      	ldr	r1, [r4, #4]
 800a75e:	4638      	mov	r0, r7
 800a760:	3101      	adds	r1, #1
 800a762:	f7ff ff79 	bl	800a658 <_Balloc>
 800a766:	4680      	mov	r8, r0
 800a768:	b928      	cbnz	r0, 800a776 <__multadd+0x5a>
 800a76a:	4602      	mov	r2, r0
 800a76c:	4b0c      	ldr	r3, [pc, #48]	@ (800a7a0 <__multadd+0x84>)
 800a76e:	480d      	ldr	r0, [pc, #52]	@ (800a7a4 <__multadd+0x88>)
 800a770:	21ba      	movs	r1, #186	@ 0xba
 800a772:	f7fe fff9 	bl	8009768 <__assert_func>
 800a776:	6922      	ldr	r2, [r4, #16]
 800a778:	3202      	adds	r2, #2
 800a77a:	f104 010c 	add.w	r1, r4, #12
 800a77e:	0092      	lsls	r2, r2, #2
 800a780:	300c      	adds	r0, #12
 800a782:	f7fe ffe2 	bl	800974a <memcpy>
 800a786:	4621      	mov	r1, r4
 800a788:	4638      	mov	r0, r7
 800a78a:	f7ff ffa5 	bl	800a6d8 <_Bfree>
 800a78e:	4644      	mov	r4, r8
 800a790:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a794:	3501      	adds	r5, #1
 800a796:	615e      	str	r6, [r3, #20]
 800a798:	6125      	str	r5, [r4, #16]
 800a79a:	4620      	mov	r0, r4
 800a79c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a7a0:	0800b760 	.word	0x0800b760
 800a7a4:	0800b771 	.word	0x0800b771

0800a7a8 <__hi0bits>:
 800a7a8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800a7ac:	4603      	mov	r3, r0
 800a7ae:	bf36      	itet	cc
 800a7b0:	0403      	lslcc	r3, r0, #16
 800a7b2:	2000      	movcs	r0, #0
 800a7b4:	2010      	movcc	r0, #16
 800a7b6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a7ba:	bf3c      	itt	cc
 800a7bc:	021b      	lslcc	r3, r3, #8
 800a7be:	3008      	addcc	r0, #8
 800a7c0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a7c4:	bf3c      	itt	cc
 800a7c6:	011b      	lslcc	r3, r3, #4
 800a7c8:	3004      	addcc	r0, #4
 800a7ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a7ce:	bf3c      	itt	cc
 800a7d0:	009b      	lslcc	r3, r3, #2
 800a7d2:	3002      	addcc	r0, #2
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	db05      	blt.n	800a7e4 <__hi0bits+0x3c>
 800a7d8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800a7dc:	f100 0001 	add.w	r0, r0, #1
 800a7e0:	bf08      	it	eq
 800a7e2:	2020      	moveq	r0, #32
 800a7e4:	4770      	bx	lr

0800a7e6 <__lo0bits>:
 800a7e6:	6803      	ldr	r3, [r0, #0]
 800a7e8:	4602      	mov	r2, r0
 800a7ea:	f013 0007 	ands.w	r0, r3, #7
 800a7ee:	d00b      	beq.n	800a808 <__lo0bits+0x22>
 800a7f0:	07d9      	lsls	r1, r3, #31
 800a7f2:	d421      	bmi.n	800a838 <__lo0bits+0x52>
 800a7f4:	0798      	lsls	r0, r3, #30
 800a7f6:	bf49      	itett	mi
 800a7f8:	085b      	lsrmi	r3, r3, #1
 800a7fa:	089b      	lsrpl	r3, r3, #2
 800a7fc:	2001      	movmi	r0, #1
 800a7fe:	6013      	strmi	r3, [r2, #0]
 800a800:	bf5c      	itt	pl
 800a802:	6013      	strpl	r3, [r2, #0]
 800a804:	2002      	movpl	r0, #2
 800a806:	4770      	bx	lr
 800a808:	b299      	uxth	r1, r3
 800a80a:	b909      	cbnz	r1, 800a810 <__lo0bits+0x2a>
 800a80c:	0c1b      	lsrs	r3, r3, #16
 800a80e:	2010      	movs	r0, #16
 800a810:	b2d9      	uxtb	r1, r3
 800a812:	b909      	cbnz	r1, 800a818 <__lo0bits+0x32>
 800a814:	3008      	adds	r0, #8
 800a816:	0a1b      	lsrs	r3, r3, #8
 800a818:	0719      	lsls	r1, r3, #28
 800a81a:	bf04      	itt	eq
 800a81c:	091b      	lsreq	r3, r3, #4
 800a81e:	3004      	addeq	r0, #4
 800a820:	0799      	lsls	r1, r3, #30
 800a822:	bf04      	itt	eq
 800a824:	089b      	lsreq	r3, r3, #2
 800a826:	3002      	addeq	r0, #2
 800a828:	07d9      	lsls	r1, r3, #31
 800a82a:	d403      	bmi.n	800a834 <__lo0bits+0x4e>
 800a82c:	085b      	lsrs	r3, r3, #1
 800a82e:	f100 0001 	add.w	r0, r0, #1
 800a832:	d003      	beq.n	800a83c <__lo0bits+0x56>
 800a834:	6013      	str	r3, [r2, #0]
 800a836:	4770      	bx	lr
 800a838:	2000      	movs	r0, #0
 800a83a:	4770      	bx	lr
 800a83c:	2020      	movs	r0, #32
 800a83e:	4770      	bx	lr

0800a840 <__i2b>:
 800a840:	b510      	push	{r4, lr}
 800a842:	460c      	mov	r4, r1
 800a844:	2101      	movs	r1, #1
 800a846:	f7ff ff07 	bl	800a658 <_Balloc>
 800a84a:	4602      	mov	r2, r0
 800a84c:	b928      	cbnz	r0, 800a85a <__i2b+0x1a>
 800a84e:	4b05      	ldr	r3, [pc, #20]	@ (800a864 <__i2b+0x24>)
 800a850:	4805      	ldr	r0, [pc, #20]	@ (800a868 <__i2b+0x28>)
 800a852:	f240 1145 	movw	r1, #325	@ 0x145
 800a856:	f7fe ff87 	bl	8009768 <__assert_func>
 800a85a:	2301      	movs	r3, #1
 800a85c:	6144      	str	r4, [r0, #20]
 800a85e:	6103      	str	r3, [r0, #16]
 800a860:	bd10      	pop	{r4, pc}
 800a862:	bf00      	nop
 800a864:	0800b760 	.word	0x0800b760
 800a868:	0800b771 	.word	0x0800b771

0800a86c <__multiply>:
 800a86c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a870:	4617      	mov	r7, r2
 800a872:	690a      	ldr	r2, [r1, #16]
 800a874:	693b      	ldr	r3, [r7, #16]
 800a876:	429a      	cmp	r2, r3
 800a878:	bfa8      	it	ge
 800a87a:	463b      	movge	r3, r7
 800a87c:	4689      	mov	r9, r1
 800a87e:	bfa4      	itt	ge
 800a880:	460f      	movge	r7, r1
 800a882:	4699      	movge	r9, r3
 800a884:	693d      	ldr	r5, [r7, #16]
 800a886:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a88a:	68bb      	ldr	r3, [r7, #8]
 800a88c:	6879      	ldr	r1, [r7, #4]
 800a88e:	eb05 060a 	add.w	r6, r5, sl
 800a892:	42b3      	cmp	r3, r6
 800a894:	b085      	sub	sp, #20
 800a896:	bfb8      	it	lt
 800a898:	3101      	addlt	r1, #1
 800a89a:	f7ff fedd 	bl	800a658 <_Balloc>
 800a89e:	b930      	cbnz	r0, 800a8ae <__multiply+0x42>
 800a8a0:	4602      	mov	r2, r0
 800a8a2:	4b41      	ldr	r3, [pc, #260]	@ (800a9a8 <__multiply+0x13c>)
 800a8a4:	4841      	ldr	r0, [pc, #260]	@ (800a9ac <__multiply+0x140>)
 800a8a6:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800a8aa:	f7fe ff5d 	bl	8009768 <__assert_func>
 800a8ae:	f100 0414 	add.w	r4, r0, #20
 800a8b2:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800a8b6:	4623      	mov	r3, r4
 800a8b8:	2200      	movs	r2, #0
 800a8ba:	4573      	cmp	r3, lr
 800a8bc:	d320      	bcc.n	800a900 <__multiply+0x94>
 800a8be:	f107 0814 	add.w	r8, r7, #20
 800a8c2:	f109 0114 	add.w	r1, r9, #20
 800a8c6:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800a8ca:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800a8ce:	9302      	str	r3, [sp, #8]
 800a8d0:	1beb      	subs	r3, r5, r7
 800a8d2:	3b15      	subs	r3, #21
 800a8d4:	f023 0303 	bic.w	r3, r3, #3
 800a8d8:	3304      	adds	r3, #4
 800a8da:	3715      	adds	r7, #21
 800a8dc:	42bd      	cmp	r5, r7
 800a8de:	bf38      	it	cc
 800a8e0:	2304      	movcc	r3, #4
 800a8e2:	9301      	str	r3, [sp, #4]
 800a8e4:	9b02      	ldr	r3, [sp, #8]
 800a8e6:	9103      	str	r1, [sp, #12]
 800a8e8:	428b      	cmp	r3, r1
 800a8ea:	d80c      	bhi.n	800a906 <__multiply+0x9a>
 800a8ec:	2e00      	cmp	r6, #0
 800a8ee:	dd03      	ble.n	800a8f8 <__multiply+0x8c>
 800a8f0:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d055      	beq.n	800a9a4 <__multiply+0x138>
 800a8f8:	6106      	str	r6, [r0, #16]
 800a8fa:	b005      	add	sp, #20
 800a8fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a900:	f843 2b04 	str.w	r2, [r3], #4
 800a904:	e7d9      	b.n	800a8ba <__multiply+0x4e>
 800a906:	f8b1 a000 	ldrh.w	sl, [r1]
 800a90a:	f1ba 0f00 	cmp.w	sl, #0
 800a90e:	d01f      	beq.n	800a950 <__multiply+0xe4>
 800a910:	46c4      	mov	ip, r8
 800a912:	46a1      	mov	r9, r4
 800a914:	2700      	movs	r7, #0
 800a916:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a91a:	f8d9 3000 	ldr.w	r3, [r9]
 800a91e:	fa1f fb82 	uxth.w	fp, r2
 800a922:	b29b      	uxth	r3, r3
 800a924:	fb0a 330b 	mla	r3, sl, fp, r3
 800a928:	443b      	add	r3, r7
 800a92a:	f8d9 7000 	ldr.w	r7, [r9]
 800a92e:	0c12      	lsrs	r2, r2, #16
 800a930:	0c3f      	lsrs	r7, r7, #16
 800a932:	fb0a 7202 	mla	r2, sl, r2, r7
 800a936:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800a93a:	b29b      	uxth	r3, r3
 800a93c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a940:	4565      	cmp	r5, ip
 800a942:	f849 3b04 	str.w	r3, [r9], #4
 800a946:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800a94a:	d8e4      	bhi.n	800a916 <__multiply+0xaa>
 800a94c:	9b01      	ldr	r3, [sp, #4]
 800a94e:	50e7      	str	r7, [r4, r3]
 800a950:	9b03      	ldr	r3, [sp, #12]
 800a952:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800a956:	3104      	adds	r1, #4
 800a958:	f1b9 0f00 	cmp.w	r9, #0
 800a95c:	d020      	beq.n	800a9a0 <__multiply+0x134>
 800a95e:	6823      	ldr	r3, [r4, #0]
 800a960:	4647      	mov	r7, r8
 800a962:	46a4      	mov	ip, r4
 800a964:	f04f 0a00 	mov.w	sl, #0
 800a968:	f8b7 b000 	ldrh.w	fp, [r7]
 800a96c:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800a970:	fb09 220b 	mla	r2, r9, fp, r2
 800a974:	4452      	add	r2, sl
 800a976:	b29b      	uxth	r3, r3
 800a978:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a97c:	f84c 3b04 	str.w	r3, [ip], #4
 800a980:	f857 3b04 	ldr.w	r3, [r7], #4
 800a984:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a988:	f8bc 3000 	ldrh.w	r3, [ip]
 800a98c:	fb09 330a 	mla	r3, r9, sl, r3
 800a990:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800a994:	42bd      	cmp	r5, r7
 800a996:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a99a:	d8e5      	bhi.n	800a968 <__multiply+0xfc>
 800a99c:	9a01      	ldr	r2, [sp, #4]
 800a99e:	50a3      	str	r3, [r4, r2]
 800a9a0:	3404      	adds	r4, #4
 800a9a2:	e79f      	b.n	800a8e4 <__multiply+0x78>
 800a9a4:	3e01      	subs	r6, #1
 800a9a6:	e7a1      	b.n	800a8ec <__multiply+0x80>
 800a9a8:	0800b760 	.word	0x0800b760
 800a9ac:	0800b771 	.word	0x0800b771

0800a9b0 <__pow5mult>:
 800a9b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a9b4:	4615      	mov	r5, r2
 800a9b6:	f012 0203 	ands.w	r2, r2, #3
 800a9ba:	4607      	mov	r7, r0
 800a9bc:	460e      	mov	r6, r1
 800a9be:	d007      	beq.n	800a9d0 <__pow5mult+0x20>
 800a9c0:	4c25      	ldr	r4, [pc, #148]	@ (800aa58 <__pow5mult+0xa8>)
 800a9c2:	3a01      	subs	r2, #1
 800a9c4:	2300      	movs	r3, #0
 800a9c6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a9ca:	f7ff fea7 	bl	800a71c <__multadd>
 800a9ce:	4606      	mov	r6, r0
 800a9d0:	10ad      	asrs	r5, r5, #2
 800a9d2:	d03d      	beq.n	800aa50 <__pow5mult+0xa0>
 800a9d4:	69fc      	ldr	r4, [r7, #28]
 800a9d6:	b97c      	cbnz	r4, 800a9f8 <__pow5mult+0x48>
 800a9d8:	2010      	movs	r0, #16
 800a9da:	f7ff fd87 	bl	800a4ec <malloc>
 800a9de:	4602      	mov	r2, r0
 800a9e0:	61f8      	str	r0, [r7, #28]
 800a9e2:	b928      	cbnz	r0, 800a9f0 <__pow5mult+0x40>
 800a9e4:	4b1d      	ldr	r3, [pc, #116]	@ (800aa5c <__pow5mult+0xac>)
 800a9e6:	481e      	ldr	r0, [pc, #120]	@ (800aa60 <__pow5mult+0xb0>)
 800a9e8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800a9ec:	f7fe febc 	bl	8009768 <__assert_func>
 800a9f0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a9f4:	6004      	str	r4, [r0, #0]
 800a9f6:	60c4      	str	r4, [r0, #12]
 800a9f8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800a9fc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800aa00:	b94c      	cbnz	r4, 800aa16 <__pow5mult+0x66>
 800aa02:	f240 2171 	movw	r1, #625	@ 0x271
 800aa06:	4638      	mov	r0, r7
 800aa08:	f7ff ff1a 	bl	800a840 <__i2b>
 800aa0c:	2300      	movs	r3, #0
 800aa0e:	f8c8 0008 	str.w	r0, [r8, #8]
 800aa12:	4604      	mov	r4, r0
 800aa14:	6003      	str	r3, [r0, #0]
 800aa16:	f04f 0900 	mov.w	r9, #0
 800aa1a:	07eb      	lsls	r3, r5, #31
 800aa1c:	d50a      	bpl.n	800aa34 <__pow5mult+0x84>
 800aa1e:	4631      	mov	r1, r6
 800aa20:	4622      	mov	r2, r4
 800aa22:	4638      	mov	r0, r7
 800aa24:	f7ff ff22 	bl	800a86c <__multiply>
 800aa28:	4631      	mov	r1, r6
 800aa2a:	4680      	mov	r8, r0
 800aa2c:	4638      	mov	r0, r7
 800aa2e:	f7ff fe53 	bl	800a6d8 <_Bfree>
 800aa32:	4646      	mov	r6, r8
 800aa34:	106d      	asrs	r5, r5, #1
 800aa36:	d00b      	beq.n	800aa50 <__pow5mult+0xa0>
 800aa38:	6820      	ldr	r0, [r4, #0]
 800aa3a:	b938      	cbnz	r0, 800aa4c <__pow5mult+0x9c>
 800aa3c:	4622      	mov	r2, r4
 800aa3e:	4621      	mov	r1, r4
 800aa40:	4638      	mov	r0, r7
 800aa42:	f7ff ff13 	bl	800a86c <__multiply>
 800aa46:	6020      	str	r0, [r4, #0]
 800aa48:	f8c0 9000 	str.w	r9, [r0]
 800aa4c:	4604      	mov	r4, r0
 800aa4e:	e7e4      	b.n	800aa1a <__pow5mult+0x6a>
 800aa50:	4630      	mov	r0, r6
 800aa52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aa56:	bf00      	nop
 800aa58:	0800b7e8 	.word	0x0800b7e8
 800aa5c:	0800b61c 	.word	0x0800b61c
 800aa60:	0800b771 	.word	0x0800b771

0800aa64 <__lshift>:
 800aa64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aa68:	460c      	mov	r4, r1
 800aa6a:	6849      	ldr	r1, [r1, #4]
 800aa6c:	6923      	ldr	r3, [r4, #16]
 800aa6e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800aa72:	68a3      	ldr	r3, [r4, #8]
 800aa74:	4607      	mov	r7, r0
 800aa76:	4691      	mov	r9, r2
 800aa78:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800aa7c:	f108 0601 	add.w	r6, r8, #1
 800aa80:	42b3      	cmp	r3, r6
 800aa82:	db0b      	blt.n	800aa9c <__lshift+0x38>
 800aa84:	4638      	mov	r0, r7
 800aa86:	f7ff fde7 	bl	800a658 <_Balloc>
 800aa8a:	4605      	mov	r5, r0
 800aa8c:	b948      	cbnz	r0, 800aaa2 <__lshift+0x3e>
 800aa8e:	4602      	mov	r2, r0
 800aa90:	4b28      	ldr	r3, [pc, #160]	@ (800ab34 <__lshift+0xd0>)
 800aa92:	4829      	ldr	r0, [pc, #164]	@ (800ab38 <__lshift+0xd4>)
 800aa94:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800aa98:	f7fe fe66 	bl	8009768 <__assert_func>
 800aa9c:	3101      	adds	r1, #1
 800aa9e:	005b      	lsls	r3, r3, #1
 800aaa0:	e7ee      	b.n	800aa80 <__lshift+0x1c>
 800aaa2:	2300      	movs	r3, #0
 800aaa4:	f100 0114 	add.w	r1, r0, #20
 800aaa8:	f100 0210 	add.w	r2, r0, #16
 800aaac:	4618      	mov	r0, r3
 800aaae:	4553      	cmp	r3, sl
 800aab0:	db33      	blt.n	800ab1a <__lshift+0xb6>
 800aab2:	6920      	ldr	r0, [r4, #16]
 800aab4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800aab8:	f104 0314 	add.w	r3, r4, #20
 800aabc:	f019 091f 	ands.w	r9, r9, #31
 800aac0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800aac4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800aac8:	d02b      	beq.n	800ab22 <__lshift+0xbe>
 800aaca:	f1c9 0e20 	rsb	lr, r9, #32
 800aace:	468a      	mov	sl, r1
 800aad0:	2200      	movs	r2, #0
 800aad2:	6818      	ldr	r0, [r3, #0]
 800aad4:	fa00 f009 	lsl.w	r0, r0, r9
 800aad8:	4310      	orrs	r0, r2
 800aada:	f84a 0b04 	str.w	r0, [sl], #4
 800aade:	f853 2b04 	ldr.w	r2, [r3], #4
 800aae2:	459c      	cmp	ip, r3
 800aae4:	fa22 f20e 	lsr.w	r2, r2, lr
 800aae8:	d8f3      	bhi.n	800aad2 <__lshift+0x6e>
 800aaea:	ebac 0304 	sub.w	r3, ip, r4
 800aaee:	3b15      	subs	r3, #21
 800aaf0:	f023 0303 	bic.w	r3, r3, #3
 800aaf4:	3304      	adds	r3, #4
 800aaf6:	f104 0015 	add.w	r0, r4, #21
 800aafa:	4560      	cmp	r0, ip
 800aafc:	bf88      	it	hi
 800aafe:	2304      	movhi	r3, #4
 800ab00:	50ca      	str	r2, [r1, r3]
 800ab02:	b10a      	cbz	r2, 800ab08 <__lshift+0xa4>
 800ab04:	f108 0602 	add.w	r6, r8, #2
 800ab08:	3e01      	subs	r6, #1
 800ab0a:	4638      	mov	r0, r7
 800ab0c:	612e      	str	r6, [r5, #16]
 800ab0e:	4621      	mov	r1, r4
 800ab10:	f7ff fde2 	bl	800a6d8 <_Bfree>
 800ab14:	4628      	mov	r0, r5
 800ab16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab1a:	f842 0f04 	str.w	r0, [r2, #4]!
 800ab1e:	3301      	adds	r3, #1
 800ab20:	e7c5      	b.n	800aaae <__lshift+0x4a>
 800ab22:	3904      	subs	r1, #4
 800ab24:	f853 2b04 	ldr.w	r2, [r3], #4
 800ab28:	f841 2f04 	str.w	r2, [r1, #4]!
 800ab2c:	459c      	cmp	ip, r3
 800ab2e:	d8f9      	bhi.n	800ab24 <__lshift+0xc0>
 800ab30:	e7ea      	b.n	800ab08 <__lshift+0xa4>
 800ab32:	bf00      	nop
 800ab34:	0800b760 	.word	0x0800b760
 800ab38:	0800b771 	.word	0x0800b771

0800ab3c <__mcmp>:
 800ab3c:	690a      	ldr	r2, [r1, #16]
 800ab3e:	4603      	mov	r3, r0
 800ab40:	6900      	ldr	r0, [r0, #16]
 800ab42:	1a80      	subs	r0, r0, r2
 800ab44:	b530      	push	{r4, r5, lr}
 800ab46:	d10e      	bne.n	800ab66 <__mcmp+0x2a>
 800ab48:	3314      	adds	r3, #20
 800ab4a:	3114      	adds	r1, #20
 800ab4c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800ab50:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800ab54:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800ab58:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800ab5c:	4295      	cmp	r5, r2
 800ab5e:	d003      	beq.n	800ab68 <__mcmp+0x2c>
 800ab60:	d205      	bcs.n	800ab6e <__mcmp+0x32>
 800ab62:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ab66:	bd30      	pop	{r4, r5, pc}
 800ab68:	42a3      	cmp	r3, r4
 800ab6a:	d3f3      	bcc.n	800ab54 <__mcmp+0x18>
 800ab6c:	e7fb      	b.n	800ab66 <__mcmp+0x2a>
 800ab6e:	2001      	movs	r0, #1
 800ab70:	e7f9      	b.n	800ab66 <__mcmp+0x2a>
	...

0800ab74 <__mdiff>:
 800ab74:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab78:	4689      	mov	r9, r1
 800ab7a:	4606      	mov	r6, r0
 800ab7c:	4611      	mov	r1, r2
 800ab7e:	4648      	mov	r0, r9
 800ab80:	4614      	mov	r4, r2
 800ab82:	f7ff ffdb 	bl	800ab3c <__mcmp>
 800ab86:	1e05      	subs	r5, r0, #0
 800ab88:	d112      	bne.n	800abb0 <__mdiff+0x3c>
 800ab8a:	4629      	mov	r1, r5
 800ab8c:	4630      	mov	r0, r6
 800ab8e:	f7ff fd63 	bl	800a658 <_Balloc>
 800ab92:	4602      	mov	r2, r0
 800ab94:	b928      	cbnz	r0, 800aba2 <__mdiff+0x2e>
 800ab96:	4b3f      	ldr	r3, [pc, #252]	@ (800ac94 <__mdiff+0x120>)
 800ab98:	f240 2137 	movw	r1, #567	@ 0x237
 800ab9c:	483e      	ldr	r0, [pc, #248]	@ (800ac98 <__mdiff+0x124>)
 800ab9e:	f7fe fde3 	bl	8009768 <__assert_func>
 800aba2:	2301      	movs	r3, #1
 800aba4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800aba8:	4610      	mov	r0, r2
 800abaa:	b003      	add	sp, #12
 800abac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800abb0:	bfbc      	itt	lt
 800abb2:	464b      	movlt	r3, r9
 800abb4:	46a1      	movlt	r9, r4
 800abb6:	4630      	mov	r0, r6
 800abb8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800abbc:	bfba      	itte	lt
 800abbe:	461c      	movlt	r4, r3
 800abc0:	2501      	movlt	r5, #1
 800abc2:	2500      	movge	r5, #0
 800abc4:	f7ff fd48 	bl	800a658 <_Balloc>
 800abc8:	4602      	mov	r2, r0
 800abca:	b918      	cbnz	r0, 800abd4 <__mdiff+0x60>
 800abcc:	4b31      	ldr	r3, [pc, #196]	@ (800ac94 <__mdiff+0x120>)
 800abce:	f240 2145 	movw	r1, #581	@ 0x245
 800abd2:	e7e3      	b.n	800ab9c <__mdiff+0x28>
 800abd4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800abd8:	6926      	ldr	r6, [r4, #16]
 800abda:	60c5      	str	r5, [r0, #12]
 800abdc:	f109 0310 	add.w	r3, r9, #16
 800abe0:	f109 0514 	add.w	r5, r9, #20
 800abe4:	f104 0e14 	add.w	lr, r4, #20
 800abe8:	f100 0b14 	add.w	fp, r0, #20
 800abec:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800abf0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800abf4:	9301      	str	r3, [sp, #4]
 800abf6:	46d9      	mov	r9, fp
 800abf8:	f04f 0c00 	mov.w	ip, #0
 800abfc:	9b01      	ldr	r3, [sp, #4]
 800abfe:	f85e 0b04 	ldr.w	r0, [lr], #4
 800ac02:	f853 af04 	ldr.w	sl, [r3, #4]!
 800ac06:	9301      	str	r3, [sp, #4]
 800ac08:	fa1f f38a 	uxth.w	r3, sl
 800ac0c:	4619      	mov	r1, r3
 800ac0e:	b283      	uxth	r3, r0
 800ac10:	1acb      	subs	r3, r1, r3
 800ac12:	0c00      	lsrs	r0, r0, #16
 800ac14:	4463      	add	r3, ip
 800ac16:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800ac1a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800ac1e:	b29b      	uxth	r3, r3
 800ac20:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800ac24:	4576      	cmp	r6, lr
 800ac26:	f849 3b04 	str.w	r3, [r9], #4
 800ac2a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ac2e:	d8e5      	bhi.n	800abfc <__mdiff+0x88>
 800ac30:	1b33      	subs	r3, r6, r4
 800ac32:	3b15      	subs	r3, #21
 800ac34:	f023 0303 	bic.w	r3, r3, #3
 800ac38:	3415      	adds	r4, #21
 800ac3a:	3304      	adds	r3, #4
 800ac3c:	42a6      	cmp	r6, r4
 800ac3e:	bf38      	it	cc
 800ac40:	2304      	movcc	r3, #4
 800ac42:	441d      	add	r5, r3
 800ac44:	445b      	add	r3, fp
 800ac46:	461e      	mov	r6, r3
 800ac48:	462c      	mov	r4, r5
 800ac4a:	4544      	cmp	r4, r8
 800ac4c:	d30e      	bcc.n	800ac6c <__mdiff+0xf8>
 800ac4e:	f108 0103 	add.w	r1, r8, #3
 800ac52:	1b49      	subs	r1, r1, r5
 800ac54:	f021 0103 	bic.w	r1, r1, #3
 800ac58:	3d03      	subs	r5, #3
 800ac5a:	45a8      	cmp	r8, r5
 800ac5c:	bf38      	it	cc
 800ac5e:	2100      	movcc	r1, #0
 800ac60:	440b      	add	r3, r1
 800ac62:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ac66:	b191      	cbz	r1, 800ac8e <__mdiff+0x11a>
 800ac68:	6117      	str	r7, [r2, #16]
 800ac6a:	e79d      	b.n	800aba8 <__mdiff+0x34>
 800ac6c:	f854 1b04 	ldr.w	r1, [r4], #4
 800ac70:	46e6      	mov	lr, ip
 800ac72:	0c08      	lsrs	r0, r1, #16
 800ac74:	fa1c fc81 	uxtah	ip, ip, r1
 800ac78:	4471      	add	r1, lr
 800ac7a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800ac7e:	b289      	uxth	r1, r1
 800ac80:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800ac84:	f846 1b04 	str.w	r1, [r6], #4
 800ac88:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ac8c:	e7dd      	b.n	800ac4a <__mdiff+0xd6>
 800ac8e:	3f01      	subs	r7, #1
 800ac90:	e7e7      	b.n	800ac62 <__mdiff+0xee>
 800ac92:	bf00      	nop
 800ac94:	0800b760 	.word	0x0800b760
 800ac98:	0800b771 	.word	0x0800b771

0800ac9c <__d2b>:
 800ac9c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800aca0:	460f      	mov	r7, r1
 800aca2:	2101      	movs	r1, #1
 800aca4:	ec59 8b10 	vmov	r8, r9, d0
 800aca8:	4616      	mov	r6, r2
 800acaa:	f7ff fcd5 	bl	800a658 <_Balloc>
 800acae:	4604      	mov	r4, r0
 800acb0:	b930      	cbnz	r0, 800acc0 <__d2b+0x24>
 800acb2:	4602      	mov	r2, r0
 800acb4:	4b23      	ldr	r3, [pc, #140]	@ (800ad44 <__d2b+0xa8>)
 800acb6:	4824      	ldr	r0, [pc, #144]	@ (800ad48 <__d2b+0xac>)
 800acb8:	f240 310f 	movw	r1, #783	@ 0x30f
 800acbc:	f7fe fd54 	bl	8009768 <__assert_func>
 800acc0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800acc4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800acc8:	b10d      	cbz	r5, 800acce <__d2b+0x32>
 800acca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800acce:	9301      	str	r3, [sp, #4]
 800acd0:	f1b8 0300 	subs.w	r3, r8, #0
 800acd4:	d023      	beq.n	800ad1e <__d2b+0x82>
 800acd6:	4668      	mov	r0, sp
 800acd8:	9300      	str	r3, [sp, #0]
 800acda:	f7ff fd84 	bl	800a7e6 <__lo0bits>
 800acde:	e9dd 1200 	ldrd	r1, r2, [sp]
 800ace2:	b1d0      	cbz	r0, 800ad1a <__d2b+0x7e>
 800ace4:	f1c0 0320 	rsb	r3, r0, #32
 800ace8:	fa02 f303 	lsl.w	r3, r2, r3
 800acec:	430b      	orrs	r3, r1
 800acee:	40c2      	lsrs	r2, r0
 800acf0:	6163      	str	r3, [r4, #20]
 800acf2:	9201      	str	r2, [sp, #4]
 800acf4:	9b01      	ldr	r3, [sp, #4]
 800acf6:	61a3      	str	r3, [r4, #24]
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	bf0c      	ite	eq
 800acfc:	2201      	moveq	r2, #1
 800acfe:	2202      	movne	r2, #2
 800ad00:	6122      	str	r2, [r4, #16]
 800ad02:	b1a5      	cbz	r5, 800ad2e <__d2b+0x92>
 800ad04:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800ad08:	4405      	add	r5, r0
 800ad0a:	603d      	str	r5, [r7, #0]
 800ad0c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800ad10:	6030      	str	r0, [r6, #0]
 800ad12:	4620      	mov	r0, r4
 800ad14:	b003      	add	sp, #12
 800ad16:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ad1a:	6161      	str	r1, [r4, #20]
 800ad1c:	e7ea      	b.n	800acf4 <__d2b+0x58>
 800ad1e:	a801      	add	r0, sp, #4
 800ad20:	f7ff fd61 	bl	800a7e6 <__lo0bits>
 800ad24:	9b01      	ldr	r3, [sp, #4]
 800ad26:	6163      	str	r3, [r4, #20]
 800ad28:	3020      	adds	r0, #32
 800ad2a:	2201      	movs	r2, #1
 800ad2c:	e7e8      	b.n	800ad00 <__d2b+0x64>
 800ad2e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ad32:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800ad36:	6038      	str	r0, [r7, #0]
 800ad38:	6918      	ldr	r0, [r3, #16]
 800ad3a:	f7ff fd35 	bl	800a7a8 <__hi0bits>
 800ad3e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ad42:	e7e5      	b.n	800ad10 <__d2b+0x74>
 800ad44:	0800b760 	.word	0x0800b760
 800ad48:	0800b771 	.word	0x0800b771

0800ad4c <__sfputc_r>:
 800ad4c:	6893      	ldr	r3, [r2, #8]
 800ad4e:	3b01      	subs	r3, #1
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	b410      	push	{r4}
 800ad54:	6093      	str	r3, [r2, #8]
 800ad56:	da08      	bge.n	800ad6a <__sfputc_r+0x1e>
 800ad58:	6994      	ldr	r4, [r2, #24]
 800ad5a:	42a3      	cmp	r3, r4
 800ad5c:	db01      	blt.n	800ad62 <__sfputc_r+0x16>
 800ad5e:	290a      	cmp	r1, #10
 800ad60:	d103      	bne.n	800ad6a <__sfputc_r+0x1e>
 800ad62:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ad66:	f000 b9f1 	b.w	800b14c <__swbuf_r>
 800ad6a:	6813      	ldr	r3, [r2, #0]
 800ad6c:	1c58      	adds	r0, r3, #1
 800ad6e:	6010      	str	r0, [r2, #0]
 800ad70:	7019      	strb	r1, [r3, #0]
 800ad72:	4608      	mov	r0, r1
 800ad74:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ad78:	4770      	bx	lr

0800ad7a <__sfputs_r>:
 800ad7a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad7c:	4606      	mov	r6, r0
 800ad7e:	460f      	mov	r7, r1
 800ad80:	4614      	mov	r4, r2
 800ad82:	18d5      	adds	r5, r2, r3
 800ad84:	42ac      	cmp	r4, r5
 800ad86:	d101      	bne.n	800ad8c <__sfputs_r+0x12>
 800ad88:	2000      	movs	r0, #0
 800ad8a:	e007      	b.n	800ad9c <__sfputs_r+0x22>
 800ad8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ad90:	463a      	mov	r2, r7
 800ad92:	4630      	mov	r0, r6
 800ad94:	f7ff ffda 	bl	800ad4c <__sfputc_r>
 800ad98:	1c43      	adds	r3, r0, #1
 800ad9a:	d1f3      	bne.n	800ad84 <__sfputs_r+0xa>
 800ad9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ada0 <_vfiprintf_r>:
 800ada0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ada4:	460d      	mov	r5, r1
 800ada6:	b09d      	sub	sp, #116	@ 0x74
 800ada8:	4614      	mov	r4, r2
 800adaa:	4698      	mov	r8, r3
 800adac:	4606      	mov	r6, r0
 800adae:	b118      	cbz	r0, 800adb8 <_vfiprintf_r+0x18>
 800adb0:	6a03      	ldr	r3, [r0, #32]
 800adb2:	b90b      	cbnz	r3, 800adb8 <_vfiprintf_r+0x18>
 800adb4:	f7fe fb60 	bl	8009478 <__sinit>
 800adb8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800adba:	07d9      	lsls	r1, r3, #31
 800adbc:	d405      	bmi.n	800adca <_vfiprintf_r+0x2a>
 800adbe:	89ab      	ldrh	r3, [r5, #12]
 800adc0:	059a      	lsls	r2, r3, #22
 800adc2:	d402      	bmi.n	800adca <_vfiprintf_r+0x2a>
 800adc4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800adc6:	f7fe fcbe 	bl	8009746 <__retarget_lock_acquire_recursive>
 800adca:	89ab      	ldrh	r3, [r5, #12]
 800adcc:	071b      	lsls	r3, r3, #28
 800adce:	d501      	bpl.n	800add4 <_vfiprintf_r+0x34>
 800add0:	692b      	ldr	r3, [r5, #16]
 800add2:	b99b      	cbnz	r3, 800adfc <_vfiprintf_r+0x5c>
 800add4:	4629      	mov	r1, r5
 800add6:	4630      	mov	r0, r6
 800add8:	f000 f9f6 	bl	800b1c8 <__swsetup_r>
 800addc:	b170      	cbz	r0, 800adfc <_vfiprintf_r+0x5c>
 800adde:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ade0:	07dc      	lsls	r4, r3, #31
 800ade2:	d504      	bpl.n	800adee <_vfiprintf_r+0x4e>
 800ade4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ade8:	b01d      	add	sp, #116	@ 0x74
 800adea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800adee:	89ab      	ldrh	r3, [r5, #12]
 800adf0:	0598      	lsls	r0, r3, #22
 800adf2:	d4f7      	bmi.n	800ade4 <_vfiprintf_r+0x44>
 800adf4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800adf6:	f7fe fca7 	bl	8009748 <__retarget_lock_release_recursive>
 800adfa:	e7f3      	b.n	800ade4 <_vfiprintf_r+0x44>
 800adfc:	2300      	movs	r3, #0
 800adfe:	9309      	str	r3, [sp, #36]	@ 0x24
 800ae00:	2320      	movs	r3, #32
 800ae02:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ae06:	f8cd 800c 	str.w	r8, [sp, #12]
 800ae0a:	2330      	movs	r3, #48	@ 0x30
 800ae0c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800afbc <_vfiprintf_r+0x21c>
 800ae10:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ae14:	f04f 0901 	mov.w	r9, #1
 800ae18:	4623      	mov	r3, r4
 800ae1a:	469a      	mov	sl, r3
 800ae1c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ae20:	b10a      	cbz	r2, 800ae26 <_vfiprintf_r+0x86>
 800ae22:	2a25      	cmp	r2, #37	@ 0x25
 800ae24:	d1f9      	bne.n	800ae1a <_vfiprintf_r+0x7a>
 800ae26:	ebba 0b04 	subs.w	fp, sl, r4
 800ae2a:	d00b      	beq.n	800ae44 <_vfiprintf_r+0xa4>
 800ae2c:	465b      	mov	r3, fp
 800ae2e:	4622      	mov	r2, r4
 800ae30:	4629      	mov	r1, r5
 800ae32:	4630      	mov	r0, r6
 800ae34:	f7ff ffa1 	bl	800ad7a <__sfputs_r>
 800ae38:	3001      	adds	r0, #1
 800ae3a:	f000 80a7 	beq.w	800af8c <_vfiprintf_r+0x1ec>
 800ae3e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ae40:	445a      	add	r2, fp
 800ae42:	9209      	str	r2, [sp, #36]	@ 0x24
 800ae44:	f89a 3000 	ldrb.w	r3, [sl]
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	f000 809f 	beq.w	800af8c <_vfiprintf_r+0x1ec>
 800ae4e:	2300      	movs	r3, #0
 800ae50:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ae54:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ae58:	f10a 0a01 	add.w	sl, sl, #1
 800ae5c:	9304      	str	r3, [sp, #16]
 800ae5e:	9307      	str	r3, [sp, #28]
 800ae60:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ae64:	931a      	str	r3, [sp, #104]	@ 0x68
 800ae66:	4654      	mov	r4, sl
 800ae68:	2205      	movs	r2, #5
 800ae6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ae6e:	4853      	ldr	r0, [pc, #332]	@ (800afbc <_vfiprintf_r+0x21c>)
 800ae70:	f7f5 f9ce 	bl	8000210 <memchr>
 800ae74:	9a04      	ldr	r2, [sp, #16]
 800ae76:	b9d8      	cbnz	r0, 800aeb0 <_vfiprintf_r+0x110>
 800ae78:	06d1      	lsls	r1, r2, #27
 800ae7a:	bf44      	itt	mi
 800ae7c:	2320      	movmi	r3, #32
 800ae7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ae82:	0713      	lsls	r3, r2, #28
 800ae84:	bf44      	itt	mi
 800ae86:	232b      	movmi	r3, #43	@ 0x2b
 800ae88:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ae8c:	f89a 3000 	ldrb.w	r3, [sl]
 800ae90:	2b2a      	cmp	r3, #42	@ 0x2a
 800ae92:	d015      	beq.n	800aec0 <_vfiprintf_r+0x120>
 800ae94:	9a07      	ldr	r2, [sp, #28]
 800ae96:	4654      	mov	r4, sl
 800ae98:	2000      	movs	r0, #0
 800ae9a:	f04f 0c0a 	mov.w	ip, #10
 800ae9e:	4621      	mov	r1, r4
 800aea0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aea4:	3b30      	subs	r3, #48	@ 0x30
 800aea6:	2b09      	cmp	r3, #9
 800aea8:	d94b      	bls.n	800af42 <_vfiprintf_r+0x1a2>
 800aeaa:	b1b0      	cbz	r0, 800aeda <_vfiprintf_r+0x13a>
 800aeac:	9207      	str	r2, [sp, #28]
 800aeae:	e014      	b.n	800aeda <_vfiprintf_r+0x13a>
 800aeb0:	eba0 0308 	sub.w	r3, r0, r8
 800aeb4:	fa09 f303 	lsl.w	r3, r9, r3
 800aeb8:	4313      	orrs	r3, r2
 800aeba:	9304      	str	r3, [sp, #16]
 800aebc:	46a2      	mov	sl, r4
 800aebe:	e7d2      	b.n	800ae66 <_vfiprintf_r+0xc6>
 800aec0:	9b03      	ldr	r3, [sp, #12]
 800aec2:	1d19      	adds	r1, r3, #4
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	9103      	str	r1, [sp, #12]
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	bfbb      	ittet	lt
 800aecc:	425b      	neglt	r3, r3
 800aece:	f042 0202 	orrlt.w	r2, r2, #2
 800aed2:	9307      	strge	r3, [sp, #28]
 800aed4:	9307      	strlt	r3, [sp, #28]
 800aed6:	bfb8      	it	lt
 800aed8:	9204      	strlt	r2, [sp, #16]
 800aeda:	7823      	ldrb	r3, [r4, #0]
 800aedc:	2b2e      	cmp	r3, #46	@ 0x2e
 800aede:	d10a      	bne.n	800aef6 <_vfiprintf_r+0x156>
 800aee0:	7863      	ldrb	r3, [r4, #1]
 800aee2:	2b2a      	cmp	r3, #42	@ 0x2a
 800aee4:	d132      	bne.n	800af4c <_vfiprintf_r+0x1ac>
 800aee6:	9b03      	ldr	r3, [sp, #12]
 800aee8:	1d1a      	adds	r2, r3, #4
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	9203      	str	r2, [sp, #12]
 800aeee:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800aef2:	3402      	adds	r4, #2
 800aef4:	9305      	str	r3, [sp, #20]
 800aef6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800afcc <_vfiprintf_r+0x22c>
 800aefa:	7821      	ldrb	r1, [r4, #0]
 800aefc:	2203      	movs	r2, #3
 800aefe:	4650      	mov	r0, sl
 800af00:	f7f5 f986 	bl	8000210 <memchr>
 800af04:	b138      	cbz	r0, 800af16 <_vfiprintf_r+0x176>
 800af06:	9b04      	ldr	r3, [sp, #16]
 800af08:	eba0 000a 	sub.w	r0, r0, sl
 800af0c:	2240      	movs	r2, #64	@ 0x40
 800af0e:	4082      	lsls	r2, r0
 800af10:	4313      	orrs	r3, r2
 800af12:	3401      	adds	r4, #1
 800af14:	9304      	str	r3, [sp, #16]
 800af16:	f814 1b01 	ldrb.w	r1, [r4], #1
 800af1a:	4829      	ldr	r0, [pc, #164]	@ (800afc0 <_vfiprintf_r+0x220>)
 800af1c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800af20:	2206      	movs	r2, #6
 800af22:	f7f5 f975 	bl	8000210 <memchr>
 800af26:	2800      	cmp	r0, #0
 800af28:	d03f      	beq.n	800afaa <_vfiprintf_r+0x20a>
 800af2a:	4b26      	ldr	r3, [pc, #152]	@ (800afc4 <_vfiprintf_r+0x224>)
 800af2c:	bb1b      	cbnz	r3, 800af76 <_vfiprintf_r+0x1d6>
 800af2e:	9b03      	ldr	r3, [sp, #12]
 800af30:	3307      	adds	r3, #7
 800af32:	f023 0307 	bic.w	r3, r3, #7
 800af36:	3308      	adds	r3, #8
 800af38:	9303      	str	r3, [sp, #12]
 800af3a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800af3c:	443b      	add	r3, r7
 800af3e:	9309      	str	r3, [sp, #36]	@ 0x24
 800af40:	e76a      	b.n	800ae18 <_vfiprintf_r+0x78>
 800af42:	fb0c 3202 	mla	r2, ip, r2, r3
 800af46:	460c      	mov	r4, r1
 800af48:	2001      	movs	r0, #1
 800af4a:	e7a8      	b.n	800ae9e <_vfiprintf_r+0xfe>
 800af4c:	2300      	movs	r3, #0
 800af4e:	3401      	adds	r4, #1
 800af50:	9305      	str	r3, [sp, #20]
 800af52:	4619      	mov	r1, r3
 800af54:	f04f 0c0a 	mov.w	ip, #10
 800af58:	4620      	mov	r0, r4
 800af5a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800af5e:	3a30      	subs	r2, #48	@ 0x30
 800af60:	2a09      	cmp	r2, #9
 800af62:	d903      	bls.n	800af6c <_vfiprintf_r+0x1cc>
 800af64:	2b00      	cmp	r3, #0
 800af66:	d0c6      	beq.n	800aef6 <_vfiprintf_r+0x156>
 800af68:	9105      	str	r1, [sp, #20]
 800af6a:	e7c4      	b.n	800aef6 <_vfiprintf_r+0x156>
 800af6c:	fb0c 2101 	mla	r1, ip, r1, r2
 800af70:	4604      	mov	r4, r0
 800af72:	2301      	movs	r3, #1
 800af74:	e7f0      	b.n	800af58 <_vfiprintf_r+0x1b8>
 800af76:	ab03      	add	r3, sp, #12
 800af78:	9300      	str	r3, [sp, #0]
 800af7a:	462a      	mov	r2, r5
 800af7c:	4b12      	ldr	r3, [pc, #72]	@ (800afc8 <_vfiprintf_r+0x228>)
 800af7e:	a904      	add	r1, sp, #16
 800af80:	4630      	mov	r0, r6
 800af82:	f7fd fe37 	bl	8008bf4 <_printf_float>
 800af86:	4607      	mov	r7, r0
 800af88:	1c78      	adds	r0, r7, #1
 800af8a:	d1d6      	bne.n	800af3a <_vfiprintf_r+0x19a>
 800af8c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800af8e:	07d9      	lsls	r1, r3, #31
 800af90:	d405      	bmi.n	800af9e <_vfiprintf_r+0x1fe>
 800af92:	89ab      	ldrh	r3, [r5, #12]
 800af94:	059a      	lsls	r2, r3, #22
 800af96:	d402      	bmi.n	800af9e <_vfiprintf_r+0x1fe>
 800af98:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800af9a:	f7fe fbd5 	bl	8009748 <__retarget_lock_release_recursive>
 800af9e:	89ab      	ldrh	r3, [r5, #12]
 800afa0:	065b      	lsls	r3, r3, #25
 800afa2:	f53f af1f 	bmi.w	800ade4 <_vfiprintf_r+0x44>
 800afa6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800afa8:	e71e      	b.n	800ade8 <_vfiprintf_r+0x48>
 800afaa:	ab03      	add	r3, sp, #12
 800afac:	9300      	str	r3, [sp, #0]
 800afae:	462a      	mov	r2, r5
 800afb0:	4b05      	ldr	r3, [pc, #20]	@ (800afc8 <_vfiprintf_r+0x228>)
 800afb2:	a904      	add	r1, sp, #16
 800afb4:	4630      	mov	r0, r6
 800afb6:	f7fe f8b5 	bl	8009124 <_printf_i>
 800afba:	e7e4      	b.n	800af86 <_vfiprintf_r+0x1e6>
 800afbc:	0800b7ca 	.word	0x0800b7ca
 800afc0:	0800b7d4 	.word	0x0800b7d4
 800afc4:	08008bf5 	.word	0x08008bf5
 800afc8:	0800ad7b 	.word	0x0800ad7b
 800afcc:	0800b7d0 	.word	0x0800b7d0

0800afd0 <__sflush_r>:
 800afd0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800afd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800afd8:	0716      	lsls	r6, r2, #28
 800afda:	4605      	mov	r5, r0
 800afdc:	460c      	mov	r4, r1
 800afde:	d454      	bmi.n	800b08a <__sflush_r+0xba>
 800afe0:	684b      	ldr	r3, [r1, #4]
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	dc02      	bgt.n	800afec <__sflush_r+0x1c>
 800afe6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800afe8:	2b00      	cmp	r3, #0
 800afea:	dd48      	ble.n	800b07e <__sflush_r+0xae>
 800afec:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800afee:	2e00      	cmp	r6, #0
 800aff0:	d045      	beq.n	800b07e <__sflush_r+0xae>
 800aff2:	2300      	movs	r3, #0
 800aff4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800aff8:	682f      	ldr	r7, [r5, #0]
 800affa:	6a21      	ldr	r1, [r4, #32]
 800affc:	602b      	str	r3, [r5, #0]
 800affe:	d030      	beq.n	800b062 <__sflush_r+0x92>
 800b000:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b002:	89a3      	ldrh	r3, [r4, #12]
 800b004:	0759      	lsls	r1, r3, #29
 800b006:	d505      	bpl.n	800b014 <__sflush_r+0x44>
 800b008:	6863      	ldr	r3, [r4, #4]
 800b00a:	1ad2      	subs	r2, r2, r3
 800b00c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b00e:	b10b      	cbz	r3, 800b014 <__sflush_r+0x44>
 800b010:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b012:	1ad2      	subs	r2, r2, r3
 800b014:	2300      	movs	r3, #0
 800b016:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b018:	6a21      	ldr	r1, [r4, #32]
 800b01a:	4628      	mov	r0, r5
 800b01c:	47b0      	blx	r6
 800b01e:	1c43      	adds	r3, r0, #1
 800b020:	89a3      	ldrh	r3, [r4, #12]
 800b022:	d106      	bne.n	800b032 <__sflush_r+0x62>
 800b024:	6829      	ldr	r1, [r5, #0]
 800b026:	291d      	cmp	r1, #29
 800b028:	d82b      	bhi.n	800b082 <__sflush_r+0xb2>
 800b02a:	4a2a      	ldr	r2, [pc, #168]	@ (800b0d4 <__sflush_r+0x104>)
 800b02c:	40ca      	lsrs	r2, r1
 800b02e:	07d6      	lsls	r6, r2, #31
 800b030:	d527      	bpl.n	800b082 <__sflush_r+0xb2>
 800b032:	2200      	movs	r2, #0
 800b034:	6062      	str	r2, [r4, #4]
 800b036:	04d9      	lsls	r1, r3, #19
 800b038:	6922      	ldr	r2, [r4, #16]
 800b03a:	6022      	str	r2, [r4, #0]
 800b03c:	d504      	bpl.n	800b048 <__sflush_r+0x78>
 800b03e:	1c42      	adds	r2, r0, #1
 800b040:	d101      	bne.n	800b046 <__sflush_r+0x76>
 800b042:	682b      	ldr	r3, [r5, #0]
 800b044:	b903      	cbnz	r3, 800b048 <__sflush_r+0x78>
 800b046:	6560      	str	r0, [r4, #84]	@ 0x54
 800b048:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b04a:	602f      	str	r7, [r5, #0]
 800b04c:	b1b9      	cbz	r1, 800b07e <__sflush_r+0xae>
 800b04e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b052:	4299      	cmp	r1, r3
 800b054:	d002      	beq.n	800b05c <__sflush_r+0x8c>
 800b056:	4628      	mov	r0, r5
 800b058:	f7ff f9fe 	bl	800a458 <_free_r>
 800b05c:	2300      	movs	r3, #0
 800b05e:	6363      	str	r3, [r4, #52]	@ 0x34
 800b060:	e00d      	b.n	800b07e <__sflush_r+0xae>
 800b062:	2301      	movs	r3, #1
 800b064:	4628      	mov	r0, r5
 800b066:	47b0      	blx	r6
 800b068:	4602      	mov	r2, r0
 800b06a:	1c50      	adds	r0, r2, #1
 800b06c:	d1c9      	bne.n	800b002 <__sflush_r+0x32>
 800b06e:	682b      	ldr	r3, [r5, #0]
 800b070:	2b00      	cmp	r3, #0
 800b072:	d0c6      	beq.n	800b002 <__sflush_r+0x32>
 800b074:	2b1d      	cmp	r3, #29
 800b076:	d001      	beq.n	800b07c <__sflush_r+0xac>
 800b078:	2b16      	cmp	r3, #22
 800b07a:	d11e      	bne.n	800b0ba <__sflush_r+0xea>
 800b07c:	602f      	str	r7, [r5, #0]
 800b07e:	2000      	movs	r0, #0
 800b080:	e022      	b.n	800b0c8 <__sflush_r+0xf8>
 800b082:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b086:	b21b      	sxth	r3, r3
 800b088:	e01b      	b.n	800b0c2 <__sflush_r+0xf2>
 800b08a:	690f      	ldr	r7, [r1, #16]
 800b08c:	2f00      	cmp	r7, #0
 800b08e:	d0f6      	beq.n	800b07e <__sflush_r+0xae>
 800b090:	0793      	lsls	r3, r2, #30
 800b092:	680e      	ldr	r6, [r1, #0]
 800b094:	bf08      	it	eq
 800b096:	694b      	ldreq	r3, [r1, #20]
 800b098:	600f      	str	r7, [r1, #0]
 800b09a:	bf18      	it	ne
 800b09c:	2300      	movne	r3, #0
 800b09e:	eba6 0807 	sub.w	r8, r6, r7
 800b0a2:	608b      	str	r3, [r1, #8]
 800b0a4:	f1b8 0f00 	cmp.w	r8, #0
 800b0a8:	dde9      	ble.n	800b07e <__sflush_r+0xae>
 800b0aa:	6a21      	ldr	r1, [r4, #32]
 800b0ac:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800b0ae:	4643      	mov	r3, r8
 800b0b0:	463a      	mov	r2, r7
 800b0b2:	4628      	mov	r0, r5
 800b0b4:	47b0      	blx	r6
 800b0b6:	2800      	cmp	r0, #0
 800b0b8:	dc08      	bgt.n	800b0cc <__sflush_r+0xfc>
 800b0ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b0be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b0c2:	81a3      	strh	r3, [r4, #12]
 800b0c4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b0c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b0cc:	4407      	add	r7, r0
 800b0ce:	eba8 0800 	sub.w	r8, r8, r0
 800b0d2:	e7e7      	b.n	800b0a4 <__sflush_r+0xd4>
 800b0d4:	20400001 	.word	0x20400001

0800b0d8 <_fflush_r>:
 800b0d8:	b538      	push	{r3, r4, r5, lr}
 800b0da:	690b      	ldr	r3, [r1, #16]
 800b0dc:	4605      	mov	r5, r0
 800b0de:	460c      	mov	r4, r1
 800b0e0:	b913      	cbnz	r3, 800b0e8 <_fflush_r+0x10>
 800b0e2:	2500      	movs	r5, #0
 800b0e4:	4628      	mov	r0, r5
 800b0e6:	bd38      	pop	{r3, r4, r5, pc}
 800b0e8:	b118      	cbz	r0, 800b0f2 <_fflush_r+0x1a>
 800b0ea:	6a03      	ldr	r3, [r0, #32]
 800b0ec:	b90b      	cbnz	r3, 800b0f2 <_fflush_r+0x1a>
 800b0ee:	f7fe f9c3 	bl	8009478 <__sinit>
 800b0f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	d0f3      	beq.n	800b0e2 <_fflush_r+0xa>
 800b0fa:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b0fc:	07d0      	lsls	r0, r2, #31
 800b0fe:	d404      	bmi.n	800b10a <_fflush_r+0x32>
 800b100:	0599      	lsls	r1, r3, #22
 800b102:	d402      	bmi.n	800b10a <_fflush_r+0x32>
 800b104:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b106:	f7fe fb1e 	bl	8009746 <__retarget_lock_acquire_recursive>
 800b10a:	4628      	mov	r0, r5
 800b10c:	4621      	mov	r1, r4
 800b10e:	f7ff ff5f 	bl	800afd0 <__sflush_r>
 800b112:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b114:	07da      	lsls	r2, r3, #31
 800b116:	4605      	mov	r5, r0
 800b118:	d4e4      	bmi.n	800b0e4 <_fflush_r+0xc>
 800b11a:	89a3      	ldrh	r3, [r4, #12]
 800b11c:	059b      	lsls	r3, r3, #22
 800b11e:	d4e1      	bmi.n	800b0e4 <_fflush_r+0xc>
 800b120:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b122:	f7fe fb11 	bl	8009748 <__retarget_lock_release_recursive>
 800b126:	e7dd      	b.n	800b0e4 <_fflush_r+0xc>

0800b128 <fiprintf>:
 800b128:	b40e      	push	{r1, r2, r3}
 800b12a:	b503      	push	{r0, r1, lr}
 800b12c:	4601      	mov	r1, r0
 800b12e:	ab03      	add	r3, sp, #12
 800b130:	4805      	ldr	r0, [pc, #20]	@ (800b148 <fiprintf+0x20>)
 800b132:	f853 2b04 	ldr.w	r2, [r3], #4
 800b136:	6800      	ldr	r0, [r0, #0]
 800b138:	9301      	str	r3, [sp, #4]
 800b13a:	f7ff fe31 	bl	800ada0 <_vfiprintf_r>
 800b13e:	b002      	add	sp, #8
 800b140:	f85d eb04 	ldr.w	lr, [sp], #4
 800b144:	b003      	add	sp, #12
 800b146:	4770      	bx	lr
 800b148:	2000001c 	.word	0x2000001c

0800b14c <__swbuf_r>:
 800b14c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b14e:	460e      	mov	r6, r1
 800b150:	4614      	mov	r4, r2
 800b152:	4605      	mov	r5, r0
 800b154:	b118      	cbz	r0, 800b15e <__swbuf_r+0x12>
 800b156:	6a03      	ldr	r3, [r0, #32]
 800b158:	b90b      	cbnz	r3, 800b15e <__swbuf_r+0x12>
 800b15a:	f7fe f98d 	bl	8009478 <__sinit>
 800b15e:	69a3      	ldr	r3, [r4, #24]
 800b160:	60a3      	str	r3, [r4, #8]
 800b162:	89a3      	ldrh	r3, [r4, #12]
 800b164:	071a      	lsls	r2, r3, #28
 800b166:	d501      	bpl.n	800b16c <__swbuf_r+0x20>
 800b168:	6923      	ldr	r3, [r4, #16]
 800b16a:	b943      	cbnz	r3, 800b17e <__swbuf_r+0x32>
 800b16c:	4621      	mov	r1, r4
 800b16e:	4628      	mov	r0, r5
 800b170:	f000 f82a 	bl	800b1c8 <__swsetup_r>
 800b174:	b118      	cbz	r0, 800b17e <__swbuf_r+0x32>
 800b176:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800b17a:	4638      	mov	r0, r7
 800b17c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b17e:	6823      	ldr	r3, [r4, #0]
 800b180:	6922      	ldr	r2, [r4, #16]
 800b182:	1a98      	subs	r0, r3, r2
 800b184:	6963      	ldr	r3, [r4, #20]
 800b186:	b2f6      	uxtb	r6, r6
 800b188:	4283      	cmp	r3, r0
 800b18a:	4637      	mov	r7, r6
 800b18c:	dc05      	bgt.n	800b19a <__swbuf_r+0x4e>
 800b18e:	4621      	mov	r1, r4
 800b190:	4628      	mov	r0, r5
 800b192:	f7ff ffa1 	bl	800b0d8 <_fflush_r>
 800b196:	2800      	cmp	r0, #0
 800b198:	d1ed      	bne.n	800b176 <__swbuf_r+0x2a>
 800b19a:	68a3      	ldr	r3, [r4, #8]
 800b19c:	3b01      	subs	r3, #1
 800b19e:	60a3      	str	r3, [r4, #8]
 800b1a0:	6823      	ldr	r3, [r4, #0]
 800b1a2:	1c5a      	adds	r2, r3, #1
 800b1a4:	6022      	str	r2, [r4, #0]
 800b1a6:	701e      	strb	r6, [r3, #0]
 800b1a8:	6962      	ldr	r2, [r4, #20]
 800b1aa:	1c43      	adds	r3, r0, #1
 800b1ac:	429a      	cmp	r2, r3
 800b1ae:	d004      	beq.n	800b1ba <__swbuf_r+0x6e>
 800b1b0:	89a3      	ldrh	r3, [r4, #12]
 800b1b2:	07db      	lsls	r3, r3, #31
 800b1b4:	d5e1      	bpl.n	800b17a <__swbuf_r+0x2e>
 800b1b6:	2e0a      	cmp	r6, #10
 800b1b8:	d1df      	bne.n	800b17a <__swbuf_r+0x2e>
 800b1ba:	4621      	mov	r1, r4
 800b1bc:	4628      	mov	r0, r5
 800b1be:	f7ff ff8b 	bl	800b0d8 <_fflush_r>
 800b1c2:	2800      	cmp	r0, #0
 800b1c4:	d0d9      	beq.n	800b17a <__swbuf_r+0x2e>
 800b1c6:	e7d6      	b.n	800b176 <__swbuf_r+0x2a>

0800b1c8 <__swsetup_r>:
 800b1c8:	b538      	push	{r3, r4, r5, lr}
 800b1ca:	4b29      	ldr	r3, [pc, #164]	@ (800b270 <__swsetup_r+0xa8>)
 800b1cc:	4605      	mov	r5, r0
 800b1ce:	6818      	ldr	r0, [r3, #0]
 800b1d0:	460c      	mov	r4, r1
 800b1d2:	b118      	cbz	r0, 800b1dc <__swsetup_r+0x14>
 800b1d4:	6a03      	ldr	r3, [r0, #32]
 800b1d6:	b90b      	cbnz	r3, 800b1dc <__swsetup_r+0x14>
 800b1d8:	f7fe f94e 	bl	8009478 <__sinit>
 800b1dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b1e0:	0719      	lsls	r1, r3, #28
 800b1e2:	d422      	bmi.n	800b22a <__swsetup_r+0x62>
 800b1e4:	06da      	lsls	r2, r3, #27
 800b1e6:	d407      	bmi.n	800b1f8 <__swsetup_r+0x30>
 800b1e8:	2209      	movs	r2, #9
 800b1ea:	602a      	str	r2, [r5, #0]
 800b1ec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b1f0:	81a3      	strh	r3, [r4, #12]
 800b1f2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b1f6:	e033      	b.n	800b260 <__swsetup_r+0x98>
 800b1f8:	0758      	lsls	r0, r3, #29
 800b1fa:	d512      	bpl.n	800b222 <__swsetup_r+0x5a>
 800b1fc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b1fe:	b141      	cbz	r1, 800b212 <__swsetup_r+0x4a>
 800b200:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b204:	4299      	cmp	r1, r3
 800b206:	d002      	beq.n	800b20e <__swsetup_r+0x46>
 800b208:	4628      	mov	r0, r5
 800b20a:	f7ff f925 	bl	800a458 <_free_r>
 800b20e:	2300      	movs	r3, #0
 800b210:	6363      	str	r3, [r4, #52]	@ 0x34
 800b212:	89a3      	ldrh	r3, [r4, #12]
 800b214:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b218:	81a3      	strh	r3, [r4, #12]
 800b21a:	2300      	movs	r3, #0
 800b21c:	6063      	str	r3, [r4, #4]
 800b21e:	6923      	ldr	r3, [r4, #16]
 800b220:	6023      	str	r3, [r4, #0]
 800b222:	89a3      	ldrh	r3, [r4, #12]
 800b224:	f043 0308 	orr.w	r3, r3, #8
 800b228:	81a3      	strh	r3, [r4, #12]
 800b22a:	6923      	ldr	r3, [r4, #16]
 800b22c:	b94b      	cbnz	r3, 800b242 <__swsetup_r+0x7a>
 800b22e:	89a3      	ldrh	r3, [r4, #12]
 800b230:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b234:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b238:	d003      	beq.n	800b242 <__swsetup_r+0x7a>
 800b23a:	4621      	mov	r1, r4
 800b23c:	4628      	mov	r0, r5
 800b23e:	f000 f889 	bl	800b354 <__smakebuf_r>
 800b242:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b246:	f013 0201 	ands.w	r2, r3, #1
 800b24a:	d00a      	beq.n	800b262 <__swsetup_r+0x9a>
 800b24c:	2200      	movs	r2, #0
 800b24e:	60a2      	str	r2, [r4, #8]
 800b250:	6962      	ldr	r2, [r4, #20]
 800b252:	4252      	negs	r2, r2
 800b254:	61a2      	str	r2, [r4, #24]
 800b256:	6922      	ldr	r2, [r4, #16]
 800b258:	b942      	cbnz	r2, 800b26c <__swsetup_r+0xa4>
 800b25a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b25e:	d1c5      	bne.n	800b1ec <__swsetup_r+0x24>
 800b260:	bd38      	pop	{r3, r4, r5, pc}
 800b262:	0799      	lsls	r1, r3, #30
 800b264:	bf58      	it	pl
 800b266:	6962      	ldrpl	r2, [r4, #20]
 800b268:	60a2      	str	r2, [r4, #8]
 800b26a:	e7f4      	b.n	800b256 <__swsetup_r+0x8e>
 800b26c:	2000      	movs	r0, #0
 800b26e:	e7f7      	b.n	800b260 <__swsetup_r+0x98>
 800b270:	2000001c 	.word	0x2000001c

0800b274 <_sbrk_r>:
 800b274:	b538      	push	{r3, r4, r5, lr}
 800b276:	4d06      	ldr	r5, [pc, #24]	@ (800b290 <_sbrk_r+0x1c>)
 800b278:	2300      	movs	r3, #0
 800b27a:	4604      	mov	r4, r0
 800b27c:	4608      	mov	r0, r1
 800b27e:	602b      	str	r3, [r5, #0]
 800b280:	f7f6 fa7c 	bl	800177c <_sbrk>
 800b284:	1c43      	adds	r3, r0, #1
 800b286:	d102      	bne.n	800b28e <_sbrk_r+0x1a>
 800b288:	682b      	ldr	r3, [r5, #0]
 800b28a:	b103      	cbz	r3, 800b28e <_sbrk_r+0x1a>
 800b28c:	6023      	str	r3, [r4, #0]
 800b28e:	bd38      	pop	{r3, r4, r5, pc}
 800b290:	200054b8 	.word	0x200054b8

0800b294 <abort>:
 800b294:	b508      	push	{r3, lr}
 800b296:	2006      	movs	r0, #6
 800b298:	f000 f8c0 	bl	800b41c <raise>
 800b29c:	2001      	movs	r0, #1
 800b29e:	f7f6 fa11 	bl	80016c4 <_exit>

0800b2a2 <_calloc_r>:
 800b2a2:	b570      	push	{r4, r5, r6, lr}
 800b2a4:	fba1 5402 	umull	r5, r4, r1, r2
 800b2a8:	b934      	cbnz	r4, 800b2b8 <_calloc_r+0x16>
 800b2aa:	4629      	mov	r1, r5
 800b2ac:	f7ff f948 	bl	800a540 <_malloc_r>
 800b2b0:	4606      	mov	r6, r0
 800b2b2:	b928      	cbnz	r0, 800b2c0 <_calloc_r+0x1e>
 800b2b4:	4630      	mov	r0, r6
 800b2b6:	bd70      	pop	{r4, r5, r6, pc}
 800b2b8:	220c      	movs	r2, #12
 800b2ba:	6002      	str	r2, [r0, #0]
 800b2bc:	2600      	movs	r6, #0
 800b2be:	e7f9      	b.n	800b2b4 <_calloc_r+0x12>
 800b2c0:	462a      	mov	r2, r5
 800b2c2:	4621      	mov	r1, r4
 800b2c4:	f7fe f963 	bl	800958e <memset>
 800b2c8:	e7f4      	b.n	800b2b4 <_calloc_r+0x12>

0800b2ca <__ascii_mbtowc>:
 800b2ca:	b082      	sub	sp, #8
 800b2cc:	b901      	cbnz	r1, 800b2d0 <__ascii_mbtowc+0x6>
 800b2ce:	a901      	add	r1, sp, #4
 800b2d0:	b142      	cbz	r2, 800b2e4 <__ascii_mbtowc+0x1a>
 800b2d2:	b14b      	cbz	r3, 800b2e8 <__ascii_mbtowc+0x1e>
 800b2d4:	7813      	ldrb	r3, [r2, #0]
 800b2d6:	600b      	str	r3, [r1, #0]
 800b2d8:	7812      	ldrb	r2, [r2, #0]
 800b2da:	1e10      	subs	r0, r2, #0
 800b2dc:	bf18      	it	ne
 800b2de:	2001      	movne	r0, #1
 800b2e0:	b002      	add	sp, #8
 800b2e2:	4770      	bx	lr
 800b2e4:	4610      	mov	r0, r2
 800b2e6:	e7fb      	b.n	800b2e0 <__ascii_mbtowc+0x16>
 800b2e8:	f06f 0001 	mvn.w	r0, #1
 800b2ec:	e7f8      	b.n	800b2e0 <__ascii_mbtowc+0x16>

0800b2ee <__ascii_wctomb>:
 800b2ee:	4603      	mov	r3, r0
 800b2f0:	4608      	mov	r0, r1
 800b2f2:	b141      	cbz	r1, 800b306 <__ascii_wctomb+0x18>
 800b2f4:	2aff      	cmp	r2, #255	@ 0xff
 800b2f6:	d904      	bls.n	800b302 <__ascii_wctomb+0x14>
 800b2f8:	228a      	movs	r2, #138	@ 0x8a
 800b2fa:	601a      	str	r2, [r3, #0]
 800b2fc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b300:	4770      	bx	lr
 800b302:	700a      	strb	r2, [r1, #0]
 800b304:	2001      	movs	r0, #1
 800b306:	4770      	bx	lr

0800b308 <__swhatbuf_r>:
 800b308:	b570      	push	{r4, r5, r6, lr}
 800b30a:	460c      	mov	r4, r1
 800b30c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b310:	2900      	cmp	r1, #0
 800b312:	b096      	sub	sp, #88	@ 0x58
 800b314:	4615      	mov	r5, r2
 800b316:	461e      	mov	r6, r3
 800b318:	da0d      	bge.n	800b336 <__swhatbuf_r+0x2e>
 800b31a:	89a3      	ldrh	r3, [r4, #12]
 800b31c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b320:	f04f 0100 	mov.w	r1, #0
 800b324:	bf14      	ite	ne
 800b326:	2340      	movne	r3, #64	@ 0x40
 800b328:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b32c:	2000      	movs	r0, #0
 800b32e:	6031      	str	r1, [r6, #0]
 800b330:	602b      	str	r3, [r5, #0]
 800b332:	b016      	add	sp, #88	@ 0x58
 800b334:	bd70      	pop	{r4, r5, r6, pc}
 800b336:	466a      	mov	r2, sp
 800b338:	f000 f878 	bl	800b42c <_fstat_r>
 800b33c:	2800      	cmp	r0, #0
 800b33e:	dbec      	blt.n	800b31a <__swhatbuf_r+0x12>
 800b340:	9901      	ldr	r1, [sp, #4]
 800b342:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b346:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b34a:	4259      	negs	r1, r3
 800b34c:	4159      	adcs	r1, r3
 800b34e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b352:	e7eb      	b.n	800b32c <__swhatbuf_r+0x24>

0800b354 <__smakebuf_r>:
 800b354:	898b      	ldrh	r3, [r1, #12]
 800b356:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b358:	079d      	lsls	r5, r3, #30
 800b35a:	4606      	mov	r6, r0
 800b35c:	460c      	mov	r4, r1
 800b35e:	d507      	bpl.n	800b370 <__smakebuf_r+0x1c>
 800b360:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b364:	6023      	str	r3, [r4, #0]
 800b366:	6123      	str	r3, [r4, #16]
 800b368:	2301      	movs	r3, #1
 800b36a:	6163      	str	r3, [r4, #20]
 800b36c:	b003      	add	sp, #12
 800b36e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b370:	ab01      	add	r3, sp, #4
 800b372:	466a      	mov	r2, sp
 800b374:	f7ff ffc8 	bl	800b308 <__swhatbuf_r>
 800b378:	9f00      	ldr	r7, [sp, #0]
 800b37a:	4605      	mov	r5, r0
 800b37c:	4639      	mov	r1, r7
 800b37e:	4630      	mov	r0, r6
 800b380:	f7ff f8de 	bl	800a540 <_malloc_r>
 800b384:	b948      	cbnz	r0, 800b39a <__smakebuf_r+0x46>
 800b386:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b38a:	059a      	lsls	r2, r3, #22
 800b38c:	d4ee      	bmi.n	800b36c <__smakebuf_r+0x18>
 800b38e:	f023 0303 	bic.w	r3, r3, #3
 800b392:	f043 0302 	orr.w	r3, r3, #2
 800b396:	81a3      	strh	r3, [r4, #12]
 800b398:	e7e2      	b.n	800b360 <__smakebuf_r+0xc>
 800b39a:	89a3      	ldrh	r3, [r4, #12]
 800b39c:	6020      	str	r0, [r4, #0]
 800b39e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b3a2:	81a3      	strh	r3, [r4, #12]
 800b3a4:	9b01      	ldr	r3, [sp, #4]
 800b3a6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b3aa:	b15b      	cbz	r3, 800b3c4 <__smakebuf_r+0x70>
 800b3ac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b3b0:	4630      	mov	r0, r6
 800b3b2:	f000 f84d 	bl	800b450 <_isatty_r>
 800b3b6:	b128      	cbz	r0, 800b3c4 <__smakebuf_r+0x70>
 800b3b8:	89a3      	ldrh	r3, [r4, #12]
 800b3ba:	f023 0303 	bic.w	r3, r3, #3
 800b3be:	f043 0301 	orr.w	r3, r3, #1
 800b3c2:	81a3      	strh	r3, [r4, #12]
 800b3c4:	89a3      	ldrh	r3, [r4, #12]
 800b3c6:	431d      	orrs	r5, r3
 800b3c8:	81a5      	strh	r5, [r4, #12]
 800b3ca:	e7cf      	b.n	800b36c <__smakebuf_r+0x18>

0800b3cc <_raise_r>:
 800b3cc:	291f      	cmp	r1, #31
 800b3ce:	b538      	push	{r3, r4, r5, lr}
 800b3d0:	4605      	mov	r5, r0
 800b3d2:	460c      	mov	r4, r1
 800b3d4:	d904      	bls.n	800b3e0 <_raise_r+0x14>
 800b3d6:	2316      	movs	r3, #22
 800b3d8:	6003      	str	r3, [r0, #0]
 800b3da:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b3de:	bd38      	pop	{r3, r4, r5, pc}
 800b3e0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b3e2:	b112      	cbz	r2, 800b3ea <_raise_r+0x1e>
 800b3e4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b3e8:	b94b      	cbnz	r3, 800b3fe <_raise_r+0x32>
 800b3ea:	4628      	mov	r0, r5
 800b3ec:	f000 f852 	bl	800b494 <_getpid_r>
 800b3f0:	4622      	mov	r2, r4
 800b3f2:	4601      	mov	r1, r0
 800b3f4:	4628      	mov	r0, r5
 800b3f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b3fa:	f000 b839 	b.w	800b470 <_kill_r>
 800b3fe:	2b01      	cmp	r3, #1
 800b400:	d00a      	beq.n	800b418 <_raise_r+0x4c>
 800b402:	1c59      	adds	r1, r3, #1
 800b404:	d103      	bne.n	800b40e <_raise_r+0x42>
 800b406:	2316      	movs	r3, #22
 800b408:	6003      	str	r3, [r0, #0]
 800b40a:	2001      	movs	r0, #1
 800b40c:	e7e7      	b.n	800b3de <_raise_r+0x12>
 800b40e:	2100      	movs	r1, #0
 800b410:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b414:	4620      	mov	r0, r4
 800b416:	4798      	blx	r3
 800b418:	2000      	movs	r0, #0
 800b41a:	e7e0      	b.n	800b3de <_raise_r+0x12>

0800b41c <raise>:
 800b41c:	4b02      	ldr	r3, [pc, #8]	@ (800b428 <raise+0xc>)
 800b41e:	4601      	mov	r1, r0
 800b420:	6818      	ldr	r0, [r3, #0]
 800b422:	f7ff bfd3 	b.w	800b3cc <_raise_r>
 800b426:	bf00      	nop
 800b428:	2000001c 	.word	0x2000001c

0800b42c <_fstat_r>:
 800b42c:	b538      	push	{r3, r4, r5, lr}
 800b42e:	4d07      	ldr	r5, [pc, #28]	@ (800b44c <_fstat_r+0x20>)
 800b430:	2300      	movs	r3, #0
 800b432:	4604      	mov	r4, r0
 800b434:	4608      	mov	r0, r1
 800b436:	4611      	mov	r1, r2
 800b438:	602b      	str	r3, [r5, #0]
 800b43a:	f7f6 f977 	bl	800172c <_fstat>
 800b43e:	1c43      	adds	r3, r0, #1
 800b440:	d102      	bne.n	800b448 <_fstat_r+0x1c>
 800b442:	682b      	ldr	r3, [r5, #0]
 800b444:	b103      	cbz	r3, 800b448 <_fstat_r+0x1c>
 800b446:	6023      	str	r3, [r4, #0]
 800b448:	bd38      	pop	{r3, r4, r5, pc}
 800b44a:	bf00      	nop
 800b44c:	200054b8 	.word	0x200054b8

0800b450 <_isatty_r>:
 800b450:	b538      	push	{r3, r4, r5, lr}
 800b452:	4d06      	ldr	r5, [pc, #24]	@ (800b46c <_isatty_r+0x1c>)
 800b454:	2300      	movs	r3, #0
 800b456:	4604      	mov	r4, r0
 800b458:	4608      	mov	r0, r1
 800b45a:	602b      	str	r3, [r5, #0]
 800b45c:	f7f6 f976 	bl	800174c <_isatty>
 800b460:	1c43      	adds	r3, r0, #1
 800b462:	d102      	bne.n	800b46a <_isatty_r+0x1a>
 800b464:	682b      	ldr	r3, [r5, #0]
 800b466:	b103      	cbz	r3, 800b46a <_isatty_r+0x1a>
 800b468:	6023      	str	r3, [r4, #0]
 800b46a:	bd38      	pop	{r3, r4, r5, pc}
 800b46c:	200054b8 	.word	0x200054b8

0800b470 <_kill_r>:
 800b470:	b538      	push	{r3, r4, r5, lr}
 800b472:	4d07      	ldr	r5, [pc, #28]	@ (800b490 <_kill_r+0x20>)
 800b474:	2300      	movs	r3, #0
 800b476:	4604      	mov	r4, r0
 800b478:	4608      	mov	r0, r1
 800b47a:	4611      	mov	r1, r2
 800b47c:	602b      	str	r3, [r5, #0]
 800b47e:	f7f6 f911 	bl	80016a4 <_kill>
 800b482:	1c43      	adds	r3, r0, #1
 800b484:	d102      	bne.n	800b48c <_kill_r+0x1c>
 800b486:	682b      	ldr	r3, [r5, #0]
 800b488:	b103      	cbz	r3, 800b48c <_kill_r+0x1c>
 800b48a:	6023      	str	r3, [r4, #0]
 800b48c:	bd38      	pop	{r3, r4, r5, pc}
 800b48e:	bf00      	nop
 800b490:	200054b8 	.word	0x200054b8

0800b494 <_getpid_r>:
 800b494:	f7f6 b8fe 	b.w	8001694 <_getpid>

0800b498 <_init>:
 800b498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b49a:	bf00      	nop
 800b49c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b49e:	bc08      	pop	{r3}
 800b4a0:	469e      	mov	lr, r3
 800b4a2:	4770      	bx	lr

0800b4a4 <_fini>:
 800b4a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b4a6:	bf00      	nop
 800b4a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b4aa:	bc08      	pop	{r3}
 800b4ac:	469e      	mov	lr, r3
 800b4ae:	4770      	bx	lr
